// Compiled by ClojureScript 1.7.48 {:static-fns true, :optimize-constants true}
goog.provide('book.sicp.texts.ch2');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('book.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
book.sicp.texts.ch2.content = (function() { 
var book$sicp$texts$ch2$content__delegate = function (args__8262__auto__){
var vec__294733 = tailrecursion.hoplon.parse_args(args__8262__auto__);
var attr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__294733,(0),null);
var kids = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__294733,(1),null);
return book.sicp.book_data.chapter.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Building Abstractions with Data"], null),(function (){var _STAR_references_STAR_294734 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_294735 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_294736 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_294737 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__294738 = cljs.core.PersistentArrayMap.EMPTY;
var G__294739 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__294740 = cljs.core.PersistentArrayMap.EMPTY;
var G__294741 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We now come to the decisive step of mathematical abstraction: we forget about what the symbols stand for. ",(function (){var G__294742 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$ellipsis], null);
var G__294743 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__294742,G__294743) : tailrecursion.hoplon.markdown.simple_node.call(null,G__294742,G__294743));
})(),tailrecursion.hoplon.markdown.ref_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$separator_DASH_space,null,cljs.core.cst$kw$reference_DASH_key,null], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The mathematician"], null)], 0))," need not be idle; there are many operations which he may carry out with these symbols, without ever having to look at the things they stand for."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294740,G__294741) : tailrecursion.hoplon.markdown.para_node.call(null,G__294740,G__294741));
})(),(function (){var G__294744 = cljs.core.PersistentArrayMap.EMPTY;
var G__294745 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Hermann Weyl, ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The Mathematical Way of Thinking"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294744,G__294745) : tailrecursion.hoplon.markdown.para_node.call(null,G__294744,G__294745));
})()], null);
return (tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2(G__294738,G__294739) : tailrecursion.hoplon.markdown.block_quote_node.call(null,G__294738,G__294739));
})(),(function (){var G__294746 = cljs.core.PersistentArrayMap.EMPTY;
var G__294747 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We concentrated in chapter 1 on computational processes and on the role of procedures in program design. We saw how to use primitive data (numbers) and primitive operations (arithmetic operations), how to combine procedures to form compound procedures through composition, conditionals, and the use of parameters, and how to abstract procedures by using defining forms. We saw that a procedure can be regarded as a pattern for the local evolution of a process, and we classified, reasoned about, and performed simple algorithmic analyses of some common patterns for processes as embodied in procedures. We also saw that higher-order procedures enhance the power of our language by enabling us to manipulate, and thereby to reason in terms of, general methods of computation. This is much of the essence of programming."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294746,G__294747) : tailrecursion.hoplon.markdown.para_node.call(null,G__294746,G__294747));
})(),(function (){var G__294748 = cljs.core.PersistentArrayMap.EMPTY;
var G__294749 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this chapter we are going to look at more complex data. All the procedures in chapter 1 operate on simple numerical data, and simple data are not sufficient for many of the problems we wish to address using computation. Programs are typically designed to model complex phenomena, and more often than not one must construct computational objects that have several parts in order to model real-world phenomena that have several aspects. Thus, whereas our focus in chapter 1 was on building abstractions by combining procedures to form compound procedures, we turn in this chapter to another key aspect of any programming language: the means it provides for building abstractions by combining data objects to form ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["compound data"], null)], 0)),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294748,G__294749) : tailrecursion.hoplon.markdown.para_node.call(null,G__294748,G__294749));
})(),(function (){var G__294750 = cljs.core.PersistentArrayMap.EMPTY;
var G__294751 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Why do we want compound data in a programming language? For the same reasons that we want compound procedures: to elevate the conceptual level at which we can design our programs, to increase the modularity of our designs, and to enhance the expressive power of our language. Just as the ability to define procedures enables us to deal with processes at a higher conceptual level than that of the primitive operations of the language, the ability to construct compound data objects enables us to deal with data at a higher conceptual level than that of the primitive data objects of the language."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294750,G__294751) : tailrecursion.hoplon.markdown.para_node.call(null,G__294750,G__294751));
})(),(function (){var G__294752 = cljs.core.PersistentArrayMap.EMPTY;
var G__294753 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Consider the task of designing a system to perform arithmetic with rational numbers. We could imagine an operation ",(function (){var G__294754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"add-rat"], null);
var G__294755 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__294754,G__294755) : tailrecursion.hoplon.markdown.code_node.call(null,G__294754,G__294755));
})()," that takes two rational numbers and produces their sum. In terms of simple data, a rational number can be thought of as two integers: a numerator and a denominator. Thus, we could design a program in which each rational number would be represented by two integers (a numerator and a denominator) and where add-rat would be implemented by two procedures (one producing the numerator of the sum and one producing the denominator). But this would be awkward, because we would then need to explicitly keep track of which numerators corresponded to which denominators. In a system intended to perform many operations on many rational numbers, such bookkeeping details would clutter the programs substantially, to say nothing of what they would do to our minds. It would be much better if we could ",(function (){var G__294756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__294757 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["glue together"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__294756,G__294757) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__294756,G__294757));
})()," a numerator and denominator to form a pair ",(function (){var G__294758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__294759 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__294758,G__294759) : tailrecursion.hoplon.markdown.simple_node.call(null,G__294758,G__294759));
})()," a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["compound data object"], null)], 0))," ",(function (){var G__294760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__294761 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__294760,G__294761) : tailrecursion.hoplon.markdown.simple_node.call(null,G__294760,G__294761));
})()," that our programs could manipulate in a way that would be consistent with regarding a rational number as a single conceptual unit."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294752,G__294753) : tailrecursion.hoplon.markdown.para_node.call(null,G__294752,G__294753));
})(),(function (){var G__294762 = cljs.core.PersistentArrayMap.EMPTY;
var G__294763 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The use of compound data also enables us to increase the modularity of our programs. If we can manipulate rational numbers directly as objects in their own right, then we can separate the part of our program that deals with rational numbers per se from the details of how rational numbers may be represented as pairs of integers. The general technique of isolating the parts of a program that deal with how data objects are represented from the parts of a program that deal with how data objects are used is a powerful design methodology called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data abstraction"], null)], 0)),". We will see how data abstraction makes programs much easier to design, maintain, and modify."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294762,G__294763) : tailrecursion.hoplon.markdown.para_node.call(null,G__294762,G__294763));
})(),(function (){var G__294764 = cljs.core.PersistentArrayMap.EMPTY;
var G__294765 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The use of compound data leads to a real increase in the expressive power of our programming language. Consider the idea of forming a ",(function (){var G__294766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__294767 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["linear combination"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__294766,G__294767) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__294766,G__294767));
})()," \\(ax + by\\). We might like to write a procedure that would accept \\(a\\), \\(b\\), \\(x\\), and \\(y\\) as arguments and return the value of \\(ax + by\\). This presents no difficulty if the arguments are to be numbers, because we can readily define the procedure"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294764,G__294765) : tailrecursion.hoplon.markdown.para_node.call(null,G__294764,G__294765));
})(),(function (){var G__294821 = (function (){var G__294822 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__294823 = (function (){var G__294824 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__294825 = "(";
var G__294826 = (function (){var G__294849 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__294850 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294849,G__294850) : tailrecursion.hoplon.span.call(null,G__294849,G__294850));
})();
var G__294827 = (function (){var G__294851 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294852 = "linear-combination";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294851,G__294852) : tailrecursion.hoplon.span.call(null,G__294851,G__294852));
})();
var G__294828 = " [";
var G__294829 = (function (){var G__294853 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294854 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294853,G__294854) : tailrecursion.hoplon.span.call(null,G__294853,G__294854));
})();
var G__294830 = " ";
var G__294831 = (function (){var G__294855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294856 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294855,G__294856) : tailrecursion.hoplon.span.call(null,G__294855,G__294856));
})();
var G__294832 = " ";
var G__294833 = (function (){var G__294857 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294858 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294857,G__294858) : tailrecursion.hoplon.span.call(null,G__294857,G__294858));
})();
var G__294834 = " ";
var G__294835 = (function (){var G__294859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294860 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294859,G__294860) : tailrecursion.hoplon.span.call(null,G__294859,G__294860));
})();
var G__294836 = "]\n  (";
var G__294837 = (function (){var G__294861 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__294862 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294861,G__294862) : tailrecursion.hoplon.span.call(null,G__294861,G__294862));
})();
var G__294838 = "(";
var G__294839 = (function (){var G__294863 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__294864 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294863,G__294864) : tailrecursion.hoplon.span.call(null,G__294863,G__294864));
})();
var G__294840 = (function (){var G__294865 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294866 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294865,G__294866) : tailrecursion.hoplon.span.call(null,G__294865,G__294866));
})();
var G__294841 = " ";
var G__294842 = (function (){var G__294867 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294868 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294867,G__294868) : tailrecursion.hoplon.span.call(null,G__294867,G__294868));
})();
var G__294843 = ") (";
var G__294844 = (function (){var G__294869 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__294870 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294869,G__294870) : tailrecursion.hoplon.span.call(null,G__294869,G__294870));
})();
var G__294845 = (function (){var G__294871 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294872 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294871,G__294872) : tailrecursion.hoplon.span.call(null,G__294871,G__294872));
})();
var G__294846 = " ";
var G__294847 = (function (){var G__294873 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294874 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294873,G__294874) : tailrecursion.hoplon.span.call(null,G__294873,G__294874));
})();
var G__294848 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$25 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$25(G__294824,G__294825,G__294826,G__294827,G__294828,G__294829,G__294830,G__294831,G__294832,G__294833,G__294834,G__294835,G__294836,G__294837,G__294838,G__294839,G__294840,G__294841,G__294842,G__294843,G__294844,G__294845,G__294846,G__294847,G__294848) : tailrecursion.hoplon.pre.call(null,G__294824,G__294825,G__294826,G__294827,G__294828,G__294829,G__294830,G__294831,G__294832,G__294833,G__294834,G__294835,G__294836,G__294837,G__294838,G__294839,G__294840,G__294841,G__294842,G__294843,G__294844,G__294845,G__294846,G__294847,G__294848));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__294822,G__294823) : tailrecursion.hoplon.div.call(null,G__294822,G__294823));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__294821) : tailrecursion.hoplon.div.call(null,G__294821));
})(),(function (){var G__294875 = cljs.core.PersistentArrayMap.EMPTY;
var G__294876 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["But suppose we are not concerned only with numbers. Suppose we would like to express, in procedural terms, the idea that one can form linear combinations whenever addition and multiplication are defined ",(function (){var G__294877 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__294878 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__294877,G__294878) : tailrecursion.hoplon.markdown.simple_node.call(null,G__294877,G__294878));
})()," for rational numbers, complex numbers, polynomials, or whatever. We could express this as a procedure of the form"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294875,G__294876) : tailrecursion.hoplon.markdown.para_node.call(null,G__294875,G__294876));
})(),(function (){var G__294934 = (function (){var G__294935 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__294936 = (function (){var G__294937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__294938 = "(";
var G__294939 = (function (){var G__294964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__294965 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294964,G__294965) : tailrecursion.hoplon.span.call(null,G__294964,G__294965));
})();
var G__294940 = (function (){var G__294966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294967 = "linear-combination";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294966,G__294967) : tailrecursion.hoplon.span.call(null,G__294966,G__294967));
})();
var G__294941 = " [";
var G__294942 = (function (){var G__294968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294969 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294968,G__294969) : tailrecursion.hoplon.span.call(null,G__294968,G__294969));
})();
var G__294943 = " ";
var G__294944 = (function (){var G__294970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294971 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294970,G__294971) : tailrecursion.hoplon.span.call(null,G__294970,G__294971));
})();
var G__294945 = " ";
var G__294946 = (function (){var G__294972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294973 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294972,G__294973) : tailrecursion.hoplon.span.call(null,G__294972,G__294973));
})();
var G__294947 = " ";
var G__294948 = (function (){var G__294974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294975 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294974,G__294975) : tailrecursion.hoplon.span.call(null,G__294974,G__294975));
})();
var G__294949 = "]\n  (";
var G__294950 = (function (){var G__294976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__294977 = "add";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294976,G__294977) : tailrecursion.hoplon.span.call(null,G__294976,G__294977));
})();
var G__294951 = " (";
var G__294952 = (function (){var G__294978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__294979 = "mul";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294978,G__294979) : tailrecursion.hoplon.span.call(null,G__294978,G__294979));
})();
var G__294953 = " ";
var G__294954 = (function (){var G__294980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294981 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294980,G__294981) : tailrecursion.hoplon.span.call(null,G__294980,G__294981));
})();
var G__294955 = " ";
var G__294956 = (function (){var G__294982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294983 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294982,G__294983) : tailrecursion.hoplon.span.call(null,G__294982,G__294983));
})();
var G__294957 = ") (";
var G__294958 = (function (){var G__294984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__294985 = "mul";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294984,G__294985) : tailrecursion.hoplon.span.call(null,G__294984,G__294985));
})();
var G__294959 = " ";
var G__294960 = (function (){var G__294986 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294987 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294986,G__294987) : tailrecursion.hoplon.span.call(null,G__294986,G__294987));
})();
var G__294961 = " ";
var G__294962 = (function (){var G__294988 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__294989 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__294988,G__294989) : tailrecursion.hoplon.span.call(null,G__294988,G__294989));
})();
var G__294963 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__294937,G__294938,G__294939,G__294940,G__294941,G__294942,G__294943,G__294944,G__294945,G__294946,G__294947,G__294948,G__294949,G__294950,G__294951,G__294952,G__294953,G__294954,G__294955,G__294956,G__294957,G__294958,G__294959,G__294960,G__294961,G__294962,G__294963) : tailrecursion.hoplon.pre.call(null,G__294937,G__294938,G__294939,G__294940,G__294941,G__294942,G__294943,G__294944,G__294945,G__294946,G__294947,G__294948,G__294949,G__294950,G__294951,G__294952,G__294953,G__294954,G__294955,G__294956,G__294957,G__294958,G__294959,G__294960,G__294961,G__294962,G__294963));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__294935,G__294936) : tailrecursion.hoplon.div.call(null,G__294935,G__294936));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__294934) : tailrecursion.hoplon.div.call(null,G__294934));
})(),(function (){var G__294990 = cljs.core.PersistentArrayMap.EMPTY;
var G__294991 = cljs.core.PersistentVector.fromArray(["where ",(function (){var G__294992 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"add"], null);
var G__294993 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__294992,G__294993) : tailrecursion.hoplon.markdown.code_node.call(null,G__294992,G__294993));
})()," and ",(function (){var G__294994 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"mul"], null);
var G__294995 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__294994,G__294995) : tailrecursion.hoplon.markdown.code_node.call(null,G__294994,G__294995));
})()," are not the primitive procedures + and * but rather more complex things that will perform the appropriate operations for whatever kinds of data we pass in as the arguments ",(function (){var G__294996 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"a"], null);
var G__294997 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__294996,G__294997) : tailrecursion.hoplon.markdown.code_node.call(null,G__294996,G__294997));
})(),", ",(function (){var G__294998 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"b"], null);
var G__294999 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__294998,G__294999) : tailrecursion.hoplon.markdown.code_node.call(null,G__294998,G__294999));
})(),", ",(function (){var G__295000 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__295001 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295000,G__295001) : tailrecursion.hoplon.markdown.code_node.call(null,G__295000,G__295001));
})(),", and ",(function (){var G__295002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"y"], null);
var G__295003 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295002,G__295003) : tailrecursion.hoplon.markdown.code_node.call(null,G__295002,G__295003));
})(),". The key point is that the only thing ",(function (){var G__295004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"linear-combination"], null);
var G__295005 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295004,G__295005) : tailrecursion.hoplon.markdown.code_node.call(null,G__295004,G__295005));
})()," should need to know about ",(function (){var G__295006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"a"], null);
var G__295007 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295006,G__295007) : tailrecursion.hoplon.markdown.code_node.call(null,G__295006,G__295007));
})(),", ",(function (){var G__295008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"b"], null);
var G__295009 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295008,G__295009) : tailrecursion.hoplon.markdown.code_node.call(null,G__295008,G__295009));
})(),", ",(function (){var G__295010 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__295011 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295010,G__295011) : tailrecursion.hoplon.markdown.code_node.call(null,G__295010,G__295011));
})(),", and ",(function (){var G__295012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"y"], null);
var G__295013 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295012,G__295013) : tailrecursion.hoplon.markdown.code_node.call(null,G__295012,G__295013));
})()," is that the procedures ",(function (){var G__295014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"add"], null);
var G__295015 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295014,G__295015) : tailrecursion.hoplon.markdown.code_node.call(null,G__295014,G__295015));
})()," and ",(function (){var G__295016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"mul"], null);
var G__295017 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295016,G__295017) : tailrecursion.hoplon.markdown.code_node.call(null,G__295016,G__295017));
})()," will perform the appropriate manipulations. From the perspective of the procedure ",(function (){var G__295018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"linear-combination"], null);
var G__295019 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295018,G__295019) : tailrecursion.hoplon.markdown.code_node.call(null,G__295018,G__295019));
})(),", it is irrelevant what ",(function (){var G__295020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"a"], null);
var G__295021 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295020,G__295021) : tailrecursion.hoplon.markdown.code_node.call(null,G__295020,G__295021));
})(),", ",(function (){var G__295022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"b"], null);
var G__295023 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295022,G__295023) : tailrecursion.hoplon.markdown.code_node.call(null,G__295022,G__295023));
})(),", ",(function (){var G__295024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__295025 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295024,G__295025) : tailrecursion.hoplon.markdown.code_node.call(null,G__295024,G__295025));
})(),", and ",(function (){var G__295026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"y"], null);
var G__295027 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295026,G__295027) : tailrecursion.hoplon.markdown.code_node.call(null,G__295026,G__295027));
})()," are and even more irrelevant how they might happen to be represented in terms of more primitive data. This same example shows why it is important that our programming language provide the ability to manipulate compound objects directly: Without this, there is no way for a procedure such as ",(function (){var G__295028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"linear-combination"], null);
var G__295029 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295028,G__295029) : tailrecursion.hoplon.markdown.code_node.call(null,G__295028,G__295029));
})()," to pass its arguments along to ",(function (){var G__295030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"add"], null);
var G__295031 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295030,G__295031) : tailrecursion.hoplon.markdown.code_node.call(null,G__295030,G__295031));
})()," and ",(function (){var G__295032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"mul"], null);
var G__295033 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295032,G__295033) : tailrecursion.hoplon.markdown.code_node.call(null,G__295032,G__295033));
})()," without having to know their detailed structure.",(function (){var G__295034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__295035 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ability to directly manipulate procedures provides an analogous increase in the expressive power of a programming language. For example, in ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#!/sicp/ch/1/sect/3/sub/1/",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.3.1"], null)], 0))," we introduced the ",(function (){var G__295036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum"], null);
var G__295037 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295036,G__295037) : tailrecursion.hoplon.markdown.code_node.call(null,G__295036,G__295037));
})()," procedure, which takes a procedure ",(function (){var G__295038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"term"], null);
var G__295039 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295038,G__295039) : tailrecursion.hoplon.markdown.code_node.call(null,G__295038,G__295039));
})()," as an argument and computes the sum of the values of ",(function (){var G__295040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"term"], null);
var G__295041 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295040,G__295041) : tailrecursion.hoplon.markdown.code_node.call(null,G__295040,G__295041));
})()," over some specified interval. In order to define ",(function (){var G__295042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum"], null);
var G__295043 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295042,G__295043) : tailrecursion.hoplon.markdown.code_node.call(null,G__295042,G__295043));
})(),", it is crucial that we be able to speak of a procedure such as term as an entity in its own right, without regard for how term might be expressed with more primitive operations. Indeed, if we did not have the notion of ",(function (){var G__295044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__295045 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a procedure,"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__295044,G__295045) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__295044,G__295045));
})()," it is doubtful that we would ever even think of the possibility of defining an operation such as ",(function (){var G__295046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum"], null);
var G__295047 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__295046,G__295047) : tailrecursion.hoplon.markdown.code_node.call(null,G__295046,G__295047));
})(),". Moreover, insofar as performing the summation is concerned, the details of how term may be constructed from more primitive operations are irrelevant."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__295034,G__295035) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__295034,G__295035));
})()," We begin this chapter by implementing the rational-number arithmetic system mentioned above. This will form the background for our discussion of compound data and data abstraction. As with compound procedures, the main issue to be addressed is that of abstraction as a technique for coping with complexity, and we will see how data abstraction enables us to erect suitable ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["abstraction barriers"], null)], 0))," between different parts of a program."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__294990,G__294991) : tailrecursion.hoplon.markdown.para_node.call(null,G__294990,G__294991));
})(),(function (){var G__295048 = cljs.core.PersistentArrayMap.EMPTY;
var G__295049 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will see that the key to forming compound data is that a programming language should provide some kind of ",(function (){var G__295050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__295051 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["glue"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__295050,G__295051) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__295050,G__295051));
})()," so that data objects can be combined to form more complex data objects. There are many possible kinds of glue. Indeed, we will discover how to form compound data using no special ",(function (){var G__295052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__295053 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__295052,G__295053) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__295052,G__295053));
})()," operations at all, only procedures. This will further blur the distinction between ",(function (){var G__295054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__295055 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedure"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__295054,G__295055) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__295054,G__295055));
})()," and ",(function (){var G__295056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__295057 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data,"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__295056,G__295057) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__295056,G__295057));
})()," which was already becoming tenuous toward the end of chapter 1. We will also explore some conventional techniques for representing sequences and trees. One key idea in dealing with compound data is the notion of ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["closure"], null)], 0))," ",(function (){var G__295058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__295059 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__295058,G__295059) : tailrecursion.hoplon.markdown.simple_node.call(null,G__295058,G__295059));
})()," that the glue we use for combining data objects should allow us to combine not only primitive data objects, but compound data objects as well. Another key idea is that compound data objects can serve as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["conventional interfaces"], null)], 0))," for combining program modules in mix-and-match ways. We illustrate some of these ideas by presenting a simple graphics language that exploits closure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__295048,G__295049) : tailrecursion.hoplon.markdown.para_node.call(null,G__295048,G__295049));
})(),(function (){var G__295060 = cljs.core.PersistentArrayMap.EMPTY;
var G__295061 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will then augment the representational power of our language by introducing ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["symbolic expressions"], null)], 0))," ",(function (){var G__295062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__295063 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__295062,G__295063) : tailrecursion.hoplon.markdown.simple_node.call(null,G__295062,G__295063));
})()," data whose elementary parts can be arbitrary symbols rather than only numbers. We explore various alternatives for representing sets of objects. We will find that, just as a given numerical function can be computed by many different computational processes, there are many ways in which a given data structure can be represented in terms of simpler objects, and the choice of representation can have significant impact on the time and space requirements of processes that manipulate the data. We will investigate these ideas in the context of symbolic differentiation, the representation of sets, and the encoding of information."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__295060,G__295061) : tailrecursion.hoplon.markdown.para_node.call(null,G__295060,G__295061));
})(),(function (){var G__295064 = cljs.core.PersistentArrayMap.EMPTY;
var G__295065 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Next we will take up the problem of working with data that may be represented differently by different parts of a program. This leads to the need to implement generic operations, which must handle many different types of data. Maintaining modularity in the presence of ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["generic operations"], null)], 0))," requires more powerful abstraction barriers than can be erected with simple data abstraction alone. In particular, we introduce ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data-directed programming"], null)], 0))," as a technique that allows individual data representations to be designed in isolation and then combined ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["additively"], null)], 0))," (i.e., without modification). To illustrate the power of this approach to system design, we close the chapter by applying what we have learned to the implementation of a package for performing symbolic arithmetic on polynomials, in which the coefficients of the polynomials can be integers, rational numbers, complex numbers, and even other polynomials."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__295064,G__295065) : tailrecursion.hoplon.markdown.para_node.call(null,G__295064,G__295065));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_294737;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_294736;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_294735;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_294734;
}})()], 0));
};
var book$sicp$texts$ch2$content = function (var_args){
var args__8262__auto__ = null;
if (arguments.length > 0) {
var G__295066__i = 0, G__295066__a = new Array(arguments.length -  0);
while (G__295066__i < G__295066__a.length) {G__295066__a[G__295066__i] = arguments[G__295066__i + 0]; ++G__295066__i;}
  args__8262__auto__ = new cljs.core.IndexedSeq(G__295066__a,0);
} 
return book$sicp$texts$ch2$content__delegate.call(this,args__8262__auto__);};
book$sicp$texts$ch2$content.cljs$lang$maxFixedArity = 0;
book$sicp$texts$ch2$content.cljs$lang$applyTo = (function (arglist__295067){
var args__8262__auto__ = cljs.core.seq(arglist__295067);
return book$sicp$texts$ch2$content__delegate(args__8262__auto__);
});
book$sicp$texts$ch2$content.cljs$core$IFn$_invoke$arity$variadic = book$sicp$texts$ch2$content__delegate;
return book$sicp$texts$ch2$content;
})()
;
