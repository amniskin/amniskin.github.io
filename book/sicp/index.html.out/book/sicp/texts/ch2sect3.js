// Compiled by ClojureScript 1.7.48 {}
goog.provide('book.sicp.texts.ch2sect3');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('book.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
book.sicp.texts.ch2sect3.content = (function() { 
var book$sicp$texts$ch2sect3$content__delegate = function (args__6627__auto__){
var vec__87341 = tailrecursion.hoplon.parse_args.call(null,args__6627__auto__);
var _ = cljs.core.nth.call(null,vec__87341,(0),null);
var ___$1 = cljs.core.nth.call(null,vec__87341,(1),null);
return tailrecursion.hoplon.div.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.sect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Symbolic Data"], null),(function (){var _STAR_references_STAR_87342 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87343 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87344 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87345 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["All the compound data objects we have used so far were constructed ultimately from numbers. In this section we extend the representational capability of our language by introducing the ability to work with arbitrary symbols as data."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87345;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87344;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87343;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87342;
}})()),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Quotation"], null),(function (){var _STAR_references_STAR_87346 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87347 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87348 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87349 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we can form compound data using symbols, we can have lists such as"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"d"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"12")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"45")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"17"),")\n((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Norah")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"12"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Molly")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"9"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Anna")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"7"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Lauren")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"6"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Charlotte")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lists containing symbols can look just like the exressions of our language:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"23")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"45"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"9"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"fact")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fact")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In order to manipulate symbols we need a new element in our language: the ability to ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["quote"], null))," a data object. Suppose we want to construct the list ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(a b)"], null),cljs.core.PersistentVector.EMPTY),". We can",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"t accomplish this with ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(list a b)"], null),cljs.core.PersistentVector.EMPTY),", because this expression constructs a list of the ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["values"], null))," of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"a"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"b"], null),cljs.core.PersistentVector.EMPTY)," rather than the symbols themselves. This issue is well known in the context of natural languages, where words and sentences may be regarded either as semantic entities or as character strings (syntactic entities). The common practice in natural languages is to use quotation marks to indicate that a word or a sentence is to be treated literally as a string of characters. For instance, the first letter of ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["John"], null))," is clearly a ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["J."], null))," If we tell somebody, ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["say your name aloud,"], null))," we expect to hear that person",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s name. However, if we tell somebody ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["say 'your name' aloud,"], null))," we expect to hear the words ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["your name."], null))," Note that we are forced to nest quotation marks to describe what somebody else might say.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Allowing quotation in a language wreaks havoc with the ability to reason about the language in simple terms, because it destroys the notion that equals can be substituted for equals. For example, three is one plus two, but the word ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["three"], null))," is not the phrase ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["one plus two."], null))," Quotation is powerful because it gives us a way to build expressions that manipulate other expressions (as we will see when we write an interpreter in chapter 4). But allowing statements in a language that talk about other statements in that language makes it very difficult to maintain any coherent principle of what ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["equals can be substituted for equals"], null))," should mean. For example, if we know that the evening star is the morning star, then from the statement ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the evening star is Venus"], null))," we can deduce ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the morning star is Venus."], null))," However, given that ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["John knows that the evening star is Venus"], null))," we cannot infer that ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["John knows that the morning star is Venus."], null))], null))], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["w this same practice to identify lists and symbols that are to be treated as data objects rather than as expressions to be evaluated. However, our format for quoting differs from that of natural languages in that we place a quotation mark (traditionally, the single quote symbol ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),") only at the beginning of the object to be quoted. We can get away with this in Scheme syntax because we rely on blanks and parentheses to delimit objects. Thus, the meaning of the single quote character is to quote the next object.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The single quote is different from the double quote we have been using to enclose character strings to be printed. Whereas the single quote can be used to denote lists or symbols, the double quote is used only with character strings. In this book, the only use for character strings is as items to be printed."], null))], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we can distinguish between simbols and their values:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),")\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'b"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Quotation also allows us to type in compound objects, using the conventional printed representation for lists:",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Strictly, our use of the quotation mark violates the general rule that all compound expressions in our language should be delimited by parentheses and look like lists. We can recover this consistency by introducing a special form quote, which serves the same purpose as the quotation mark. Thus, we would type ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(quote a)"], null),cljs.core.PersistentVector.EMPTY)," instead of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"'a"], null),cljs.core.PersistentVector.EMPTY),", and we would type ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(quote (a\nb c))"], null),cljs.core.PersistentVector.EMPTY)," instead of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"'(a b c)"], null),cljs.core.PersistentVector.EMPTY),". This is precisely how the interpreter works. The quotation mark is just a single-character abbreviation for wrapping the next complete expression with quote to form ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(quote\n<expression>)"], null),cljs.core.PersistentVector.EMPTY),". This is important because it maintains the principle that any expression seen by the interpreter can be manipulated as a data object. For instance, we could construct the expression ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(first '(a\nb c))"], null),cljs.core.PersistentVector.EMPTY),", which is the same as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(first (quote (a b c)))"], null),cljs.core.PersistentVector.EMPTY),", by evaluating ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(list 'first (list 'quote '(a b c)))"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In keeping with this, we can obtain the empty list by evaluating ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"'()"], null),cljs.core.PersistentVector.EMPTY),"."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To test whether two symbols are the same, we can use Clojure",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY)," primative. In Scheme, due to the lack of the protocol abstraction, this primative had to be a new primative (one which they called ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"eq?"], null),cljs.core.PersistentVector.EMPTY),").",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"nbsp","nbsp",588425146)], null),cljs.core.PersistentVector.EMPTY),"We can consider two symbols to be ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the same"], null))," if they consist of the same characters in the same order. Such a definition skirts a deep issue that we are not yet ready to address: the meaning of ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["sameness"], null))," in a programming language. We will return to this in chapter 3 (section 3.1.3)."], null))," Using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY),", we can implement a useful procedure called ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"memq"], null),cljs.core.PersistentVector.EMPTY),". This takes two arguments, a symbol and a list. If the symbol is not contained in the list (i.e., is not ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY)," to any item in the list), then ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"memq"], null),cljs.core.PersistentVector.EMPTY)," returns false. Otherwise it returns the sublist of the list beginning with the first occurrence of the symbol:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"memq")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"item")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"item")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["For example,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"memq")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'apple")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"pear")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"banana")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"prune"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"memq")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'apple")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"apple")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sauce"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"apple")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pear"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"apple")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pear"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87349;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87348;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87347;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87346;
}})()),"",book.sicp.book_data.exercises.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87350 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87351 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87352 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87353 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What would the interpreter print in response to evaluating each of the following expressions?"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'c"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87353;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87352;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87351;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87350;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87354 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87355 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87356 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87357 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'c"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87357;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87356;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87355;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87354;
}})()),"",(function (){var _STAR_references_STAR_87358 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87359 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87360 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87361 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'george"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87361;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87360;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87359;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87358;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87362 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87363 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87364 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87365 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'george"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," ((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"george"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87365;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87364;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87363;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87362;
}})()),"",(function (){var _STAR_references_STAR_87366 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87367 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87368 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87369 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"x1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"y1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y2"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87369;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87368;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87367;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87366;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87370 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87371 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87372 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87373 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"x1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"y1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y2"),")))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"y1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y2"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87373;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87372;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87371;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87370;
}})()),"",(function (){var _STAR_references_STAR_87374 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87375 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87376 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87377 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"list?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"short "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"list"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87377;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87376;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87375;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87374;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87378 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87379 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87380 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87381 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"list?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"short "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"list"),")))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87381;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87380;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87379;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87378;
}})()),"",(function (){var _STAR_references_STAR_87382 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87383 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87384 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87385 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"memq")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'red")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"red")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"shoes"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"blue")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"socks"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87385;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87384;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87383;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87382;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87386 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87387 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87388 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87389 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"memq")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'red")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"red")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"shoes"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"blue")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"socks"),")))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87389;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87388;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87387;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87386;
}})()),"",(function (){var _STAR_references_STAR_87390 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87391 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87392 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87393 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"memq")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'red")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"red")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"shoes")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"blue")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"socks"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87393;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87392;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87391;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87390;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87394 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87395 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87396 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87397 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"memq")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'red")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"red")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"shoes")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"blue")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"socks"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"red")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"shoes")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"blue")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"socks"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87397;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87396;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87395;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87394;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87398 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87399 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87400 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87401 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Two lists are said to be equal (again we will make use of the diverse protocols included in Clojure",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY)," procedure), if they contain equal elements arranged in the same order. For example,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"this")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"is")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"list"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"this")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"is")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"list"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"true"),"\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"this")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"is")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"list"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"this")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"is")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"list"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentVector.fromArray(["To be more precise, we can define the protocols for ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY)," recursively in terms of the basic ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY)," protocols we",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"re used to. To do this (for purposes of instruction) we will need to define a new procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"eq?"], null),cljs.core.PersistentVector.EMPTY)," that will take two arguments and return true if they are not lists and they are ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY)," in the traditional sense. From that, we can define our new protocol for ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY),", which we will call ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"more-general-eq?"], null),cljs.core.PersistentVector.EMPTY)," by saying that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"a"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"b"], null),cljs.core.PersistentVector.EMPTY)," are ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"more-general-eq?"], null),cljs.core.PersistentVector.EMPTY)," ifthey are both symbols and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(= a b)"], null),cljs.core.PersistentVector.EMPTY),", or if they are both lists such that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(first\na)"], null),cljs.core.PersistentVector.EMPTY)," is ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"more-general-eq?"], null),cljs.core.PersistentVector.EMPTY)," to ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(first b)"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(rest a)"], null),cljs.core.PersistentVector.EMPTY)," is ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"more-general-eq?"], null),cljs.core.PersistentVector.EMPTY)," to ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(rest b)"], null),cljs.core.PersistentVector.EMPTY),". Using this idea, implement ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"eq?"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"more-general-eq?"], null),cljs.core.PersistentVector.EMPTY)," as procedures.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In practice, programmers use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"equal?"], null),cljs.core.PersistentVector.EMPTY)," to compare lists that contain numbers as well as symbols. Numbers are not considered to be symbols. The question of whether two numerically equal numbers (as tested by ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY),") are also ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"eq?"], null),cljs.core.PersistentVector.EMPTY)," is highly implementation-dependent. A better definition of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"equal?"], null),cljs.core.PersistentVector.EMPTY)," (such as the one that comes as a primitive in Scheme) would also stipulate that if a and b are both numbers, then a and b are equal? if they are numerically equal. I believe Clojure gets around this issue through the use of protocols (something we will go over later). Basically, protocols allow for the use of functions accross many different types of arguments. For instance, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"first"], null),cljs.core.PersistentVector.EMPTY)," can be used with a vector, a list, and more generally, any sequential object. In fact, you could write your own protocols for ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"first"], null),cljs.core.PersistentVector.EMPTY)," so that you could use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"first"], null),cljs.core.PersistentVector.EMPTY)," on your own data structures. We've actually been using protocols for a while now via ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"conj"], null),cljs.core.PersistentVector.EMPTY),". When given a vector, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"conj"], null),cljs.core.PersistentVector.EMPTY)," appends the argument to the end of the vector; when given a list, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"conj"], null),cljs.core.PersistentVector.EMPTY)," prepends. This is due to protocols."], null))], true))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87401;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87400;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87399;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87398;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87402 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87403 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87404 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87405 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"eq?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"not "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"seq? "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"more-general-eq?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"eq?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"true"),"\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"list?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") \n         (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"list?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"more-general-eq?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))\n         (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"more-general-eq?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")))\n    ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The idea being if ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"a"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"b"], null),cljs.core.PersistentVector.EMPTY)," are equal (in this sense) then both ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"a"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"b"], null),cljs.core.PersistentVector.EMPTY)," must be either: non-empty lists, empty lists, or not lists at all. This function takes care of those three cases in reverse order and if none are the case, it returns false."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87405;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87404;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87403;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87402;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87406 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87407 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87408 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87409 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Eva Lu Ator types to the interpreter the expression"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'abracadabra"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To her surprise, the interpreter prints back ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"quote"], null),cljs.core.PersistentVector.EMPTY),". Explain."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87409;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87408;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87407;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87406;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87410 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87411 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87412 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87413 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["First let",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s take a look at what ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"''abracadabra"], null),cljs.core.PersistentVector.EMPTY)," returns."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'abracadabra"),"\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"`"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"quote "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"abracadabra"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"quote "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"quote "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"abracadabra"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"quote "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"abracadabra"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So, we see the first thing in this list is the word ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["quote"], null)),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87413;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87412;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87411;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87410;
}})()))),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Example: Symbolic Differentiation"], null),(function (){var _STAR_references_STAR_87414 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87415 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87416 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87417 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As an illustration of symbol manipulation and a further illustration of data abstraction, consider the design of a procedure that performs symbolic differentiation of algebraic expressions. We would like the procedure to take as arguments an algebraic expression and a variable and to return the derivative of the expression with respect to the variable. For example, if the arguments to the procedure are \\(ax2 + bx + c\\) and \\(x\\), the procedure should return \\(2ax + b\\). Symbolic differentiation is of special historical significance in Lisp. It was one of the motivating examples behind the development of a computer language for symbol manipulation. Furthermore, it marked the beginning of the line of research that led to the development of powerful systems for symbolic mathematical work, which are currently being used by a growing number of applied mathematicians and physicists."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In developing the symbolic-differentiation program, we will follow the same strategy of data abstraction that we followed in developing the rational-number system of section 2.1.1. That is, we will first define a differentiation algorithm that operates on abstract objects such as ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["sums,"], null))," ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["products,"], null))," and ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["variables"], null))," without worrying about how these are to be represented. Only afterward will we address the representation problem."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87417;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87416;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87415;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87414;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"The Differentiation Program with Abstract Data"], null),(function (){var _STAR_references_STAR_87418 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87419 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87420 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87421 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In order to keep things simple, we will consider a very simple symbolic-differentiation program that handles expressions that are built up using only the operations of addition and multiplication with two arguments. Differentiation of any such expression can be carried out by applying the following reduction rules:"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\begin{align*} \\frac{dc}{dx}=& 0 \\text{ for } c \\text{ a constant or a variable different from } x\\\\ \\frac{dx}{dx}=& 1\\\\ \\frac{d(u+v)}{dx}=& \\frac{du}{dx}+\\frac{dv}{dx}\\\\ \\frac{d(uv)}{dx}=& u\\left(\\frac{du}{dx}\\right) + v\\left(\\frac{dv}{dx}\\right)\\\\ \\end{align*}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that the latter two rules are recursive in nature. That is, to obtain the derivative of a sum we first find the derivatives of the terms and add them. Each of the terms may in turn be an expression that needs to be decomposed. Decomposing into smaller and smaller pieces will eventually produce pieces that are either constants or variables, whose derivatives will be either 0 or 1."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To embody these rules in a procedure we indulge in a little wishful thinking, as we did in designing the rational-number implementation. If we had a means for representing algebraic expressions, we should be able to tell whether an expression is a sum, a product, a constant, or a variable. We should be able to extract the parts of an expression. For a sum, for example we want to be able to extract the addend (first term) and the augend (second term). We should also be able to construct expressions from parts. Let us assume that we already have procedures to implement the following selectors, constructors, and predicates:"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87421;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87420;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87419;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87418;
}})(),"",tailrecursion.hoplon.table.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"class","class",-2030961996),"table"], null),tailrecursion.hoplon.tbody.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87422 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87423 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87424 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87425 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(variable? e)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87425;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87424;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87423;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87422;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87426 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87427 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87428 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87429 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Is ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"e"], null),cljs.core.PersistentVector.EMPTY)," a variable?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87429;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87428;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87427;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87426;
}})())),"",tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87430 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87431 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87432 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87433 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(same-variable? v1 v2)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87433;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87432;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87431;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87430;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87434 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87435 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87436 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87437 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Are ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"v1"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"v2"], null),cljs.core.PersistentVector.EMPTY)," the same variable?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87437;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87436;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87435;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87434;
}})())),"",tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87438 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87439 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87440 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87441 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(sum? e)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87441;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87440;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87439;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87438;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87442 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87443 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87444 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87445 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Is ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"e"], null),cljs.core.PersistentVector.EMPTY)," a sum?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87445;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87444;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87443;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87442;
}})())),"",tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87446 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87447 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87448 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87449 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(addend e)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87449;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87448;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87447;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87446;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87450 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87451 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87452 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87453 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Addend of the sum ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"e"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87453;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87452;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87451;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87450;
}})())),"",tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87454 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87455 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87456 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87457 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(augend e)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87457;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87456;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87455;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87454;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87458 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87459 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87460 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87461 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Augend of the sum ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"e"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87461;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87460;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87459;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87458;
}})())),"",tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87462 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87463 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87464 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87465 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(make-sum e)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87465;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87464;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87463;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87462;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87466 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87467 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87468 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87469 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Construct the sum of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"a1"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"a2"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87469;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87468;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87467;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87466;
}})())),"",tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87470 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87471 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87472 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87473 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(product? e)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87473;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87472;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87471;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87470;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87474 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87475 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87476 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87477 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Is ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"e"], null),cljs.core.PersistentVector.EMPTY)," a product?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87477;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87476;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87475;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87474;
}})())),"",tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87478 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87479 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87480 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87481 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(multiplier e)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87481;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87480;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87479;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87478;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87482 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87483 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87484 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87485 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Multiplier of the product ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"e"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87485;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87484;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87483;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87482;
}})())),"",tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87486 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87487 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87488 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87489 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(multiplicand e)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87489;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87488;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87487;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87486;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87490 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87491 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87492 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87493 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Multiplicand of the product ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"e"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87493;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87492;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87491;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87490;
}})())),"",tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87494 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87495 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87496 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87497 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(make-product m1 m2)"], null),cljs.core.PersistentVector.EMPTY)], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87497;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87496;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87495;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87494;
}})()),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87498 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87499 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87500 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87501 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Construct the product of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"m1"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"m2"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87501;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87500;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87499;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87498;
}})())))),"",(function (){var _STAR_references_STAR_87502 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87503 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87504 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87505 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Using these, and the primitive predicate ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"number?"], null),cljs.core.PersistentVector.EMPTY),", which identifies numbers, we can express the differentiation rules as the following procedure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"deriv")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"var"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"number?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"variable?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"same-variable?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"var"),") \n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," \n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),")\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-sum"),"\n                     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"deriv")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"addend")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"var"),")\n                     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"deriv")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"augend")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"var"),"))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"product?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-sum"),"\n                         (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-product")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"multiplier")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),")\n                                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"deriv")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"multiplicand")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"var"),"))\n                         (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-product")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"multiplicand")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),")\n                                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"deriv")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"multiplier")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"var"),")))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Unknown expression type -- DERIV\""),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"deriv"], null),cljs.core.PersistentVector.EMPTY)," procedure inforporates the complete differentiation algorithm. Since it is expressed in terms of abstract data, it will work no matter how we choose to represent algebraic expressions, as long as we design a proper set of selectors and constructors. This is the issue we must address next."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87505;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87504;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87503;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87502;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Representing Algebraic Expressions"], null),(function (){var _STAR_references_STAR_87506 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87507 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87508 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87509 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can imagine ways to use list structure to represent algebraic expressions. For example, we could use lists of symbols that mirror the usual algebraic notation, representing \\(ax+b\\) as the list ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(a * x +\nb)"], null),cljs.core.PersistentVector.EMPTY),". However, one especially straightforward choice is to use the same parenthesized prefix notation that Lisp uses for combinations: that is, to represent \\(ax+b\\) as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(+ (* a x) b)"], null),cljs.core.PersistentVector.EMPTY),". Then our data representation for the differentiation problem is as follows:"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87509;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87508;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87507;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87506;
}})(),"",tailrecursion.hoplon.ul.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87510 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87511 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87512 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87513 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The variables are symbols. They are identified by the primitive predicate ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"symbol?"], null),cljs.core.PersistentVector.EMPTY),": "], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"variable?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"symbol? "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87513;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87512;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87511;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87510;
}})()),"",tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87514 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87515 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87516 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87517 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Two variables are the same if the symbols representing them are ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"="], null),cljs.core.PersistentVector.EMPTY),"."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"same-variable?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"variable?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v1"),")\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"variable?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v2"),")\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v2"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87517;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87516;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87515;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87514;
}})()),"",tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87518 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87519 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87520 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87521 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Sums and products are constructed as lists:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'+")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a2"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-product")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"m1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"m2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'*")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"m1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"m2"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87521;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87520;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87519;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87518;
}})()),"",tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87522 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87523 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87524 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87525 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A sum is a list whose first element is the symbol ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"+"], null),cljs.core.PersistentVector.EMPTY),":"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"seq? "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'+"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87525;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87524;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87523;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87522;
}})()),"",tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87526 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87527 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87528 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87529 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The addend is the second term of the sum list:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"addend")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"s"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"s"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87529;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87528;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87527;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87526;
}})()),"",tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87530 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87531 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87532 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87533 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The augend is the third term of the sum list:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"augend")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"s"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"s")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87533;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87532;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87531;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87530;
}})()),"",tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87534 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87535 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87536 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87537 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A product is a list whose first element is the symbol ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"*"], null),cljs.core.PersistentVector.EMPTY),":"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"product?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"seq? "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'*"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87537;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87536;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87535;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87534;
}})()),"",tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87538 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87539 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87540 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87541 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The multiplier is the second item of the product list:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"multiplier")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"p"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"p"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87541;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87540;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87539;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87538;
}})()),"",tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87542 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87543 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87544 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87545 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The multiplicand is the third item of the product list:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"multiplicand")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"p"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"p")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87545;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87544;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87543;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87542;
}})()),"\nThus, we need only combine these with the algorithm as embodied by\n`deriv` in order to have a working symbolic differentiation program.\nLet us look at some examples of its behavior:\n\n```clj\n(deriv '(+ x 3) 'x)\n=> (+ 1 0)\n\n(deriv '(* x y) 'x)\n=> (+ (* x 0) (* 1 y))\n\n(deriv '(* (* x y) (+ x 3)) 'x)\n=> (+ (* (* x y) (+ 1 0))\n      (* (+ (* x 0) (* 1 y))\n         (+ x 3)))\n```\n\nThe program produces answers that are correct; however, they are\nunsimplified. It is true that\n\n$$\\frac{d(xy)}{dx}=x*0+1*y$$\n\nbut we would like the program to know that \\\\(x\\cdot0=0\\\\), \\\\(1\\cdot\ny=y\\\\), and \\\\(0+y=y\\\\). The answer for the second example should have\nbeen simply, \\\\(y\\\\). As the third example shows, this becomes a\nserious issue when the expressions are complex.\n\nOur difficulty is much like the one we encountered with the\nrational-number implementation: we haven't reduced answers to simplest\nform. To accomplish the rational-number reduction, we needed to change\nonly the constructors and the selectors of the implementation. We can\nadopt a similar strategy here. We won't change `deriv` at all.\nInstead, we will change `make-sum` so that if both summands are\nnumbers, `make-sum` will add them and return their sum. Also, if one of\nthe summands is 0, then `make-sum` will return the other summand.\n\n```clj\n(defn make-sum [a1 a2]\n  (cond (= a1 0) a2\n        (= a2 0) a1\n        (and (number? a1)\n             (number? a2)) (+ a1 a2)\n        :else (list '+ a1 a2)))\n```\n\nThis uses the procedure `=`, which, returns `true` if and only if the\ntwo arguments are of the same type and value. Since `0` is a number,\n`(= a1 0)` implies that `a1` must be a number as well. In the original\nSICP, they used a function `=number?` to accomplish this task. We do\nnot need this in Clojure.\n\nSimilarly, we will change `make-product` to build in the rules that 0\ntimes anything is 0 and 1 times anything is the thing itself:\n\n```clj\n(defn make-product [m1 m2]\n  (cond (or (= m1 0)\n            (= m2 0)) 0\n        (= m1 1) m2\n        (= m2 1) m1\n        (and (number? m1)\n             (number? m2)) (* m1 m2)\n        :else (list '* m1 m2)))\n```\n\nHere is how this version works on our three examples:\n\n```clj\n(deriv '(+ x 3) 'x)\n=> 1\n\n(deriv '(* x y) 'x)\n=> y\n\n(deriv '(* (* x y) (+ x 3)) 'x)\n=> (+ (* x y) (* y (+ x 3)))\n```\n\nAlthough this is quite an improvement, the third example shows that\nthere is still a long way to go before we get a program that puts\nexpressions into a form that we might agree is \"simplest.\" The problem\nof algebraic simplification is complex because, among other reasons, a\nform that may be simplest for one purpose may not be for another.")),"",book.sicp.book_data.exercises.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87546 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87547 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87548 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87549 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Show how to extend the basic differentiator to handle more kinds of expressions. For instance, implement the differentiation rule"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\frac{d(u^n)}{dx}=nu^{n-1}\\left(\\frac{du}{dx}\\right)$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["by adding a new clause to the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"deriv"], null),cljs.core.PersistentVector.EMPTY)," program and defining appropriate procedures ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"exponentiation?"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"base"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"exponent"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"make-exponentiation"], null),cljs.core.PersistentVector.EMPTY),". (You may use the symbol ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"**"], null),cljs.core.PersistentVector.EMPTY)," to denote exponentiation.) Build in the rules that anything raised to the power 0 is 1, and anything raised to the power 1 is the thing itself."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87549;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87548;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87547;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87546;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87550 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87551 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87552 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87553 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We must add the following clause to the definition of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(deriv exp\nvar)"], null),cljs.core.PersistentVector.EMPTY),", where ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"exp"], null),cljs.core.PersistentVector.EMPTY)," refers to the expression, and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"var"], null),cljs.core.PersistentVector.EMPTY)," refers to the variable with which we are differentiating."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"exponentiation?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-product")," \n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-product")," \n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"exponent")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),")\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-exponentiation")," \n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"base")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") \n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"exponent")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),"))))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"deriv")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"base")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"var"),"))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponentiation?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'**"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-exponentiation")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"base")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponent"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'**")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"base")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponent"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"base")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponent")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["But then we realize that we would like to include the simplification rules, so"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-exponentiation")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"base")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponent"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"number?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"base"),")\n             (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"number?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponent"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"exp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"base")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponent"),")\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponent")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponent")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"base"),"\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'**")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"base")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponent"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87553;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87552;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87551;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87550;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87554 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87555 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87556 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87557 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Extend the differentiation program to handle sums and products of arbitrary numbers of (two or more) terms. Then the last example above could be expressed as"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"deriv")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'x"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Try to do this by changing only the representation for sums and products without changing the deriv procedure at all. For example, the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"addend"], null),cljs.core.PersistentVector.EMPTY)," of a sum would be the first term, and the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"augend"], null),cljs.core.PersistentVector.EMPTY)," would be the sum of the rest of the terms."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To do this, it is best to take advantage of our ability to define functions with mutliple arities."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"doit"),"\n  ([",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"))\n  ([",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This function will add its arguments if given two arguments, and multiply them if given three."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"doit")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"&")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reduce + "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This function will add up all arguments after the first two (if there are none, it will return 0 for this part). It then returns the product of that sum and the first two arguments. Play around with this structure for a while to give yourself some familiarity before solving this problem."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87557;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87556;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87555;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87554;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87558 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87559 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87560 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87561 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'+"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"addend")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"augend")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"drop "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-sum"),"\n  ([",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"\n               (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"\n               (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"number?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n                    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"number?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")\n               ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'+")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")))\n  ([",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"&")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")\n                 (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")\n                 (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"\n                           (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," \n                                     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") \n                                     ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"&")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The product version is analogous."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87561;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87560;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87559;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87558;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87562 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87563 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87564 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87565 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Suppose we want to modify the differentiation program so that it works with ordinary mathematical notation, in which ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"+"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"*"], null),cljs.core.PersistentVector.EMPTY)," are infix rather than prefix operators. Since the differentiation program is defined in terms of abstract data, we can modify it to work with different representations of expressions solely by changing the predicates, selectors, and constructors that define the representation of the algebraic expressions on which the differentiator is to operate."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a. Show how to do this in order to differentiate algebraic expressions presented in infix form, such as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(x + (3 * (x + (y +\n2))))"], null),cljs.core.PersistentVector.EMPTY),". To simplify the task, assume that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"+"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"*"], null),cljs.core.PersistentVector.EMPTY)," always take two arguments and that expressions are fully parenthesized."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87565;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87564;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87563;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87562;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87566 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87567 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87568 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87569 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"number?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n             (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"number?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'+")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"addend")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"augend")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exp"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'+"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The one for product is analogous."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87569;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87568;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87567;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87566;
}})()),"",(function (){var _STAR_references_STAR_87570 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87571 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87572 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87573 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["b. The problem becomes substantially harder if we allow standard algebraic notation, such as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(x + 3 * (x + y + 2))"], null),cljs.core.PersistentVector.EMPTY),", which drops unnecessary parentheses and assumes that multiplication is done before addition. Can you design appropriate predicates, selectors, and constructors for this notation such that our derivative program still works?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87573;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87572;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87571;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87570;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87574 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87575 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87576 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87577 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This is exactly why 1) prefix notation is so awesome, and 2) macros. But let",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s try this out without beautiful, beautiful macros. This solution is not a partifularly pretty one, but I",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"m doing this one after a VERY long day, so",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY)], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"exponents")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),")\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'**"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," \n                                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"drop "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),")\n                                             (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-exponentiation")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),")\n                                                                  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"take "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),"))\n                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"drop "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"multiplication")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),")\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'*"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n                                      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"drop "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),")\n                                            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-product")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),")\n                                                          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"take "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),"))\n                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"drop "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"addition")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),")\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'+"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n                                      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"drop "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),")\n                                            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-sum")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),")\n                                                      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"take "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),"))\n                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"drop "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pemdas")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"seq? "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"->>")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"map "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pemdas")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),")\n                             (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"exponents"),")\n                             (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"multiplication"),")\n                             (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"addition"),"))\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"expression"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["After this, our expression should be in prefix notation with only two arguments for each operation, so we can use procedures supplied in the book. If you are unclear about what I did here (with ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"->>"], null),cljs.core.PersistentVector.EMPTY),") look up Clojure",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["threading macro"], null))," or shoot me an email and I",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"ll be happy to clarify things. Again, I would appreciate hearing exactly what is unclear so that I can make this site as clear as possible for future readers. So don",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"t be shy! Email me! (My email address is in the footer)."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87577;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87576;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87575;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87574;
}})()))),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Example: Representing Sets"], null),(function (){var _STAR_references_STAR_87578 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87579 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87580 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87581 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In the previous examples we built representations for two kinds of compound data objects: rational numbers and algebraic expressions. In one of these examples we had the choice of simplifying (reducing) the expressions at either construction time or selection time, but other than that the choice of a representation for these structures in terms of lists was straightforward. When we turn to the representation of sets, the choice of a representation is not so obvious. Indeed, there are a number of possible representations, and they differ significantly from one another in several ways."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Informally, a set is simply a collection of distinct objects. To give a more precise definition we can employ the method of data abstraction. That is, we define ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["set"], null))," by specifying the operations that are to be used on sets. These are ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"union-set"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"intersection-set"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY),", and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY),". ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Element-of-set?"], null),cljs.core.PersistentVector.EMPTY)," is a predicate that determines whether a given element is a member of a set. ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Adjoin-set"], null),cljs.core.PersistentVector.EMPTY)," takes an object and a set as arguments and returns a set that contains the elements of the original set and also the adjoined element. ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Union-set"], null),cljs.core.PersistentVector.EMPTY)," computes the union of two sets, which is the set containing each element that appears in either argument. ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Intersection-set"], null),cljs.core.PersistentVector.EMPTY)," computes the intersection of two sets, which is the set containing only elements that appear in both arguments. From the viewpoint of data abstraction, we are free to design any representation that implements these operations in a way consistent with the interpretations given above."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87581;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87580;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87579;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87578;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Sets as Unordered Lists"], null),(function (){var _STAR_references_STAR_87582 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87583 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87584 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87585 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One way to represent a set is as a list of its elements in which no element appears more than once. The empty set is represented by the empty list. In this representation, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY)," is similar to the procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"memq"], null),cljs.core.PersistentVector.EMPTY)," of section 2.3.1."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"element-of-set?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"true"),"\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else"),"  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Using this, we can write ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY),". If the object to be adjoined is already in the set, we just return the set. Otherwise, we use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"cons"], null),cljs.core.PersistentVector.EMPTY)," to add the object to the list that represents the set:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"adjoin-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"element-of-set?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj set "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["For ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"intersection-of-set"], null),cljs.core.PersistentVector.EMPTY)," we can use a recursive strategy. If we know how to form the intersection of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set2"], null),cljs.core.PersistentVector.EMPTY)," and the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"rest"], null),cljs.core.PersistentVector.EMPTY)," of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set1"], null),cljs.core.PersistentVector.EMPTY),", we only need to decide whether to include the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"first"], null),cljs.core.PersistentVector.EMPTY)," of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set1"], null),cljs.core.PersistentVector.EMPTY)," in this. But this depends on whether ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(first set1)"], null),cljs.core.PersistentVector.EMPTY)," is also in ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set2"], null),cljs.core.PersistentVector.EMPTY),". Here is the resulting procedure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"intersection-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"or "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"element-of-set?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),")\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"intersection-set")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),")\n                (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),"))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"intersection-set")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Can you turn this into an iterative procedure using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"loop"], null),cljs.core.PersistentVector.EMPTY),"?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87585;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87584;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87583;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87582;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87586 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87587 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87588 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87589 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"intersection-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"element-of-set?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87589;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87588;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87587;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87586;
}})()),"",(function (){var _STAR_references_STAR_87590 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87591 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87592 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87593 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In designing a representation, one of the issues we should be concerned with is efficiency. Consider the number of steps required by our set operations. Since they all use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY),", the speed of this operation has a major impact on the efficiency of the set implementation as a whole. Now, in order to check whether an object is a member of a set, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY)," may have to scan the entire set. (In the worst case, the object turns out not to be in the set.) Hence, if the set has \\(n\\) elements, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY)," might take up to \\(n\\) steps. Thus, the number of steps required grows as \\(\\Theta(n)\\). The number of steps required by ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY),", which uses this operation, also grows as \\(\\Theta(n)\\). For ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"intersection-of-set"], null),cljs.core.PersistentVector.EMPTY),", which does an ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY)," check for each element of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set1"], null),cljs.core.PersistentVector.EMPTY),", the number of steps required grows as the product of the sizes of the sets involved, or \\(\\Theta(n^2)\\) for two sets of size \\(n\\). The same will be true of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"union-set"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87593;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87592;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87591;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87590;
}})()),"",book.sicp.book_data.exercises.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87594 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87595 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87596 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87597 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Implement the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"union-set"], null),cljs.core.PersistentVector.EMPTY)," operation for the unordered-list representation of sets."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87597;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87596;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87595;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87594;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87598 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87599 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87600 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87601 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"union-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"element-of-set?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Or, we could take advantage of the function, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"accumulate"], null),cljs.core.PersistentVector.EMPTY)," we made in section 2.2.3"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"union-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"accumulate")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"adjoin-set")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%2"),")\n              ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),"\n              ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87601;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87600;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87599;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87598;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87602 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87603 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87604 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87605 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We specified that a set would be represented as a list with no diplicates. Now suppose we allow duplicates. For instance, the set \\({1,2,3}\\) could be represented as the list ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(2 3 2 1 3 2 2)"], null),cljs.core.PersistentVector.EMPTY),". Design procedures ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"union-set"], null),cljs.core.PersistentVector.EMPTY),", and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"intersection-set"], null),cljs.core.PersistentVector.EMPTY)," that operation on this representation. How does the efficiency of each compare with the corresponding procedure for the non-duplicate representation? Are there applications for which you would use this representatioin in preference to the non-duplicate one?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87605;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87604;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87603;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87602;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87606 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87607 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87608 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87609 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Let",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s use some of Clojure Core",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s functions for this. We",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"ll have to make some assumptions about their efficiency (you can look this up if you",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"re actually interested)."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"element-of-set?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"true"),"\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"adjoin-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj set "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"intersection-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"element-of-set?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"union-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"concat "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This would be a useful representation for client-side computing (if we wanted to minimize client-side computation at the cost of server-side computation) where the client can only add things to sets, and never remove things (not even in the form of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"intersection-set"], null),cljs.core.PersistentVector.EMPTY),"). That way everything is constant time \\(\\Theta(1)\\). For instance, if you wanted to keep a tally of the links each user clicks while on your site. Since a user cannot ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["unclick"], null))," a link, we will never have a need for removing items from our set (of links clicked for this user). Anything where you need to ensure an element is not in this list is going to be costly (because we have to use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY),")."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87609;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87608;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87607;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87606;
}})()))),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Sets as Ordered Lists"], null),(function (){var _STAR_references_STAR_87610 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87611 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87612 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87613 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["one way to speed up our set operations is to change the representation so that the set elements are listed in increasing order. To do this, we need some way to compare two objects so that we can say which is bigger. For example, we could compare symbols lexicographically, or we could agree on some method for assigning a unique number to an object and then compare the elements by comparing the corresponding numbers. To keep our discussion simple, we will consider only the case where the set elements are numbers, so that we can compare elements using \\(\\gt\\) and \\(\\lt\\). We will represent a set of numbers by listing its elements in increasing order. Whereas our first representation above allowed us to represent the set \\({1,3,6,10}\\) by listing the elements in any order, our new representation allows only the list ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(1\n3 6 10)"], null),cljs.core.PersistentVector.EMPTY),"."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One advantage of ordering shows up in element-of-set?: In checking for the presence of an item, we no longer have to scan the entire set. If we reach a set element that is larger than the item we are looking for, then we know that the item is not in the set:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"element-of-set?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"true"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How many steps does this save? In the worst case, the item we are looking for may be the largest one in the set, so the number of steps is the same as for the unordered representation. On the other hand, if we search for items of many different sizes we can expect that sometimes we will be able to stop searching at a point near the beginning of the list and that other times we will still need to examine most of the list. On the average we should expect to have to examine about half of the items in the set. Thus, the average number of steps required will be about \\(n/2\\). This is still \\(\\Theta(n)\\) growth, but it does save us, on the average, a factor of 2 in number of steps over the previous implementation."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentVector.fromArray(["We obtain a more impressive speedup with ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"intersection-set"], null),cljs.core.PersistentVector.EMPTY),". In the unordered representation this operation required \\(\\Theta(n^2)\\) steps, because we performed a complete scan of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set2"], null),cljs.core.PersistentVector.EMPTY)," for each element of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set1"], null),cljs.core.PersistentVector.EMPTY),". But with the ordered representation, we can use a more clever method. Begin by comparing the initial elements, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x1"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x2"], null),cljs.core.PersistentVector.EMPTY),", of the two sets. If ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x1"], null),cljs.core.PersistentVector.EMPTY)," equals ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x2"], null),cljs.core.PersistentVector.EMPTY),", then that gives an element of the intersection, and the rest of the intersection is the intersection of the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"rest"], null),cljs.core.PersistentVector.EMPTY)," of the two sets. Suppose, however, that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x1"], null),cljs.core.PersistentVector.EMPTY)," is less than ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x2"], null),cljs.core.PersistentVector.EMPTY),". Since ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x2"], null),cljs.core.PersistentVector.EMPTY)," is the smallest element in ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set2"], null),cljs.core.PersistentVector.EMPTY),", we can immediately conclude that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x1"], null),cljs.core.PersistentVector.EMPTY)," cannot appear anywhere in ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set2"], null),cljs.core.PersistentVector.EMPTY)," and hence is not in the intersection. Hence, the intersection is equal to the intersection of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set2"], null),cljs.core.PersistentVector.EMPTY)," with the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"rest"], null),cljs.core.PersistentVector.EMPTY)," of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set1"], null),cljs.core.PersistentVector.EMPTY),". Similarly, if ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x2"], null),cljs.core.PersistentVector.EMPTY)," is less than ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x1"], null),cljs.core.PersistentVector.EMPTY),", then the intersection is given by the intersection of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set1"], null),cljs.core.PersistentVector.EMPTY)," with the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"rest"], null),cljs.core.PersistentVector.EMPTY)," of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set2"], null),cljs.core.PersistentVector.EMPTY),". Here is the procedure:"], true)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"intersection-set*")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"    ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"or "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things2"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),")]\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things2"),"))\n              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things1"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things2"),")\n              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things2"),")))))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"intersection-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"intersection-set*")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To estimate the number of steps required by this process, observe that at each step we reduce the intersection problem to computing intersections of smaller sets ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," removing the first element from ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set1"], null),cljs.core.PersistentVector.EMPTY)," or ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set2"], null),cljs.core.PersistentVector.EMPTY)," or both. Thus, the number of steps required is at most the sum of the sizes of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set1"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"set2"], null),cljs.core.PersistentVector.EMPTY),", rather than the product of the sizes as with the unordered representation. This is \\(\\Theta(n)\\) growth rather than \\(\\Theta(n^2)\\) ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," a considerable speedup, even for sets of moderate size."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87613;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87612;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87611;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87610;
}})()),"",book.sicp.book_data.exercises.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87614 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87615 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87616 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87617 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Give an implementation of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY)," using the ordered representation. By analogy with ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY)," show how to take advantage of the ordering to produce a procedure that requires on average about half as many steps as with the unordered representatioin."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87617;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87616;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87615;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87614;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87618 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87619 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87620 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87621 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"adjoin-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searched"),"  ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searching")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searching"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searched")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searching"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searching"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searched")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searching"),"))\n                                         (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searching"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searching"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"concat "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searched"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"searching")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Something went wrong with the adjoin. Try again.\""),")))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87621;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87620;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87619;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87618;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87622 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87623 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87624 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87625 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Give a \\(\\Theta(n)\\) implementation of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"union-set"], null),cljs.core.PersistentVector.EMPTY)," for sets represented as ordered lists."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87625;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87624;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87623;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87622;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87626 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87627 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87628 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87629 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"union-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"    ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),")\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),")]\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"concat "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"things1"),"))\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"concat "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"things2"),"))\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"<= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things1"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things2"),")\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> ")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x2"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things2"),"))\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Something went wrong with the union. Try again.\""),"))))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87629;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87628;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87627;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87626;
}})()))),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Sets as Binary Trees"], null),(function (){var _STAR_references_STAR_87630 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87631 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87632 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87633 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can do better than the ordered-list representation by arranging the set elements in the form of a tree. Each node of the tree holds one element of the set, called the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["entry"], null))," at that node, and a link to each of two other (possibly empty) nodes. The ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["left"], null))," link points to elements smaller than the one at the node, and the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["right"], null))," link to elements greater than one at the node. Figure 2.16 shows some trees that represent the set \\({1,3,5,7,9,11}\\). The same set may be represented by a tree in a number of different ways. The only thing we require for valid representation is that all elements in the left subtree be smaller than the node entry and that all elements in the right subtree be larger."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87633;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87632;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87631;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87630;
}})(),"",book.sicp.book_data.fig.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"footer","footer",1606445390),"Various binary trees represent the set {1,3,5,7,9,11}"], null)),"",(function (){var _STAR_references_STAR_87634 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87635 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87636 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87637 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The advantage of the tree representation is this: Suppose we want to check whether a number \\(x\\) is contained in a set. We begin by comparing \\(x\\) with the entry in the top node. If \\(x\\) is less than this, we know that we need only search the left subtree; if \\(x\\) is greater, we need only search the right subtree. Now, if the tree is ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["balanced,"], null))," each of these subtrees will be about half the size of the original. Thus, in one step we have reduced the problem of searching a tree of size \\(n\\) to searching a tree of size \\(n/2\\). Since the size of the tree is halved at each step, we should expect that the number of steps needed to search a tree of size \\(n\\) grows as \\(\\Theta(\\log n)\\).",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Halving the size of the problem at each step is the distinguishing characteristic of logarithmic growth, as we saw with the fast-exponentiation algorithm of section 1.2.4 and the half-interval search method of section 1.3.3."], null))," For large sets, this will be a significant speedup over the previous representations."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can represent trees by using lists. Each node will be a list of three items: the entry at the node, the left subtree, and the right subtree. A left or right subtree of the empty list will indicate that there is no subtree connected there. We can describe this representation by the following procedure:",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We are representing sets in terms of trees, and trees in terms of lists ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," in effect, a data abstraction built upon a data abstraction. We can regard the procedures entry, left-branch, right-branch, and make-tree as a way of isolating the abstraction of a ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["binary tree"], null))," from the particular way we might wish to represent such a tree in terms of list structure."], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"entry")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-branch")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right-branch")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-tree")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we can write the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY)," procedure using the strategy described above:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"element-of-set?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"true"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"element-of-set?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"element-of-set?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"right-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Something went wrong with element-of-set?\""),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["But since this involves recursion, we should try to formulate this using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"loop"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"recur"], null),cljs.core.PersistentVector.EMPTY)," as follows:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"element-of-set?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"false"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"true"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"right-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Something went wrong with element-of-set?\""),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Adjoining an item to a set is implemented similarly and also requires \\(\\Theta(\\log n)\\) steps. To adjoin an item \\(x\\), we compare \\(x\\) with the node entry to determine whether \\(x\\) should be added to the right or to the left branch, and having adjoined \\(x\\) to the appropriate branch we piece this newly constructed branch together with the original entry and the other branch. If \\(x\\) is equal to the entry, we just return the node. If we are asked to adjoin \\(x\\) to an empty tree, we generate a tree that has \\(x\\) as the entry and empty right and left branches. Here is the procedure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"adjoin-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"() ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"())\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-tree")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")\n                                     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"adjoin")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"))\n                                     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"right-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-tree")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")\n                                     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")\n                                     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"adjoin")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"right-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Something went wrong with adjoin-set\""),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The above claim that searching the tree can be performed in a logarithmic number of steps rests on the assumption that the tree is ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["balanced,"], null))," i.e., that the left and right subtree of every tree have approximately the same number of elements, so that each subtree contains about half the elements of its parent. But how can we be certain that the trees we construct will be balanced? Even if we start with a balanced tree, adding elements with ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY)," may produce an unbalanced result. Since the position of a newly adjoined element depends on how the element compares with the items already in the set, we can expect that if we add elements ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["randomly"], null))," the tree will tend to be balanced on the average (note: in this example, the top level might not be balanced, but as we add more and more elements in this ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["random"], null))," fashion, we can safely assume that on the average, each level approximately halves the number of elements, even if it",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s not true for the first level in particular). But this is not a guarantee. For example, if we start with an ampty set and adjoin the numbers 1 through 7 in a sequence we end up with the highly unbalanced tree shown in figure 2.17. In this tree all the left subtrees are empty, so it has no advantage over a simple ordered list. One way to solve this problem is to define an operation that transforms an arbitrary tree into a balanced tree with the same elements. Then we can perform this transformation after every few ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY)," operations to keep our set in balance. There are also other ways to solve this problem, most of which involve designing new data structures for which searching and insertion both can be done in \\(\\Theta(\\log n)\\) setps.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Examples of such structures include ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["B-trees"], null))," and ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["red-black trees"], null)),". There is a large literature on data structures devoted to this problem. See Cormen, Leiserson, and Rivest 1990."], null))], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87637;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87636;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87635;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87634;
}})(),"",book.sicp.book_data.fig.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"footer","footer",1606445390),"Unbalanced tree produced by adjoining 1 through 7 in sequence."], null))),"",book.sicp.book_data.exercises.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87638 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87639 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87640 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87641 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Each of the following two procedures converts a binary tree to a list."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree->list-1")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"concat "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"tree->list-1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))\n              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"tree->list-1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"right-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))\n                    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree->list-2")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"copy-to-list")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result-list"),"]\n                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")\n                           ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result-list"),"\n                           (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"copy-to-list")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")\n                                         (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"copy-to-list")," \n                                                 (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"right-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")\n                                                 ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result-list"),")\n                                               (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")))))]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"copy-to-list")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"())))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a. Do the two procedures produce the same result for every tree? If not, how do the results differ? What lists do the two procedures produce for the trees in figure 2.16?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87641;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87640;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87639;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87638;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87642 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87643 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87644 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87645 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since both procedures put the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"entry"], null),cljs.core.PersistentVector.EMPTY)," in the middle of the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["lesser"], null))," elements and the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["greater"], null))," elements, we can be guaranteed that the elements of the tree will show up in the same order. It is for that reason we also know that each of the trees in figure 2.16 will give the same list with both procedures. Each of them turns this sort of tree into an ordered list, so the trees from figure 2.16 would turn into,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"=>")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"7")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"9")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"11"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87645;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87644;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87643;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87642;
}})()),"",(function (){var _STAR_references_STAR_87646 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87647 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87648 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87649 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["b. Do the two procedures have the same order of growth in the number of steps required to convert a balanced tree with \\(n\\) elements to a list? If not, which one grows more slowly?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87649;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87648;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87647;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87646;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87650 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87651 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87652 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87653 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"concat"], null),cljs.core.PersistentVector.EMPTY)," function is \\(\\Theta(n)\\) in terms of steps required and the length of the first list (the prepending one), we can see that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"tree->list-1"], null),cljs.core.PersistentVector.EMPTY)," is going to take more steps than ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"tree->list-2"], null),cljs.core.PersistentVector.EMPTY),". Exactly how many more, we can only estimate (it depends on how balanced the tree is)."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we assume that the tree is balanced, then every level doubles the number of calls to ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"concat"], null),cljs.core.PersistentVector.EMPTY)," but halves the number of elements in each ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"concat"], null),cljs.core.PersistentVector.EMPTY),". Hence the number of computations done in an ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"concat"], null),cljs.core.PersistentVector.EMPTY)," procedure remains constant at \\(n\\) (roughly) accross all levels. Since there are approximately \\(\\log n\\) levels, we can conclude that the calls to ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"concat"], null),cljs.core.PersistentVector.EMPTY)," take \\(\\theta(n\\log n)\\) steps. If we are to include the calls to ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"conj"], null),cljs.core.PersistentVector.EMPTY)," as well, we find (through similar reasoning), that the total number of steps should be approximately \\(\\Theta(n\\log n+n)=\\Theta(n\\log n)\\) steps."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The second procedure, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"tree->list-2"], null),cljs.core.PersistentVector.EMPTY),", however, uses ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"conj"], null),cljs.core.PersistentVector.EMPTY)," which is always constant time \\(\\Theta(1)\\) as the main building block, which really speeds things up for larger trees. As a matter of fact, if we notice that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"conj"], null),cljs.core.PersistentVector.EMPTY)," is called approximately once per element, we find that the number of steps required is approximately \\(\\Theta(n)\\). So, to answer the question, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"tree->list-2"], null),cljs.core.PersistentVector.EMPTY)," grows more slowly (which is to say it is faster) than ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"tree->list-1"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87653;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87652;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87651;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87650;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87654 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87655 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87656 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87657 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The following procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"list->tree"], null),cljs.core.PersistentVector.EMPTY)," converts an ordered list to a balanced binary tree. The helper procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"partial-tree"], null),cljs.core.PersistentVector.EMPTY)," takes as arguments an integer \\(n\\) and list of at least \\(n\\) elements and constructs a balanced tree containing the first \\(n\\) elements of the list. The result returned by ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"partial-tree"], null),cljs.core.PersistentVector.EMPTY)," is a pair (formed with ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"conj"], null),cljs.core.PersistentVector.EMPTY),") whose ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"first"], null),cljs.core.PersistentVector.EMPTY)," is the constructed tree and whose ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"rest"], null),cljs.core.PersistentVector.EMPTY)," is the list of elements not included in the tree."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"list->tree")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"elements"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"partial-tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"elements")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"count "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"elements"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Where,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"partial-tree")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"elts")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"elts")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"())\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-size"),"      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"quotient")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"dec "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-result"),"    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"partial-tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"elts")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-size"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-tree"),"      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-result"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"non-left-elts"),"  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-result"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right-size"),"     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-size"),"))\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"this-entry"),"     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"non-left-elts"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right-result"),"   (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"partial-tree")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"non-left-elts"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right-size"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right-tree"),"     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right-result"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"remaining-elts")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right-result"),")]\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"remaining-elts")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"this-entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right-tree"),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and we can define ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"quotient"], null),cljs.core.PersistentVector.EMPTY)," as,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"quotient")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"mod")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a. Write a short paragraph explaining as clearly as you can how ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"partial-tree"], null),cljs.core.PersistentVector.EMPTY)," works. Draw the tree produced by ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"list->tree"], null),cljs.core.PersistentVector.EMPTY)," for the list ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(1 3 5 7 9 11)"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87657;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87656;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87655;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87654;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87658 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87659 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87660 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87661 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["For each \\(n\\), ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(partial-tree elts n)"], null),cljs.core.PersistentVector.EMPTY)," breaks the tree into a list where the first element is a tree of the first \\(n\\) elements, and the rest of the list is the rest of the elements (after the first \\(n\\) are taken out). So in a sense, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(partial-tree elts n)"], null),cljs.core.PersistentVector.EMPTY)," is like ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(conj (drop n elts)\ntree-made-from-first-n-elts)"], null),cljs.core.PersistentVector.EMPTY),". So, if we define ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"n"], null),cljs.core.PersistentVector.EMPTY)," as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(count\nelts)"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"m"], null),cljs.core.PersistentVector.EMPTY)," as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(quotient (dec n) 2)"], null),cljs.core.PersistentVector.EMPTY),", then ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(partial-tree elts\nm)"], null),cljs.core.PersistentVector.EMPTY)," would be a list where the first element is a tree made from the first \\(m\\) elements, and the rest of the tree is ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(drop m elts)"], null),cljs.core.PersistentVector.EMPTY)," (a list of the remaining elements)."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In our procedure we make use of this fact by using the same procedure again on the remaining elements (hence making the right branch of the tree)."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87661;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87660;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87659;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87658;
}})()),"",(function (){var _STAR_references_STAR_87662 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87663 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87664 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87665 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["b. What is the order of growth in the number of steps required by ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"list->tree"], null),cljs.core.PersistentVector.EMPTY)," to convert a list of \\(n\\) elements?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87665;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87664;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87663;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87662;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87666 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87667 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87668 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87669 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"partial-tree"], null),cljs.core.PersistentVector.EMPTY)," uses only the most efficient list opperations (like ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"conj"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"first"], null),cljs.core.PersistentVector.EMPTY),", etc.) which are all constant time, if we temporarily exclude the recursive calls, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"partial-tree"], null),cljs.core.PersistentVector.EMPTY)," is a constant time procedure. Now let",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s compute how the recursive calls affect the order of growth. Note that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"partial-tree"], null),cljs.core.PersistentVector.EMPTY)," is called once per element of the list and once or twice for each leaf."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So, the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"list->tree"], null),cljs.core.PersistentVector.EMPTY)," procedure, which uses ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"count"], null),cljs.core.PersistentVector.EMPTY)," (a \\(\\Theta(n)\\) procedure), would be about \\(\\Theta(2n+number-of-leaves)\\) which is \\(\\Theta(n)\\). So the procedure should have a growth rate of \\(\\Theta(n)\\)."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87669;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87668;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87667;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87666;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87670 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87671 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87672 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87673 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use the results of exercises 2.63 and 2.64 to give \\(\\Theta(n)\\) implementations of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"unioin-set"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"intersection-set"], null),cljs.core.PersistentVector.EMPTY)," for sets implemented as (balanced) binary trees.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Exercises 2.63-2.65 are due to Paul Hilfinger."], null))], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87673;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87672;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87671;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87670;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87674 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87675 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87676 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87677 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can use the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"intersection-set"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"unioin-set"], null),cljs.core.PersistentVector.EMPTY)," procedures developed for sets as ordered lists."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"union-set*")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"list->tree"),"\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"union-set")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"tree->list-2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),")\n               (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"tree->list-2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["And similarly,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"intersection-set*")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"list->tree"),"\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"intersection-set")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"tree->list-2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set1"),")\n                      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"tree->list-2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set2"),"))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87677;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87676;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87675;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87674;
}})()))),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Sets and Information Retrieval"], null),(function (){var _STAR_references_STAR_87678 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87679 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87680 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87681 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have examined options for using lists to represent sets and have seen how the choice of representation for a data object can have a large impact on the performance of the programs that use the data. Another reason for concentrating on sets is that the techniques discussed here appear again and again in applications involving information retrieval."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Consider a data base containing a large number of individual records, such as the personnel files for a company or the transactions in an accounting system. A typical data-management system spends a large amount of time accessing or modifying the data in the records and therefore requires an efficient method for accessing records. This is done by identifying a part of each record to serve as an identifying ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["key"], null)),". A key can be anything that uniquely identifies the record. For a personnel file, it might be an employee",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s ID number. For an accounting system, it might be a transaction number. Whatever the key is, when we define the record as a data structure we should include a key selector procedure that retrieves the key associated with a given record."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we represent the data base as a set of records. To locate the record with a given key we use a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"lookup"], null),cljs.core.PersistentVector.EMPTY),", which takes as arguments a key and a data base and which returns the record that has that key, or ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"nil"], null),cljs.core.PersistentVector.EMPTY)," if there is no such record. ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Lookup"], null),cljs.core.PersistentVector.EMPTY)," is implemented in almost the same way as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"element-of-set?"], null),cljs.core.PersistentVector.EMPTY),". For example, if the set of records is implemented as an unordered list, we could use"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"lookup")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"given-key")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set-of-records"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set-of-records"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"nil"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"given-key")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"key "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Of course, there are better ways to represent large sets than as unordered lists. Information-retrieval systems in which records have to be ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["randomly accessed"], null))," are typically implemented by a tree-based method, such as the binary-tree representation discussed previously. In designing such a system the methodology of data abstraction can be a great help. The designer can create an initial implementation using a simple, straightforward representation such as unordered lists. This will be unsuitable for the eventual system, but it can be useful in providing a ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["quick and dirty"], null))," data base with which to test the rest of the system. Later on, the data representation can be modified to be more sophisticated. If the data base is accessed in terms of abstract selectors and constructors, this change in representation will not require any changes to the rest of the system."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87681;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87680;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87679;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87678;
}})()),"",book.sicp.book_data.exercises.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87682 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87683 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87684 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87685 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Implement the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"lookup"], null),cljs.core.PersistentVector.EMPTY)," procedure for the case where the set of records is structured as a binary tree, ordered by the numerical values of the keys."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87685;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87684;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87683;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87682;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87686 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87687 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87688 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87689 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["For now let",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s assume that the keys are all integers (so that we can use the ordering that already exists for integers). Before we can implement the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"lookup"], null),cljs.core.PersistentVector.EMPTY)," procedure for binary trees, we need to define the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"key"], null),cljs.core.PersistentVector.EMPTY)," procedure we see in their definition (which amounts to defining how key-value pairs are to be stored). One way would be to consider key value pairs to be lists where the first element is the key and the second is the value. So,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-key-val-pair")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"key "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"val"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list key "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"val"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"key "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"first"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"val "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"second"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"lookup")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"given-key")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set-of-records"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set-of-records"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"nil"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"given-key")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"key "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"val "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"given-key")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"key "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"given-key")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"key "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"entry")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"right-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Something went wrong with binary-tree-lookup\""),")))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87689;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87688;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87687;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87686;
}})()))),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Example: Huffman Encoding Trees"], null),(function (){var _STAR_references_STAR_87690 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87691 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87692 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87693 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This section provides practice in the use of list structure and data abstraction to manipulate sets and trees. The application is to methods for representing data as sequences of ones and zeros (bits). For example, the ASCII standard code used to represent text in computers encodes each character as a sequence of seven bits. Using seven bits allows us to distinguish \\(2^7\\), or 128, possible different characters. In general, if we want to distinguish \\(n\\) different symbols, we will need to use \\(log_2 n\\) bits per symbol. If all our messages are made up of the eight symbols A, B, C, D, E, F, G, and H, we can choose a code with three bits per character, for example"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\begin{array}{llll} \\text{A } 000 & \\text{C } 010 & \\text{E } 100 & \\text{G } 110\\\\ \\text{B } 001 & \\text{D } 011 & \\text{F } 101 & \\text{H } 111 \\end{array}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["with this code, the message"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["BACADAEAFABBAAAGAH"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["is encoded into the string of 54 bits"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["001000010000011000100000101000001001000000000110000111"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Codes such as ASCII and the A-through-H code above are known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["fixed-length"], null))," codes, because they represent each symbol in the message with the same number of bits. It is sometimes advantageous to use ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["variable-length"], null))," codes, in which different symbols may be represented by different numbers of bits. For example, Morse code does not use the same number of dots and dashes for each letter of the alphabet. In particular, E, the most frequent letter, is represented by a single dot. In general, if our messages are such that some symbols appear very frequently and some very rarely, we can encode data more efficiently (i.e., using fewer bits per message) if we assign shorter codes to the frequent symbols. Consider the following alternative code for the letters A through H:"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\begin{array}{llll} \\text{A } 0 & \\text{C } 1010 & \\text{E } 1100 & \\text{G } 1110\\\\ \\text{B } 100 & \\text{D } 1011 & \\text{F } 1101 & \\text{H } 1111 \\end{array}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["with this code, the same message as above is encoded as the string"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["100010100101101100011010100100000111001111"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This string contains 42 bits, so it saves more than 20% in space in comparison with the fixed-length code shown above."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One of the difficulties of using a variable-length code is knowing when you have reached the end of a symbol in reading a sequence of zeros and ones. Morse code solves this problem by using a special ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["separator code"], null))," (in this case, a pause) after the sequence of dots and dashes for each letter. Another solution is to design the code in such a way that no complete code for any symbol is the beginning (or prefix) of the code for another symbol. Such a code is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["prefix code"], null)),". In the example above, A is encoded by 0 and B is encoded by 100, so no other symbol can have a code that begins with 0 or with 100."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In general, we can attain significant savings if we use variable-length prefix codes that take advantage of the relative frequencies of the symbols in the messages to be encoded. One particular scheme for doing this is called the Huffman encoding method, after its discoverer, David Huffman. A Huffman code can be represented as a binary tree whose leaves are the symbols that are encoded. At each non-leaf node of the tree there is a set containing all the symbols in the leaves that lie below the node. In addition, each symbol at a leaf is assigned a weight (which is its relative frequency), and each non-leaf node contains a weight that is the sum of all the weights of the leaves lying below it. The weights are not used in the encoding or the decoding process. We will see below how they are used to help construct the tree."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87693;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87692;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87691;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87690;
}})(),"",book.sicp.book_data.fig.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"footer","footer",1606445390),"A Huffman encoding tree."], null)),"",(function (){var _STAR_references_STAR_87694 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87695 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87696 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87697 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Figure 2.18 shows the Huffman tree for the A-through-H code given above. The weights at the leaves indicate that the tree was designed for messages in which A appears with relative frequency 8, B with relative frequency 3, and the other letters each with relative frequency 1."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Given a Huffman tree, we can find the encoding of any symbol by starting at the root and moving down until we reach the leaf that holds the symbol. Each time we move down a left branch we add a 0 to the code, and each time we move down a right branch we add a 1. (We decide which branch to follow by testing to see which branch either is the leaf node for the symbol or contains the symbol in its set.) For example, starting from the root of the tree in figure 2.18, we arrive at the leaf for D by following a right branch, then a left branch, then a right branch, then a right branch; hence, the code for D is 1011."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To decode a bit sequence using a Huffman tree, we begin at the root and use the successive zeros and ones of the bit sequence to determine whether to move down the left or the right branch. Each time we come to a leaf, we have generated a new symbol in the message, at which point we start over from the root of the tree to find the next symbol. For example, suppose we are given the tree above and the sequence 10001010. Starting at the root, we move down the right branch, (since the first bit of the string is 1), then down the left branch (since the second bit is 0), then down the left branch (since the third bit is also 0). This brings us to the leaf for B, so the first symbol of the decoded message is B. Now we start again at the root, and we make a left move because the next bit in the string is 0. This brings us to the leaf for A. Then we start again at the root with the rest of the string 1010, so we move right, left, right, left and reach C. Thus, the entire message is BAC."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87697;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87696;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87695;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87694;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Generating Huffman Trees"], null),(function (){var _STAR_references_STAR_87698 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87699 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87700 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87701 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Given an ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["alphabet"], null))," of symbols and their relative frequencies, how do we construct the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["best"], null))," code? (In other words, which tree will encode messages with the fewest bits?) Huffman gave an algorithm for doing this and showed that the resulting code is indeed the best variable-length code for messages where the relative frequency of the symbols matches the frequencies with which the code was constructed. We will not prove this optimality of Huffman codes here, but we will show how Huffman trees are constructed.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["See Hanning 1980 for a discussion of the mathematical properties of Huffman codes."], null))], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The algorithm for generating a Huffman tree is very simple. The idea is to arrange the tree so that the symbols with the lowest frequency appear farthest away from the root. Begin with the set of leaf nodes, containing symbols and their frequencies, as determined by the initial data from which the code is to be constructed. Now find two leaves with the lowest weights and merge them to produce a node that has these two nodes as its left and right branches. The weight of the new node is the sum of the two weights. Remove the two leaves from the original set and replace them by this new node. Now continue this process. At each step, merge two nodes with the smallest weights, removing them from the set and replacing them with a node that has these two as its left and right branches. The process stops when there is only one node left, which is the root of the entire tree. Here is how the Huffman tree of figure 2.18 was generated:"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87701;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87700;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87699;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87698;
}})(),"",tailrecursion.hoplon.table.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"Initial leaves"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"{(A 8) (B 3) (C 1) (D 1) (E 1) (F 1) (G 1) (H 1)}")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"Merge   "),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"{(A 8) (B 3) ({C D} 2) (E 1) (F 1) (G 1) (H 1)}")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"Merge "),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"{(A 8) (B 3) ({C D} 2) ({E F} 2) (G 1) (H 1)}")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"Merge"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"{(A 8) (B 3) ({C D} 2) ({E F} 2) ({G H} 2)}")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"Merge"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"{(A 8) (B 3) ({C D} 2) ({E F G H} 4)}")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"Merge"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"{(A 8) ({B C D} 5) ({E F G H} 4)}")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"Merge"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"{(A 8) ({B C D E F G H} 9)}")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"Final merge"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"{({A B C D E F G H} 17)}"))),"",(function (){var _STAR_references_STAR_87702 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87703 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87704 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87705 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The algorithm does not always specify a unique tree, because there may not be unique smallest-weight nodes at each step. Also, the choice of the order in which the two nodes are merged (i.e., which will be the right branch and which will be the left branch) is arbitrary."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87705;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87704;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87703;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87702;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Representing Huffman Trees"], null),(function (){var _STAR_references_STAR_87706 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87707 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87708 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87709 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In the exercises below we will work with a system that uses Huffman trees to encode and decode messages and generates Huffman trees according to the algorithm outlined above. We will begin by discussing how trees are represented."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Leaves of the tree are represented by a list consisting of the symbol ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"leaf"], null),cljs.core.PersistentVector.EMPTY),", the symbol at the leaf, and the weight:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-leaf")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"symbol "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"weight"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"symbol "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"weight"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"leaf?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"object"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"object"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'leaf"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"symbol-leaf")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"weight-leaf")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A general tree will be a list of a left branch, a right branch, a set of symbols, and a weight. The set of symbols will be simply a list of the symbols, rather than some more sophisticated set representation. When we make a tree by merging two nodes, we obtain the weight of the tree as the sum of the weights of the nodes, and the set of symbols as the union of the sets of symbols for the nodes. Since our symbol sets are represented as lists, we can form the union by using the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"concat"], null),cljs.core.PersistentVector.EMPTY)," procedure we defined in section 2.2.1:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-code-tree")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),"\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"concat "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"symbols")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"symbols")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right"),"))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"weight")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"weight")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we make a tree in this way, we have the following selectors:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"left-branch")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right-branch")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"symbols")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"leaf?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"symbol-leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"weight")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"leaf?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"weight-leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"nth "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The procedures ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"symbols"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"weight"], null),cljs.core.PersistentVector.EMPTY)," must do something slightly different depending on whether they are called with a leaf or a general tree. These are simple examples of ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["generic procedures"], null))," (procedures that can handle more than one kind of data), which we will have much more to say about in sections 2.4 and 2.5."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87709;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87708;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87707;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87706;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"The Decoding Procedure"], null),(function (){var _STAR_references_STAR_87710 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87711 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87712 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87713 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The following procedure implements the decoding algorithm. It takes as arguments a list of zeros and ones, together with a Huffman tree."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"choose-branch")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bit")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bit")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"branch"),")\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bit")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"right-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"branch"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"str "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Bad bit -- CHOOSE-BRANCH \"")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bit"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"decode")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"decode-bits")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"decode-bits"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"choose-branch")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")]\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"leaf?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),")\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"symbol-leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),"))\n                   (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),")\n                   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),")\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),"))))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"loop"], null),cljs.core.PersistentVector.EMPTY)," in this procedure moves ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["down"], null))," the tree, choosing a left or a right branch according to whether the next bit in the list is a zero or a one. (This is done with the procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"choose-branch"], null),cljs.core.PersistentVector.EMPTY),".) When it reaches a leaf, it returns the symbol at that leaf as the next symbol in the message by ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"conj"], null),cljs.core.PersistentVector.EMPTY),"ing it onto the accumulator (",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"accu"], null),cljs.core.PersistentVector.EMPTY),"). Note the error check in the final clause of choose-branch, which complains if the procedure finds something other than a zero or a one in the input data."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As a little supplemental exercise, tweak the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"decode"], null),cljs.core.PersistentVector.EMPTY)," procedure to warn the user if the decoding ends on a node rather than a leaf."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87713;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87712;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87711;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87710;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87714 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87715 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87716 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87717 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"decode")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"decode-bits")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"decode-bits"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),") \n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),")\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),")\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"do "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Error: DECODE ended on a partial code.\""),"))\n              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),")))\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"choose-branch")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")]\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"leaf?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"symbol-leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),"))\n                                (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),")\n                                ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),")\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),"))))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["But with that, we notice that we have to determine equality of trees, which is probably a very taxing procedure. To shorten it, we can instead compare their respective weights. Since we are guaranteed that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"tree"], null),cljs.core.PersistentVector.EMPTY)," will either be ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"huffman-tree"], null),cljs.core.PersistentVector.EMPTY)," or a subtree of it, we know that if their respective weights are equal, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"tree"], null),cljs.core.PersistentVector.EMPTY)," must be ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"huffman-tree"], null),cljs.core.PersistentVector.EMPTY),". So,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"decode")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"decode-bits")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"decode-bits"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),") \n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"weight")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"weight")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),")\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"do "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Error: DECODE ended on a partial code.\""),"))\n              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),")))\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"choose-branch")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")]\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"leaf?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"symbol-leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),"))\n                                (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),")\n                                ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"huffman-tree"),")\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"bits"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),"))))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87717;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87716;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87715;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87714;
}})())),"\n",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Sets of Weighted Elements"], null),(function (){var _STAR_references_STAR_87718 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87719 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87720 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87721 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In our representation of trees, each non-leaf node contains a set of symbols, which we have represented as a simple list. However, the tree-generating algorithm discussed above requires that we also work with sets of leaves and trees, successively merging the two smallest items. Since we will be required to repeatedly find the smallest item in a set, it is convenient to use an ordered representation for this kind of set."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will represent a set of leaves and trees as a list of elements, arranged in increasing order of weight. The following ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY)," procedure for constructing sets is similar to the one described in exercise 2.61; however, items are compared by their weights, and the element being added to the set is never already in it."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"adjoin-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"weight")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"weight")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),")))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj set "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"adjoin-set")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"))\n                    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note: If we want our program to deal with large lists, we would have to alter our ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY)," procedure so as to avoid stack overflows. Design a non-recursive version of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"adjoin-set"], null),cljs.core.PersistentVector.EMPTY),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87721;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87720;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87719;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87718;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87722 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87723 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87724 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87725 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"adjoin-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"weight")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"weight")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")))\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"concat "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87725;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87724;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87723;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87722;
}})()),"",(function (){var _STAR_references_STAR_87726 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87727 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87728 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87729 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The following procedure takes a list of symbol-requency pairs such as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"((A 4) (B 2) (C 1) (D 1))"], null),cljs.core.PersistentVector.EMPTY)," and constructs an initial ordered set of leaves, ready to be merged according to the Huffman algorithm:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-leaf-set")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pairs"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pairs"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pair")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pairs"),")]\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"adjoin-set")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-leaf")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pair"),")   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #408080; font-style: italic"], null),"; symbol"),"\n                               (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pair"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #408080; font-style: italic"], null),"; frequency"),"\n                    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-leaf-set")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pairs"),"))))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87729;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87728;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87727;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87726;
}})()),"",book.sicp.book_data.exercises.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87730 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87731 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87732 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87733 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define an encoding tree and a sample message:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sample-tree"),"\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-code-tree")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'A")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),")\n                  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-code-tree"),"\n                    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'B")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")\n                    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-code-tree")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'D")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),")\n                                    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-leaf")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'C")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sample-message"),"\n  ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"decode"], null),cljs.core.PersistentVector.EMPTY)," procedure to decode the message, and give the result."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87733;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87732;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87731;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87730;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87734 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87735 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87736 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87737 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"A"),"     ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"D")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"A"),"   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"B"),"   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"B"),"     ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"C")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"A"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87737;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87736;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87735;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87734;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87738 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87739 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87740 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87741 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"encode"], null),cljs.core.PersistentVector.EMPTY)," procedure takes as arguments a message and a tree and produces the list of bits that gives the encoded message."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"encode")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"message")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"message"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"concat "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"encode")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"message"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")\n              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"encode-symbol")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"message"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"encode-symbol"], null),cljs.core.PersistentVector.EMPTY)," is a procedure, which you must write, that returns the list of bits that encodes a given symbol according to a given tree. You should design ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"encode-symbol"], null),cljs.core.PersistentVector.EMPTY)," so that it signals an error if the symbol is not in the tree at all. Test your procedure by encoding the result you obtained in exercise 2.67 with the sample tree and seeing whether it is the same as the original sample message."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87741;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87740;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87739;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87738;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87742 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87743 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87744 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87745 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"encode-symbol*")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"symbol "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"'"),"()\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"leaf?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"reverse "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),")\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"element-of-set?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"symbols")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")))\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"left-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"conj "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"right-branch")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"encode-symbol")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"symbol "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"element-of-set?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"symbols")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),"))\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"encode-symbol*")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"symbol "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tree"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," \n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"str "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"The symbol: \"")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"symbol "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"was not recognized. Please remove it and try again.\""),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The function ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"throw"], null),cljs.core.PersistentVector.EMPTY)," is very important. As you can see, this function does not simply return a string value if the symbol is not in the tree. It throws an exception, which means that it stops all further computation that the function would call and sends this message directly to the top. So any function calling ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"encode-symbol"], null),cljs.core.PersistentVector.EMPTY)," is notified immediately when an error occurs, and you can see the benefit therein. Note that the function ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"str"], null),cljs.core.PersistentVector.EMPTY)," takes any number of arguments and places them in a string in the same order. Test it out using variables and whatnot. It",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s a very useful function."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How many arguments does this call to ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"str"], null),cljs.core.PersistentVector.EMPTY)," have?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87745;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87744;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87743;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87742;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87746 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87747 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87748 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87749 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.ordered_list_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.list_item_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_87750 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87751 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The symbol: "], null))," is the first, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"symbol"], null),cljs.core.PersistentVector.EMPTY)," is the second, and the remaining string is the third."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87751;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87750;
}})()], null))], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87749;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87748;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87747;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87746;
}})()))),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87752 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87753 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87754 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87755 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The following procedure takes as its argument a list of symbol-frequency pairs (where no symbol appears in more than one pair) and generates a Huffman encoding tree according to the Huffman algorithm."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"generate-huffman-tree")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pairs"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"successive-merge")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-leaf-set")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pairs"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"make-leaf-set"], null),cljs.core.PersistentVector.EMPTY)," is the procedure given above that transforms the list of pairs into an ordered set of leaves. ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"successive-merge"], null),cljs.core.PersistentVector.EMPTY)," is the procedure you must write, using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"make-code-tree"], null),cljs.core.PersistentVector.EMPTY)," to successively merge the smallest-weight elements of the set until there is only one element left, which is hte desired Huffman tree. (This procedure is slightly tricky, but not really complicated. If you find yourself designing a complex procedure, then you are almost certainly doing something wrong. You can take advantage of the fact that we are using an ordered set representation.)"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87755;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87754;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87753;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87752;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87756 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87757 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87758 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87759 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"successive-merge")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"set"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"right "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"last "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"not-r")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"drop-last")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"things"),")]\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"empty?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"not-r"),")\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"left "),"  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"last "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"not-r"),")\n                ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"others")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"drop-last")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"not-r"),")]\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," \n              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"adjoin-set"),"\n                (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-code-tree")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"left "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"right"),")\n                ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"others"),")))))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87759;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87758;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87757;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87756;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87760 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87761 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87762 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87763 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The following eight-symbol alphabet with associated relative frequencies was designed to efficiently encode the lyrics of 1950s rock songs. (Note that the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["symbols"], null))," of an ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["alphabet"], null))," need not be individual letters.)"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87763;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87762;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87761;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87760;
}})(),"",tailrecursion.hoplon.table.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"A"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"2"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"NA"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"16")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"BOOM"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"1"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"SHA"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"3")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"GET"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"2"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"YIP"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"9")),tailrecursion.hoplon.tr.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"JOB"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"2"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"WAH"),tailrecursion.hoplon.td.call(null,cljs.core.PersistentArrayMap.EMPTY,"1"))),"",(function (){var _STAR_references_STAR_87764 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87765 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87766 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87767 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"generate-huffman-tree"], null),cljs.core.PersistentVector.EMPTY)," (exercise 2.69) to generate a corresponding Huffman tree, and use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"encode"], null),cljs.core.PersistentVector.EMPTY)," (exercise 2.68) to encode the following message:"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Get a job"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Sha na na na na na na na na"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Get a job"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Sha na na na na na na na na"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Wah yip yip yip yip yip yip yip yip yip"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Sha boom"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How many bits are required for the encoding? What is the smallest number of bits that would be needed to encode this song if we used a fixed-length code for the eight-symbol alphabet?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87767;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87766;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87765;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87764;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87768 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87769 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87770 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87771 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The encoding for this will depend on the order in which the elements are given to ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"make-leaf-set"], null),cljs.core.PersistentVector.EMPTY)," among other things. As an example, the version of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"successive-merge"], null),cljs.core.PersistentVector.EMPTY)," we used in the previous exercise creates a tree with the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["smaller"], null))," weight on the right which will affect things, as we",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"ll see. The key is all in the map. One acceptable code might be:"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["00011000100010"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["000011111111"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["00011000100010"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["000011111111"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["00111010101010101010101"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["000000110"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["There are a total of 5 bits required for this encoding. We would need 3 bits if it were a fixed-length encdoding. The reason why we would need 3 bits is, \\(2^3=8\\) and there are 8 symbols."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87771;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87770;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87769;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87768;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87772 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87773 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87774 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87775 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Suppose we have a Huffman tree for an alphabet of \\(n\\) symbols, and that the relative frequencies of the symbols are \\(1, 2, 4, ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),", 2^{n-1}\\). Sketch the tree for \\(n=5\\); for \\(n=10\\). In such a tree (for general \\(n\\)) how many bits are required to encode the most frequent symbol? the least frequent?"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87775;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87774;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87773;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87772;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87776 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87777 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87778 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87779 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Due to some technical difficulties (read ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["I really want to get through this section already"], null)),") I wion",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"t be including the drawings. If you would like them, please feel free to contact me and let me know!"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As for the frequencies: the most frequent symbol will need only one bit. The reason for this is that the frequency of that symbol is greater than or equal to the sum of the frequencies of all the other symbols. So it will only be combined at the very end of the combination process."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Assuming that there are at least 2 elements in the tree, the least frequent symbol will require \\(n-1\\) bits to encode. The reason for this one is a bit more complicated, but at every step, the partial tree containing the least frequent symbol has the least weight, so it is combined. Since only two things can be combined at a time, we see that the partial tree containing the least frequent element must be combined with a leaf at every stage. So we can reduce our problem to the problem of ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how many leaves are there that can be combined with this leaf containing the least frequent symbol?"], null))," The answer to that is clearly \\(n-1\\) because there are \\(n\\) leaves."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87779;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87778;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87777;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87776;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87780 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87781 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87782 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87783 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Consider the encoding procedure that you designed in exercise 2.68. What is the order of growth in the number of steps needed to encode a symbol? Be sure to include the number of steps needed to search the symbol list at each node encountered. To answer this question in general is difficult. Consider the special case where the relative frequencies of the \\(n\\) symbols are as described in exercise 2.71, and give the order of growth (as a function of \\(n\\)) of the number of steps needed to encode the most frequent and least frequent symbols in the alphabet."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87783;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87782;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87781;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87780;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_87784 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87785 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_87786 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_87787 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We first note that the most expensive operations in this procedure is the search through the list at each level, and the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"reverse"], null),cljs.core.PersistentVector.EMPTY)," at the end. The ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"reverse"], null),cljs.core.PersistentVector.EMPTY)," is \\(\\Theta(m)\\) where \\(m\\) is the length of the code, and the search is \\(\\Theta(k)\\) where \\(k\\) is the length of the left branch at the current stage."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since our sets are ordered by frequency (with the most frequent in front), and the most frequent symbol is encoded as a single bit each time (due to the distribution given in exercise 2.71), we know that the very first left branch will be the leaf containing the most frequent symbol. Also, since the code is only a single bit, the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"reverse"], null),cljs.core.PersistentVector.EMPTY)," procedure can be done in constant time as well. Hence we can encode the most frequent symbol in constant time, so \\(\\Theta(1)\\)."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To encode the least fequent symbol, we would have to traverse the lists all the way down to the end, but each time the left branch has only one element in it, so the traversing would be \\(\\Theta(1)+\\Theta(1)+",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"+\\Theta(1)\\). The length of the code will be the number of symbols in the list (i.e. \\(n\\)). So our order of growth should be"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\begin{align*} &\\Theta(n)+\\underbrace{\\Theta(1)+\\Theta(1)+",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"+\\Theta(1)}_{n-1\\text{ times}} \\\\=&\\Theta(n) \\end{align*}$$"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87787;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87786;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_87785;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_87784;
}})()))));
};
var book$sicp$texts$ch2sect3$content = function (var_args){
var args__6627__auto__ = null;
if (arguments.length > 0) {
var G__87788__i = 0, G__87788__a = new Array(arguments.length -  0);
while (G__87788__i < G__87788__a.length) {G__87788__a[G__87788__i] = arguments[G__87788__i + 0]; ++G__87788__i;}
  args__6627__auto__ = new cljs.core.IndexedSeq(G__87788__a,0);
} 
return book$sicp$texts$ch2sect3$content__delegate.call(this,args__6627__auto__);};
book$sicp$texts$ch2sect3$content.cljs$lang$maxFixedArity = 0;
book$sicp$texts$ch2sect3$content.cljs$lang$applyTo = (function (arglist__87789){
var args__6627__auto__ = cljs.core.seq(arglist__87789);
return book$sicp$texts$ch2sect3$content__delegate(args__6627__auto__);
});
book$sicp$texts$ch2sect3$content.cljs$core$IFn$_invoke$arity$variadic = book$sicp$texts$ch2sect3$content__delegate;
return book$sicp$texts$ch2sect3$content;
})()
;

//# sourceMappingURL=ch2sect3.js.map