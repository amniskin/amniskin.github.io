// Compiled by ClojureScript 1.7.48 {}
goog.provide('book.sicp.texts.ch1sect3');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('book.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
book.sicp.texts.ch1sect3.content = (function() { 
var book$sicp$texts$ch1sect3$content__delegate = function (args__6627__auto__){
var vec__85475 = tailrecursion.hoplon.parse_args.call(null,args__6627__auto__);
var _ = cljs.core.nth.call(null,vec__85475,(0),null);
var ___$1 = cljs.core.nth.call(null,vec__85475,(1),null);
return tailrecursion.hoplon.div.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.sect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Formulating Abstractions with Higher-Order Procedures"], null),(function (){var _STAR_references_STAR_85476 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85477 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85478 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85479 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have seen that procedures are, in effect, abstractions that describe compound operations on numbers independent of the particular numbers. For example, when we"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cube")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We are not talking about the cube of a particular number, but rather about a method for obtaining the cube of any number. Of course we could get along without ever defining this procedure, by always writing expressions such as"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and never mentioning ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"cube"], null),cljs.core.PersistentVector.EMPTY)," explicitly. This would place us at a serious disadvantage, forcing us to work always at the level of the particular operations that happen to be primitives in the language (multiplication, in this case) rather than in terms of higher-level operations. Our programs would be able to compute cubes, but our language would lack the ability to express the concept of cubing. One of the things we should demand from a powerful programming language is the ability to build abstractions by assigning names to common patterns and then to work in terms of the abstractions directly. Procedures provide this ability. This is why all but the most primitive programming languages include mechanisms for defining procedures."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Yet even in numerical processing we will be severely limited in our ability to create abstractions if we are restricted to procedures whose parameters must be numbers. Often the same programming pattern will be used with a number of different procedures. To express such patterns as concepts, we will need to construct procedures that can accept procedures as arguments or return procedures as values. Procedures that manipulate procedures are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["higher-order procedures"], null)),". This section shows how higher-order procedures can serve as powerful abstraction mechanisms, vastly increasing the expressive power of our language."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85479;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85478;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85477;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85476;
}})()),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Procedures as Arguments"], null),(function (){var _STAR_references_STAR_85480 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85481 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85482 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85483 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return cljs.core.PersistentVector.fromArray([tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Consider the following three procedures. The first computes the sum of the integers from ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"a"], null),cljs.core.PersistentVector.EMPTY)," through ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"b"], null),cljs.core.PersistentVector.EMPTY),":"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum-integers")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum-integers")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The second computes the sum of the cubes of the integers in the given range:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum-cubes")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"cube")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum-cubes")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The third computes the sum of a sequence of terms in the series"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\frac{1}{1\\cdot3}+\\frac{1}{5\\cdot7}+\\frac{1}{9\\cdot11}+",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which converges to \\(\\pi/8\\) (very slowly):",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This series, usually written in the equivalent form \\((\\pi/4)=1-(1/3)+(1/5)-(1/7)+",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"\\), is due to Leibniz. We",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"ll see how to use this as the basis for some fancy numerical tricks in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/3/sect/5/sub/3/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 3.5.3"], null))], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pi-sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"pi-sum")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["These three procedures clearly share a common underlying pattern. They are for the most part identical, differing only in the name of the procedure, the function of a used to compute the term to be added, and the function that provides the next value of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"a"], null),cljs.core.PersistentVector.EMPTY),". We could generate each of the procedures by filling in slots in the same template:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<name>")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"<term>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),")\n         (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"<name>")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"<next>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The presence of such a common pattern is strong evidence that there is a useful abstraction waiting to be brought to the surface. Indeed, mathematicians long ago identified the abstraction of ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["summation of a series"], null))," and invented ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["sigma notation,"], null))," for example"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\sum_{n=a}^bf(n)=f(a)+",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"+f(b)$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["to express this concept. The power of sigma notation is that it allows mathematicians to deal with the concept of summation itself rather than only with particular sums ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," for example, to formulate general results about sums that are independent of the particular series being summed."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Similarly, as program designers, we would like our language to be powerful enough so that we can write a procedure that expresses the concept of summation itself rather than only procedures that compute particular sums. We can do so readily in our procedural language by taking the common template shown above and transforming the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["slots"], null))," into formal parameters:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),")\n         (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY)," takes as its arguments the lower and upper bounds ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"a"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"b"], null),cljs.core.PersistentVector.EMPTY)," together with the procedures ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"term"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"next"], null),cljs.core.PersistentVector.EMPTY),". We can use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY)," just as we would any procedure. For example, we can use it (along with a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"inc"], null),cljs.core.PersistentVector.EMPTY)," that increments its argument by 1) to define ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum-cubes"], null),cljs.core.PersistentVector.EMPTY),":"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum-cubes")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cube")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Using this, we can compute the sum of the cubes of the integers from 1 to 10:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum-cubes")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"10"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3025"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With the aid of an identity procedure to compute the term, we can define ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum-integers"], null),cljs.core.PersistentVector.EMPTY)," in terms of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY),":"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"identity "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum-integers")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"identity "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The we can add up the integers from 1 to 10:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum-integers")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"10"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"55"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can also define ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"pi-sum"], null),cljs.core.PersistentVector.EMPTY)," in the same way:",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that we have used block structure (section 1.1.8) to embed the definitions of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"pi-next"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"pi-term"], null),cljs.core.PersistentVector.EMPTY)," within ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"pi-sum"], null),cljs.core.PersistentVector.EMPTY),", since these procedures are unlikely to be useful for any other purpose and in Scheme (the language that SICP was written for), procedures written in this way are defined only in the local environment; the same is not true in Clojure. We will see how to get rid of them altogether (and hence how one would approach this problem) in section 1.3.2."], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pi-sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pi-term")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pi-next")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),"))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pi-term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pi-next")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Using these procedures, we can compute an approximation to \\(\\pi\\):"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"8")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"pi-sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1000"),"))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3.139592655589783"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Once we have ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY),", we can use it as a building block in formulating further concepts. For instance, the definite integral of a function \\(f\\) between the limits \\(a\\) and \\(b\\) can be approximated numerically using the formula"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\int_a^bf(x)dx=\\left",tailrecursion.hoplon.markdown.ref_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"separator-space","separator-space",1127241784),null,new cljs.core.Keyword(null,"reference-key","reference-key",1667211677),null], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["f\\left(a+\\frac{dx}{2}\\right)+f\\left(a+dx+\\frac{dx}{2}\\right)+ f\\left(a+2dx+\\frac{dx}{2}\\right)\\right"], null)),"dx$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["for small values of \\(dx\\). We can express this directly as a procedure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"integral")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"add-dx")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),"))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2.0"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"add-dx")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n     ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"inegral")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cube")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0.01"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),".24998750000000042"),"\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"integral")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cube")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0.001"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),".249999875000001"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(The exact value of the integral of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"cube"], null),cljs.core.PersistentVector.EMPTY)," between 0 and 1 is 1/4.)"], null))], true);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85483;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85482;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85481;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85480;
}})()),"",book.sicp.book_data.exercises.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"29-33"], null),book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85484 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85485 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85486 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85487 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Simpson",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s Rule is a more accurate method of numberical integration than the method illustrated above. Using Simpson",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s Rule, the integral of a function \\(f\\) between \\(a\\) and \\(b\\) is approximated as"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\frac{h}{3}",tailrecursion.hoplon.markdown.ref_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"separator-space","separator-space",1127241784),null,new cljs.core.Keyword(null,"reference-key","reference-key",1667211677),null], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["y_0+4y_1+2y_2+4y_3+2y_4+",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"+2y_{n-2}+4y_{n-1}+y_n"], null)),"$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where \\(h=(b-a)/n\\), for some even integer \\(n\\), and \\(y_k=f(a+kh)\\). (Increasing \\(n\\) increases the accuracy of the approximation.) Define a procedure that takes as arguments \\(f\\),\\(a\\),\\(b\\), and \\(n\\) and returns the value of the integral, computed using Simpson",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s Rule. Use your procedure to integrate the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fifth-power"], null),cljs.core.PersistentVector.EMPTY)," function shown below between 0 and 1 (with \\(n=100\\) and \\(n=1000\\)), and compare the results to those of the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"integral"], null),cljs.core.PersistentVector.EMPTY)," procedure shown above."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"fifth-power")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The value of the integral is actually \\(\\frac{1}{6}\\) or \\(0.1\\bar6\\), where the bar over the 6 means that it repeats forever."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85487;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85486;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85485;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85484;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85488 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85489 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85490 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85491 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"simpsons-rule")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"even-n")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"mod")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),")\n                  ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"\n                  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),")))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"h")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"even-n"),"))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"i"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"or "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"i")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"i")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"even-n"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"i")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"h"),")))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"odd?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"i"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"i")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"h"),"))))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"i")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"h"),"))))))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"h")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3.0"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"even-n"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Or, if we wanted to save some computation and clean it up a bit,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"simpsons-rule")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"even-n")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"mod")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"h")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"even-n"),"))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"upper-limit")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"dec "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"even-n"),"))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"h"),"))))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"odd?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"))))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"h")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"upper-limit"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"even-n"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This replaces the three-pronged ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"cond"], null),cljs.core.PersistentVector.EMPTY)," with a simple if where we anticipate needing both equally (roughly)."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85491;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85490;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85489;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85488;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85492 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85493 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85494 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85495 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a. The ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY)," procedure above generates a linear recursion. The procedure can be written so that the sum is performed iteratively. Show how to do this by filling in the missing expressions in the following definition:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"iter")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>"),"\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"iter")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>"),")))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"iter")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["b. Do the same with the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"loop"], null),cljs.core.PersistentVector.EMPTY)," construct below (and notice the similarities)."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>"),"\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<??>"),"))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85495;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85494;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85493;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85492;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85496 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85497 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85498 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85499 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"iter")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"iter")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"))))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"iter")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["For part b."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"this")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"this")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"this"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"this"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),")))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85499;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85498;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85497;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85496;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85500 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85501 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85502 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85503 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a. The ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY)," procedure is only the simplest of a vast number of similar abstractions that can be captured as higher-order procedures.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The intent of exercises 1.31-1.33 is to demonstrate the expressive power that is attained by using an appropriate abstraction to consolidate many seemingly disparate operations. However, though accumulation and filtering are elegant ideas, our hands are somewhat tied in using them at this point since we do not yet have data structures to provide suitable means of combination for these abstractions. We will return to these ideas in section 2.2.3 when we show how to use sequences as interfaces for combining filters and accumulators to build even more powerful abstractions. We will see there how these methods really come into their own as a powerful and elegant approach to designing programs."], null))," Write an analogous procedure called ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"product"], null),cljs.core.PersistentVector.EMPTY)," that returns the product of the values of a function at points over a given range. Show how to define ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"factorial"], null),cljs.core.PersistentVector.EMPTY)," in terms of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"product"], null),cljs.core.PersistentVector.EMPTY),". Also use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"product"], null),cljs.core.PersistentVector.EMPTY)," to compute approximations to \\(\\pi\\) using the formula",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This formula was discovered by the seventeenth-century English mathematician John Wallis."], null))], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\frac{\\pi}{4}=\\frac{2\\cdot4\\cdot4\\cdot6\\cdot6\\cdot8\\cdot\\cdot\\cdot}{3\\cdot3\\cdot5\\cdot5\\cdot7\\cdot7\\cdot\\cdot\\cdot}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["b. If your ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"product"], null),cljs.core.PersistentVector.EMPTY)," procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85503;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85502;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85501;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85500;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85504 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85505 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85506 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85507 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["First, iteratively:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"product")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Next, recursively:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"product")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"product")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"factorial")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"product")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"identity "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pi-approximation")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term-denominator")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"))))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term-numerator")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"\n                              ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k")," \n                              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term-numerator")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term-denominator"),"))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"product")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85507;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85506;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85505;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85504;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85508 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85509 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85510 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85511 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a. Show that ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"product"], null),cljs.core.PersistentVector.EMPTY)," (exercise 1.31) are both special cases of a still more general notion called ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"accumulate"], null),cljs.core.PersistentVector.EMPTY)," that combines a collection of terms, using some general accumulation function:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"accumulate")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"combiner")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"null-value")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Accumulate"], null),cljs.core.PersistentVector.EMPTY)," takes as arguments the same term and range specifications as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"product"], null),cljs.core.PersistentVector.EMPTY),", together with a ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"combiner"], null),cljs.core.PersistentVector.EMPTY)," procedure (of two arguments) that specifies how the current term is to be combined with the accumulation of the preceding terms and a ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"null-value"], null),cljs.core.PersistentVector.EMPTY)," that specifies what base value to use when the terms run out. Write ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"accumulate"], null),cljs.core.PersistentVector.EMPTY)," and show how ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"product"], null),cljs.core.PersistentVector.EMPTY)," can both be defined as simple calls to ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"accumulate"], null),cljs.core.PersistentVector.EMPTY),"."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["b. If your ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"accumulate"], null),cljs.core.PersistentVector.EMPTY)," procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85511;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85510;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85509;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85508;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85512 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85513 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85514 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85515 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accumulate")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"combiner")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"null-value")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"null-value"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"combiner")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),")))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accumulate")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"combiner")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"null-value")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"null-value"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"combiner")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") \n                (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"accumulate")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"combiner")," \n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"null-value")," \n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," \n                            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),") \n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),"\n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"accumulate")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"product")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"accumulate")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85515;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85514;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85513;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85512;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85516 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85517 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85518 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85519 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["You can obtain an even more general version of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"accumulate"], null),cljs.core.PersistentVector.EMPTY)," (exercise 1.32) by introducing the notion of a ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["filter"], null))," on the terms to be combined. That is, combine only those terms derived from values in the range that satisfy a specified condition. The resulting ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"filtered-accumulate"], null),cljs.core.PersistentVector.EMPTY)," abstraction takes the same arguments as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"accumulate"], null),cljs.core.PersistentVector.EMPTY),", together with an additional predicate of one argument that specifies the filter. Write ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"filtered-accumulate"], null),cljs.core.PersistentVector.EMPTY)," as a procedure. Show how to express the following using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"filtered-accumulate"], null),cljs.core.PersistentVector.EMPTY),":"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a. the sum of the squares of the prime numbers in the interval \\(a\\) to \\(b\\) (assuming that you have a ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"prime?"], null),cljs.core.PersistentVector.EMPTY)," predicate already written)"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["b. the product of all the positive integers less than \\(n\\) that are relatively prime to \\(n\\) (i.e., all positive integers \\(i < n\\) such that \\(GCD(i,n) = 1\\))."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85519;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85518;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85517;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85516;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85520 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85521 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85522 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85523 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"filtered-accumulate")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"combiner")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"null-value")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"filter"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"null-value"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"filter?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number"),")\n                                  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"combiner")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"term")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number"),")\n                                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"result"),"))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sum-prime-squares")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"filtered-accumulate")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"prime?"),"))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"relatively-prime-factorial")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"gcd-filter")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"gcd")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),"))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"filtered-accumulate")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"identity "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"inc "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"gcd-filter"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85523;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85522;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85521;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85520;
}})()))),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Constructing Procedures using fn"], null),(function (){var _STAR_references_STAR_85524 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85525 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85526 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85527 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It might be useful to note that in Scheme this function is named ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"lambda"], null),cljs.core.PersistentVector.EMPTY)," (after the lambda calculus)."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sum"], null),cljs.core.PersistentVector.EMPTY)," as in section 1.3.1, it seems terribly awkward to have to define trivial procedures such as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"pi-term"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"pi-next"], null),cljs.core.PersistentVector.EMPTY)," just so we can use them as arguments to our higher-order procedure. Rather than define ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"pi-next"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"pi-term"], null),cljs.core.PersistentVector.EMPTY),", it would be more convenient to have a way to directly specify ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the procedure that returns its input incremented by 4"], null))," and ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the procedure that returns the reciprocal of its input times its input plus 2."], null))," We can do this by introducing the special form ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY),", which creates procedures. Using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY)," we can describe what we want as"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and "], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The our ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"pi-sum"], null),cljs.core.PersistentVector.EMPTY)," procedure can be expressed without defining any auxiliary procedures as"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pi-sum")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))))\n       ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),"))\n       ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Again using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY),", we can write the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"integral"], null),cljs.core.PersistentVector.EMPTY)," procedure without having to define the auxiliary procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"add-dx"], null),cljs.core.PersistentVector.EMPTY),":"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"integral")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sum")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2.0"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),"))\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n     ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In general, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY)," is used to create procedures in the same way as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"defn"], null),cljs.core.PersistentVector.EMPTY),", except that no name is specified for the procedure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<formal-parameters>"),"] ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<body>"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Clojure also has an alternate shorter syntax for using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY),": ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"#(+ 5 %)"], null),cljs.core.PersistentVector.EMPTY)," is the same thing as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(fn [x] (+ 5 x))"], null),cljs.core.PersistentVector.EMPTY),". If there are multiple arguments, we just enumerate them like so: ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"#(* %1 %2)"], null),cljs.core.PersistentVector.EMPTY),", which would be syntactic sugar for, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(fn [x1 x2] (* x1 x2))"], null),cljs.core.PersistentVector.EMPTY),"."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The resulting procedure is just as much a procedure as one that is created using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"defn"], null),cljs.core.PersistentVector.EMPTY),". The only difference is that it has not been associated with any name in the environment. In fact,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"plus4")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["is equivalent to"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"plus4")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can read a ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY)," expression as follows:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the procedure of an argument x that adds x and 4"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Like any expression that has a procedure as its value, a ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY)," expression can be used as the operator in a combination such as"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"12"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["or, more generally, in any context where we would normally use a procedure name.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It would be clearer and less intimidating to people learning Lisp if a name more obvious than ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"lambda"], null),cljs.core.PersistentVector.EMPTY),", such as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"make-procedure"], null),cljs.core.PersistentVector.EMPTY)," (or ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY)," in Clojure), were used. But the convention is firmly entrenched. The notation is adopted from the \\(\\lambda\\) calculus, a mathematical formalism introduced by the mathematical logician Alonzo Church (1941). Church developed the \\(\\lambda\\) calculus to provide a rigorous foundation for studying the notions of function and function application. The \\(\\lambda\\) calculus has become a basic tool for mathematical investigations of the semantics of programming languages."], null))], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85527;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85526;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85525;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85524;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Using let to Create Local Variables"], null),(function (){var _STAR_references_STAR_85528 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85529 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85530 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85531 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Another use of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY)," is in creating local variables. We often need local variables in our procedures other than those that have been bound as formal parameters. For example, suppose we wish to compute the function"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$f(x,y)=x(1+xy)^2 + y(1-y) + (1+xy)(1-y)$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which we could alsp express as"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\begin{align*} a=&1+xy \\\\  b=& 1-y \\\\  f(x,y)=& xa^2+yb+ab\\end{align*}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In writing a procedure to compute \\(f\\), we would like to include as local variables not only \\(x\\) and \\(y\\) but also the names of intermediate quantities like \\(a\\) and \\(b\\). One way to accomplish this is to use an auxiliary procedure to bind the local variables:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f-helper")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"))\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f-helper")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"))\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Of course, we could use a ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY)," expression to specify an anonymous procedure for binding our local variables. The body of \\(f\\) then becomes a single call to that procedure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"))\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This is the way we can define things to the local environment in Clojure. The general form of a ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," expression is"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<var1>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<exp1>"),"\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<var2>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<exp2>"),"\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"border: 1px solid #FF0000"], null),"\u22EE"),"\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<varn>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<expn>"),"]\n  ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<body>"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which can be though of as saying"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["let ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"<var1>"], null),cljs.core.PersistentVector.EMPTY)," have the value ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"<exp1>"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"<var2>"], null),cljs.core.PersistentVector.EMPTY)," have the value ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"<exp2>"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY)," ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"<varn>"], null),cljs.core.PersistentVector.EMPTY)," have the value ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"<expn>"], null),cljs.core.PersistentVector.EMPTY)," in ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"<body>"], null),cljs.core.PersistentVector.EMPTY),"."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The first part of the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," expression is a vector of name-expression pairs. When the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," is evaluated, each name is associated with the value of the corresponding expression. The body of the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," is evaluated with these names bound as local variables. The way this happens is that the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," expression is interpreted as an alternate syntax for"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<var1>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"...")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<varn>"),"] ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<body>"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"<exp1>")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"...")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"<expn>"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["No new mechanism is required in the interpreter in order to provide local variables. A ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," expression is simply syntactic sugar for the underlying ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY)," application."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can see from this equivalence that the scope of a variable specified by a ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," expression is the body of the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY),". This implies that:"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85531;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85530;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85529;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85528;
}})(),"",tailrecursion.hoplon.ul.call(null,cljs.core.PersistentArrayMap.EMPTY,tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85532 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85533 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85534 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85535 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," allows one to bind variables as locally as possible to where they are to be used. For example, if the value of x is 5, the value of the expression"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),"]\n     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"10"),")))\n   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["is 38. Here, the x in the body of the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," is 3, so the value of the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," expression is 33. On the other hand, the x that is the second argument to the outermost + is still 5."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85535;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85534;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85533;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85532;
}})()),"",tailrecursion.hoplon.li.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85536 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85537 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85538 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85539 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In Scheme, the variables",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY)," values are computed outside the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," which matters when the expressions that provide the values for the local variables depend upon variables having the same names as the local variables themselves. In Clojure, however, the values are computed sequentially with each new assigned value creating a nested environment. For example, if the value of x is 2, the expression"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"y")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")))\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["would evaluate to 12 in Scheme because the values are computed from outside the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," binding, but the same thing (in Clojurian syntax)"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),"\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["would evaluate to 15 in Clojure because the values are set in order. So when the y is being set to ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(+ x 2)"], null),cljs.core.PersistentVector.EMPTY),", the x is already set to 3."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," in Clojure is actually based off of a function called ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let*"], null),cljs.core.PersistentVector.EMPTY)," in Scheme which is equivalent to nested ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," procedures. Strangely enough ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let*"], null),cljs.core.PersistentVector.EMPTY)," in Clojure acts the same as ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"let"], null),cljs.core.PersistentVector.EMPTY)," in Scheme. So in summation, our previous function is actually the same as:",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Understanding internal definitions well enough to be sure a program means what we intend it to mean requires a more elaborate model of the evaluation process than we have presented in this chapter. We will return to this issue in section 4.1.6, after we learn more about evaluation."], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85539;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85538;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85537;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85536;
}})()))),"",book.sicp.book_data.exercises.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),(34)], null),book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85540 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85541 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85542 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85543 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Suppose we define the procedure"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"g")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then we have"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"square"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),"\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),"))))\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"6"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What happens if we (perversely) as the interpreter to evaluate the combination ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(f f)"], null),cljs.core.PersistentVector.EMPTY),"? Explain."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85543;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85542;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85541;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85540;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85544 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85545 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85546 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85547 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"g")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which is not defined because 2 is not a function."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85547;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85546;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85545;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85544;
}})()))),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Procedure as General Methods"], null),(function (){var _STAR_references_STAR_85548 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85549 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85550 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85551 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We introduced compound procedures in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/1/sub/4/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.1.4"], null))," as a mechanism for abstracting patterns of numerical operations so as to make them independent of the particular numbers involved. With higher-order procedures, such as the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"integral"], null),cljs.core.PersistentVector.EMPTY)," procedure of ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/3/sub/1/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.3.1"], null)),", we began to see a more powerful kind of abstraction: procedures used to express general methods of computation, independent of the particular functions involved. In this section we discuss two more elaborate examples ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," general methods for finding zeros and fixed points of functions ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," and show how these methods can be expressed directly as procedures."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85551;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85550;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85549;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85548;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Finding Roots of Equations by the Half-Interval Method"], null),(function (){var _STAR_references_STAR_85552 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85553 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85554 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85555 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["half-interval method"], null))," is a simple but powerful technique for finding roots of an equation \\(f(x) = 0\\), where \\(f\\) is a continuous function. The idea is that, if we are given points \\(a\\) and \\(b\\) such that \\(f(a) < 0 < f(b)\\), then \\(f\\) must have at least one zero between \\(a\\) and \\(b\\). To locate a zero, let \\(x\\) be the average of \\(a\\) and \\(b\\) and compute \\(f(x)\\). If \\(f(x) > 0\\), then \\(f\\) must have a zero between \\(a\\) and \\(x\\). If \\(f(x) < 0\\), then \\(f\\) must have a zero between \\(x\\) and \\(b\\). Continuing in this way, we can identify smaller and smaller intervals on which \\(f\\) must have a zero. When we reach a point where the interval is small enough, the process stops. Since the interval of uncertainty is reduced by half at each step of the process, the number of steps required grows as \\(\\Theta(\\log(L/T))\\), where \\(L\\) is the length of the original interval and \\(T\\) is the error tolerance (that is, the size of the interval we will consider ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["small enough"], null)),"). Here is a procedure that implements this strategy:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"search")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"neg-point")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pos-point"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"average")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"neg-point")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pos-point"),")]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"close-enough?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"neg-point")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pos-point"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"test-value")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint"),")]\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"positive?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"test-value"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"search")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"neg-point")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint"),")\n                (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"negative?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"test-value"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"search")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pos-point"),")\n                ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint"),")))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"search")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"neg-point")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pos-point"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"negative")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"neg-point"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"positive")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"pos-point"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"average")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"negative")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"positive"),")]\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"close-enough?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"negative")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"positive"),")\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"test-value")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint"),")]\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"positive?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"test-value"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"negative")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint"),")\n                  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"negative?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"test-value"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"positive"),")\n                  ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"midpoint"),"))))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We assume that we are initially given the function \\(f\\) together with points at which its values are negative and positive. We first compute the midpoint of the two given points. Next we check to see if the given interval is small enough, and if so we simply return the midpoint as our answer. Otherwise, we compute as a test value the value of \\(f\\) at the midpoint. If the test value is positive, then we continue the process with a new interval running from the original negative point to the midpoint. If the test value is negative, we continue with the interval from the midpoint to the positive point. Finally, there is the possibility that the test value is 0, in which case the midpoint is itself the root we are searching for."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To test whether the endpoints are ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["close enough"], null))," we can use a procedure similar to the one used in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/1/sub/7/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.1.7"], null))," for computing square roots:",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have used 0.001 as a representative ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["small"], null))," number to indicate a tolerance for the acceptable error in a calculation. The appropriate tolerance for a real calculation depends upon the problem to be solved and the limitations of the computer and the algorithm. This is often a very subtle consideration, requiring help from a numerical analyst or some other kind of magician."], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"close-enough?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"abs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0.001"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"search"], null),cljs.core.PersistentVector.EMPTY)," is awkward to use directly, because we can accidentally give it points at which \\(f\\)s values do not have the required sign, in which case we get a wrong answer. Instead we will use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"search"], null),cljs.core.PersistentVector.EMPTY)," via the following procedure, which checks to see which of the endpoints has a negative function value and which has a positive value, and calls the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"search"], null),cljs.core.PersistentVector.EMPTY)," procedure accordingly. If the function has the same sign at the two given points, the half-interval method cannot be used, in which case the procedure signals an error.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This can be accomplished using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"throw"], null),cljs.core.PersistentVector.EMPTY),", which takes as arguments a java ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["throwable"], null))," like ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Exception."], null),cljs.core.PersistentVector.EMPTY)," and a string to be printed as an error message."], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"half-interval-method")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a-value")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b-value")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"negative?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a-value"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"positive?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b-value"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"search")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b"),")\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"and "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"positive?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a-value"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"negative?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b-value"),"))\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"search")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),")\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Values are not of opposite sign\""),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The following example uses the half-interval method to approximate \\(\\pi\\) as the root between 2 and 4 of \\(\\sin x=0\\):"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sin")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/sin")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"half-interval-method")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sin")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2.0")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4.0"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3.14111328125"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here is another example, using the half-interval method to search for a root of the equation \\(x^3-2x-3=0\\) between 1 and 2:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"half-interval-method")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),"))\n                      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"\n                      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2.0"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.89306640625"),"\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85555;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85554;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85553;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85552;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Finding Fixed Points of Functions"], null),(function (){var _STAR_references_STAR_85556 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85557 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85558 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85559 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A number \\(x\\) is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["fixed point"], null))," of a function \\(f\\) if \\(x\\) satisfies the equation \\(f(x)=x\\). For some functions \\(f\\) we can locate a fixed point by beginning with an initial guess and applying \\(f\\) repeatedly,"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$f(x),f(f(x)),f(f(f(x))),",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["until the value does not change very much. Using this idea, we can devise a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fixed-point"], null),cljs.core.PersistentVector.EMPTY)," that takes as inputs a function and an initial guess and produces an approximation to a fixed point of the function. We apply the function repeatedly until we find two successive values whose difference is less than some prescribed tolerance:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tolerance")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0.00001"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"fixed-point")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"first-guess"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"close-enough?")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v2"),"]\n                        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"abs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"v2"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tolerance"),"))]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"first-guess"),"]\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),")]\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"close-enough?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),"\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),"))))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["For example, we can use this method to approximate the fixed point of the cosine function, starting with 1 as an initial approximation.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Try this during a boring lecture: Set your calculator to radians mode and then repeatedly press the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"cos"], null),cljs.core.PersistentVector.EMPTY)," button until you obtain the fixed point."], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cos")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/cos")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cos")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),".7390822985224023"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Similarly, we can find a solution to the equation \\(y= \\sin y+\\cos y\\):"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sin")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"cos")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")))\n             ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.2587315962971173"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The fixed-point process is reminiscent of the process we used for finding square roots in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/1/sub/7/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.1.7"], null)),". Both are based on the idea of repeatedly improving a guess until the result satisfies some criterion. In fact, we can readily formulate the square-root computation as a fixed-point search. Computing the square root of some number \\(x\\) requires finding a \\(y\\) such that \\(y^2=x\\). Putting this equation into the equivalent form \\(y=x/y\\), we recognize that we are looking for a fixed point of the function",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["\\(\\to\\) (pronounced ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["maps to"], null)),") is the mathematician way of writing ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"lambda"], null),cljs.core.PersistentVector.EMPTY)," (or ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY),"). \\(y\\to x/y\\) means ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(fn [y] (/ x y))"], null),cljs.core.PersistentVector.EMPTY),", that is, the function whose value at \\(y\\) is \\(x/y\\)."], null))," \\(y\\to x/y\\), and we can therefore try to compute square roots as"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sqrt")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"))\n               ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Unfortunately, this fixed-point search does not converge. Consider an initial guess \\(y_1\\). The next guess is \\(y_2= x/y_1\\) and the next guess is \\(y_3 = x/y_2 = x/(x/y_1) = y_1\\). This results in an infinite loop in which the two guesses \\(y_1\\) and \\(y_2\\) repeat over and over, oscillating about the answer."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One way to control such oscillations is to prevent the guesses from changing so much. Since the answer is always between our guess \\(y\\) and \\(x/y\\), we can make a new guess that is not as far from \\(y\\) as \\(x/y\\) by averaging \\(y\\) with \\(x/y\\), so that the next guess after \\(y\\) is \\((1/2)(y + x/y)\\) instead of \\(x/y\\). The process of making such a sequence of guesses is simply the process of looking for a fixed point of \\(y\\to (1/2)(y + x/y)\\):"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sqrt")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"average")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")))\n               ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(Note that \\(y = (1/2)(y + x/y)\\) is a simple transformation of the equation \\(y = x/y\\); to derive it, add \\(y\\) to both sides of the equation and divide by 2.)"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With this modification, the square-root procedure works. In fact, if we unravel the definitions, we can see that the sequence of approximations to the square root generated here is precisely the same as the one generated by our original square-root procedure of ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/1/sub/7/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.1.7"], null)),". This approach of averaging successive approximations to a solution, a technique we that we call ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["average damping"], null)),", often aids the convergence of fixed-point searches."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85559;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85558;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85557;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85556;
}})()),"",book.sicp.book_data.exercises.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85560 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85561 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85562 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85563 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Show that the golden ratio \\(\\phi\\) ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/2/sub/2/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.2.2"], null))," is a fixed point of the transformation \\(x\\to 1+1/x\\), and use this fact to compute \\(\\phi\\) by means of the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fixed-point"], null),cljs.core.PersistentVector.EMPTY)," procedure."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85563;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85562;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85561;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85560;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85564 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85565 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85566 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85567 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we define \\(f(x)=1+1/x\\), then a fixed point of \\(f\\) would be one where \\(x=1+1/x\\). But then"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\begin{align*}  x=&1+1/x \\\\  x^2=&x+1 \\end{align*} $$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note: the golden ratio \\(\\phi\\), is  \\(\\lim_{x\\to\\infty}\\frac{Fib(x+1)}{Fib(x)}\\), which can also be  seen as a fixed point of the transformation,  \\(\\frac{a}{b}\\to\\frac{a+b}{a}\\). So, setting"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\begin{align*}\\frac{a}{b}=&\\frac{a+b}{a} \\\\\\frac{a}{b}=&\\frac{a}{a}+\\frac{b}{a} \\\\\\phi=&1+1/\\phi\\end{align*}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since that is the same equation we started out with, we",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"re done."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now to compute it using the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fixed-point"], null),cljs.core.PersistentVector.EMPTY)," procedure."], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Or, using Clojure",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s shorter syntax,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85567;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85566;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85565;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85564;
}})())),book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85568 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85569 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85570 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85571 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Modify ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fixed-point"], null),cljs.core.PersistentVector.EMPTY)," so that it prints the sequence of approximations it generates, using the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"println"], null),cljs.core.PersistentVector.EMPTY)," primitive that prints its argument followed by a line break shown in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/ex/22/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.22"], null)),". Then find a solution to \\(x^x = 1000\\) by finding a fixed point of \\(x\\to\\log(1000)/\\log(x)\\). (Use Clojure",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s primitive ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Math/log"], null),cljs.core.PersistentVector.EMPTY)," procedure to get \\(\\ln(x)\\), which computes natural logarithms.) Compare the number of steps this takes with and without average damping. (Note that you cannot start ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fixed-point"], null),cljs.core.PersistentVector.EMPTY)," with a guess of 1, as this would cause division by \\(\\log(1) = 0\\).)"], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85571;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85570;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85569;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85568;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85572 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85573 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85574 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85575 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"print-fixed-point")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"first-guess"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tolerance")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0.00001"),"\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"close-enough?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"> "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tolerance")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"abs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%2"),")))]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"first-guess"),"]\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"next "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),")]\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"close-enough?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),")\n            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),"\n            (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"do "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"println "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"next"),")))))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"log")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/log")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"print-fixed-point")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"log")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1000"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"log")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2.0"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85575;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85574;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85573;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85572;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85576 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85577 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85578 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85579 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a. An infinite ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["continued fraction"], null))," is an expression of the form"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$f=\\frac{N_1}{D_1+\\frac{N_2}{D_2+\\frac{N_3}{D_3+",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"}}}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As an example, one can show that the infinite continued fraction expansion with the \\(N_i\\) and \\(D_i\\) all equal to 1 produces \\(1/\\phi\\), where \\(\\phi\\) is the golden ratio (described in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/2/sub/2/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.2.2"], null)),". One way to approximate an infinite continued fraction is to truncate the expansion after a given number of terms. Such a truncation ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," a so-called ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["k-term finite continued fraction"], null))," ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," has the form"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\frac{N_1}{D_1+\\frac{N_2}{",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"+\\frac{N_k}{D_k}}}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Suppose that \\(n\\) and \\(d\\) are procedures of one argument (the term index \\(i\\)) that return the \\(N_i\\) and \\(D_i\\) of the terms of the continued fraction. Define a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"cont-frac"], null),cljs.core.PersistentVector.EMPTY)," such that evaluating ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(cont-frac n d k)"], null),cljs.core.PersistentVector.EMPTY)," computes the value of the \\(k\\)-term finite continued fraction. Check your procedure by approximating \\(1/\\phi\\) using"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"cont-frac")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),")\n           ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),")\n           ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["for successive values of \\(k\\). How large must you make \\(k\\) in order to get an approximation that is accurate to 4 decimal places?"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["b. If your ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"cont-frac"], null),cljs.core.PersistentVector.EMPTY)," procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85579;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85578;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85577;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85576;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85580 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85581 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85582 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85583 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cont-frac")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"d")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"index "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"  ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= index "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"dec "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"index"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"index"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"d")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"index"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"))))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cont-frac")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"d")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),")\n      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),"\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"d")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"cont-frac")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"d")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"dec "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"))))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85583;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85582;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85581;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85580;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85584 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85585 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85586 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85587 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In 1737, the Swiss mathematician Leonhard Euler published a memoir ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["De Fractionibus Continuls"], null)),", which included a continued fraction expansion for \\(e-2\\), where \\(e\\) is the base of the natural logarithms. In this fraction the \\(N_i\\) are all 1, and the \\(D_i\\) are successively 1,2,1,1,4,1,1,6,1,1,8,",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY)," Write a program that uses your ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"cont-frac"], null),cljs.core.PersistentVector.EMPTY)," procedure from ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/ex/37/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise1.37"], null))," to approximate \\(e\\), based on Euler",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s expansion."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85587;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85586;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85585;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85584;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85588 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85589 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85590 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85591 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"e-approximation")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"d")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"mod")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")\n               (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),"))\n               ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),")]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"cont-frac")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"d")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85591;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85590;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85589;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85588;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85592 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85593 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85594 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85595 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A continued fraction representation of the tangent function was published in 1770 by the German mathematician J.H. Lambert:"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\tan x = \\frac{x}{1-\\frac{x^2}{3-\\frac{x^3}{5-",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"}}}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where \\(x\\) is in radians. Define a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(tan-cf x k)"], null),cljs.core.PersistentVector.EMPTY)," that computes an approximation to the tangent function based on Lambert",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s formula. ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"k"], null),cljs.core.PersistentVector.EMPTY)," specifies the number of terms to compute, as in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/ex/37/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.37"], null)),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85595;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85594;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85593;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85592;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85596 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85597 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85598 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85599 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tan-cf")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"exp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),"))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"d")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),")]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"cont-frac")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"d")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"k"),"))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85599;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85598;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85597;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85596;
}})()))),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Procedures as Returned Values"], null),(function (){var _STAR_references_STAR_85600 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85601 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85602 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85603 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The above examples demonstrate how the ability to pass procedures as arguments significantly enhances the expressive power of our programming language. We can achieve even more expressive power by creating procedures whose returned values are themselves procedures."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can illustrate this idea by looking again at the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fixed-point"], null),cljs.core.PersistentVector.EMPTY)," example described at the end of ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/3/sub/3/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.3.3"], null)),". We formulated a new version of the square-root procedure as a fixed-point search, starting with the observation that \\(\\sqrt x\\) is a fixed-point of the function \\(y\\to x/y\\). Then we used average damping to make the approximations converge. Average damping is a useful general technique in itself. Namely, given a function \\(f\\), we consider the function whose value at \\(x\\) is equal to the average of \\(x\\) and \\(f(x)\\)."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can express the idea of average damping by means of the following procedure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"average-damp")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"average")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"average-damp"], null),cljs.core.PersistentVector.EMPTY)," is a procedure that takes as arguments a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"f"], null),cljs.core.PersistentVector.EMPTY)," and returns as its value a procedure (produced by the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"fn"], null),cljs.core.PersistentVector.EMPTY),") that, when applied to a number ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x"], null),cljs.core.PersistentVector.EMPTY),", produces the average of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"x"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(f x)"], null),cljs.core.PersistentVector.EMPTY),". For example, apply ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"average-damp"], null),cljs.core.PersistentVector.EMPTY)," to the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"square"], null),cljs.core.PersistentVector.EMPTY)," procedure produces a procedure whose value at some number \\(x\\) is the average of \\(x\\) and \\(x^2\\). Applying this resulting procedure to 10 returns the average of 10 and 100, or 55.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that this is a combination whose operator is itself a combination. ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/ex/4/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Exercise 1.4"], null))," already demonstrated the ability to form such combinations, but that was only a toy example. Here we begin to see the real need for such combinations ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," when applying a procedure that is obtained as the value returned by a higher-order procedure."], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"average-damp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"square"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"10"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"55"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"average-damp"], null),cljs.core.PersistentVector.EMPTY),", we can reformulate the square-root procedure as follows:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sqrt")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"average-damp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),"))\n               ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice how this formulation makes explicit the three ideas in the method: fixed-point search, average damping, and the function \\(y\\to x/y\\). It is instructive to compare this formulation of the square-root method with the original version given in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/1/sub/7/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.1.7"], null)),". Bear in mind that these procedures express the same process, and notice how much clearer the idea becomes when we express the process in terms of these abstractions. In general, there are many ways to formulate a process as a procedure. Experienced programmers know how to choose procedural formulations that are particularly perspicuous, and where useful elements of the process are exposed as separate entities that can be reused in other applications. As a simple example of reuse, notice that the cube root of \\(x\\) is a fixed point of the function \\(y\\to x/y^2\\), so we can immediately generalize our square-root procedure to one that extracts cube roots:",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["See ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/ex/45/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.45"], null))," for a further generalization."], null))], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cube-root")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"average-damp")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),")))\n               ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85603;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85602;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85601;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85600;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Newton's Method"], null),(function (){var _STAR_references_STAR_85604 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85605 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85606 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85607 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When we first introduced the square-root procedure, in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/1/sub/7/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.1.7"], null)),", we mentioned that this was a special case of ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Newton",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s method"], null)),". If \\(x\\to g(x)\\) is a differentiable function, then a solution of the equation \\(g(x) = 0\\) is a fixed point of the function \\(x\\to f(x)\\) where"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$f(x)=x-\\frac{g(x)}{Dg(x)}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and \\(Dg(x)\\) is the derivative of \\(g\\) evaluated at \\(x\\). Newton",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s method is the use of the tixed-point method we saw above to approximate a solute of the equation by finding a fixed point of the function \\(f\\).",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Elementary calculus books usually describe Newton's method in terms of the sequence of approximations \\(x_{n+1} = x_n - g(x_n)/Dg(x_n)\\). Having language for talking about processes and using the idea of fixed points simplifies the description of the method."], null))," For many functions \\(g\\) and for sufficiently good initial guesses for \\(x\\), Newton",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s method converges very rapidly to a solution of \\(g(x)=0\\)",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Newton's method does not always converge to an answer, but it can be shown that in favorable cases each iteration doubles the number-of-digits accuracy of the approximation to the solution. In such cases, Newton's method will converge much more rapidly than the half-interval method."], null))], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In order to implement Newton",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s method as a procedure, we must first express the idea of derivative. Note that ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["derivative,"], null))," like average damping, is something that transforms a function into another function. For instance, the derivative of the function \\(x\\to x^3\\) is the function \\(x\\to 3x^2\\). In general, if \\(g\\) is a function and \\(dx\\) is a small number, then the derivative \\(Dg\\) of \\(g\\) is the function whose value at any number \\(x\\) is given (in the limit of small \\(dx\\)) by"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$Dg(x)=\\frac{g(x+dx)-g(x)}{dx}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus, we can express the idea of derivative (taking \\(dx\\) to be, say, 0.00001) as the procedure"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"deriv")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"g")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"g")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["along with the definition"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"def "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0.00001"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Like ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"average-damp"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"deriv"], null),cljs.core.PersistentVector.EMPTY)," is a procedure that takes a procedure as argument and returns a procedure as value. For example, to approximate the derivative of \\(x\\to x^3\\) at 5 (whose exact value is 75) we can evaluate"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cube")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))\n((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"deriv")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cube"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"75.00014999664018"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With the aid of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"deriv"], null),cljs.core.PersistentVector.EMPTY),", we can express Newton",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s method as a fixed-point process:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"newton-transform")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"g")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"deriv")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")))))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"newtons-method")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"newton-transform")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"newton-transform"], null),cljs.core.PersistentVector.EMPTY)," procedure expresses the formula at the beginning of this section, and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"newtons-method"], null),cljs.core.PersistentVector.EMPTY)," is readily defined in terms of this. It takes as arguments a procedure that computes the function for which we want to find a zero, together with an initial guess. For instance, to find the square root of \\(x\\), we can use Newton",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s method to find a zero of the function \\(y\\to y^2 - x\\) starting with an initial guess of 1.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["For finding square roots, Newton's method converges rapidly to the correct solution from any starting point."], null))," This provides yet another form of the square-root procedure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sqrt")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"newtons-method")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n                  ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85607;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85606;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85605;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85604;
}})()),"",book.sicp.book_data.ssub.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Abstractions and First-class Procedures"], null),(function (){var _STAR_references_STAR_85608 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85609 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85610 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85611 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"ve seen two ways to express the square-root computation as an instance of a more general method, once as a fixed-point search and once using Newton",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s method. Since Newton",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s method was itself expressed as a fixed-point process, we actually saw two ways to compute square roots as fixed points. Each method begins with a function and finds a fixed point of some transformation of the function. We can express this general idea itself as a procedure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"fixed-point-of-transform")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"transform")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"transform")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This very general procedure takes as its arguments a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"g"], null),cljs.core.PersistentVector.EMPTY)," that computes some function, a procedure that transforms ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"g"], null),cljs.core.PersistentVector.EMPTY),", and an initial guess. The returned result is a fixed point of the transformed function."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Using this abstraction, we can recast the first square-root computation from this section (where we look for a fixed point of the average-damped version of \\(y\\to x/y\\)) as an instance of this general method:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sqrt")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point-of-transform")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),")\n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"average-damp"),"\n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Similarly, we can express the second square-root computation from this section (an instance of Newton",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s method that finds a fixed point of the Newton transform of \\(y\\to y^2 - x\\)) as"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sqrt")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point-of-transform")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")\n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"newton-transform"),"\n                            ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We began ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/3/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.3"], null))," with the observation that compound procedures are a crucial abstraction mechanism, because they permit us to express general methods of computing as explicit elements in our programming language. Now we",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"ve seen how higher-order procedures permit us to manipulate these general methods to create further abstractions."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As programmers, we should be alert to opportunities to identify the underlying abstractions in our programs and to build upon them and generalize them to create more powerful abstractions. This is not to say that one should always write programs in the most abstract way possible; expert programmers know how to choose the level of abstraction appropriate to their task. But it is important to be able to think in terms of these abstractions, so that we can be ready to apply them in new contexts. The significance of higher-order procedures is that they enable us to represent these abstractions explicitly as elements in our programming language, so that they can be handled just like other computational elements."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In general, programming languages impose restrictions on the ways in which computational elements can be manipulated. Elements with the fewest restrictions are said to have ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["first-class"], null))," status. Some of the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["rights and privileges"], null))," of first-class elements are:",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The notion of first-class status of programming-language elements is due to the British computer scientist Christopher Strachey (1916-1975)."], null))], null)),tailrecursion.hoplon.markdown.bullet_list_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.list_item_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["They may be named by variables."], null))], null)),tailrecursion.hoplon.markdown.list_item_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_85612 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85613 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["They may be passed as arguments to procedures."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85613;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85612;
}})()], null)),tailrecursion.hoplon.markdown.list_item_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_85614 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85615 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["They may be returned as the results of procedures."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85615;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85614;
}})()], null)),tailrecursion.hoplon.markdown.list_item_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_85616 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85617 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["They may be included in data structures.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We'll see examples of this after we introduce data structures in chapter 2."], null))], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85617;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85616;
}})()], null))], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp, unlike other common programming languages, awards procedures full first-class status. This poses challenges for efficient implementation, but the resulting gain in expressive power is enormous.",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The major implementation cost of first-class procedures is that allowing procedures to be returned as values requires reserving storage for a procedure",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s free variables even while the procedure is not executing. In the Scheme implementation we will study in section 4.1, these variables are stored in the procedure",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s environment."], null))], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85611;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85610;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85609;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85608;
}})()),"",book.sicp.book_data.exercises.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85618 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85619 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85620 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85621 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"cubic"], null),cljs.core.PersistentVector.EMPTY)," that can be used together with the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"newtons-method"], null),cljs.core.PersistentVector.EMPTY)," procedure in expressions of the form"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"newtons-method")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"cubic")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),")\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["to approximate zeros of the cubic \\(x^3+ax^2+bx+c\\). Use it to approximate the zeros of several cubic functions and check your answers on ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"http://www.wolframalpha.com",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Wolfram Alpha"], null)),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85621;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85620;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85619;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85618;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85622 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85623 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85624 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85625 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"cubic")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"cube")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c"),")))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85625;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85624;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85623;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85622;
}})())),book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85626 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85627 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85628 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85629 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"dubs"], null),cljs.core.PersistentVector.EMPTY)," ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, ["we could have named it ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"double"], null),cljs.core.PersistentVector.EMPTY)," as in the original ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["SICP"], null)),", but ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"double"], null),cljs.core.PersistentVector.EMPTY)," is already a thing in Clojure. Since ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"double"], null),cljs.core.PersistentVector.EMPTY)," is not a special form, you can redefine it within your environment, but you should just get a warning about it. Either way, it was not very instructive to do so at this time, so I renamed it ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"dubs"], null),cljs.core.PersistentVector.EMPTY)], null))," that takes a procedure of one argument as argument and returns a procedure that applies the original procedure twice. For example, if ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"inc"], null),cljs.core.PersistentVector.EMPTY)," is a procedure that adds 1 to its argument, then ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"(dubs inc)"], null),cljs.core.PersistentVector.EMPTY)," should be a procedure that adds 2. What value is returned by"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dubs"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"inc"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85629;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85628;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85627;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85626;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85630 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85631 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85632 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85633 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dubs")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dubs"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"inc"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n(((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")))) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"inc"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n(((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")))) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"inc"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")))) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"4"),"))) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"dubs")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"8"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"16"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"16"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"21"),"\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85633;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85632;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85631;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85630;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85634 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85635 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85636 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85637 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Let \\(f\\) and \\(g\\) be two one-argument functions. The composition \\(f\\) after \\(g\\) is defined to be the function \\(x\\to f(g(x))\\). Define a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"compose"], null),cljs.core.PersistentVector.EMPTY)," that implements composition. For example, if ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"inc"], null),cljs.core.PersistentVector.EMPTY)," is a procedure that adds 1 to its argument,"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"compose")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"inc"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"6"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"49"),"\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85637;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85636;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85635;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85634;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85638 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85639 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85640 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85641 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"compose")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"g"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"g")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85641;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85640;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85639;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85638;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85642 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85643 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85644 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85645 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If \\(f\\) is a numerical function and \\(n\\) is a positive integer, then we can form the \\(n\\)th repeated application of \\(f\\), which is defined to be the function whose value at \\(x\\) is \\(f(f(",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"(f(x))",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"ellipsis","ellipsis",998505738)], null),cljs.core.PersistentVector.EMPTY),"))\\). For example, if \\(f\\) is the function \\(x\\to x + 1\\), then the \\(n\\)th repeated application of \\(f\\) is the function \\(x\\to x + n\\). If \\(f\\) is the operation of squaring a number, then the \\(n\\)th repeated application of \\(f\\) is the function that raises its argument to the \\(2^n\\)th power. Write a procedure that takes as inputs a procedure that computes \\(f\\) and a positive integer \\(n\\) and returns the procedure that computes the \\(n\\)th repeated application of \\(f\\). Your procedure should be able to be used as follows:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"repeated")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"5"),")\n",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"625"),"\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Hint: You may find it convenient to use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"compose"], null),cljs.core.PersistentVector.EMPTY)," from ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/ex/42/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.42"], null))], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85645;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85644;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85643;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85642;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85646 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85647 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85648 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85649 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"repeated")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"identity"),"\n         ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0"),")\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),"\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"compose")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"accu"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"dec "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"number"),")))))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85649;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85648;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85647;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85646;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85650 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85651 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85652 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85653 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The idea of ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["smoothing"], null))," a function is an important concept in signal processing. If \\(f\\) is a function and \\(dx\\) is some small number, then the smoothed version of \\(f\\) is the function whose value at a point \\(x\\) is the average of \\(f(x - dx)\\), \\(f(x)\\), and \\(f(x + dx)\\). Write a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"smooth"], null),cljs.core.PersistentVector.EMPTY)," that takes as input a procedure that computes \\(f\\) and returns a procedure that computes the smoothed \\(f\\). It is sometimes valuable to repeatedly smooth a function (that is, smooth the smoothed function, and so on) to obtained the ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["n-fold smoothed function"], null)),". Show how to generate the \\(n\\)-fold smoothed function of any given function using ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"smooth"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"repeated"], null),cljs.core.PersistentVector.EMPTY)," from ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/ex/43/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.43"], null)),"."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85653;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85652;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85651;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85650;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85654 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85655 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85656 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85657 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"average-of-3")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"b")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"c"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"3"),"))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"smooth")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"let "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"0.00001"),"]\n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"average-of-3")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"dx"),"))))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n-fold-smooth")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n  ((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"repeated")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"smooth")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85657;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85656;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85655;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85654;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85658 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85659 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85660 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85661 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We saw in ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/sect/3/sub/3/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["section 1.3.3"], null))," that attempting to compute square roots by naively finding a fixed point of \\(y\\to x/y\\) does not converge, and that this can be fixed by average damping. The same method works for finding cube roots as fixed points of the average-damped \\(y\\to x/y^2\\). Unfortunately, the process does not work for fourth roots ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," a single average damp is not enough to make a fixed-point search for \\(y\\to x/y^3\\) converge. On the other hand, if we average damp twice (i.e., use the average damp of the average damp of ((y\\to x/y^3\\)) the fixed-point search does converge. Do some experiments to determine how many average damps are required to compute \\(n\\)th roots as a fixed-point search based upon repeated average damping of \\(y\\to x/y^{n-1}\\). Use this to implement a simple procedure for computing \\(n\\)th roots using fixed-point, average-damp, and the repeated procedure of ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"#!/sicp/ch/1/ex/43/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.43"], null)),". Assume that any arithmetic operations you need are available as primitives (you can see which ones are available at ",tailrecursion.hoplon.markdown.exp_link_node.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"url","url",276297046),"http://www.clojure.org/",new cljs.core.Keyword(null,"title","title",636505583),""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clojure.org"], null)),")."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85661;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85660;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85659;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85658;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85662 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85663 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85664 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85665 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["By trial and error, we can deduce that every time we double the argument (the exponent), the number of dampings increases by one (give or take). That would suggest that the number of dampings needed is \\(\\log_2(n)\\). I will find a proof of this later and put it here for those of you who are interested. In the mean time, here is the procedure (we",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"re using the identity \\(\\log_b(x)=\\log_a(x)\\cdot\\log_b(a)\\))"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"log-base-2")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/log")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/log")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"2"),")))\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"nth-root")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"fixed-point")," ((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"repeated")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"average-damp")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/floor")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"log-base-2")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n"),")))\n                ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"expt")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"n")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1"),"))))\n               ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85665;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85664;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85663;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85662;
}})())),"",book.sicp.book_data.exercise.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85666 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85667 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85668 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85669 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Several of the numerical methods described in this chapter are instances of an extremely general computational strategy known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["iterative improvement"], null)),". Iterative improvement says that, to compute something, we start with an initial guess for the answer, test if the guess is good enough, and otherwise improve the guess and continue the process using the improved guess as the new guess. Write a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"iterative-improve"], null),cljs.core.PersistentVector.EMPTY)," that takes two procedures as arguments: a method for telling whether a guess is good enough and a method for improving a guess. ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Iterative-improve"], null),cljs.core.PersistentVector.EMPTY)," should return as its value a procedure that takes a guess as argument and keeps improving the guess until it is good enough. Rewrite the sqrt procedure of section 1.1.7 and the fixed-point procedure of section 1.3.3 in terms of iterative-improve."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85669;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85668;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85667;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85666;
}})(),"",book.sicp.book_data.q_a.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_85670 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85671 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_85672 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_85673 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"iterative-improve")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"good-enough?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"improve"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"fn "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"initial"),"] \n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"loop "),"[",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"initial"),"]\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"good-enough?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),")\n          ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),"\n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"recur")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"improve")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"guess"),"))))))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sqrt")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"]\n  ((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"iterative-improve")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/abs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tolerance"),")\n                      ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"average")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),"))) \n    ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n"))),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"fixed-point")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f"),"]\n  ((",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"iterative-improve")," \n    ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"#"),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"< "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/abs")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"f")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"%"),")) ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"tolerance"),")\n    ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"f"),")\n   ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #666666"], null),"1.0"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85673;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85672;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_85671;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_85670;
}})()))));
};
var book$sicp$texts$ch1sect3$content = function (var_args){
var args__6627__auto__ = null;
if (arguments.length > 0) {
var G__85674__i = 0, G__85674__a = new Array(arguments.length -  0);
while (G__85674__i < G__85674__a.length) {G__85674__a[G__85674__i] = arguments[G__85674__i + 0]; ++G__85674__i;}
  args__6627__auto__ = new cljs.core.IndexedSeq(G__85674__a,0);
} 
return book$sicp$texts$ch1sect3$content__delegate.call(this,args__6627__auto__);};
book$sicp$texts$ch1sect3$content.cljs$lang$maxFixedArity = 0;
book$sicp$texts$ch1sect3$content.cljs$lang$applyTo = (function (arglist__85675){
var args__6627__auto__ = cljs.core.seq(arglist__85675);
return book$sicp$texts$ch1sect3$content__delegate(args__6627__auto__);
});
book$sicp$texts$ch1sect3$content.cljs$core$IFn$_invoke$arity$variadic = book$sicp$texts$ch1sect3$content__delegate;
return book$sicp$texts$ch1sect3$content;
})()
;

//# sourceMappingURL=ch1sect3.js.map