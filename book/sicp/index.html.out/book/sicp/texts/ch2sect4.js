// Compiled by ClojureScript 1.7.48 {}
goog.provide('book.sicp.texts.ch2sect4');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('book.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
book.sicp.texts.ch2sect4.content = (function() { 
var book$sicp$texts$ch2sect4$content__delegate = function (args__6627__auto__){
var vec__86861 = tailrecursion.hoplon.parse_args.call(null,args__6627__auto__);
var _ = cljs.core.nth.call(null,vec__86861,(0),null);
var ___$1 = cljs.core.nth.call(null,vec__86861,(1),null);
return tailrecursion.hoplon.div.call(null,cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.sect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Multiple Representations for Abstract Data"], null),(function (){var _STAR_references_STAR_86862 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86863 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_86864 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86865 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have introduced data abstraction, a methodology for structuring systems in such a way that much of a program can be specified independent of the choices involved in implementing the data objects that the program manipulates. For example, we saw in section 2.1.1 how to separate the task of designing a program that uses rational numbers from the task of implementing rational numbers in terms of the computer language",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s primitive mechanisms for constructing compound data. The key idea was to erect an abstraction barrier ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," in this case, the selectors and constructors for rational numbers (",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"make-rat"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"numer"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"denom"], null),cljs.core.PersistentVector.EMPTY),") ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," that isolates the way rational numbers are used from their underlying representation in terms of list structure. A similar abstraction barrier isolates the details of the procedures that perform rational arithmetic (",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"add-rat"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sub-rat"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"mul-rat"], null),cljs.core.PersistentVector.EMPTY),", and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"div-rat"], null),cljs.core.PersistentVector.EMPTY),") from the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["higher-level"], null))," procedures that use rational numbers. The resulting program has the structure shown in figure 2.1."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["These data-abstraction barriers are powerful tools for controlling complexity. By isolating the underlying representations of data objects, we can divide the task of designing a large program into smaller tasks that can be performed separately. But this kind of data abstraction is not yet powerful enough, because it may not always make sense to speak of ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the underlying representation"], null))," for a data object."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["For one thing, there might be more than one useful representation for a data object, and we might like to design systems that can deal with multiple representations. To take a simple example, complex numbers may be represented in two almost equivalent ways: in rectangular form (real and imaginary parts) and in polar form (magnitude and angle). Sometimes rectangular form is more appropriate and sometimes polar form is more appropriate. Indeed, it is perfectly plausible to imagine a system in which complex numbers are represented in both ways, and in which the procedures for manipulating complex numbers work with either representation."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["More importantly, programming systems are often designed by many people working over extended periods of time, subject to requirements that change over time. In such an environment, it is simply not possible for everyone to agree in advance on choices of data representation. So in addition to the data-abstraction barriers that isolate representation from use, we need abstraction barriers that isolate different design choices from each other and permit different choices to coexist in a single program. Furthermore, since large programs are often created by combining pre-existing modules that were designed in isolation, we need conventions that permit programmers to incorporate modules into larger systems additively, that is, without having to redesign or reimplement these modules."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this section, we will learn how to cope with data that may be represented in different ways by different parts of a program. This requires constructing ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["generic procedures"], null))," ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," procedures that can operate on data that may be represented in more than one way. Our main technique for building generic procedures will be to work in terms of data objects that have ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["type tags"], null)),", that is, data objects that include explicit information about how they are to be processed. We will also discuss ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data-directed"], null))," programming, a powerful and convenient implementation strategy for additively assembling systems with generic operations."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We begin with the simple complex-number example. We will see how type tags and data-directed style enable us to design separate rectangular and polar representations for complex numbers while maintaining the notion of an abstract ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["complex-number"], null))," data object. We will accomplish this by defining arithmetic procedures for complex numbers (",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"add-complex"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sub-complex"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"mul-complex"], null),cljs.core.PersistentVector.EMPTY),", and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"div-complex"], null),cljs.core.PersistentVector.EMPTY),") in terms of generic selectors that access parts of a complex number independent of how the number is represented. The resulting complex-number system, as shown in figure 2.19, contains two different kinds of abstraction barriers. The ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["horizontal"], null))," abstraction barriers play the same role as the ones in figure 2.1. They isolate ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["higher-level"], null))," operations from ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["lower-level"], null))," representations. In addition, there is a ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["vertical"], null))," barrier that gives us the ability to separately design and install alternative representations."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86865;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86864;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86863;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86862;
}})(),"",book.sicp.book_data.fig.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"footer","footer",1606445390),"Data-abstraction barriers in the complex-number system."], null)),"",(function (){var _STAR_references_STAR_86866 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86867 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_86868 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86869 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In section 2.5 we will show how to use type tags and data-directed style to develope a generic arithmetic package. This provides procedures (",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"add"], null),cljs.core.PersistentVector.EMPTY),",",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"mul"], null),cljs.core.PersistentVector.EMPTY),", and so on) that can be used to manipulate all sorts of ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["numbers"], null))," and can be easily extended when a new kind of number is needed. In section 2.5.3, we",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"ll show how to use generic arithmetic in a system that performs symbolic algebra."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86869;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86868;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86867;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86866;
}})()),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Representations for Complex Numbers"], null),(function (){var _STAR_references_STAR_86870 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86871 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_86872 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86873 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will develope a system that performs arithmetic operations on complex numbers as a simple but unrealistic example of a program that uses generic operations. We begin by discussing two plausible representations for complex numbers as ordered pairs: rectangular form (real part and imaginary part) and polar form (magnitude and angle).",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In actual computational systems, rectangular form is preferable to polar form most of the time because of roundoff errors in conversion between rectangular and polar form. This is why the complex-number example is unrealistic. Nevertheless, it provides a clear illustration of the design of a system using generic operations and a good introduction to the more substantial systems to be developed later in this chapter."], null))," Section 2.4.2 will show how both representations can be made to coexist in a single system through the use of type tags and generic operations."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Like rational numbers, complex numbers are naturally represented as ordered pairs. The set of complex numbers can be thought of as a two-dimensional space with two orthogonal axes, the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["real"], null))," axis and the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["imaginary"], null))," axis. (See figure 2.20.) From this point of view, the complex number \\(z=x+iy\\) (where \\(i^2=-1\\)) can be thought of as the point in the plane whose real coordinate is \\(x\\) and whose imaginary coordinate is \\(y\\). Addition of complex numbers reduces in this representation to addition of coordinates:"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\text{Real-part }(z_1+z_2)=\\text{Real-part }(z_1)+\\text{Real-part }(z_2) \\\\\\text{Imaginary-part }(z_1+z_2) = \\text{Imaginary-part }(z_1)+\\text{Imaginary-part }(z_2)$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When multiplying complex numbers, it is more natural to think in terms of representing a complex number in polar form, as a magnitude and an angle (\\(r\\) and \\(A\\) in figure 2.20). The product of two complex numbers is the vector obtained by stretching one complex number by the length of the other and then rotating it through the angle of the other:"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\text{Magnitude }(z_1\\cdot z_2)= \\text{Magnitude }(z_1)\\cdot\\text{Magnitude }(z_2) \\\\\\text{Angle }(z_1\\cdot z_2)=\\text{Angle }(z_1)+\\text{Angle }(z_2)$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus, there are two different representations for complex numbers, which are appropriate for different operations. Yet, from the viewpoint of someone writing a program that uses complex numbers, the principle of data abstraction suggests that all the operations for manipulating complex numbers should be available regardless of which representation is used by the computer. For example, it is often useful to be able to find the magnitude of a complex number that is specified by rectangular coordinates. Similarly, it is often useful to be able to determine the real part of a complex number that is specified by polar coordinates."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86873;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86872;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86871;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86870;
}})(),"\n",book.sicp.book_data.fig.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"footer","footer",1606445390),"Complex numbers as points in the plane."], null)),"",(function (){var _STAR_references_STAR_86874 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86875 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_86876 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86877 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To design such a system, we can follow the same data-abstraction strategy we followed in designing the rational-number package in section 2.1.1. Assume that the operations on complex numbers are implemented in terms of four selectors: ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"real-part"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"imag-part"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"magnitude"], null),cljs.core.PersistentVector.EMPTY),", and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"angle"], null),cljs.core.PersistentVector.EMPTY),". Also assume that we have two procedures for constructing complex numbers: ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"make-from-real-imag"], null),cljs.core.PersistentVector.EMPTY)," which returns a complex number with the specified real and imaginary parts, and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"make-from-mag-ang"], null),cljs.core.PersistentVector.EMPTY)," which returns a complex number with the specified magnitude and angle. These procedures have the property that, for any complex number \\(z\\), both"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-from-real-imag")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"clj\n(make-from-mag-ang (magnitude z) (angle z))\n"], null),cljs.core.PersistentVector.EMPTY)], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["produce complex numbers that are equal to \\(z\\)."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Using these constructors and selectors, we can implement arithmetic on complex numbers using the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["abstract data"], null))," specified by the constructors and selectors, just as we did for rational numbers in section 2.1.1. As shown in the formulas above, we can add and subtract complex numbers in terms of real and imaginary parts while multiplying and dividing complex numbers in terms of magnitudes and angles:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"add-complex")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-from-real-imag")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))\n                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"sub-complex")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-from-real-imag")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))\n                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"mul-complex")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-from-mag-ang")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))\n                     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"div-complex")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-from-mag-ang")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"/ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))\n                     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"- "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To complete the complex-number package, we must choose a representation and we must implement the constructors and selectors in terms of primitive numbers and primative list structure. There are two obvious ways to do this: We can represent a complex number in ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["rectangular form"], null))," as a pair (real part, imaginary part) or in ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["polar form"], null))," as a pair (magnitude, angle). Which shall we choose?"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In order to make the different choices concrete, imagine that there are two programmers, Ben Bitdiddle and Alyssa P. Hacker, who are independently designing representations for the complex-number system. Ben chooses to represent complex numbers in rectangular form. With this choice, selecting the real and imaginary parts of a complex number is straightforward, as is constructing a complex number with given real and imaginary parts. To find the magnitude and the angle, or to construct a complex number with a given magnitude and angle, he uses the trigonometric relations:"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$\\begin{align*} x=&r\\cos A & r=&\\sqrt{x^2+y^2} \\\\y=&r\\sin A & A=&\\arctan(y,x) \\end{align*}$$"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which relate the real and imaginary parts \\((x,y)\\) to the magnitude and angle \\((r,A)\\).",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double-angle","double-angle",-1539114060)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The arctangent function referred to here, is a combination of the Java arctan function and a conditional that accounts for the quadrants via the signs of the arguments."], null))," Ben",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s representation is therefore given by the following selectors and constructors:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"real-part")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"imag-part")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"magnitude")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sqrt")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"angle")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"arctan")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-real-imag")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-mag-ang")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/cos")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/sin")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If you tried this code (which I hope you did), you may have noticed that our ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"angle"], null),cljs.core.PersistentVector.EMPTY)," procedure doesn",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"t work! The ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"arctan"], null),cljs.core.PersistentVector.EMPTY)," function is not defined. If you define it, remember to account for the quadrants!"], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Alyssa, in contrast, chooses to represent complex numbers in polar form. For her, selecting the magnitude and angle is straightforward, but she has to use the trigonometric relations to obtain the real and imaginary parts. Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s representation is:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"real-part")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") \n     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/cos")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"imag-part")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")\n     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/sin")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"magnitude")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"angle")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-real-imag")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sqrt")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") \n                 (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"arctan")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),")))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-mag-ang")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The discipline of data abstraction ensures that the same implementation of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"add-complex"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sub-complex"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"mul-complex"], null),cljs.core.PersistentVector.EMPTY),", and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"div-complex"], null),cljs.core.PersistentVector.EMPTY)," will work with either Ben",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s representation or Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s representation."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86877;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86876;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86875;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86874;
}})()),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Tagged Data"], null),(function (){var _STAR_references_STAR_86878 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86879 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_86880 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86881 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One way to view data abstraction is as an application of the ",tailrecursion.hoplon.markdown.quoted_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["principal of least commitment."], null))," In implementing the complex-number system in secion 2.4.1, we can use either Ben",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s rectangular representation or Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s polar representation. The abstraction barrier formed by the selectors and constructors permits us to defer to the last possible moment the choice of a concrete representation for our data objects and thus retain maximum flexibility in our system design."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The principle of least commitment can be carried to even further extremes. If we desire, we can maintain the ambiguity of representation even ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["after"], null))," we have designed the selectors and constructors, and elect to use both Ben",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s representation ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and"], null))," Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s representaion. If both representations are included in a single system, however, we will need some way to distinguish data in polar form from data in rectangular form. Otherwise, if we were asked, for instance, to find the ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"magnitude"], null),cljs.core.PersistentVector.EMPTY)," of the pair (3,4), we wouldn",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"t know whether to answer 5 (interpreting the number in rectangular form) or 3 (interpreting the number in polar form). A straightforward way to accomplish this distinction is to include a ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["type tag"], null))," ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," the symbol ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"rectangular"], null),cljs.core.PersistentVector.EMPTY)," or ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"polar"], null),cljs.core.PersistentVector.EMPTY)," ",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"endash","endash",-1084701295)], null),cljs.core.PersistentVector.EMPTY)," as part of each complex number. Then when we need to manipulate a complex number we can use the tag to decide which selector to apply."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In order to manipulate tagged data, we will assume that we have procedures ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"type-tag"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"contents"], null),cljs.core.PersistentVector.EMPTY)," that extract from a data object the tag and the actual contents (the polar or rectangular coordinates, in the case of a complex number). We will also postulate a procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"attach-tag"], null),cljs.core.PersistentVector.EMPTY)," that takes a tag and contents and produces a tagged data object. A straightforward way to implement this is to ordinary list structure:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"attach-tag")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"type-tag")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"contents"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"type-tag")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"contents"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"type-tag")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"datum"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"list?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"datum"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"datum"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Bad tagged dataum -- TYPE-TAG\""),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"contents")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"datum"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"if "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"list?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"datum"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"rest "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"datum"),")\n      (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Bad tagged datum -- CONTENTS\""),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Using these procedures, we can define predicates ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"rectangular?"], null),cljs.core.PersistentVector.EMPTY)," and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"polar?"], null),cljs.core.PersistentVector.EMPTY),", which recognize polar and rectangular numbers, respectively:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"rectangular?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"type-tag")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'rectangular"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"polar?")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"= "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"type-tag")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'polar"),"))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With type tags, Ben and Alyssa can now modify their code so that their two different representations can coexist in the same system. Whenever Ben constructs a complex number, he tags it as rectangular. Whenever Alyssa constructs a complex number, she tags it as polar. In addition, Ben and Alyssa must make sure that the names of their procedures do not conflict. One way to do this is for Ben to append the suffix ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"rectangular"], null),cljs.core.PersistentVector.EMPTY)," to the name of each of his representation procedures and for Alyssa to append ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"polar"], null),cljs.core.PersistentVector.EMPTY)," to the names of hers. Here is Ben",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s revised rectangular representation from section 2.4.1:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"real-part-rectangular")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"imag-part-rectangular")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"] (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"magnitude-rectangular")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sqrt")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")) (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"angle-rectangular")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"arctan")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-real-imag-rectangular")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"attach-tag")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'rectangular")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-mag-ang-rectangular")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"attach-tag")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'rectangular")," \n    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/cos")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),")) \n          (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/sin")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),")))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and here is Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s revised polar representation:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"real-part-polar")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") \n     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/cos")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"imag-part-polar")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"* "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")\n     (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Math/sin")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"magnitude-polar")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"first "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"angle-polar")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"second "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-real-imag-polar")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"attach-tag")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'polar"),"\n              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"sqrt")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),") \n                             (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"square")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),")))\n                    (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"arctan")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x"),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-mag-ang-polar")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"attach-tag")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"'polar"),"\n              (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"list "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),")))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Each generic selector is implemented as a procedure that checks the tag of its argument and calls the appropriate procedure for handling data of that type. For example, to obtain the real part of a complex number, ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"real-part"], null),cljs.core.PersistentVector.EMPTY)," examines the tag to determine whether to use Ben",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"real-part-rectangular"], null),cljs.core.PersistentVector.EMPTY)," or Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"real-part-polar"], null),cljs.core.PersistentVector.EMPTY),". In either case, we use ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"contents"], null),cljs.core.PersistentVector.EMPTY)," to extract the bare, untagged datum and send this to the rectangular or polar procedure as required:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"real-part")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"rectangular?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part-rectangular")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"contents")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"polar?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part-polar"),"       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"contents")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Unknown type -- REAL-PART\""),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"imag-part")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"rectangular?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part-rectangular")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"contents")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"polar?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part-polar"),"       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"contents")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Unknown type -- IMAG-PART\""),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"magnitude")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"rectangular?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude-rectangular")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"contents")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"polar?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"magnitude-polar"),"       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"contents")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Unknown type -- MAGNITUDE\""),"))))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"angle")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"cond "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"rectangular?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle-rectangular")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"contents")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n        (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"polar?")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),")       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"angle-polar"),"       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"contents")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z"),"))\n        ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),":else")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"throw")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"Exception.")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #BA2121"], null),"\"Unknown type -- ANGLE\""),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To implement the complex-number arithmetic operations, we can use the same procedures ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"add-complex"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"sub-complex"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"mul-complex"], null),cljs.core.PersistentVector.EMPTY),", and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"div-complex"], null),cljs.core.PersistentVector.EMPTY)," from section 2.4.1, because the selectors they call are generic, and so will work with either representation. For example, the procedure ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"add-complex"], null),cljs.core.PersistentVector.EMPTY)," is still"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"add-complex")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-from-real-imag")," (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"real-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))\n                       (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000"], null),"+ "),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z1"),") (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"imag-part")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"z2"),"))))\n"))),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Finally, we must choose whether to construct complex numbers using Ben",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s representation or Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s representation. One reasonable choice is to construct rectangular numbers whenever we have real and imaginary parts and to construct polar numbers whenever we have magnitudes and angles:"], null)),tailrecursion.hoplon.div.call(null,tailrecursion.hoplon.div.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"class","class",-2030961996),"highlight",new cljs.core.Keyword(null,"style","style",-496642736),"background: #f8f8f8"], null),tailrecursion.hoplon.pre.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"line-height: 125%"], null),"(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-real-imag")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-from-real-imag-rectangular")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"x")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"y"),"))\n\n(",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #008000; font-weight: bold"], null),"defn "),tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"make-from-mag-ang")," [",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"]\n  (",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #0000FF"], null),"make-from-mag-ang-polar")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"r")," ",tailrecursion.hoplon.span.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"color: #19177C"], null),"a"),"))\n")))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86881;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86880;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86879;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86878;
}})(),"",book.sicp.book_data.fig.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"footer","footer",1606445390),"Structure of the generic complex-arithmetic system."], null)),"",(function (){var _STAR_references_STAR_86882 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86883 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_86884 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86885 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The resulting complex-number system has the structure shown in figure 2.21. The system has been decomposed into three relatively independent parts: the complex-number-arithmetic operations, Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s polar implementation, and Ben",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s rectangular implementation. The polar and rectangular implementations could have been written by Ben and Alyssa working seperately, and both of these can be used as underlying representations by a third programmer implementing the complex-arithmetic procedures in terms of the abstract constructor/selector interface."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since each data object is tagged with its type, the selectors operate on the data in a generic manner. That is, each selector is defined to have a behavior that depends upon the particular type of data it is applied to. Notice the general mechanism for interfacing the separate representations: Within a given representation implementation (say, Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s polar package) a complex number is an untyped pair (magnitude, angle). When a generic selector operates on a number of ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"polar type"], null),cljs.core.PersistentVector.EMPTY),", it strips off the tag and passes the contents on to Alyssa",tailrecursion.hoplon.markdown.simple_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"apostrophe","apostrophe",-1476834636)], null),cljs.core.PersistentVector.EMPTY),"s code. Conversely, when Alyssa constructs a number for general use, she tags it with a type so that it can be appropriately recognized by the higher-level procedures. This discipline of stripping off and attaching tags as data objects are passed from level to level can be an important organizational strategy, as we shall see in section 2.5."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86885;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86884;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86883;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86882;
}})()),"",book.sicp.book_data.subsect.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"title","title",636505583),"Data-Directed Programming and Additivity"], null),(function (){var _STAR_references_STAR_86886 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86887 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,null);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null);

try{var _STAR_references_STAR_86888 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_86889 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY);

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.call(null,tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY);

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general strategy of checking the type of a datum and calling an appropriate procedure is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"chars","chars",-1094630317),"*",new cljs.core.Keyword(null,"closed","closed",-919675359),true,new cljs.core.Keyword(null,"strong","strong",269529000),false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["dispatching on type"], null)),". This is a powerful strategy for obtaining modularity in system design. On the other hand, implementing the dispatch as in section 2.4.2 has two significant weaknesses. One weakness is that the generic interface procedures (",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"real-part"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"imag-part"], null),cljs.core.PersistentVector.EMPTY),", ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"magnitude"], null),cljs.core.PersistentVector.EMPTY),", and ",tailrecursion.hoplon.markdown.code_node.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"angle"], null),cljs.core.PersistentVector.EMPTY),") must know about all the different representations. For instance, suppose we wanted to incorporate a new representation for complex numbers into our complex-number system. We would need to indentify this new representation with a type, and then add a clause to each of the generic interface procedures to check for the new type and apply the appropriate selector for that representation."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Another weakness of the technique is that even though the individual representations can be designed separately, we must guarantee that no two procedures in the entire system have the same name. This is why Ben and Alyssa had to change the names of their original procedures from section 2.4.1."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The issue underlying both of these weaknesses is that the technique for implementing generic interfaces is not additive. The person implementing the generic selector procedures must modify those procedures each time a new representation is installed, and the people interfacing the individual representations must modify their code to avoid name conflicts. In each of these cases, the changes that must be made to the code are straightforward, but they must be made nonetheless, and this is a source of inconvenience and error. This is not much of a problem for the complex-number system as it stands, but suppose there were not two but hundreds of different representations for complex numbers. And suppose that there were many generic selectors to be maintained in the abstract-data interface. Suppose, in fact, that no one programmer knew all the interface procedures or all the representations. The problem is real and must be addressed in such programs as large-scale data-base-management systems."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What we need is a means for modularizing the system design even further. This is provided by the programming technique known as data-directed programming. To understand how data-directed programming works, begin with the observation that whenever we deal with a set of generic operations that are common to a set of different types we are, in effect, dealing with a two-dimensional table that contains the possible operations on one axis and the possible types on the other axis. The entries in the table are the procedures that implement each operation for each type of argument presented. In the complex-number system developed in the previous section, the correspondence between operation name, data type, and actual procedure was spread out among the various conditional clauses in the generic interface procedures. But the same information could have been organized in a table, as shown in figure 2.22."], null)),tailrecursion.hoplon.markdown.para_node.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Data-directed programming is the technique of designing programs to work with such a table directly. Previously, we implemented the mechanism that interfaces the complex-arithmetic code with the two representation packages as a set of procedures that each perform an explicit dispatch on type. Here we will implement the interface as a single procedure that looks up the combination of the operation name and argument type in the table to find the correct procedure to apply, and then applies it to the contents of the argument. If we do this, then to add a new representation package to the system we need not change any existing procedures; we need only add new entries to the table."], null))], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86889;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86888;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_86887;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_86886;
}})()));
};
var book$sicp$texts$ch2sect4$content = function (var_args){
var args__6627__auto__ = null;
if (arguments.length > 0) {
var G__86890__i = 0, G__86890__a = new Array(arguments.length -  0);
while (G__86890__i < G__86890__a.length) {G__86890__a[G__86890__i] = arguments[G__86890__i + 0]; ++G__86890__i;}
  args__6627__auto__ = new cljs.core.IndexedSeq(G__86890__a,0);
} 
return book$sicp$texts$ch2sect4$content__delegate.call(this,args__6627__auto__);};
book$sicp$texts$ch2sect4$content.cljs$lang$maxFixedArity = 0;
book$sicp$texts$ch2sect4$content.cljs$lang$applyTo = (function (arglist__86891){
var args__6627__auto__ = cljs.core.seq(arglist__86891);
return book$sicp$texts$ch2sect4$content__delegate(args__6627__auto__);
});
book$sicp$texts$ch2sect4$content.cljs$core$IFn$_invoke$arity$variadic = book$sicp$texts$ch2sect4$content__delegate;
return book$sicp$texts$ch2sect4$content;
})()
;

//# sourceMappingURL=ch2sect4.js.map