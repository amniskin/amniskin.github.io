// Compiled by ClojureScript 1.7.48 {:static-fns true, :optimize-constants true}
goog.provide('book.sicp.texts.ch1sect1');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('book.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
book.sicp.texts.ch1sect1.content = (function() { 
var book$sicp$texts$ch1sect1$content__delegate = function (args__8262__auto__){
var vec__258412 = tailrecursion.hoplon.parse_args(args__8262__auto__);
var attr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__258412,(0),null);
var kids = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__258412,(1),null);
var G__258413 = cljs.core.PersistentArrayMap.EMPTY;
var G__258414 = book.sicp.book_data.sect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Elements of Programming"], null),(function (){var _STAR_references_STAR_258440 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258441 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_258442 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258443 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258444 = cljs.core.PersistentArrayMap.EMPTY;
var G__258445 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes. Thus, when we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three mechanisms for accomplishing this:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258444,G__258445) : tailrecursion.hoplon.markdown.para_node.call(null,G__258444,G__258445));
})(),(function (){var G__258446 = cljs.core.PersistentArrayMap.EMPTY;
var G__258447 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258448 = cljs.core.PersistentArrayMap.EMPTY;
var G__258449 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258450 = cljs.core.PersistentArrayMap.EMPTY;
var G__258451 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["primitive expressions"], null)], 0)),", which represent the simplest entities the language is concerned with,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258450,G__258451) : tailrecursion.hoplon.markdown.para_node.call(null,G__258450,G__258451));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__258448,G__258449) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__258448,G__258449));
})(),(function (){var G__258452 = cljs.core.PersistentArrayMap.EMPTY;
var G__258453 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_258454 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258455 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258456 = cljs.core.PersistentArrayMap.EMPTY;
var G__258457 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of combination"], null)], 0)),", by which compound elements are built from simpler ones, and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258456,G__258457) : tailrecursion.hoplon.markdown.para_node.call(null,G__258456,G__258457));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258455;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258454;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__258452,G__258453) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__258452,G__258453));
})(),(function (){var G__258458 = cljs.core.PersistentArrayMap.EMPTY;
var G__258459 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_258460 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258461 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258462 = cljs.core.PersistentArrayMap.EMPTY;
var G__258463 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of abstraction"], null)], 0)),", by which compound elements can be named and manipulated as units."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258462,G__258463) : tailrecursion.hoplon.markdown.para_node.call(null,G__258462,G__258463));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258461;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258460;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__258458,G__258459) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__258458,G__258459));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__258446,G__258447) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__258446,G__258447));
})(),(function (){var G__258464 = cljs.core.PersistentArrayMap.EMPTY;
var G__258465 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In programming, we deal with two kinds of elements: procedures and data. (Later we will discover that they are really not so distinct.) Informally, data is ``stuff",(function (){var G__258466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__258467 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__258466,G__258467) : tailrecursion.hoplon.markdown.simple_node.call(null,G__258466,G__258467));
})(),(function (){var G__258468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__258469 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__258468,G__258469) : tailrecursion.hoplon.markdown.simple_node.call(null,G__258468,G__258469));
})()," that we want to manipulate, and procedures are descriptions of the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive procedures and should have methods for combining and abstracting procedures and data."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258464,G__258465) : tailrecursion.hoplon.markdown.para_node.call(null,G__258464,G__258465));
})(),(function (){var G__258470 = cljs.core.PersistentArrayMap.EMPTY;
var G__258471 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this chapter we will deal only with simple numerical data so that we can focus on the rules for building procedures.",(function (){var G__258472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__258473 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The characterization of numbers as ",(function (){var G__258474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__258475 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["simple data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258474,G__258475) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258474,G__258475));
})()," is a barefaced bluff. In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language. Some typical issues involved are these: Some computer systems distinguish ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["integers"], null)], 0)),", such as 2, from ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["real numbers"], null)], 0)),", such as 2.71. Is the real number 2.00 different from the integer 2? Are the arithmetic operations used for integers the same as the operations used for real numbers? Does 6 divided by 2 produce 3, or 3.0? How large a number can we represent? How many decimal places of accuracy can we represent? Is the range of integers the same as the range of real numbers? Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors ",(function (){var G__258476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__258477 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__258476,G__258477) : tailrecursion.hoplon.markdown.simple_node.call(null,G__258476,G__258477));
})()," the entire science of numerical analysis. Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems. The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258472,G__258473) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258472,G__258473));
})()," In later chapters we will see that these same rules allow us to build procedures to manipulate compound data as well."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258470,G__258471) : tailrecursion.hoplon.markdown.para_node.call(null,G__258470,G__258471));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258443;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258442;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258441;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258440;
}})()], 0));
var G__258415 = "";
var G__258416 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Expressions"], null),(function (){var _STAR_references_STAR_258478 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258479 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_258480 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258481 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 24, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258482 = cljs.core.PersistentArrayMap.EMPTY;
var G__258483 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One easy way to get started at programming is to examine some typical interactions with an interpreter for the Scheme dialect of Lisp. Imagine that you are sitting at a computer terminal. You type an ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["expression"], null)], 0)),", and the interpreter responds by displaying the result of its evaluating that expression."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258482,G__258483) : tailrecursion.hoplon.markdown.para_node.call(null,G__258482,G__258483));
})(),(function (){var G__258484 = cljs.core.PersistentArrayMap.EMPTY;
var G__258485 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One kind of primitive expression you might type is a number. (More precisely, the expression that you type consists of the numerals that represent the number in base 10.) If you present Lisp with a number"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258484,G__258485) : tailrecursion.hoplon.markdown.para_node.call(null,G__258484,G__258485));
})(),(function (){var G__258486 = cljs.core.PersistentArrayMap.EMPTY;
var G__258487 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258486,G__258487) : tailrecursion.hoplon.markdown.para_node.call(null,G__258486,G__258487));
})(),(function (){var G__258488 = cljs.core.PersistentArrayMap.EMPTY;
var G__258489 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the interpreter will respond by printing",(function (){var G__258490 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__258491 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, when we wish to emphasize the distinction between the input typed by the user and the response printed by the interpreter, we will show the latter in slanted characters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258490,G__258491) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258490,G__258491));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258488,G__258489) : tailrecursion.hoplon.markdown.para_node.call(null,G__258488,G__258489));
})(),(function (){var G__258492 = cljs.core.PersistentArrayMap.EMPTY;
var G__258493 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258492,G__258493) : tailrecursion.hoplon.markdown.para_node.call(null,G__258492,G__258493));
})(),(function (){var G__258494 = cljs.core.PersistentArrayMap.EMPTY;
var G__258495 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions representing numbers may be combined with an expression representing a primitive procedure (such as + or ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,false,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [") to form a compound expression that represents the application of the procedure to those numbers. For example:"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258494,G__258495) : tailrecursion.hoplon.markdown.para_node.call(null,G__258494,G__258495));
})(),(function (){var G__258515 = (function (){var G__258516 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258517 = (function (){var G__258518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258519 = "(";
var G__258520 = (function (){var G__258527 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258528 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258527,G__258528) : tailrecursion.hoplon.span.call(null,G__258527,G__258528));
})();
var G__258521 = (function (){var G__258529 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258530 = "137";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258529,G__258530) : tailrecursion.hoplon.span.call(null,G__258529,G__258530));
})();
var G__258522 = " ";
var G__258523 = (function (){var G__258531 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258532 = "349";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258531,G__258532) : tailrecursion.hoplon.span.call(null,G__258531,G__258532));
})();
var G__258524 = ")\n";
var G__258525 = (function (){var G__258533 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258534 = "486";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258533,G__258534) : tailrecursion.hoplon.span.call(null,G__258533,G__258534));
})();
var G__258526 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258518,G__258519,G__258520,G__258521,G__258522,G__258523,G__258524,G__258525,G__258526) : tailrecursion.hoplon.pre.call(null,G__258518,G__258519,G__258520,G__258521,G__258522,G__258523,G__258524,G__258525,G__258526));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258516,G__258517) : tailrecursion.hoplon.div.call(null,G__258516,G__258517));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258515) : tailrecursion.hoplon.div.call(null,G__258515));
})(),(function (){var G__258554 = (function (){var G__258555 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258556 = (function (){var G__258557 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258558 = "(";
var G__258559 = (function (){var G__258566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258567 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258566,G__258567) : tailrecursion.hoplon.span.call(null,G__258566,G__258567));
})();
var G__258560 = (function (){var G__258568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258569 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258568,G__258569) : tailrecursion.hoplon.span.call(null,G__258568,G__258569));
})();
var G__258561 = " ";
var G__258562 = (function (){var G__258570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258571 = "334";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258570,G__258571) : tailrecursion.hoplon.span.call(null,G__258570,G__258571));
})();
var G__258563 = ")\n";
var G__258564 = (function (){var G__258572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258573 = "666";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258572,G__258573) : tailrecursion.hoplon.span.call(null,G__258572,G__258573));
})();
var G__258565 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258557,G__258558,G__258559,G__258560,G__258561,G__258562,G__258563,G__258564,G__258565) : tailrecursion.hoplon.pre.call(null,G__258557,G__258558,G__258559,G__258560,G__258561,G__258562,G__258563,G__258564,G__258565));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258555,G__258556) : tailrecursion.hoplon.div.call(null,G__258555,G__258556));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258554) : tailrecursion.hoplon.div.call(null,G__258554));
})(),(function (){var G__258593 = (function (){var G__258594 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258595 = (function (){var G__258596 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258597 = "(";
var G__258598 = (function (){var G__258605 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258606 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258605,G__258606) : tailrecursion.hoplon.span.call(null,G__258605,G__258606));
})();
var G__258599 = (function (){var G__258607 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258608 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258607,G__258608) : tailrecursion.hoplon.span.call(null,G__258607,G__258608));
})();
var G__258600 = " ";
var G__258601 = (function (){var G__258609 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258610 = "99";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258609,G__258610) : tailrecursion.hoplon.span.call(null,G__258609,G__258610));
})();
var G__258602 = ")\n";
var G__258603 = (function (){var G__258611 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258612 = "495";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258611,G__258612) : tailrecursion.hoplon.span.call(null,G__258611,G__258612));
})();
var G__258604 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258596,G__258597,G__258598,G__258599,G__258600,G__258601,G__258602,G__258603,G__258604) : tailrecursion.hoplon.pre.call(null,G__258596,G__258597,G__258598,G__258599,G__258600,G__258601,G__258602,G__258603,G__258604));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258594,G__258595) : tailrecursion.hoplon.div.call(null,G__258594,G__258595));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258593) : tailrecursion.hoplon.div.call(null,G__258593));
})(),(function (){var G__258632 = (function (){var G__258633 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258634 = (function (){var G__258635 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258636 = "(";
var G__258637 = (function (){var G__258644 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258645 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258644,G__258645) : tailrecursion.hoplon.span.call(null,G__258644,G__258645));
})();
var G__258638 = (function (){var G__258646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258647 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258646,G__258647) : tailrecursion.hoplon.span.call(null,G__258646,G__258647));
})();
var G__258639 = " ";
var G__258640 = (function (){var G__258648 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258649 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258648,G__258649) : tailrecursion.hoplon.span.call(null,G__258648,G__258649));
})();
var G__258641 = ")\n";
var G__258642 = (function (){var G__258650 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258651 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258650,G__258651) : tailrecursion.hoplon.span.call(null,G__258650,G__258651));
})();
var G__258643 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258635,G__258636,G__258637,G__258638,G__258639,G__258640,G__258641,G__258642,G__258643) : tailrecursion.hoplon.pre.call(null,G__258635,G__258636,G__258637,G__258638,G__258639,G__258640,G__258641,G__258642,G__258643));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258633,G__258634) : tailrecursion.hoplon.div.call(null,G__258633,G__258634));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258632) : tailrecursion.hoplon.div.call(null,G__258632));
})(),(function (){var G__258671 = (function (){var G__258672 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258673 = (function (){var G__258674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258675 = "(";
var G__258676 = (function (){var G__258683 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258684 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258683,G__258684) : tailrecursion.hoplon.span.call(null,G__258683,G__258684));
})();
var G__258677 = (function (){var G__258685 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258686 = "2.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258685,G__258686) : tailrecursion.hoplon.span.call(null,G__258685,G__258686));
})();
var G__258678 = " ";
var G__258679 = (function (){var G__258687 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258688 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258687,G__258688) : tailrecursion.hoplon.span.call(null,G__258687,G__258688));
})();
var G__258680 = ")\n";
var G__258681 = (function (){var G__258689 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258690 = "12.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258689,G__258690) : tailrecursion.hoplon.span.call(null,G__258689,G__258690));
})();
var G__258682 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258674,G__258675,G__258676,G__258677,G__258678,G__258679,G__258680,G__258681,G__258682) : tailrecursion.hoplon.pre.call(null,G__258674,G__258675,G__258676,G__258677,G__258678,G__258679,G__258680,G__258681,G__258682));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258672,G__258673) : tailrecursion.hoplon.div.call(null,G__258672,G__258673));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258671) : tailrecursion.hoplon.div.call(null,G__258671));
})(),(function (){var G__258691 = cljs.core.PersistentArrayMap.EMPTY;
var G__258692 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions such as these, formed by delimiting a list of expressions within parentheses in order to denote procedure application, are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["combinations"], null)], 0)),". The leftmost element in the list is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operator"], null)], 0)),", and the other elements are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operands"], null)], 0)),". The value of a combination is obtained by applying the procedure specified by the operator to the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["arguments"], null)], 0))," that are the values of the operands."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258691,G__258692) : tailrecursion.hoplon.markdown.para_node.call(null,G__258691,G__258692));
})(),(function (){var G__258693 = cljs.core.PersistentArrayMap.EMPTY;
var G__258694 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The convention of placing the operator to the left of the operands is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["prefix notation"], null)], 0)),", and it may be somewhat confusing at first because it departs significantly from the customary mathematical convention. Prefix notation has several advantages, however. One of them is that it can accommodate procedures that may take an arbitrary number of arguments, as in the following examples:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258693,G__258694) : tailrecursion.hoplon.markdown.para_node.call(null,G__258693,G__258694));
})(),(function (){var G__258722 = (function (){var G__258723 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258724 = (function (){var G__258725 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258726 = "(";
var G__258727 = (function (){var G__258738 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258739 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258738,G__258739) : tailrecursion.hoplon.span.call(null,G__258738,G__258739));
})();
var G__258728 = (function (){var G__258740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258741 = "21";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258740,G__258741) : tailrecursion.hoplon.span.call(null,G__258740,G__258741));
})();
var G__258729 = " ";
var G__258730 = (function (){var G__258742 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258743 = "35";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258742,G__258743) : tailrecursion.hoplon.span.call(null,G__258742,G__258743));
})();
var G__258731 = " ";
var G__258732 = (function (){var G__258744 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258745 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258744,G__258745) : tailrecursion.hoplon.span.call(null,G__258744,G__258745));
})();
var G__258733 = " ";
var G__258734 = (function (){var G__258746 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258747 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258746,G__258747) : tailrecursion.hoplon.span.call(null,G__258746,G__258747));
})();
var G__258735 = ")\n";
var G__258736 = (function (){var G__258748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258749 = "75";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258748,G__258749) : tailrecursion.hoplon.span.call(null,G__258748,G__258749));
})();
var G__258737 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__258725,G__258726,G__258727,G__258728,G__258729,G__258730,G__258731,G__258732,G__258733,G__258734,G__258735,G__258736,G__258737) : tailrecursion.hoplon.pre.call(null,G__258725,G__258726,G__258727,G__258728,G__258729,G__258730,G__258731,G__258732,G__258733,G__258734,G__258735,G__258736,G__258737));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258723,G__258724) : tailrecursion.hoplon.div.call(null,G__258723,G__258724));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258722) : tailrecursion.hoplon.div.call(null,G__258722));
})(),(function (){var G__258773 = (function (){var G__258774 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258775 = (function (){var G__258776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258777 = "(";
var G__258778 = (function (){var G__258787 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258788 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258787,G__258788) : tailrecursion.hoplon.span.call(null,G__258787,G__258788));
})();
var G__258779 = (function (){var G__258789 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258790 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258789,G__258790) : tailrecursion.hoplon.span.call(null,G__258789,G__258790));
})();
var G__258780 = " ";
var G__258781 = (function (){var G__258791 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258792 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258791,G__258792) : tailrecursion.hoplon.span.call(null,G__258791,G__258792));
})();
var G__258782 = " ";
var G__258783 = (function (){var G__258793 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258794 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258793,G__258794) : tailrecursion.hoplon.span.call(null,G__258793,G__258794));
})();
var G__258784 = ")\n";
var G__258785 = (function (){var G__258795 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258796 = "1200";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258795,G__258796) : tailrecursion.hoplon.span.call(null,G__258795,G__258796));
})();
var G__258786 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__258776,G__258777,G__258778,G__258779,G__258780,G__258781,G__258782,G__258783,G__258784,G__258785,G__258786) : tailrecursion.hoplon.pre.call(null,G__258776,G__258777,G__258778,G__258779,G__258780,G__258781,G__258782,G__258783,G__258784,G__258785,G__258786));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258774,G__258775) : tailrecursion.hoplon.div.call(null,G__258774,G__258775));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258773) : tailrecursion.hoplon.div.call(null,G__258773));
})(),(function (){var G__258797 = cljs.core.PersistentArrayMap.EMPTY;
var G__258798 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["No ambiguity can arise, because the operator is always the leftmost element and the entire combination is delimited by the parentheses."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258797,G__258798) : tailrecursion.hoplon.markdown.para_node.call(null,G__258797,G__258798));
})(),(function (){var G__258799 = cljs.core.PersistentArrayMap.EMPTY;
var G__258800 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A second advantage of prefix notation is that it extends in a straightforward way to allow combinations to be ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["nested"], null)], 0)),", that is, to have combinations whose elements are themselves combinations:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258799,G__258800) : tailrecursion.hoplon.markdown.para_node.call(null,G__258799,G__258800));
})(),(function (){var G__258835 = (function (){var G__258836 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258837 = (function (){var G__258838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258839 = "(";
var G__258840 = (function (){var G__258854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258855 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258854,G__258855) : tailrecursion.hoplon.span.call(null,G__258854,G__258855));
})();
var G__258841 = "(";
var G__258842 = (function (){var G__258856 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258857 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258856,G__258857) : tailrecursion.hoplon.span.call(null,G__258856,G__258857));
})();
var G__258843 = (function (){var G__258858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258859 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258858,G__258859) : tailrecursion.hoplon.span.call(null,G__258858,G__258859));
})();
var G__258844 = " ";
var G__258845 = (function (){var G__258860 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258861 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258860,G__258861) : tailrecursion.hoplon.span.call(null,G__258860,G__258861));
})();
var G__258846 = ") (";
var G__258847 = (function (){var G__258862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258863 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258862,G__258863) : tailrecursion.hoplon.span.call(null,G__258862,G__258863));
})();
var G__258848 = (function (){var G__258864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258865 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258864,G__258865) : tailrecursion.hoplon.span.call(null,G__258864,G__258865));
})();
var G__258849 = " ";
var G__258850 = (function (){var G__258866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258867 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258866,G__258867) : tailrecursion.hoplon.span.call(null,G__258866,G__258867));
})();
var G__258851 = "))\n";
var G__258852 = (function (){var G__258868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258869 = "19";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258868,G__258869) : tailrecursion.hoplon.span.call(null,G__258868,G__258869));
})();
var G__258853 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__258838,G__258839,G__258840,G__258841,G__258842,G__258843,G__258844,G__258845,G__258846,G__258847,G__258848,G__258849,G__258850,G__258851,G__258852,G__258853) : tailrecursion.hoplon.pre.call(null,G__258838,G__258839,G__258840,G__258841,G__258842,G__258843,G__258844,G__258845,G__258846,G__258847,G__258848,G__258849,G__258850,G__258851,G__258852,G__258853));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258836,G__258837) : tailrecursion.hoplon.div.call(null,G__258836,G__258837));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258835) : tailrecursion.hoplon.div.call(null,G__258835));
})(),(function (){var G__258870 = cljs.core.PersistentArrayMap.EMPTY;
var G__258871 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the Lisp interpreter can evaluate. It is we humans who get confused by still relatively simple expressions such as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258870,G__258871) : tailrecursion.hoplon.markdown.para_node.call(null,G__258870,G__258871));
})(),(function (){var G__258932 = (function (){var G__258933 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258934 = (function (){var G__258935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258936 = "(";
var G__258937 = (function (){var G__258963 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258964 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258963,G__258964) : tailrecursion.hoplon.span.call(null,G__258963,G__258964));
})();
var G__258938 = "(";
var G__258939 = (function (){var G__258965 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258966 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258965,G__258966) : tailrecursion.hoplon.span.call(null,G__258965,G__258966));
})();
var G__258940 = (function (){var G__258967 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258968 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258967,G__258968) : tailrecursion.hoplon.span.call(null,G__258967,G__258968));
})();
var G__258941 = " (";
var G__258942 = (function (){var G__258969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258970 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258969,G__258970) : tailrecursion.hoplon.span.call(null,G__258969,G__258970));
})();
var G__258943 = "(";
var G__258944 = (function (){var G__258971 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258972 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258971,G__258972) : tailrecursion.hoplon.span.call(null,G__258971,G__258972));
})();
var G__258945 = (function (){var G__258973 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258974 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258973,G__258974) : tailrecursion.hoplon.span.call(null,G__258973,G__258974));
})();
var G__258946 = " ";
var G__258947 = (function (){var G__258975 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258976 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258975,G__258976) : tailrecursion.hoplon.span.call(null,G__258975,G__258976));
})();
var G__258948 = ") (";
var G__258949 = (function (){var G__258977 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258978 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258977,G__258978) : tailrecursion.hoplon.span.call(null,G__258977,G__258978));
})();
var G__258950 = (function (){var G__258979 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258980 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258979,G__258980) : tailrecursion.hoplon.span.call(null,G__258979,G__258980));
})();
var G__258951 = " ";
var G__258952 = (function (){var G__258981 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258982 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258981,G__258982) : tailrecursion.hoplon.span.call(null,G__258981,G__258982));
})();
var G__258953 = "))) (";
var G__258954 = (function (){var G__258983 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258984 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258983,G__258984) : tailrecursion.hoplon.span.call(null,G__258983,G__258984));
})();
var G__258955 = "(";
var G__258956 = (function (){var G__258985 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258986 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258985,G__258986) : tailrecursion.hoplon.span.call(null,G__258985,G__258986));
})();
var G__258957 = (function (){var G__258987 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258988 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258987,G__258988) : tailrecursion.hoplon.span.call(null,G__258987,G__258988));
})();
var G__258958 = " ";
var G__258959 = (function (){var G__258989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258990 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258989,G__258990) : tailrecursion.hoplon.span.call(null,G__258989,G__258990));
})();
var G__258960 = ") ";
var G__258961 = (function (){var G__258991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258992 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258991,G__258992) : tailrecursion.hoplon.span.call(null,G__258991,G__258992));
})();
var G__258962 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__258935,G__258936,G__258937,G__258938,G__258939,G__258940,G__258941,G__258942,G__258943,G__258944,G__258945,G__258946,G__258947,G__258948,G__258949,G__258950,G__258951,G__258952,G__258953,G__258954,G__258955,G__258956,G__258957,G__258958,G__258959,G__258960,G__258961,G__258962) : tailrecursion.hoplon.pre.call(null,G__258935,G__258936,G__258937,G__258938,G__258939,G__258940,G__258941,G__258942,G__258943,G__258944,G__258945,G__258946,G__258947,G__258948,G__258949,G__258950,G__258951,G__258952,G__258953,G__258954,G__258955,G__258956,G__258957,G__258958,G__258959,G__258960,G__258961,G__258962));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258933,G__258934) : tailrecursion.hoplon.div.call(null,G__258933,G__258934));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258932) : tailrecursion.hoplon.div.call(null,G__258932));
})(),(function (){var G__258993 = cljs.core.PersistentArrayMap.EMPTY;
var G__258994 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which the interpreter would readily evaluate to be 57. We can help ourselves by writing such an expression in the form"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258993,G__258994) : tailrecursion.hoplon.markdown.para_node.call(null,G__258993,G__258994));
})(),(function (){var G__259055 = (function (){var G__259056 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259057 = (function (){var G__259058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259059 = "(";
var G__259060 = (function (){var G__259086 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259087 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259086,G__259087) : tailrecursion.hoplon.span.call(null,G__259086,G__259087));
})();
var G__259061 = "(";
var G__259062 = (function (){var G__259088 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259089 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259088,G__259089) : tailrecursion.hoplon.span.call(null,G__259088,G__259089));
})();
var G__259063 = (function (){var G__259090 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259091 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259090,G__259091) : tailrecursion.hoplon.span.call(null,G__259090,G__259091));
})();
var G__259064 = "\n      (";
var G__259065 = (function (){var G__259092 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259093 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259092,G__259093) : tailrecursion.hoplon.span.call(null,G__259092,G__259093));
})();
var G__259066 = "(";
var G__259067 = (function (){var G__259094 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259095 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259094,G__259095) : tailrecursion.hoplon.span.call(null,G__259094,G__259095));
})();
var G__259068 = (function (){var G__259096 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259097 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259096,G__259097) : tailrecursion.hoplon.span.call(null,G__259096,G__259097));
})();
var G__259069 = " ";
var G__259070 = (function (){var G__259098 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259099 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259098,G__259099) : tailrecursion.hoplon.span.call(null,G__259098,G__259099));
})();
var G__259071 = ")\n         (";
var G__259072 = (function (){var G__259100 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259101 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259100,G__259101) : tailrecursion.hoplon.span.call(null,G__259100,G__259101));
})();
var G__259073 = (function (){var G__259102 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259103 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259102,G__259103) : tailrecursion.hoplon.span.call(null,G__259102,G__259103));
})();
var G__259074 = " ";
var G__259075 = (function (){var G__259104 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259105 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259104,G__259105) : tailrecursion.hoplon.span.call(null,G__259104,G__259105));
})();
var G__259076 = ")))\n   (";
var G__259077 = (function (){var G__259106 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259107 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259106,G__259107) : tailrecursion.hoplon.span.call(null,G__259106,G__259107));
})();
var G__259078 = "(";
var G__259079 = (function (){var G__259108 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259109 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259108,G__259109) : tailrecursion.hoplon.span.call(null,G__259108,G__259109));
})();
var G__259080 = (function (){var G__259110 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259111 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259110,G__259111) : tailrecursion.hoplon.span.call(null,G__259110,G__259111));
})();
var G__259081 = " ";
var G__259082 = (function (){var G__259112 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259113 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259112,G__259113) : tailrecursion.hoplon.span.call(null,G__259112,G__259113));
})();
var G__259083 = ")\n      ";
var G__259084 = (function (){var G__259114 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259115 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259114,G__259115) : tailrecursion.hoplon.span.call(null,G__259114,G__259115));
})();
var G__259085 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__259058,G__259059,G__259060,G__259061,G__259062,G__259063,G__259064,G__259065,G__259066,G__259067,G__259068,G__259069,G__259070,G__259071,G__259072,G__259073,G__259074,G__259075,G__259076,G__259077,G__259078,G__259079,G__259080,G__259081,G__259082,G__259083,G__259084,G__259085) : tailrecursion.hoplon.pre.call(null,G__259058,G__259059,G__259060,G__259061,G__259062,G__259063,G__259064,G__259065,G__259066,G__259067,G__259068,G__259069,G__259070,G__259071,G__259072,G__259073,G__259074,G__259075,G__259076,G__259077,G__259078,G__259079,G__259080,G__259081,G__259082,G__259083,G__259084,G__259085));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259056,G__259057) : tailrecursion.hoplon.div.call(null,G__259056,G__259057));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259055) : tailrecursion.hoplon.div.call(null,G__259055));
})(),(function (){var G__259116 = cljs.core.PersistentArrayMap.EMPTY;
var G__259117 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["following a formatting convention known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["pretty-printing"], null)], 0)),", in which each long combination is written so that the operands are aligned vertically. The resulting indentations display clearly the structure of the expression.",(function (){var G__259118 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259119 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp systems typically provide features to aid the user in formatting expressions. Two especially useful features are one that automatically indents to the proper pretty-print position whenever a new line is started and one that highlights the matching left parenthesis whenever a right parenthesis is typed."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259118,G__259119) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259118,G__259119));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259116,G__259117) : tailrecursion.hoplon.markdown.para_node.call(null,G__259116,G__259117));
})(),(function (){var G__259120 = cljs.core.PersistentArrayMap.EMPTY;
var G__259121 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even with complex expressions, the interpreter always operates in the same basic cycle: It reads an expression from the terminal, evaluates the expression, and prints the result. This mode of operation is often expressed by saying that the interpreter runs in a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["read-eval-print loop"], null)], 0)),". Observe in particular that it is not necessary to explicitly instruct the interpreter to print the value of the expression.",(function (){var G__259122 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259123 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp obeys the convention that every expression has a value. This convention, together with the old reputation of Lisp as an inefficient language, is the source of the quip by Alan Perlis (paraphrasing Oscar Wilde) that ",(function (){var G__259124 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259125 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp programmers know the value of everything but the cost of nothing."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259124,G__259125) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259124,G__259125));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259122,G__259123) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259122,G__259123));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259120,G__259121) : tailrecursion.hoplon.markdown.para_node.call(null,G__259120,G__259121));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258481;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258480;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258479;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258478;
}})()], 0));
var G__258417 = "";
var G__258418 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Naming and the Environment"], null),(function (){var _STAR_references_STAR_259126 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259127 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_259128 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259129 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259130 = cljs.core.PersistentArrayMap.EMPTY;
var G__259131 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A critical aspect of a programming language is the means it provides for using names to refer to computational objects. We say that the name identifies a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["variable"], null)], 0))," whose ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["value"], null)], 0))," is the object."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259130,G__259131) : tailrecursion.hoplon.markdown.para_node.call(null,G__259130,G__259131));
})(),(function (){var G__259132 = cljs.core.PersistentArrayMap.EMPTY;
var G__259133 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In the Scheme dialect of Lisp, we name things with ",(function (){var G__259134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__259135 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259134,G__259135) : tailrecursion.hoplon.markdown.code_node.call(null,G__259134,G__259135));
})(),". Typing"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259132,G__259133) : tailrecursion.hoplon.markdown.para_node.call(null,G__259132,G__259133));
})(),(function (){var G__259151 = (function (){var G__259152 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259153 = (function (){var G__259154 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259155 = "(";
var G__259156 = (function (){var G__259161 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259162 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259161,G__259162) : tailrecursion.hoplon.span.call(null,G__259161,G__259162));
})();
var G__259157 = (function (){var G__259163 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259164 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259163,G__259164) : tailrecursion.hoplon.span.call(null,G__259163,G__259164));
})();
var G__259158 = " ";
var G__259159 = (function (){var G__259165 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259166 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259165,G__259166) : tailrecursion.hoplon.span.call(null,G__259165,G__259166));
})();
var G__259160 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__259154,G__259155,G__259156,G__259157,G__259158,G__259159,G__259160) : tailrecursion.hoplon.pre.call(null,G__259154,G__259155,G__259156,G__259157,G__259158,G__259159,G__259160));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259152,G__259153) : tailrecursion.hoplon.div.call(null,G__259152,G__259153));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259151) : tailrecursion.hoplon.div.call(null,G__259151));
})(),(function (){var G__259167 = cljs.core.PersistentArrayMap.EMPTY;
var G__259168 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["causes the interpreter to associate the value 2 with the name size.",(function (){var G__259169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259170 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this book, we do not show the interpreter",(function (){var G__259171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259172 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259171,G__259172) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259171,G__259172));
})(),"s response to evaluating definitions, since this is highly implementation-dependent."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259169,G__259170) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259169,G__259170));
})()," In Clojure we would use ",(function (){var G__259173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__259174 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259173,G__259174) : tailrecursion.hoplon.markdown.code_node.call(null,G__259173,G__259174));
})()," to accomplish the same goal. i.e."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259167,G__259168) : tailrecursion.hoplon.markdown.para_node.call(null,G__259167,G__259168));
})(),(function (){var G__259190 = (function (){var G__259191 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259192 = (function (){var G__259193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259194 = "(";
var G__259195 = (function (){var G__259200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259201 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259200,G__259201) : tailrecursion.hoplon.span.call(null,G__259200,G__259201));
})();
var G__259196 = (function (){var G__259202 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259203 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259202,G__259203) : tailrecursion.hoplon.span.call(null,G__259202,G__259203));
})();
var G__259197 = " ";
var G__259198 = (function (){var G__259204 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259205 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259204,G__259205) : tailrecursion.hoplon.span.call(null,G__259204,G__259205));
})();
var G__259199 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__259193,G__259194,G__259195,G__259196,G__259197,G__259198,G__259199) : tailrecursion.hoplon.pre.call(null,G__259193,G__259194,G__259195,G__259196,G__259197,G__259198,G__259199));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259191,G__259192) : tailrecursion.hoplon.div.call(null,G__259191,G__259192));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259190) : tailrecursion.hoplon.div.call(null,G__259190));
})(),(function (){var G__259206 = cljs.core.PersistentArrayMap.EMPTY;
var G__259207 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and the interpreter will now associate the value 2 with the name size. Once the name size has been associated with the number 2, we can refer to the value 2 by name:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259206,G__259207) : tailrecursion.hoplon.markdown.para_node.call(null,G__259206,G__259207));
})(),(function (){var G__259219 = (function (){var G__259220 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259221 = (function (){var G__259222 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259223 = (function (){var G__259227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259228 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259227,G__259228) : tailrecursion.hoplon.span.call(null,G__259227,G__259228));
})();
var G__259224 = "\n";
var G__259225 = (function (){var G__259229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259230 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259229,G__259230) : tailrecursion.hoplon.span.call(null,G__259229,G__259230));
})();
var G__259226 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5(G__259222,G__259223,G__259224,G__259225,G__259226) : tailrecursion.hoplon.pre.call(null,G__259222,G__259223,G__259224,G__259225,G__259226));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259220,G__259221) : tailrecursion.hoplon.div.call(null,G__259220,G__259221));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259219) : tailrecursion.hoplon.div.call(null,G__259219));
})(),(function (){var G__259250 = (function (){var G__259251 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259252 = (function (){var G__259253 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259254 = "(";
var G__259255 = (function (){var G__259262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259263 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259262,G__259263) : tailrecursion.hoplon.span.call(null,G__259262,G__259263));
})();
var G__259256 = (function (){var G__259264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259265 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259264,G__259265) : tailrecursion.hoplon.span.call(null,G__259264,G__259265));
})();
var G__259257 = " ";
var G__259258 = (function (){var G__259266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259267 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259266,G__259267) : tailrecursion.hoplon.span.call(null,G__259266,G__259267));
})();
var G__259259 = ")\n";
var G__259260 = (function (){var G__259268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259269 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259268,G__259269) : tailrecursion.hoplon.span.call(null,G__259268,G__259269));
})();
var G__259261 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__259253,G__259254,G__259255,G__259256,G__259257,G__259258,G__259259,G__259260,G__259261) : tailrecursion.hoplon.pre.call(null,G__259253,G__259254,G__259255,G__259256,G__259257,G__259258,G__259259,G__259260,G__259261));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259251,G__259252) : tailrecursion.hoplon.div.call(null,G__259251,G__259252));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259250) : tailrecursion.hoplon.div.call(null,G__259250));
})(),(function (){var G__259270 = cljs.core.PersistentArrayMap.EMPTY;
var G__259271 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here are further examples of the use of ",(function (){var G__259272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__259273 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259272,G__259273) : tailrecursion.hoplon.markdown.code_node.call(null,G__259272,G__259273));
})(),":"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259270,G__259271) : tailrecursion.hoplon.markdown.para_node.call(null,G__259270,G__259271));
})(),(function (){var G__259352 = (function (){var G__259353 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259354 = (function (){var G__259355 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259356 = "(";
var G__259357 = (function (){var G__259391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259392 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259391,G__259392) : tailrecursion.hoplon.span.call(null,G__259391,G__259392));
})();
var G__259358 = (function (){var G__259393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259394 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259393,G__259394) : tailrecursion.hoplon.span.call(null,G__259393,G__259394));
})();
var G__259359 = " ";
var G__259360 = (function (){var G__259395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259396 = "3.14159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259395,G__259396) : tailrecursion.hoplon.span.call(null,G__259395,G__259396));
})();
var G__259361 = ")\n(";
var G__259362 = (function (){var G__259397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259398 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259397,G__259398) : tailrecursion.hoplon.span.call(null,G__259397,G__259398));
})();
var G__259363 = (function (){var G__259399 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259400 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259399,G__259400) : tailrecursion.hoplon.span.call(null,G__259399,G__259400));
})();
var G__259364 = " ";
var G__259365 = (function (){var G__259401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259402 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259401,G__259402) : tailrecursion.hoplon.span.call(null,G__259401,G__259402));
})();
var G__259366 = ")\n(";
var G__259367 = (function (){var G__259403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259404 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259403,G__259404) : tailrecursion.hoplon.span.call(null,G__259403,G__259404));
})();
var G__259368 = (function (){var G__259405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259406 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259405,G__259406) : tailrecursion.hoplon.span.call(null,G__259405,G__259406));
})();
var G__259369 = " (";
var G__259370 = (function (){var G__259407 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259408 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259407,G__259408) : tailrecursion.hoplon.span.call(null,G__259407,G__259408));
})();
var G__259371 = (function (){var G__259409 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259410 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259409,G__259410) : tailrecursion.hoplon.span.call(null,G__259409,G__259410));
})();
var G__259372 = " ";
var G__259373 = (function (){var G__259411 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259412 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259411,G__259412) : tailrecursion.hoplon.span.call(null,G__259411,G__259412));
})();
var G__259374 = "))\n";
var G__259375 = (function (){var G__259413 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259414 = "314.159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259413,G__259414) : tailrecursion.hoplon.span.call(null,G__259413,G__259414));
})();
var G__259376 = "\n(";
var G__259377 = (function (){var G__259415 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259416 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259415,G__259416) : tailrecursion.hoplon.span.call(null,G__259415,G__259416));
})();
var G__259378 = (function (){var G__259417 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259418 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259417,G__259418) : tailrecursion.hoplon.span.call(null,G__259417,G__259418));
})();
var G__259379 = " (";
var G__259380 = (function (){var G__259419 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259420 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259419,G__259420) : tailrecursion.hoplon.span.call(null,G__259419,G__259420));
})();
var G__259381 = (function (){var G__259421 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259422 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259421,G__259422) : tailrecursion.hoplon.span.call(null,G__259421,G__259422));
})();
var G__259382 = " ";
var G__259383 = (function (){var G__259423 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259424 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259423,G__259424) : tailrecursion.hoplon.span.call(null,G__259423,G__259424));
})();
var G__259384 = " ";
var G__259385 = (function (){var G__259425 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259426 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259425,G__259426) : tailrecursion.hoplon.span.call(null,G__259425,G__259426));
})();
var G__259386 = "))\n";
var G__259387 = (function (){var G__259427 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259428 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259427,G__259428) : tailrecursion.hoplon.span.call(null,G__259427,G__259428));
})();
var G__259388 = "\n";
var G__259389 = (function (){var G__259429 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259430 = "62.8318";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259429,G__259430) : tailrecursion.hoplon.span.call(null,G__259429,G__259430));
})();
var G__259390 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__259355,G__259356,G__259357,G__259358,G__259359,G__259360,G__259361,G__259362,G__259363,G__259364,G__259365,G__259366,G__259367,G__259368,G__259369,G__259370,G__259371,G__259372,G__259373,G__259374,G__259375,G__259376,G__259377,G__259378,G__259379,G__259380,G__259381,G__259382,G__259383,G__259384,G__259385,G__259386,G__259387,G__259388,G__259389,G__259390) : tailrecursion.hoplon.pre.call(null,G__259355,G__259356,G__259357,G__259358,G__259359,G__259360,G__259361,G__259362,G__259363,G__259364,G__259365,G__259366,G__259367,G__259368,G__259369,G__259370,G__259371,G__259372,G__259373,G__259374,G__259375,G__259376,G__259377,G__259378,G__259379,G__259380,G__259381,G__259382,G__259383,G__259384,G__259385,G__259386,G__259387,G__259388,G__259389,G__259390));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259353,G__259354) : tailrecursion.hoplon.div.call(null,G__259353,G__259354));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259352) : tailrecursion.hoplon.div.call(null,G__259352));
})(),(function (){var G__259431 = cljs.core.PersistentArrayMap.EMPTY;
var G__259432 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259433 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__259434 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259433,G__259434) : tailrecursion.hoplon.markdown.code_node.call(null,G__259433,G__259434));
})()," is our language",(function (){var G__259435 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259436 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259435,G__259436) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259435,G__259436));
})(),"s simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the ",(function (){var G__259437 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"circumference"], null);
var G__259438 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259437,G__259438) : tailrecursion.hoplon.markdown.code_node.call(null,G__259437,G__259438));
})()," computed above. In general, computational objects may have very complex structures, and it would be extremely inconvenient to have to remember and repeat their details each time we want to use them. Indeed, complex programs are constructed by building, step by step, computational objects of increasing complexity. The interpreter makes this step-by-step program construction particularly convenient because name-object associations can be created incrementally in successive interactions. This feature encourages the incremental development and testing of programs and is largely responsible for the fact that a Lisp program usually consists of a large number of relatively simple procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259431,G__259432) : tailrecursion.hoplon.markdown.para_node.call(null,G__259431,G__259432));
})(),(function (){var G__259439 = cljs.core.PersistentArrayMap.EMPTY;
var G__259440 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It should be clear that the possibility of associating values with symbols and later retrieving them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. This memory is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["environment"], null)], 0))," (more precisely the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["global environment"], null)], 0)),", since we will see later that a computation may involve a number of different environments).",(function (){var G__259441 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259442 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Chapter 3 will show that this notion of environment is crucial, both for understanding how the interpreter works and for implementing interpreters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259441,G__259442) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259441,G__259442));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259439,G__259440) : tailrecursion.hoplon.markdown.para_node.call(null,G__259439,G__259440));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259129;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259128;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259127;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259126;
}})()], 0));
var G__258419 = " ";
var G__258420 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Evaluating Combinations"], null),(function (){var _STAR_references_STAR_259443 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259444 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_259445 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259446 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259447 = cljs.core.PersistentArrayMap.EMPTY;
var G__259448 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating combinations, the interpreter is itself following a procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259447,G__259448) : tailrecursion.hoplon.markdown.para_node.call(null,G__259447,G__259448));
})(),(function (){var G__259449 = cljs.core.PersistentArrayMap.EMPTY;
var G__259450 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259451 = cljs.core.PersistentArrayMap.EMPTY;
var G__259452 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259453 = cljs.core.PersistentArrayMap.EMPTY;
var G__259454 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination, do the following:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259453,G__259454) : tailrecursion.hoplon.markdown.para_node.call(null,G__259453,G__259454));
})(),(function (){var _STAR_references_STAR_259455 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259456 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259457 = cljs.core.PersistentArrayMap.EMPTY;
var G__259458 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259459 = cljs.core.PersistentArrayMap.EMPTY;
var G__259460 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259461 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259462 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Evaluate the subexpressions of the combination."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259462;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259461;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259459,G__259460) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259459,G__259460));
})(),(function (){var G__259463 = cljs.core.PersistentArrayMap.EMPTY;
var G__259464 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259465 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259466 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands)."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259466;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259465;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259463,G__259464) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259463,G__259464));
})()], null);
return (tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2(G__259457,G__259458) : tailrecursion.hoplon.markdown.ordered_list_node.call(null,G__259457,G__259458));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259456;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259455;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259451,G__259452) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259451,G__259452));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__259449,G__259450) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__259449,G__259450));
})(),(function (){var G__259467 = cljs.core.PersistentArrayMap.EMPTY;
var G__259468 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even this simple rule illustrates some important points about processes in general. First, observe that the first step dictates that in order to accomplish the evaluation process for a combination we must first perform the evaluation process on each element of the combination. Thus, the evaluation rule is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0))," in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.",(function (){var G__259469 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259470 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It may seem strange that the evaluation rule says, as part of the first step, that we should evaluate the leftmost element of a combination, since at this point that can only be an operator such as ",(function (){var G__259471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__259472 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259471,G__259472) : tailrecursion.hoplon.markdown.code_node.call(null,G__259471,G__259472));
})()," or ",(function (){var G__259473 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__259474 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259473,G__259474) : tailrecursion.hoplon.markdown.code_node.call(null,G__259473,G__259474));
})()," representing a built-in primitive procedure such as addition or multiplication. We will see later that it is useful to be able to work with combinations whose operators are themselves compound expressions."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259469,G__259470) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259469,G__259470));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259467,G__259468) : tailrecursion.hoplon.markdown.para_node.call(null,G__259467,G__259468));
})(),(function (){var G__259475 = cljs.core.PersistentArrayMap.EMPTY;
var G__259476 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice how succinctly the idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process. For example, evaluating"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259475,G__259476) : tailrecursion.hoplon.markdown.para_node.call(null,G__259475,G__259476));
})(),(function (){var G__259518 = (function (){var G__259519 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259520 = (function (){var G__259521 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259522 = "(";
var G__259523 = (function (){var G__259540 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259541 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259540,G__259541) : tailrecursion.hoplon.span.call(null,G__259540,G__259541));
})();
var G__259524 = "(";
var G__259525 = (function (){var G__259542 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259543 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259542,G__259543) : tailrecursion.hoplon.span.call(null,G__259542,G__259543));
})();
var G__259526 = (function (){var G__259544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259545 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259544,G__259545) : tailrecursion.hoplon.span.call(null,G__259544,G__259545));
})();
var G__259527 = " (";
var G__259528 = (function (){var G__259546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259547 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259546,G__259547) : tailrecursion.hoplon.span.call(null,G__259546,G__259547));
})();
var G__259529 = (function (){var G__259548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259549 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259548,G__259549) : tailrecursion.hoplon.span.call(null,G__259548,G__259549));
})();
var G__259530 = " ";
var G__259531 = (function (){var G__259550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259551 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259550,G__259551) : tailrecursion.hoplon.span.call(null,G__259550,G__259551));
})();
var G__259532 = "))\n   (";
var G__259533 = (function (){var G__259552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259553 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259552,G__259553) : tailrecursion.hoplon.span.call(null,G__259552,G__259553));
})();
var G__259534 = (function (){var G__259554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259555 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259554,G__259555) : tailrecursion.hoplon.span.call(null,G__259554,G__259555));
})();
var G__259535 = " ";
var G__259536 = (function (){var G__259556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259557 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259556,G__259557) : tailrecursion.hoplon.span.call(null,G__259556,G__259557));
})();
var G__259537 = " ";
var G__259538 = (function (){var G__259558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259559 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259558,G__259559) : tailrecursion.hoplon.span.call(null,G__259558,G__259559));
})();
var G__259539 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__259521,G__259522,G__259523,G__259524,G__259525,G__259526,G__259527,G__259528,G__259529,G__259530,G__259531,G__259532,G__259533,G__259534,G__259535,G__259536,G__259537,G__259538,G__259539) : tailrecursion.hoplon.pre.call(null,G__259521,G__259522,G__259523,G__259524,G__259525,G__259526,G__259527,G__259528,G__259529,G__259530,G__259531,G__259532,G__259533,G__259534,G__259535,G__259536,G__259537,G__259538,G__259539));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259519,G__259520) : tailrecursion.hoplon.div.call(null,G__259519,G__259520));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259518) : tailrecursion.hoplon.div.call(null,G__259518));
})(),(function (){var G__259560 = cljs.core.PersistentArrayMap.EMPTY;
var G__259561 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["requires that the evaluation rule be applied to four different combinations. We can obtain a picture of this process by representing the combination in the form of a tree, as shown in figure 1.1. Each combination is represented by a node with branches corresponding to the operator and the operands of the combination stemming from it. The terminal nodes (that is, nodes with no branches stemming from them) represent either operators or numbers. Viewing evaluation in terms of the tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels. In general, we shall see that recursion is a very powerful technique for dealing with hierarchical, treelike objects. In fact, the ``percolate values upward",(function (){var G__259562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259563 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259562,G__259563) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259562,G__259563));
})(),(function (){var G__259564 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259565 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259564,G__259565) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259564,G__259565));
})()," form of the evaluation rule is an example of a general kind of process known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["tree accumulation"], null)], 0)),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259560,G__259561) : tailrecursion.hoplon.markdown.para_node.call(null,G__259560,G__259561));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259446;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259445;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259444;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259443;
}})(),"",book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Tree representation, showing the value of each subcombination."], null)], 0)),(function (){var _STAR_references_STAR_259566 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259567 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_259568 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259569 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259570 = cljs.core.PersistentArrayMap.EMPTY;
var G__259571 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not combinations, but primitive expressions such as numerals, built-in operators, or other names. We take care of the primitive cases by stipulating that"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259570,G__259571) : tailrecursion.hoplon.markdown.para_node.call(null,G__259570,G__259571));
})(),(function (){var G__259572 = cljs.core.PersistentArrayMap.EMPTY;
var G__259573 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259574 = cljs.core.PersistentArrayMap.EMPTY;
var G__259575 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259576 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259577 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of numerals are the numbers that they name,"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259577;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259576;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259574,G__259575) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259574,G__259575));
})(),(function (){var G__259578 = cljs.core.PersistentArrayMap.EMPTY;
var G__259579 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259580 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259581 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of built-in operators are the machine  instruction sequences that carry out the corresponding operations, and"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259581;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259580;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259578,G__259579) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259578,G__259579));
})(),(function (){var G__259582 = cljs.core.PersistentArrayMap.EMPTY;
var G__259583 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259584 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259585 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of other names are the objects associated with  those names in the environment."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259585;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259584;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259582,G__259583) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259582,G__259583));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__259572,G__259573) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__259572,G__259573));
})(),(function (){var G__259586 = cljs.core.PersistentArrayMap.EMPTY;
var G__259587 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We may regard the second rule as a special case of the third one by stipulating that symbols such as + and * are also included in the global environment, and are associated with the sequences of machine instructions that are their ",(function (){var G__259588 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259589 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["values."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259588,G__259589) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259588,G__259589));
})()," The key point to notice is the role of the environment in determining the meaning of the symbols in expressions. In an interactive language such as Lisp, it is meaningless to speak of the value of an expression such as ",(function (){var G__259590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+\nx 1)"], null);
var G__259591 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259590,G__259591) : tailrecursion.hoplon.markdown.code_node.call(null,G__259590,G__259591));
})()," without specifying any information about the environment that would provide a meaning for the symbol ",(function (){var G__259592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__259593 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259592,G__259593) : tailrecursion.hoplon.markdown.code_node.call(null,G__259592,G__259593));
})()," (or even for the symbol ",(function (){var G__259594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__259595 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259594,G__259595) : tailrecursion.hoplon.markdown.code_node.call(null,G__259594,G__259595));
})(),"). As we shall see in chapter 3, the general notion of the environment as providing a context in which evaluation takes place will play an important role in our understanding of program execution."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259586,G__259587) : tailrecursion.hoplon.markdown.para_node.call(null,G__259586,G__259587));
})(),(function (){var G__259596 = cljs.core.PersistentArrayMap.EMPTY;
var G__259597 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that the evaluation rule given above does not handle definitions. For instance, evaluating ",(function (){var G__259598 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x 3)"], null);
var G__259599 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259598,G__259599) : tailrecursion.hoplon.markdown.code_node.call(null,G__259598,G__259599));
})()," does not apply ",(function (){var G__259600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__259601 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259600,G__259601) : tailrecursion.hoplon.markdown.code_node.call(null,G__259600,G__259601));
})()," to two arguments, one of which is the value of the symbol ",(function (){var G__259602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__259603 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259602,G__259603) : tailrecursion.hoplon.markdown.code_node.call(null,G__259602,G__259603));
})()," and the other of which is 3, since the purpose of the define is precisely to associate ",(function (){var G__259604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__259605 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259604,G__259605) : tailrecursion.hoplon.markdown.code_node.call(null,G__259604,G__259605));
})()," with a value. (That is, ",(function (){var G__259606 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x\n3)"], null);
var G__259607 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259606,G__259607) : tailrecursion.hoplon.markdown.code_node.call(null,G__259606,G__259607));
})()," is not a combination.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259596,G__259597) : tailrecursion.hoplon.markdown.para_node.call(null,G__259596,G__259597));
})(),(function (){var G__259608 = cljs.core.PersistentArrayMap.EMPTY;
var G__259609 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such exceptions to the general evaluation rule are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["special forms"], null)], 0)),". ",(function (){var G__259610 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__259611 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259610,G__259611) : tailrecursion.hoplon.markdown.code_node.call(null,G__259610,G__259611));
})()," is the only example of a special form that we have seen so far, but we will meet others shortly. Each special form has its own evaluation rule. The various kinds of expressions (each with its associated evaluation rule) constitute the syntax of the programming language. In comparison with most other programming languages, Lisp has a very simple syntax; that is, the evaluation rule for expressions can be described by a simple general rule together with specialized rules for a small number of special forms.",(function (){var G__259612 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259613 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Special syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["syntactic sugar"], null)], 0)),", to use a phrase coined by Peter Landin. In comparison with users of other languages, Lisp programmers, as a rule, are less concerned with matters of syntax. (By contrast, examine any Pascal manual and notice how much of it is devoted to descriptions of syntax.) This disdain for syntax is due partly to the flexibility of Lisp, which makes it easy to change surface syntax, and partly to the observation that many ",(function (){var G__259614 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259615 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["convenient"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259614,G__259615) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259614,G__259615));
})()," syntactic constructs, which make the language less uniform, end up causing more trouble than they are worth when programs become large and complex. In the words of Alan Perlis, ",(function (){var G__259616 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259617 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Syntactic sugar causes cancer of the semicolon."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259616,G__259617) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259616,G__259617));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259612,G__259613) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259612,G__259613));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259608,G__259609) : tailrecursion.hoplon.markdown.para_node.call(null,G__259608,G__259609));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259569;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259568;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259567;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259566;
}})()], 0));
var G__258421 = "";
var G__258422 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Compound Procedures"], null),(function (){var _STAR_references_STAR_259618 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259619 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_259620 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259621 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259622 = cljs.core.PersistentArrayMap.EMPTY;
var G__259623 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have identified in Lisp some of the elements that must appear in any powerful programming language:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259622,G__259623) : tailrecursion.hoplon.markdown.para_node.call(null,G__259622,G__259623));
})(),(function (){var G__259624 = cljs.core.PersistentArrayMap.EMPTY;
var G__259625 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259626 = cljs.core.PersistentArrayMap.EMPTY;
var G__259627 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259628 = cljs.core.PersistentArrayMap.EMPTY;
var G__259629 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Numbers and arithmetic operations are primitive data and procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259628,G__259629) : tailrecursion.hoplon.markdown.para_node.call(null,G__259628,G__259629));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259626,G__259627) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259626,G__259627));
})(),(function (){var G__259630 = cljs.core.PersistentArrayMap.EMPTY;
var G__259631 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259632 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259633 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259634 = cljs.core.PersistentArrayMap.EMPTY;
var G__259635 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Nesting of combinations provides a means of combining operations."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259634,G__259635) : tailrecursion.hoplon.markdown.para_node.call(null,G__259634,G__259635));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259633;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259632;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259630,G__259631) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259630,G__259631));
})(),(function (){var G__259636 = cljs.core.PersistentArrayMap.EMPTY;
var G__259637 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259638 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259639 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259640 = cljs.core.PersistentArrayMap.EMPTY;
var G__259641 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Definitions that associate names with values provide a  limited means of abstraction."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259640,G__259641) : tailrecursion.hoplon.markdown.para_node.call(null,G__259640,G__259641));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259639;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259638;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259636,G__259637) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259636,G__259637));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__259624,G__259625) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__259624,G__259625));
})(),(function (){var G__259642 = cljs.core.PersistentArrayMap.EMPTY;
var G__259643 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we will learn about ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedure definitions"], null)], 0)),", a much more powerful abstraction technique by which a compound operation can be given a name and then referred to as a unit."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259642,G__259643) : tailrecursion.hoplon.markdown.para_node.call(null,G__259642,G__259643));
})(),(function (){var G__259644 = cljs.core.PersistentArrayMap.EMPTY;
var G__259645 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We begin by examining how to express the idea of ",(function (){var G__259646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259647 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["squaring."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259646,G__259647) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259646,G__259647));
})()," We might say, ",(function (){var G__259648 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259649 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To square something, multiply it by itself."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259648,G__259649) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259648,G__259649));
})()," This is expressed in scheme as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259644,G__259645) : tailrecursion.hoplon.markdown.para_node.call(null,G__259644,G__259645));
})(),(function (){var G__259677 = (function (){var G__259678 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259679 = (function (){var G__259680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259681 = "(";
var G__259682 = (function (){var G__259693 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259694 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259693,G__259694) : tailrecursion.hoplon.span.call(null,G__259693,G__259694));
})();
var G__259683 = "(";
var G__259684 = (function (){var G__259695 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__259696 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259695,G__259696) : tailrecursion.hoplon.span.call(null,G__259695,G__259696));
})();
var G__259685 = " ";
var G__259686 = (function (){var G__259697 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259698 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259697,G__259698) : tailrecursion.hoplon.span.call(null,G__259697,G__259698));
})();
var G__259687 = ") (";
var G__259688 = (function (){var G__259699 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259700 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259699,G__259700) : tailrecursion.hoplon.span.call(null,G__259699,G__259700));
})();
var G__259689 = (function (){var G__259701 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259702 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259701,G__259702) : tailrecursion.hoplon.span.call(null,G__259701,G__259702));
})();
var G__259690 = " ";
var G__259691 = (function (){var G__259703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259704 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259703,G__259704) : tailrecursion.hoplon.span.call(null,G__259703,G__259704));
})();
var G__259692 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__259680,G__259681,G__259682,G__259683,G__259684,G__259685,G__259686,G__259687,G__259688,G__259689,G__259690,G__259691,G__259692) : tailrecursion.hoplon.pre.call(null,G__259680,G__259681,G__259682,G__259683,G__259684,G__259685,G__259686,G__259687,G__259688,G__259689,G__259690,G__259691,G__259692));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259678,G__259679) : tailrecursion.hoplon.div.call(null,G__259678,G__259679));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259677) : tailrecursion.hoplon.div.call(null,G__259677));
})(),(function (){var G__259705 = cljs.core.PersistentArrayMap.EMPTY;
var G__259706 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["but in Clojure, we would write that as,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259705,G__259706) : tailrecursion.hoplon.markdown.para_node.call(null,G__259705,G__259706));
})(),(function (){var G__259733 = (function (){var G__259734 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259735 = (function (){var G__259736 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259737 = "(";
var G__259738 = (function (){var G__259748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259749 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259748,G__259749) : tailrecursion.hoplon.span.call(null,G__259748,G__259749));
})();
var G__259739 = (function (){var G__259750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259751 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259750,G__259751) : tailrecursion.hoplon.span.call(null,G__259750,G__259751));
})();
var G__259740 = " [";
var G__259741 = (function (){var G__259752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259753 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259752,G__259753) : tailrecursion.hoplon.span.call(null,G__259752,G__259753));
})();
var G__259742 = "] (";
var G__259743 = (function (){var G__259754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259755 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259754,G__259755) : tailrecursion.hoplon.span.call(null,G__259754,G__259755));
})();
var G__259744 = (function (){var G__259756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259757 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259756,G__259757) : tailrecursion.hoplon.span.call(null,G__259756,G__259757));
})();
var G__259745 = " ";
var G__259746 = (function (){var G__259758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259759 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259758,G__259759) : tailrecursion.hoplon.span.call(null,G__259758,G__259759));
})();
var G__259747 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__259736,G__259737,G__259738,G__259739,G__259740,G__259741,G__259742,G__259743,G__259744,G__259745,G__259746,G__259747) : tailrecursion.hoplon.pre.call(null,G__259736,G__259737,G__259738,G__259739,G__259740,G__259741,G__259742,G__259743,G__259744,G__259745,G__259746,G__259747));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259734,G__259735) : tailrecursion.hoplon.div.call(null,G__259734,G__259735));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259733) : tailrecursion.hoplon.div.call(null,G__259733));
})(),(function (){var G__259760 = cljs.core.PersistentArrayMap.EMPTY;
var G__259761 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note that Clojure differentiates between definining an atom and defining a procedure! We can understand this in the following way:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259760,G__259761) : tailrecursion.hoplon.markdown.para_node.call(null,G__259760,G__259761));
})(),(function (){var G__259841 = (function (){var G__259842 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259843 = (function (){var G__259844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259845 = "(";
var G__259846 = (function (){var G__259883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259884 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259883,G__259884) : tailrecursion.hoplon.span.call(null,G__259883,G__259884));
})();
var G__259847 = (function (){var G__259885 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259886 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259885,G__259886) : tailrecursion.hoplon.span.call(null,G__259885,G__259886));
})();
var G__259848 = "      [";
var G__259849 = (function (){var G__259887 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259888 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259887,G__259888) : tailrecursion.hoplon.span.call(null,G__259887,G__259888));
})();
var G__259850 = "]      (";
var G__259851 = (function (){var G__259889 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259890 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259889,G__259890) : tailrecursion.hoplon.span.call(null,G__259889,G__259890));
})();
var G__259852 = "     ";
var G__259853 = (function (){var G__259891 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259892 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259891,G__259892) : tailrecursion.hoplon.span.call(null,G__259891,G__259892));
})();
var G__259854 = "      ";
var G__259855 = (function (){var G__259893 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259894 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259893,G__259894) : tailrecursion.hoplon.span.call(null,G__259893,G__259894));
})();
var G__259856 = "))\n  ";
var G__259857 = (function (){var G__259895 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259896 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259895,G__259896) : tailrecursion.hoplon.span.call(null,G__259895,G__259896));
})();
var G__259858 = "    ";
var G__259859 = (function (){var G__259897 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259898 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259897,G__259898) : tailrecursion.hoplon.span.call(null,G__259897,G__259898));
})();
var G__259860 = "          ";
var G__259861 = (function (){var G__259899 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259900 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259899,G__259900) : tailrecursion.hoplon.span.call(null,G__259899,G__259900));
})();
var G__259862 = "        ";
var G__259863 = (function (){var G__259901 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259902 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259901,G__259902) : tailrecursion.hoplon.span.call(null,G__259901,G__259902));
})();
var G__259864 = "     ";
var G__259865 = (function (){var G__259903 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259904 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259903,G__259904) : tailrecursion.hoplon.span.call(null,G__259903,G__259904));
})();
var G__259866 = "      ";
var G__259867 = (function (){var G__259905 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259906 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259905,G__259906) : tailrecursion.hoplon.span.call(null,G__259905,G__259906));
})();
var G__259868 = "\n ";
var G__259869 = (function (){var G__259907 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259908 = "to";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259907,G__259908) : tailrecursion.hoplon.span.call(null,G__259907,G__259908));
})();
var G__259870 = "  ";
var G__259871 = (function (){var G__259909 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #BA2121"], null);
var G__259910 = "\"square\"";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259909,G__259910) : tailrecursion.hoplon.span.call(null,G__259909,G__259910));
})();
var G__259872 = " ";
var G__259873 = (function (){var G__259911 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259912 = "something";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259911,G__259912) : tailrecursion.hoplon.span.call(null,G__259911,G__259912));
})();
var G__259874 = ", ";
var G__259875 = (function (){var G__259913 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259914 = "multiply";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259913,G__259914) : tailrecursion.hoplon.span.call(null,G__259913,G__259914));
})();
var G__259876 = " ";
var G__259877 = (function (){var G__259915 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259916 = "it";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259915,G__259916) : tailrecursion.hoplon.span.call(null,G__259915,G__259916));
})();
var G__259878 = " ";
var G__259879 = (function (){var G__259917 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259918 = "by";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259917,G__259918) : tailrecursion.hoplon.span.call(null,G__259917,G__259918));
})();
var G__259880 = " ";
var G__259881 = (function (){var G__259919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259920 = "itself.";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259919,G__259920) : tailrecursion.hoplon.span.call(null,G__259919,G__259920));
})();
var G__259882 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__259844,G__259845,G__259846,G__259847,G__259848,G__259849,G__259850,G__259851,G__259852,G__259853,G__259854,G__259855,G__259856,G__259857,G__259858,G__259859,G__259860,G__259861,G__259862,G__259863,G__259864,G__259865,G__259866,G__259867,G__259868,G__259869,G__259870,G__259871,G__259872,G__259873,G__259874,G__259875,G__259876,G__259877,G__259878,G__259879,G__259880,G__259881,G__259882) : tailrecursion.hoplon.pre.call(null,G__259844,G__259845,G__259846,G__259847,G__259848,G__259849,G__259850,G__259851,G__259852,G__259853,G__259854,G__259855,G__259856,G__259857,G__259858,G__259859,G__259860,G__259861,G__259862,G__259863,G__259864,G__259865,G__259866,G__259867,G__259868,G__259869,G__259870,G__259871,G__259872,G__259873,G__259874,G__259875,G__259876,G__259877,G__259878,G__259879,G__259880,G__259881,G__259882));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259842,G__259843) : tailrecursion.hoplon.div.call(null,G__259842,G__259843));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259841) : tailrecursion.hoplon.div.call(null,G__259841));
})(),(function (){var G__259921 = cljs.core.PersistentArrayMap.EMPTY;
var G__259922 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have here a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["compound procedure"], null)], 0)),", which has been given the name ",(function (){var G__259923 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__259924 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259923,G__259924) : tailrecursion.hoplon.markdown.code_node.call(null,G__259923,G__259924));
})(),". The procedure represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, x, which plays the same role that a pronoun plays in natural language. Evaluating the definition creates this compound procedure and associates it with the name square.",(function (){var G__259925 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259926 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that there are two different operations being combined here: we are creating the procedure, and we are giving it the name ",(function (){var G__259927 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__259928 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259927,G__259928) : tailrecursion.hoplon.markdown.code_node.call(null,G__259927,G__259928));
})(),". It is possible, indeed important, to be able to separate these two notions ",(function (){var G__259929 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__259930 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259929,G__259930) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259929,G__259930));
})()," to create procedures without naming them, and to give names to procedures that have already been created. We will see how to do this in section 1.3.2."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259925,G__259926) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259925,G__259926));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259921,G__259922) : tailrecursion.hoplon.markdown.para_node.call(null,G__259921,G__259922));
})(),(function (){var G__259931 = cljs.core.PersistentArrayMap.EMPTY;
var G__259932 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a procedure definition is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259931,G__259932) : tailrecursion.hoplon.markdown.para_node.call(null,G__259931,G__259932));
})(),(function (){var G__259956 = (function (){var G__259957 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259958 = (function (){var G__259959 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259960 = "(";
var G__259961 = (function (){var G__259970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259971 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259970,G__259971) : tailrecursion.hoplon.span.call(null,G__259970,G__259971));
})();
var G__259962 = (function (){var G__259972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259973 = "<name>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259972,G__259973) : tailrecursion.hoplon.span.call(null,G__259972,G__259973));
})();
var G__259963 = " [";
var G__259964 = (function (){var G__259974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259975 = "<formal";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259974,G__259975) : tailrecursion.hoplon.span.call(null,G__259974,G__259975));
})();
var G__259965 = " ";
var G__259966 = (function (){var G__259976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259977 = "parameters>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259976,G__259977) : tailrecursion.hoplon.span.call(null,G__259976,G__259977));
})();
var G__259967 = "] ";
var G__259968 = (function (){var G__259978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259979 = "<body>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259978,G__259979) : tailrecursion.hoplon.span.call(null,G__259978,G__259979));
})();
var G__259969 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__259959,G__259960,G__259961,G__259962,G__259963,G__259964,G__259965,G__259966,G__259967,G__259968,G__259969) : tailrecursion.hoplon.pre.call(null,G__259959,G__259960,G__259961,G__259962,G__259963,G__259964,G__259965,G__259966,G__259967,G__259968,G__259969));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259957,G__259958) : tailrecursion.hoplon.div.call(null,G__259957,G__259958));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259956) : tailrecursion.hoplon.div.call(null,G__259956));
})(),(function (){var G__259980 = cljs.core.PersistentArrayMap.EMPTY;
var G__259981 = new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Just in case you end up reading from the original SICP, let",(function (){var G__259982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259983 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259982,G__259983) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259982,G__259983));
})(),"s take a moment to note the differences between the Scheme method of defining compound procedures, and the Clojure method. The Scheme method ",(function (){var G__259984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(define\n(<name> <formal parameters>) <body>)"], null);
var G__259985 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259984,G__259985) : tailrecursion.hoplon.markdown.code_node.call(null,G__259984,G__259985));
})()," is very straight forward: it defines the first form to be the second. In this way, we can see ",(function (){var G__259986 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__259987 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259986,G__259987) : tailrecursion.hoplon.markdown.code_node.call(null,G__259986,G__259987));
})()," to be a procedure that takes two arguments. The procedure ",(function (){var G__259988 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__259989 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259988,G__259989) : tailrecursion.hoplon.markdown.code_node.call(null,G__259988,G__259989));
})()," in Clojure takes three arguments: the first being the name of the intended procedure (in our example ",(function (){var G__259990 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259991 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259992 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__259993 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259992,G__259993) : tailrecursion.hoplon.markdown.code_node.call(null,G__259992,G__259993));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259990,G__259991) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259990,G__259991));
})(),"), the second is a list of all the arguments (we",(function (){var G__259994 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259995 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259994,G__259995) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259994,G__259995));
})(),"ll cover lists later, but in our example it was ",(function (){var G__259996 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[x]"], null);
var G__259997 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259996,G__259997) : tailrecursion.hoplon.markdown.code_node.call(null,G__259996,G__259997));
})(),"), and the third is the intended procedure or the body (in our example it was ",(function (){var G__259998 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* x x)"], null);
var G__259999 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259998,G__259999) : tailrecursion.hoplon.markdown.code_node.call(null,G__259998,G__259999));
})(),")."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259980,G__259981) : tailrecursion.hoplon.markdown.para_node.call(null,G__259980,G__259981));
})(),(function (){var G__260000 = cljs.core.PersistentArrayMap.EMPTY;
var G__260001 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The <name> is a symbol to be associated with the procedure definition in the environment.",(function (){var G__260002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260003 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, we will describe the general syntax of expressions by using italic symbols delimited by angle brackets ",(function (){var G__260004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__260005 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260004,G__260005) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260004,G__260005));
})()," e.g., ",(function (){var G__260006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<name>"], null);
var G__260007 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260006,G__260007) : tailrecursion.hoplon.markdown.code_node.call(null,G__260006,G__260007));
})()," ",(function (){var G__260008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__260009 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260008,G__260009) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260008,G__260009));
})()," to denote the ",(function (){var G__260010 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260011 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["slots"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260010,G__260011) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260010,G__260011));
})()," in the expression to be filled in when such an expression is actually used."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260002,G__260003) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260002,G__260003));
})()," The <formal\nparameters> are the names used within the body of the procedure to refer to the corresponding arguments of the procedure. The <body> is an expression that will yield the value of the procedure application when the formal parameters are replaced by the actual arguments to which the procedure is applied.",(function (){var G__260012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260013 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["More generally, the body of the procedure can be a sequence of expressions. In this case, the interpreter evaluates each expression in the sequence in turn and returns the value of the final expression as the value of the procedure application."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260012,G__260013) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260012,G__260013));
})()," In Scheme, the <name> and the <formal parameters> are grouped within parentheses, just as they would be in an actual call to the procedure being defined, but in Clojure they are not."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260000,G__260001) : tailrecursion.hoplon.markdown.para_node.call(null,G__260000,G__260001));
})(),(function (){var G__260014 = cljs.core.PersistentArrayMap.EMPTY;
var G__260015 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Having defined square, we can now use it:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260014,G__260015) : tailrecursion.hoplon.markdown.para_node.call(null,G__260014,G__260015));
})(),(function (){var G__260016 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square 21)\n441\n") : tailrecursion.hoplon.code.call(null,"(square 21)\n441\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260016) : tailrecursion.hoplon.pre.call(null,G__260016));
})(),(function (){var G__260017 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (+ 2 5))\n49\n") : tailrecursion.hoplon.code.call(null,"(square (+ 2 5))\n49\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260017) : tailrecursion.hoplon.pre.call(null,G__260017));
})(),(function (){var G__260018 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (square 3))\n81\n") : tailrecursion.hoplon.code.call(null,"(square (square 3))\n81\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260018) : tailrecursion.hoplon.pre.call(null,G__260018));
})(),(function (){var G__260019 = cljs.core.PersistentArrayMap.EMPTY;
var G__260020 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can also use square as a building block in defining other procedures. For example, \\(x^2 + y^2\\) can be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260019,G__260020) : tailrecursion.hoplon.markdown.para_node.call(null,G__260019,G__260020));
})(),(function (){var G__260021 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square x) (square y))\n") : tailrecursion.hoplon.code.call(null,"(+ (square x) (square y))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260021) : tailrecursion.hoplon.pre.call(null,G__260021));
})(),(function (){var G__260022 = cljs.core.PersistentArrayMap.EMPTY;
var G__260023 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can easily define a procedure sum-of-squares that, given any two numbers as arguments, produces the sum of their squares:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260022,G__260023) : tailrecursion.hoplon.markdown.para_node.call(null,G__260022,G__260023));
})(),(function (){var G__260063 = (function (){var G__260064 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260065 = (function (){var G__260066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260067 = "(";
var G__260068 = (function (){var G__260085 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260086 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260085,G__260086) : tailrecursion.hoplon.span.call(null,G__260085,G__260086));
})();
var G__260069 = (function (){var G__260087 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260088 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260087,G__260088) : tailrecursion.hoplon.span.call(null,G__260087,G__260088));
})();
var G__260070 = " [";
var G__260071 = (function (){var G__260089 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260090 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260089,G__260090) : tailrecursion.hoplon.span.call(null,G__260089,G__260090));
})();
var G__260072 = " ";
var G__260073 = (function (){var G__260091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260092 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260091,G__260092) : tailrecursion.hoplon.span.call(null,G__260091,G__260092));
})();
var G__260074 = "]\n  (";
var G__260075 = (function (){var G__260093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260094 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260093,G__260094) : tailrecursion.hoplon.span.call(null,G__260093,G__260094));
})();
var G__260076 = "(";
var G__260077 = (function (){var G__260095 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__260096 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260095,G__260096) : tailrecursion.hoplon.span.call(null,G__260095,G__260096));
})();
var G__260078 = " ";
var G__260079 = (function (){var G__260097 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260098 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260097,G__260098) : tailrecursion.hoplon.span.call(null,G__260097,G__260098));
})();
var G__260080 = ") (";
var G__260081 = (function (){var G__260099 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__260100 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260099,G__260100) : tailrecursion.hoplon.span.call(null,G__260099,G__260100));
})();
var G__260082 = " ";
var G__260083 = (function (){var G__260101 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260102 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260101,G__260102) : tailrecursion.hoplon.span.call(null,G__260101,G__260102));
})();
var G__260084 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__260066,G__260067,G__260068,G__260069,G__260070,G__260071,G__260072,G__260073,G__260074,G__260075,G__260076,G__260077,G__260078,G__260079,G__260080,G__260081,G__260082,G__260083,G__260084) : tailrecursion.hoplon.pre.call(null,G__260066,G__260067,G__260068,G__260069,G__260070,G__260071,G__260072,G__260073,G__260074,G__260075,G__260076,G__260077,G__260078,G__260079,G__260080,G__260081,G__260082,G__260083,G__260084));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260064,G__260065) : tailrecursion.hoplon.div.call(null,G__260064,G__260065));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260063) : tailrecursion.hoplon.div.call(null,G__260063));
})(),(function (){var G__260103 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares 3 4)\n25\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares 3 4)\n25\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260103) : tailrecursion.hoplon.pre.call(null,G__260103));
})(),(function (){var G__260104 = cljs.core.PersistentArrayMap.EMPTY;
var G__260105 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we can use sum-of-squares as a building block in constructing further procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260104,G__260105) : tailrecursion.hoplon.markdown.para_node.call(null,G__260104,G__260105));
})(),(function (){var G__260147 = (function (){var G__260148 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260149 = (function (){var G__260150 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260151 = "(";
var G__260152 = (function (){var G__260169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260170 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260169,G__260170) : tailrecursion.hoplon.span.call(null,G__260169,G__260170));
})();
var G__260153 = (function (){var G__260171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260172 = "f";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260171,G__260172) : tailrecursion.hoplon.span.call(null,G__260171,G__260172));
})();
var G__260154 = " [";
var G__260155 = (function (){var G__260173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260174 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260173,G__260174) : tailrecursion.hoplon.span.call(null,G__260173,G__260174));
})();
var G__260156 = "]\n  (";
var G__260157 = (function (){var G__260175 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__260176 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260175,G__260176) : tailrecursion.hoplon.span.call(null,G__260175,G__260176));
})();
var G__260158 = " (";
var G__260159 = (function (){var G__260177 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260178 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260177,G__260178) : tailrecursion.hoplon.span.call(null,G__260177,G__260178));
})();
var G__260160 = (function (){var G__260179 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260180 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260179,G__260180) : tailrecursion.hoplon.span.call(null,G__260179,G__260180));
})();
var G__260161 = " ";
var G__260162 = (function (){var G__260181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260182 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260181,G__260182) : tailrecursion.hoplon.span.call(null,G__260181,G__260182));
})();
var G__260163 = ") (";
var G__260164 = (function (){var G__260183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260184 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260183,G__260184) : tailrecursion.hoplon.span.call(null,G__260183,G__260184));
})();
var G__260165 = (function (){var G__260185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260186 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260185,G__260186) : tailrecursion.hoplon.span.call(null,G__260185,G__260186));
})();
var G__260166 = " ";
var G__260167 = (function (){var G__260187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260188 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260187,G__260188) : tailrecursion.hoplon.span.call(null,G__260187,G__260188));
})();
var G__260168 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__260150,G__260151,G__260152,G__260153,G__260154,G__260155,G__260156,G__260157,G__260158,G__260159,G__260160,G__260161,G__260162,G__260163,G__260164,G__260165,G__260166,G__260167,G__260168) : tailrecursion.hoplon.pre.call(null,G__260150,G__260151,G__260152,G__260153,G__260154,G__260155,G__260156,G__260157,G__260158,G__260159,G__260160,G__260161,G__260162,G__260163,G__260164,G__260165,G__260166,G__260167,G__260168));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260148,G__260149) : tailrecursion.hoplon.div.call(null,G__260148,G__260149));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260147) : tailrecursion.hoplon.div.call(null,G__260147));
})(),(function (){var G__260189 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n136\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260189) : tailrecursion.hoplon.pre.call(null,G__260189));
})(),(function (){var G__260190 = cljs.core.PersistentArrayMap.EMPTY;
var G__260191 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Compound procedures are used in exactly the same way as primitive procedures. Indeed, one could not tell by looking at the definition of ",(function (){var G__260192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__260193 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260192,G__260193) : tailrecursion.hoplon.markdown.code_node.call(null,G__260192,G__260193));
})()," given above whether ",(function (){var G__260194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__260195 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260194,G__260195) : tailrecursion.hoplon.markdown.code_node.call(null,G__260194,G__260195));
})()," was built into the interpreter, like ",(function (){var G__260196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__260197 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260196,G__260197) : tailrecursion.hoplon.markdown.code_node.call(null,G__260196,G__260197));
})()," and ",(function (){var G__260198 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__260199 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260198,G__260199) : tailrecursion.hoplon.markdown.code_node.call(null,G__260198,G__260199));
})(),", or defined as a compound procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260190,G__260191) : tailrecursion.hoplon.markdown.para_node.call(null,G__260190,G__260191));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259621;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259620;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259619;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259618;
}})()], 0));
var G__258423 = "";
var G__258424 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Substitution Model for Procedure Application"], null),(function (){var _STAR_references_STAR_260200 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260201 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260202 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260203 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260204 = cljs.core.PersistentArrayMap.EMPTY;
var G__260205 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination whose operator names a compound procedure, the interpreter follows much the same process as for combinations whose operators name primitive procedures, which we described in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),". That is, the interpreter evaluates the elements of the combination and applies the procedure (which is the value of the operator of the combination) to the arguments (which are the values of the operands of the combination)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260204,G__260205) : tailrecursion.hoplon.markdown.para_node.call(null,G__260204,G__260205));
})(),(function (){var G__260206 = cljs.core.PersistentArrayMap.EMPTY;
var G__260207 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can assume that the mechanism for applying primitive procedures to arguments is built into the interpreter. For compound procedures, the application process is as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260206,G__260207) : tailrecursion.hoplon.markdown.para_node.call(null,G__260206,G__260207));
})(),(function (){var G__260208 = cljs.core.PersistentArrayMap.EMPTY;
var G__260209 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260210 = cljs.core.PersistentArrayMap.EMPTY;
var G__260211 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260212 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260213 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260213;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260212;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260210,G__260211) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260210,G__260211));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260208,G__260209) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260208,G__260209));
})(),(function (){var G__260214 = cljs.core.PersistentArrayMap.EMPTY;
var G__260215 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To illustrate this process, let",(function (){var G__260216 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260217 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260216,G__260217) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260216,G__260217));
})(),"s evaluate the combination"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260214,G__260215) : tailrecursion.hoplon.markdown.para_node.call(null,G__260214,G__260215));
})(),(function (){var G__260218 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260218) : tailrecursion.hoplon.pre.call(null,G__260218));
})(),(function (){var G__260219 = cljs.core.PersistentArrayMap.EMPTY;
var G__260220 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where f is the procedure defined in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.4"], null)], 0)),". We begin by retrieving the body of f:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260219,G__260220) : tailrecursion.hoplon.markdown.para_node.call(null,G__260219,G__260220));
})(),(function (){var G__260221 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ a 1) (* a 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ a 1) (* a 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260221) : tailrecursion.hoplon.pre.call(null,G__260221));
})(),(function (){var G__260222 = cljs.core.PersistentArrayMap.EMPTY;
var G__260223 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then we replace the formal parameter a by the argument 5:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260222,G__260223) : tailrecursion.hoplon.markdown.para_node.call(null,G__260222,G__260223));
})(),(function (){var G__260224 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260224) : tailrecursion.hoplon.pre.call(null,G__260224));
})(),(function (){var G__260225 = cljs.core.PersistentArrayMap.EMPTY;
var G__260226 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus the problem reduces to the evaluation of a combination with two operands and an operator ",(function (){var G__260227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__260228 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260227,G__260228) : tailrecursion.hoplon.markdown.code_node.call(null,G__260227,G__260228));
})(),". Evaluating this combination involves three subproblems. We must evaluate the operator to get the procedure to be applied, and we must evaluate the operands to get the arguments. Now ",(function (){var G__260229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__260230 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260229,G__260230) : tailrecursion.hoplon.markdown.code_node.call(null,G__260229,G__260230));
})()," produces 6 and ",(function (){var G__260231 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__260232 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260231,G__260232) : tailrecursion.hoplon.markdown.code_node.call(null,G__260231,G__260232));
})()," produces 10, so we must apply the ",(function (){var G__260233 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__260234 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260233,G__260234) : tailrecursion.hoplon.markdown.code_node.call(null,G__260233,G__260234));
})()," procedure to 6 and 10. These values are substituted for the formal parameters ",(function (){var G__260235 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__260236 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260235,G__260236) : tailrecursion.hoplon.markdown.code_node.call(null,G__260235,G__260236));
})()," and ",(function (){var G__260237 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"y"], null);
var G__260238 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260237,G__260238) : tailrecursion.hoplon.markdown.code_node.call(null,G__260237,G__260238));
})()," in the body of ",(function (){var G__260239 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__260240 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260239,G__260240) : tailrecursion.hoplon.markdown.code_node.call(null,G__260239,G__260240));
})(),", reducing the expression to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260225,G__260226) : tailrecursion.hoplon.markdown.para_node.call(null,G__260225,G__260226));
})(),(function (){var G__260241 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square 6) (square 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (square 6) (square 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260241) : tailrecursion.hoplon.pre.call(null,G__260241));
})(),(function (){var G__260242 = cljs.core.PersistentArrayMap.EMPTY;
var G__260243 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we use the definition of ",(function (){var G__260244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__260245 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260244,G__260245) : tailrecursion.hoplon.markdown.code_node.call(null,G__260244,G__260245));
})(),", this reduces to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260242,G__260243) : tailrecursion.hoplon.markdown.para_node.call(null,G__260242,G__260243));
})(),(function (){var G__260246 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260246) : tailrecursion.hoplon.pre.call(null,G__260246));
})(),(function (){var G__260247 = cljs.core.PersistentArrayMap.EMPTY;
var G__260248 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which reduces by multiplication to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260247,G__260248) : tailrecursion.hoplon.markdown.para_node.call(null,G__260247,G__260248));
})(),(function (){var G__260249 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ 36 100)\n") : tailrecursion.hoplon.code.call(null,"(+ 36 100)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260249) : tailrecursion.hoplon.pre.call(null,G__260249));
})(),(function (){var G__260250 = cljs.core.PersistentArrayMap.EMPTY;
var G__260251 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and finally to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260250,G__260251) : tailrecursion.hoplon.markdown.para_node.call(null,G__260250,G__260251));
})(),(function (){var G__260252 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("136\n") : tailrecursion.hoplon.code.call(null,"136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260252) : tailrecursion.hoplon.pre.call(null,G__260252));
})(),(function (){var G__260253 = cljs.core.PersistentArrayMap.EMPTY;
var G__260254 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The process we have just described is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution model"], null)], 0))," for procedure application. It can be taken as a model that determines the ",(function (){var G__260255 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260256 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["meaning"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260255,G__260256) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260255,G__260256));
})()," of procedure application, insofar as the procedures in this chapter are concerned. However, there are two points that should be stressed:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260253,G__260254) : tailrecursion.hoplon.markdown.para_node.call(null,G__260253,G__260254));
})(),(function (){var G__260257 = cljs.core.PersistentArrayMap.EMPTY;
var G__260258 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260259 = cljs.core.PersistentArrayMap.EMPTY;
var G__260260 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260261 = cljs.core.PersistentArrayMap.EMPTY;
var G__260262 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The purpose of the substitution is to help us think about procedure application, not to provide a description of how the interpreter really works. Typical interpreters do not evaluate procedure applications by manipulating the text of a procedure to substitute values for the formal parameters. In practice, the ",(function (){var G__260263 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260264 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260263,G__260264) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260263,G__260264));
})()," is accomplished by using a local environment for the formal parameters. We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260261,G__260262) : tailrecursion.hoplon.markdown.para_node.call(null,G__260261,G__260262));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260259,G__260260) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260259,G__260260));
})(),(function (){var G__260265 = cljs.core.PersistentArrayMap.EMPTY;
var G__260266 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260267 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260268 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260269 = cljs.core.PersistentArrayMap.EMPTY;
var G__260270 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Over the course of this book, we will present a sequence of increasingly elaborate models of how interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. The substitution model is only the first of these models ",(function (){var G__260271 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__260272 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260271,G__260272) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260271,G__260272));
})()," a way to get started thinking formally about the evaluation process. In general, when modeling phenomena in science and engineering, we begin with simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate and must be replaced by more refined models. The substitution model is no exception. In particular, when we address in chapter 3 the use of procedures with ",(function (){var G__260273 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260274 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mutable data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260273,G__260274) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260273,G__260274));
})(),", we will see that the substitution model breaks down and must be replaced by a more complicated model of procedure application.",(function (){var G__260275 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260276 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process. The problem arises from the possibility of confusion between the names used for the formal parameters of a procedure and the (possibly identical) names used in the expressions to which the procedure may be applied. Indeed, there is a long history of erroneous definitions of substitution in the literature of logic and programming semantics. See Stoy 1977 for a careful discussion of substitution."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260275,G__260276) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260275,G__260276));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260269,G__260270) : tailrecursion.hoplon.markdown.para_node.call(null,G__260269,G__260270));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260268;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260267;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260265,G__260266) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260265,G__260266));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260257,G__260258) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260257,G__260258));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260203;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260202;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260201;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260200;
}})()], 0));
var G__258425 = "";
var G__258426 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Applicative Order vs Normal Order"], null),(function (){var _STAR_references_STAR_260277 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260278 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260279 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260280 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260281 = cljs.core.PersistentArrayMap.EMPTY;
var G__260282 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["According to the description of evaluation given in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),", the interpreter first evaluates the operator and operands and then applies the resulting procedure to the resulting arguments. This is not the only way to perform evaluation. An alternative evaluation model would not evaluate the operands until their values were needed. Instead it would first substitute operand expressions for parameters until it obtained an expression involving only primitive operators, and would then perform the evaluation. If we used this method, the evaluation of"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260281,G__260282) : tailrecursion.hoplon.markdown.para_node.call(null,G__260281,G__260282));
})(),(function (){var G__260283 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260283) : tailrecursion.hoplon.pre.call(null,G__260283));
})(),(function (){var G__260284 = cljs.core.PersistentArrayMap.EMPTY;
var G__260285 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["would proceed according to the sequence of expansions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260284,G__260285) : tailrecursion.hoplon.markdown.para_node.call(null,G__260284,G__260285));
})(),(function (){var G__260286 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260286) : tailrecursion.hoplon.pre.call(null,G__260286));
})(),(function (){var G__260287 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (square (+ 5 1))      (square (* 5 2))  )\n") : tailrecursion.hoplon.code.call(null,"(+    (square (+ 5 1))      (square (* 5 2))  )\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260287) : tailrecursion.hoplon.pre.call(null,G__260287));
})(),(function (){var G__260288 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n") : tailrecursion.hoplon.code.call(null,"(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260288) : tailrecursion.hoplon.pre.call(null,G__260288));
})(),(function (){var G__260289 = cljs.core.PersistentArrayMap.EMPTY;
var G__260290 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["followed by the reductions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260289,G__260290) : tailrecursion.hoplon.markdown.para_node.call(null,G__260289,G__260290));
})(),(function (){var G__260291 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260291) : tailrecursion.hoplon.pre.call(null,G__260291));
})(),(function (){var G__260292 = cljs.core.PersistentArrayMap.EMPTY;
var G__260293 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This gives the same answer as our previous evaluation model, but the process is different. In particular, the evaluations of ",(function (){var G__260294 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__260295 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260294,G__260295) : tailrecursion.hoplon.markdown.code_node.call(null,G__260294,G__260295));
})()," and ",(function (){var G__260296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__260297 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260296,G__260297) : tailrecursion.hoplon.markdown.code_node.call(null,G__260296,G__260297));
})()," are each performed twice here, corresponding to the reduction of the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260292,G__260293) : tailrecursion.hoplon.markdown.para_node.call(null,G__260292,G__260293));
})(),(function (){var G__260298 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(* x x)\n") : tailrecursion.hoplon.code.call(null,"(* x x)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260298) : tailrecursion.hoplon.pre.call(null,G__260298));
})(),(function (){var G__260299 = cljs.core.PersistentArrayMap.EMPTY;
var G__260300 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["with ",(function (){var G__260301 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__260302 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260301,G__260302) : tailrecursion.hoplon.markdown.code_node.call(null,G__260301,G__260302));
})()," replaced respectively by ",(function (){var G__260303 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__260304 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260303,G__260304) : tailrecursion.hoplon.markdown.code_node.call(null,G__260303,G__260304));
})()," and ",(function (){var G__260305 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__260306 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260305,G__260306) : tailrecursion.hoplon.markdown.code_node.call(null,G__260305,G__260306));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260299,G__260300) : tailrecursion.hoplon.markdown.para_node.call(null,G__260299,G__260300));
})(),(function (){var G__260307 = cljs.core.PersistentArrayMap.EMPTY;
var G__260308 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This alternative ",(function (){var G__260309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260310 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["fully expand and then reduce"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260309,G__260310) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260309,G__260310));
})()," evaluation method is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["normal-order evaluation"], null)], 0)),", in contrast to the ",(function (){var G__260311 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260312 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["evaluate the arguments and then apply"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260311,G__260312) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260311,G__260312));
})()," method that the interpreter actually uses, which is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["applicative-order evaluation"], null)], 0)),". It can be shown that, for procedure applications that can be modeled using substitution (including all the procedures in the first two chapters of this book) and that yield legitimate values, normal-order and applicative-order evaluation produce the same value. (See ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#q1.5",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.5"], null)], 0))," for an instance of an ",(function (){var G__260313 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260314 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["illegitimate"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260313,G__260314) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260313,G__260314));
})()," value where normal-order and applicative-order evaluation do not give the same result.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260307,G__260308) : tailrecursion.hoplon.markdown.para_node.call(null,G__260307,G__260308));
})(),(function (){var G__260315 = cljs.core.PersistentArrayMap.EMPTY;
var G__260316 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp uses applicative-order evaluation, partly because of the additional efficiency obtained from avoiding multiple evaluations of expressions such as those illustrated with ",(function (){var G__260317 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__260318 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260317,G__260318) : tailrecursion.hoplon.markdown.code_node.call(null,G__260317,G__260318));
})()," and ",(function (){var G__260319 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__260320 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260319,G__260320) : tailrecursion.hoplon.markdown.code_node.call(null,G__260319,G__260320));
})()," above and, more significantly, because normal-order evaluation becomes much more complicated to deal with when we leave the realm of procedures that can be modeled by substitution. On the other hand, normal-order evaluation can be an extremely valuable tool, and we will investigate some of its implications in chapters 3 and 4.",(function (){var G__260321 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260322 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In chapter 3 we will introduce ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["stream processing"], null)], 0)),", which is a way of handling apparently ",(function (){var G__260323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260324 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["infinite"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260323,G__260324) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260323,G__260324));
})()," data structures by incorporating a limited form of normal-order evaluation. In section 4.2 we will modify the Scheme interpreter to produce a normal-order variant of Scheme."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260321,G__260322) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260321,G__260322));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260315,G__260316) : tailrecursion.hoplon.markdown.para_node.call(null,G__260315,G__260316));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260280;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260279;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260278;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260277;
}})()], 0));
var G__258427 = "";
var G__258428 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Conditional Expressions and Predicates"], null),(function (){var _STAR_references_STAR_260325 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260326 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260327 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260328 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 31, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260329 = cljs.core.PersistentArrayMap.EMPTY;
var G__260330 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The expressive power of the class of procedures that we can define at this point is very limited, because we have no way to make tests and to perform different operations depending on the result of a test. For instance, we cannot define a procedure that computes the absolute value of a number by testing whether the number is positive, negative, or zero and taking different actions in the different cases according to the rule"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260329,G__260330) : tailrecursion.hoplon.markdown.para_node.call(null,G__260329,G__260330));
})(),(function (){var G__260331 = cljs.core.PersistentArrayMap.EMPTY;
var G__260332 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$| x |= \\begin{cases} x &\\mbox{if } x > 0 \\cr 0 &\\mbox{if } x = 0 \\cr -x &\\mbox{if } x < 0 \\end{cases}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260331,G__260332) : tailrecursion.hoplon.markdown.para_node.call(null,G__260331,G__260332));
})(),(function (){var G__260333 = cljs.core.PersistentArrayMap.EMPTY;
var G__260334 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This construct is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["case analysis"], null)], 0)),", and there is a special form in Lisp for notating such a case analysis. It is called ",(function (){var G__260335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260336 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260335,G__260336) : tailrecursion.hoplon.markdown.code_node.call(null,G__260335,G__260336));
})()," (which stands for ",(function (){var G__260337 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260338 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["conditional"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260337,G__260338) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260337,G__260338));
})(),"), and it is used as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260333,G__260334) : tailrecursion.hoplon.markdown.para_node.call(null,G__260333,G__260334));
})(),(function (){var G__260339 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n") : tailrecursion.hoplon.code.call(null,"(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260339) : tailrecursion.hoplon.pre.call(null,G__260339));
})(),(function (){var G__260340 = cljs.core.PersistentArrayMap.EMPTY;
var G__260341 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a conditional expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260340,G__260341) : tailrecursion.hoplon.markdown.para_node.call(null,G__260340,G__260341));
})(),(function (){var G__260342 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n") : tailrecursion.hoplon.code.call(null,"(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260342) : tailrecursion.hoplon.pre.call(null,G__260342));
})(),(function (){var G__260343 = cljs.core.PersistentArrayMap.EMPTY;
var G__260344 = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consisting of the symbol cond followed by pairs of expressions <p> <e> called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clauses"], null)], 0)),". The first expression in each pair is a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," ",(function (){var G__260345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__260346 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260345,G__260346) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260345,G__260346));
})()," that is, an expression whose value is interpreted as either ",(function (){var G__260347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260348 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260347,G__260348) : tailrecursion.hoplon.markdown.code_node.call(null,G__260347,G__260348));
})()," or ",(function (){var G__260349 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260350 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260349,G__260350) : tailrecursion.hoplon.markdown.code_node.call(null,G__260349,G__260350));
})(),".",(function (){var G__260351 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260352 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260353 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260354 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Interpreted as either true or false"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260353,G__260354) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260353,G__260354));
})()," means this: In Scheme, there are two distinguished values that are denoted by the constants ",(function (){var G__260355 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260356 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260355,G__260356) : tailrecursion.hoplon.markdown.code_node.call(null,G__260355,G__260356));
})()," and ",(function (){var G__260357 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260358 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260357,G__260358) : tailrecursion.hoplon.markdown.code_node.call(null,G__260357,G__260358));
})(),". When the interpreter checks a predicate",(function (){var G__260359 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260360 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260359,G__260360) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260359,G__260360));
})(),"s value, it interprets",(function (){var G__260361 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260362 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260361,G__260362) : tailrecursion.hoplon.markdown.code_node.call(null,G__260361,G__260362));
})()," and ",(function (){var G__260363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"nil"], null);
var G__260364 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260363,G__260364) : tailrecursion.hoplon.markdown.code_node.call(null,G__260363,G__260364));
})()," as false. Any other value is treated as true. (Thus, providing ",(function (){var G__260365 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260366 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260365,G__260366) : tailrecursion.hoplon.markdown.code_node.call(null,G__260365,G__260366));
})()," is logically unnecessary, but it is convenient.)"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260351,G__260352) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260351,G__260352));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260343,G__260344) : tailrecursion.hoplon.markdown.para_node.call(null,G__260343,G__260344));
})(),(function (){var G__260367 = cljs.core.PersistentArrayMap.EMPTY;
var G__260368 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Conditional expressions are evaluated as follows. The predicate <p1> is evaluated first. If its value is false, then <p2> is evaluated. If <p2>",(function (){var G__260369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260370 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260369,G__260370) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260369,G__260370));
})(),"s value is also false, then <p3> is evaluated. This process continues until a predicate is found whose value is true, in which case the interpreter returns the value of the corresponding ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consequent expression"], null)], 0))," <e> of the clause as the value of the conditional expression. If none of the <p>",(function (){var G__260371 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260372 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260371,G__260372) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260371,G__260372));
})(),"s is found to be true, the value of the ",(function (){var G__260373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260374 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260373,G__260374) : tailrecursion.hoplon.markdown.code_node.call(null,G__260373,G__260374));
})()," is undefined."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260367,G__260368) : tailrecursion.hoplon.markdown.para_node.call(null,G__260367,G__260368));
})(),(function (){var G__260375 = cljs.core.PersistentArrayMap.EMPTY;
var G__260376 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The word ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," is used for procedures that return ",(function (){var G__260377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260378 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260377,G__260378) : tailrecursion.hoplon.markdown.code_node.call(null,G__260377,G__260378));
})()," or ",(function (){var G__260379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260380 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260379,G__260380) : tailrecursion.hoplon.markdown.code_node.call(null,G__260379,G__260380));
})(),", as well as for expressions that evaluate to ",(function (){var G__260381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260382 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260381,G__260382) : tailrecursion.hoplon.markdown.code_node.call(null,G__260381,G__260382));
})()," or ",(function (){var G__260383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260384 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260383,G__260384) : tailrecursion.hoplon.markdown.code_node.call(null,G__260383,G__260384));
})(),". The absolute-value procedure ",(function (){var G__260385 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__260386 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260385,G__260386) : tailrecursion.hoplon.markdown.code_node.call(null,G__260385,G__260386));
})()," makes use of the primitive predicates >, <, and =.",(function (){var G__260387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260388 = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Abs"], null);
var G__260390 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260389,G__260390) : tailrecursion.hoplon.markdown.code_node.call(null,G__260389,G__260390));
})()," also uses the ",(function (){var G__260391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260392 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["minus"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260391,G__260392) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260391,G__260392));
})()," operator ",(function (){var G__260393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__260394 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260393,G__260394) : tailrecursion.hoplon.markdown.code_node.call(null,G__260393,G__260394));
})(),", which, when used with a single operand, as in ",(function (){var G__260395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- x)"], null);
var G__260396 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260395,G__260396) : tailrecursion.hoplon.markdown.code_node.call(null,G__260395,G__260396));
})(),", indicates negation."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260387,G__260388) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260387,G__260388));
})()," These take two numbers as arguments and test whether the first number is, respectively, greater than, less than, or equal to the second number, returning true or false accordingly."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260375,G__260376) : tailrecursion.hoplon.markdown.para_node.call(null,G__260375,G__260376));
})(),(function (){var G__260397 = cljs.core.PersistentArrayMap.EMPTY;
var G__260398 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Another way to write the absolute-value procedure is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260397,G__260398) : tailrecursion.hoplon.markdown.para_node.call(null,G__260397,G__260398));
})(),(function (){var G__260444 = (function (){var G__260445 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260446 = (function (){var G__260447 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260448 = "(";
var G__260449 = (function (){var G__260468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260469 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260468,G__260469) : tailrecursion.hoplon.span.call(null,G__260468,G__260469));
})();
var G__260450 = (function (){var G__260470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260471 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260470,G__260471) : tailrecursion.hoplon.span.call(null,G__260470,G__260471));
})();
var G__260451 = " [";
var G__260452 = (function (){var G__260472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260473 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260472,G__260473) : tailrecursion.hoplon.span.call(null,G__260472,G__260473));
})();
var G__260453 = "]\n  (";
var G__260454 = (function (){var G__260474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260475 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260474,G__260475) : tailrecursion.hoplon.span.call(null,G__260474,G__260475));
})();
var G__260455 = "(";
var G__260456 = (function (){var G__260476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260477 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260476,G__260477) : tailrecursion.hoplon.span.call(null,G__260476,G__260477));
})();
var G__260457 = (function (){var G__260478 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260479 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260478,G__260479) : tailrecursion.hoplon.span.call(null,G__260478,G__260479));
})();
var G__260458 = " ";
var G__260459 = (function (){var G__260480 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260481 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260480,G__260481) : tailrecursion.hoplon.span.call(null,G__260480,G__260481));
})();
var G__260460 = ") (";
var G__260461 = (function (){var G__260482 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260483 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260482,G__260483) : tailrecursion.hoplon.span.call(null,G__260482,G__260483));
})();
var G__260462 = (function (){var G__260484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260485 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260484,G__260485) : tailrecursion.hoplon.span.call(null,G__260484,G__260485));
})();
var G__260463 = ")\n        ";
var G__260464 = (function (){var G__260486 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260487 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260486,G__260487) : tailrecursion.hoplon.span.call(null,G__260486,G__260487));
})();
var G__260465 = " ";
var G__260466 = (function (){var G__260488 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260489 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260488,G__260489) : tailrecursion.hoplon.span.call(null,G__260488,G__260489));
})();
var G__260467 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__260447,G__260448,G__260449,G__260450,G__260451,G__260452,G__260453,G__260454,G__260455,G__260456,G__260457,G__260458,G__260459,G__260460,G__260461,G__260462,G__260463,G__260464,G__260465,G__260466,G__260467) : tailrecursion.hoplon.pre.call(null,G__260447,G__260448,G__260449,G__260450,G__260451,G__260452,G__260453,G__260454,G__260455,G__260456,G__260457,G__260458,G__260459,G__260460,G__260461,G__260462,G__260463,G__260464,G__260465,G__260466,G__260467));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260445,G__260446) : tailrecursion.hoplon.div.call(null,G__260445,G__260446));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260444) : tailrecursion.hoplon.div.call(null,G__260444));
})(),(function (){var G__260490 = cljs.core.PersistentArrayMap.EMPTY;
var G__260491 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which could be expressed in English as ",(function (){var G__260492 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260493 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If x is less than zero return - x; otherwise return x."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260492,G__260493) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260492,G__260493));
})()," ",(function (){var G__260494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,":else"], null);
var G__260495 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260494,G__260495) : tailrecursion.hoplon.markdown.code_node.call(null,G__260494,G__260495));
})()," is a special symbol that can be used in place of the <p> in the final clause of a ",(function (){var G__260496 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260497 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260496,G__260497) : tailrecursion.hoplon.markdown.code_node.call(null,G__260496,G__260497));
})(),". This causes the ",(function (){var G__260498 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260499 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260498,G__260499) : tailrecursion.hoplon.markdown.code_node.call(null,G__260498,G__260499));
})()," to return as its value the value of the corresponding <e> whenever all previous clauses have been bypassed. In fact, any expression that always evaluates to a true value could be used as the <p> here."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260490,G__260491) : tailrecursion.hoplon.markdown.para_node.call(null,G__260490,G__260491));
})(),(function (){var G__260500 = cljs.core.PersistentArrayMap.EMPTY;
var G__260501 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here is yet another way to write the absolute-value procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260500,G__260501) : tailrecursion.hoplon.markdown.para_node.call(null,G__260500,G__260501));
})(),(function (){var G__260543 = (function (){var G__260544 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260545 = (function (){var G__260546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260547 = "(";
var G__260548 = (function (){var G__260565 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260566 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260565,G__260566) : tailrecursion.hoplon.span.call(null,G__260565,G__260566));
})();
var G__260549 = (function (){var G__260567 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260568 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260567,G__260568) : tailrecursion.hoplon.span.call(null,G__260567,G__260568));
})();
var G__260550 = " [";
var G__260551 = (function (){var G__260569 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260570 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260569,G__260570) : tailrecursion.hoplon.span.call(null,G__260569,G__260570));
})();
var G__260552 = "]\n  (";
var G__260553 = (function (){var G__260571 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260572 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260571,G__260572) : tailrecursion.hoplon.span.call(null,G__260571,G__260572));
})();
var G__260554 = "(";
var G__260555 = (function (){var G__260573 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260574 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260573,G__260574) : tailrecursion.hoplon.span.call(null,G__260573,G__260574));
})();
var G__260556 = (function (){var G__260575 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260576 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260575,G__260576) : tailrecursion.hoplon.span.call(null,G__260575,G__260576));
})();
var G__260557 = " ";
var G__260558 = (function (){var G__260577 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260578 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260577,G__260578) : tailrecursion.hoplon.span.call(null,G__260577,G__260578));
})();
var G__260559 = ")\n      (";
var G__260560 = (function (){var G__260579 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260580 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260579,G__260580) : tailrecursion.hoplon.span.call(null,G__260579,G__260580));
})();
var G__260561 = (function (){var G__260581 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260582 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260581,G__260582) : tailrecursion.hoplon.span.call(null,G__260581,G__260582));
})();
var G__260562 = ")\n      ";
var G__260563 = (function (){var G__260583 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260584 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260583,G__260584) : tailrecursion.hoplon.span.call(null,G__260583,G__260584));
})();
var G__260564 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__260546,G__260547,G__260548,G__260549,G__260550,G__260551,G__260552,G__260553,G__260554,G__260555,G__260556,G__260557,G__260558,G__260559,G__260560,G__260561,G__260562,G__260563,G__260564) : tailrecursion.hoplon.pre.call(null,G__260546,G__260547,G__260548,G__260549,G__260550,G__260551,G__260552,G__260553,G__260554,G__260555,G__260556,G__260557,G__260558,G__260559,G__260560,G__260561,G__260562,G__260563,G__260564));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260544,G__260545) : tailrecursion.hoplon.div.call(null,G__260544,G__260545));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260543) : tailrecursion.hoplon.div.call(null,G__260543));
})(),(function (){var G__260585 = cljs.core.PersistentArrayMap.EMPTY;
var G__260586 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This uses the special form ",(function (){var G__260587 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260588 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260587,G__260588) : tailrecursion.hoplon.markdown.code_node.call(null,G__260587,G__260588));
})(),", a restricted type of conditional that can be used when there are precisely two cases in the case analysis. The general form of an ",(function (){var G__260589 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260590 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260589,G__260590) : tailrecursion.hoplon.markdown.code_node.call(null,G__260589,G__260590));
})()," expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260585,G__260586) : tailrecursion.hoplon.markdown.para_node.call(null,G__260585,G__260586));
})(),(function (){var G__260610 = (function (){var G__260611 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260612 = (function (){var G__260613 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260614 = "(";
var G__260615 = (function (){var G__260622 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260623 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260622,G__260623) : tailrecursion.hoplon.span.call(null,G__260622,G__260623));
})();
var G__260616 = (function (){var G__260624 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260625 = "<predicate>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260624,G__260625) : tailrecursion.hoplon.span.call(null,G__260624,G__260625));
})();
var G__260617 = " ";
var G__260618 = (function (){var G__260626 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260627 = "<consequent>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260626,G__260627) : tailrecursion.hoplon.span.call(null,G__260626,G__260627));
})();
var G__260619 = " ";
var G__260620 = (function (){var G__260628 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260629 = "<alternative>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260628,G__260629) : tailrecursion.hoplon.span.call(null,G__260628,G__260629));
})();
var G__260621 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__260613,G__260614,G__260615,G__260616,G__260617,G__260618,G__260619,G__260620,G__260621) : tailrecursion.hoplon.pre.call(null,G__260613,G__260614,G__260615,G__260616,G__260617,G__260618,G__260619,G__260620,G__260621));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260611,G__260612) : tailrecursion.hoplon.div.call(null,G__260611,G__260612));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260610) : tailrecursion.hoplon.div.call(null,G__260610));
})(),(function (){var G__260630 = cljs.core.PersistentArrayMap.EMPTY;
var G__260631 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate an ",(function (){var G__260632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260633 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260632,G__260633) : tailrecursion.hoplon.markdown.code_node.call(null,G__260632,G__260633));
})()," expression, the interpreter starts by evaluating the <predicate> part of the expression. If the <predicate> evaluates to a true value, the interpreter then evaluates the <consequent> and returns its value. Otherwise it evaluates the <alternative> and returns its value.",(function (){var G__260634 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260635 = new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In Scheme, a minor difference between ",(function (){var G__260636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260637 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260636,G__260637) : tailrecursion.hoplon.markdown.code_node.call(null,G__260636,G__260637));
})()," and ",(function (){var G__260638 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260639 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260638,G__260639) : tailrecursion.hoplon.markdown.code_node.call(null,G__260638,G__260639));
})()," is that the ",(function (){var G__260640 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__260641 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260640,G__260641) : tailrecursion.hoplon.markdown.code_node.call(null,G__260640,G__260641));
})()," part of each ",(function (){var G__260642 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260643 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260642,G__260643) : tailrecursion.hoplon.markdown.code_node.call(null,G__260642,G__260643));
})()," clause may be a sequence of expressions. If the corresponding ",(function (){var G__260644 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<p>"], null);
var G__260645 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260644,G__260645) : tailrecursion.hoplon.markdown.code_node.call(null,G__260644,G__260645));
})()," is found to be true, the expressions ",(function (){var G__260646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__260647 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260646,G__260647) : tailrecursion.hoplon.markdown.code_node.call(null,G__260646,G__260647));
})()," are evaluated in sequence and the value of the final expression in the sequence is returned as the value of the ",(function (){var G__260648 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260649 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260648,G__260649) : tailrecursion.hoplon.markdown.code_node.call(null,G__260648,G__260649));
})(),". In an ",(function (){var G__260650 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260651 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260650,G__260651) : tailrecursion.hoplon.markdown.code_node.call(null,G__260650,G__260651));
})()," expression, however, the ",(function (){var G__260652 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<consequent>"], null);
var G__260653 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260652,G__260653) : tailrecursion.hoplon.markdown.code_node.call(null,G__260652,G__260653));
})()," and ",(function (){var G__260654 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<alternative>"], null);
var G__260655 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260654,G__260655) : tailrecursion.hoplon.markdown.code_node.call(null,G__260654,G__260655));
})()," must be single expressions. In Clojure, however, these must all be single expressioins. To get a similar functionality one could use ",(function (){var G__260656 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"do"], null);
var G__260657 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260656,G__260657) : tailrecursion.hoplon.markdown.code_node.call(null,G__260656,G__260657));
})(),"."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260634,G__260635) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260634,G__260635));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260630,G__260631) : tailrecursion.hoplon.markdown.para_node.call(null,G__260630,G__260631));
})(),(function (){var G__260658 = cljs.core.PersistentArrayMap.EMPTY;
var G__260659 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In addition to primitive predicates such as <, =, and >, there are logical composition operations, which enable us to construct compound predicates. The three most frequently used are these:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260658,G__260659) : tailrecursion.hoplon.markdown.para_node.call(null,G__260658,G__260659));
})(),(function (){var G__260660 = cljs.core.PersistentArrayMap.EMPTY;
var G__260661 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260662 = cljs.core.PersistentArrayMap.EMPTY;
var G__260663 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260664 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260665 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__260666 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (and <e1> ... <en>)\n"], null);
var G__260667 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260666,G__260667) : tailrecursion.hoplon.markdown.code_node.call(null,G__260666,G__260667));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260665;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260664;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260662,G__260663) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260662,G__260663));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260660,G__260661) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260660,G__260661));
})(),(function (){var G__260668 = cljs.core.PersistentArrayMap.EMPTY;
var G__260669 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to false, the value of the  ",(function (){var G__260670 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__260671 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260670,G__260671) : tailrecursion.hoplon.markdown.code_node.call(null,G__260670,G__260671));
})()," expression is false, and the rest of the <e>",(function (){var G__260672 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260673 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260672,G__260673) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260672,G__260673));
})(),"s are not  evaluated. If all <e>",(function (){var G__260674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260675 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260674,G__260675) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260674,G__260675));
})(),"s evaluate to true values, the value of the and  expression is the value of the last one."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260668,G__260669) : tailrecursion.hoplon.markdown.para_node.call(null,G__260668,G__260669));
})(),(function (){var G__260676 = cljs.core.PersistentArrayMap.EMPTY;
var G__260677 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260678 = cljs.core.PersistentArrayMap.EMPTY;
var G__260679 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260680 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260681 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__260682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (or <e1> ... <en>)\n"], null);
var G__260683 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260682,G__260683) : tailrecursion.hoplon.markdown.code_node.call(null,G__260682,G__260683));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260681;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260680;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260678,G__260679) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260678,G__260679));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260676,G__260677) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260676,G__260677));
})(),(function (){var G__260684 = cljs.core.PersistentArrayMap.EMPTY;
var G__260685 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to a true value, that value  is returned as the value of the or expression, and the rest of the  <e>",(function (){var G__260686 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260687 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260686,G__260687) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260686,G__260687));
})(),"s are not evaluated. If all <e>",(function (){var G__260688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260689 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260688,G__260689) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260688,G__260689));
})(),"s evaluate to false, the value of  the ",(function (){var G__260690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__260691 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260690,G__260691) : tailrecursion.hoplon.markdown.code_node.call(null,G__260690,G__260691));
})()," expression is false."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260684,G__260685) : tailrecursion.hoplon.markdown.para_node.call(null,G__260684,G__260685));
})(),(function (){var G__260692 = cljs.core.PersistentArrayMap.EMPTY;
var G__260693 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260694 = cljs.core.PersistentArrayMap.EMPTY;
var G__260695 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260696 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260697 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__260698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (not <e>)\n"], null);
var G__260699 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260698,G__260699) : tailrecursion.hoplon.markdown.code_node.call(null,G__260698,G__260699));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260697;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260696;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260694,G__260695) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260694,G__260695));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260692,G__260693) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260692,G__260693));
})(),(function (){var G__260700 = cljs.core.PersistentArrayMap.EMPTY;
var G__260701 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The value of a ",(function (){var G__260702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__260703 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260702,G__260703) : tailrecursion.hoplon.markdown.code_node.call(null,G__260702,G__260703));
})()," expression is true when the expression <e>  evaluates to false, and false otherwise."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260700,G__260701) : tailrecursion.hoplon.markdown.para_node.call(null,G__260700,G__260701));
})(),(function (){var G__260704 = cljs.core.PersistentArrayMap.EMPTY;
var G__260705 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that ",(function (){var G__260706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__260707 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260706,G__260707) : tailrecursion.hoplon.markdown.code_node.call(null,G__260706,G__260707));
})()," and ",(function (){var G__260708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__260709 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260708,G__260709) : tailrecursion.hoplon.markdown.code_node.call(null,G__260708,G__260709));
})()," are special forms, not procedures, because the subexpressions are not necessarily all evaluated. ",(function (){var G__260710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__260711 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260710,G__260711) : tailrecursion.hoplon.markdown.code_node.call(null,G__260710,G__260711));
})()," is an ordinary procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260704,G__260705) : tailrecursion.hoplon.markdown.para_node.call(null,G__260704,G__260705));
})(),(function (){var G__260712 = cljs.core.PersistentArrayMap.EMPTY;
var G__260713 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As an example of how these are used, the condition that a number x be in the range \\(5 \\lt x \\lt 10\\) may be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260712,G__260713) : tailrecursion.hoplon.markdown.para_node.call(null,G__260712,G__260713));
})(),(function (){var G__260744 = (function (){var G__260745 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260746 = (function (){var G__260747 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260748 = "(";
var G__260749 = (function (){var G__260761 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260762 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260761,G__260762) : tailrecursion.hoplon.span.call(null,G__260761,G__260762));
})();
var G__260750 = "(";
var G__260751 = (function (){var G__260763 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260764 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260763,G__260764) : tailrecursion.hoplon.span.call(null,G__260763,G__260764));
})();
var G__260752 = (function (){var G__260765 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260766 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260765,G__260766) : tailrecursion.hoplon.span.call(null,G__260765,G__260766));
})();
var G__260753 = " ";
var G__260754 = (function (){var G__260767 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260768 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260767,G__260768) : tailrecursion.hoplon.span.call(null,G__260767,G__260768));
})();
var G__260755 = ") (";
var G__260756 = (function (){var G__260769 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260770 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260769,G__260770) : tailrecursion.hoplon.span.call(null,G__260769,G__260770));
})();
var G__260757 = (function (){var G__260771 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260772 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260771,G__260772) : tailrecursion.hoplon.span.call(null,G__260771,G__260772));
})();
var G__260758 = " ";
var G__260759 = (function (){var G__260773 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260774 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260773,G__260774) : tailrecursion.hoplon.span.call(null,G__260773,G__260774));
})();
var G__260760 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__260747,G__260748,G__260749,G__260750,G__260751,G__260752,G__260753,G__260754,G__260755,G__260756,G__260757,G__260758,G__260759,G__260760) : tailrecursion.hoplon.pre.call(null,G__260747,G__260748,G__260749,G__260750,G__260751,G__260752,G__260753,G__260754,G__260755,G__260756,G__260757,G__260758,G__260759,G__260760));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260745,G__260746) : tailrecursion.hoplon.div.call(null,G__260745,G__260746));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260744) : tailrecursion.hoplon.div.call(null,G__260744));
})(),(function (){var G__260775 = cljs.core.PersistentArrayMap.EMPTY;
var G__260776 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As another example, we can define a predicate to test whether one number is greater than or equal to another as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260775,G__260776) : tailrecursion.hoplon.markdown.para_node.call(null,G__260775,G__260776));
})(),(function (){var G__260822 = (function (){var G__260823 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260824 = (function (){var G__260825 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260826 = "(";
var G__260827 = (function (){var G__260846 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260847 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260846,G__260847) : tailrecursion.hoplon.span.call(null,G__260846,G__260847));
})();
var G__260828 = (function (){var G__260848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260849 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260848,G__260849) : tailrecursion.hoplon.span.call(null,G__260848,G__260849));
})();
var G__260829 = "[";
var G__260830 = (function (){var G__260850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260851 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260850,G__260851) : tailrecursion.hoplon.span.call(null,G__260850,G__260851));
})();
var G__260831 = " ";
var G__260832 = (function (){var G__260852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260853 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260852,G__260853) : tailrecursion.hoplon.span.call(null,G__260852,G__260853));
})();
var G__260833 = "] \n  (";
var G__260834 = (function (){var G__260854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260855 = "or ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260854,G__260855) : tailrecursion.hoplon.span.call(null,G__260854,G__260855));
})();
var G__260835 = "(";
var G__260836 = (function (){var G__260856 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260857 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260856,G__260857) : tailrecursion.hoplon.span.call(null,G__260856,G__260857));
})();
var G__260837 = (function (){var G__260858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260859 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260858,G__260859) : tailrecursion.hoplon.span.call(null,G__260858,G__260859));
})();
var G__260838 = " ";
var G__260839 = (function (){var G__260860 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260861 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260860,G__260861) : tailrecursion.hoplon.span.call(null,G__260860,G__260861));
})();
var G__260840 = ") (";
var G__260841 = (function (){var G__260862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260863 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260862,G__260863) : tailrecursion.hoplon.span.call(null,G__260862,G__260863));
})();
var G__260842 = (function (){var G__260864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260865 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260864,G__260865) : tailrecursion.hoplon.span.call(null,G__260864,G__260865));
})();
var G__260843 = " ";
var G__260844 = (function (){var G__260866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260867 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260866,G__260867) : tailrecursion.hoplon.span.call(null,G__260866,G__260867));
})();
var G__260845 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__260825,G__260826,G__260827,G__260828,G__260829,G__260830,G__260831,G__260832,G__260833,G__260834,G__260835,G__260836,G__260837,G__260838,G__260839,G__260840,G__260841,G__260842,G__260843,G__260844,G__260845) : tailrecursion.hoplon.pre.call(null,G__260825,G__260826,G__260827,G__260828,G__260829,G__260830,G__260831,G__260832,G__260833,G__260834,G__260835,G__260836,G__260837,G__260838,G__260839,G__260840,G__260841,G__260842,G__260843,G__260844,G__260845));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260823,G__260824) : tailrecursion.hoplon.div.call(null,G__260823,G__260824));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260822) : tailrecursion.hoplon.div.call(null,G__260822));
})(),(function (){var G__260868 = cljs.core.PersistentArrayMap.EMPTY;
var G__260869 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["or alternatively as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260868,G__260869) : tailrecursion.hoplon.markdown.para_node.call(null,G__260868,G__260869));
})(),(function (){var G__260904 = (function (){var G__260905 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260906 = (function (){var G__260907 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260908 = "(";
var G__260909 = (function (){var G__260923 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260924 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260923,G__260924) : tailrecursion.hoplon.span.call(null,G__260923,G__260924));
})();
var G__260910 = (function (){var G__260925 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260926 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260925,G__260926) : tailrecursion.hoplon.span.call(null,G__260925,G__260926));
})();
var G__260911 = "[";
var G__260912 = (function (){var G__260927 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260928 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260927,G__260928) : tailrecursion.hoplon.span.call(null,G__260927,G__260928));
})();
var G__260913 = " ";
var G__260914 = (function (){var G__260929 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260930 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260929,G__260930) : tailrecursion.hoplon.span.call(null,G__260929,G__260930));
})();
var G__260915 = "]\n  (";
var G__260916 = (function (){var G__260931 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260932 = "not ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260931,G__260932) : tailrecursion.hoplon.span.call(null,G__260931,G__260932));
})();
var G__260917 = "(";
var G__260918 = (function (){var G__260933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260934 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260933,G__260934) : tailrecursion.hoplon.span.call(null,G__260933,G__260934));
})();
var G__260919 = (function (){var G__260935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260936 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260935,G__260936) : tailrecursion.hoplon.span.call(null,G__260935,G__260936));
})();
var G__260920 = " ";
var G__260921 = (function (){var G__260937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260938 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260937,G__260938) : tailrecursion.hoplon.span.call(null,G__260937,G__260938));
})();
var G__260922 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__260907,G__260908,G__260909,G__260910,G__260911,G__260912,G__260913,G__260914,G__260915,G__260916,G__260917,G__260918,G__260919,G__260920,G__260921,G__260922) : tailrecursion.hoplon.pre.call(null,G__260907,G__260908,G__260909,G__260910,G__260911,G__260912,G__260913,G__260914,G__260915,G__260916,G__260917,G__260918,G__260919,G__260920,G__260921,G__260922));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260905,G__260906) : tailrecursion.hoplon.div.call(null,G__260905,G__260906));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260904) : tailrecursion.hoplon.div.call(null,G__260904));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260328;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260327;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260326;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260325;
}})()], 0));
var G__258429 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_260939 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260940 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260941 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260942 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260943 = cljs.core.PersistentArrayMap.EMPTY;
var G__260944 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260943,G__260944) : tailrecursion.hoplon.markdown.para_node.call(null,G__260943,G__260944));
})(),(function (){var G__260952 = (function (){var G__260953 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260954 = (function (){var G__260955 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260956 = (function (){var G__260958 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260959 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260958,G__260959) : tailrecursion.hoplon.span.call(null,G__260958,G__260959));
})();
var G__260957 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3(G__260955,G__260956,G__260957) : tailrecursion.hoplon.pre.call(null,G__260955,G__260956,G__260957));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260953,G__260954) : tailrecursion.hoplon.div.call(null,G__260953,G__260954));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260952) : tailrecursion.hoplon.div.call(null,G__260952));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260942;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260941;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260940;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260939;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_260960 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260961 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260962 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260963 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260964 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("10\n") : tailrecursion.hoplon.code.call(null,"10\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260964) : tailrecursion.hoplon.pre.call(null,G__260964));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260963;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260962;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260961;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260960;
}})()], 0)),"",(function (){var _STAR_references_STAR_260965 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260966 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260967 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260968 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260988 = (function (){var G__260989 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260990 = (function (){var G__260991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260992 = "(";
var G__260993 = (function (){var G__261000 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261001 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261000,G__261001) : tailrecursion.hoplon.span.call(null,G__261000,G__261001));
})();
var G__260994 = (function (){var G__261002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261003 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261002,G__261003) : tailrecursion.hoplon.span.call(null,G__261002,G__261003));
})();
var G__260995 = " ";
var G__260996 = (function (){var G__261004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261005 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261004,G__261005) : tailrecursion.hoplon.span.call(null,G__261004,G__261005));
})();
var G__260997 = " ";
var G__260998 = (function (){var G__261006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261007 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261006,G__261007) : tailrecursion.hoplon.span.call(null,G__261006,G__261007));
})();
var G__260999 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__260991,G__260992,G__260993,G__260994,G__260995,G__260996,G__260997,G__260998,G__260999) : tailrecursion.hoplon.pre.call(null,G__260991,G__260992,G__260993,G__260994,G__260995,G__260996,G__260997,G__260998,G__260999));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260989,G__260990) : tailrecursion.hoplon.div.call(null,G__260989,G__260990));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260988) : tailrecursion.hoplon.div.call(null,G__260988));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260968;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260967;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260966;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260965;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261008 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261009 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261010 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261011 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261012 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("12\n") : tailrecursion.hoplon.code.call(null,"12\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261012) : tailrecursion.hoplon.pre.call(null,G__261012));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261011;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261010;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261009;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261008;
}})()], 0)),"",(function (){var _STAR_references_STAR_261013 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261014 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261015 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261016 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261032 = (function (){var G__261033 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261034 = (function (){var G__261035 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261036 = "(";
var G__261037 = (function (){var G__261042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261043 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261042,G__261043) : tailrecursion.hoplon.span.call(null,G__261042,G__261043));
})();
var G__261038 = (function (){var G__261044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261045 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261044,G__261045) : tailrecursion.hoplon.span.call(null,G__261044,G__261045));
})();
var G__261039 = " ";
var G__261040 = (function (){var G__261046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261047 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261046,G__261047) : tailrecursion.hoplon.span.call(null,G__261046,G__261047));
})();
var G__261041 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__261035,G__261036,G__261037,G__261038,G__261039,G__261040,G__261041) : tailrecursion.hoplon.pre.call(null,G__261035,G__261036,G__261037,G__261038,G__261039,G__261040,G__261041));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261033,G__261034) : tailrecursion.hoplon.div.call(null,G__261033,G__261034));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261032) : tailrecursion.hoplon.div.call(null,G__261032));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261016;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261015;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261014;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261013;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261048 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261049 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261050 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261051 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261052 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("8\n") : tailrecursion.hoplon.code.call(null,"8\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261052) : tailrecursion.hoplon.pre.call(null,G__261052));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261051;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261050;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261049;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261048;
}})()], 0)),"",(function (){var _STAR_references_STAR_261053 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261054 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261055 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261056 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261072 = (function (){var G__261073 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261074 = (function (){var G__261075 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261076 = "(";
var G__261077 = (function (){var G__261082 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261083 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261082,G__261083) : tailrecursion.hoplon.span.call(null,G__261082,G__261083));
})();
var G__261078 = (function (){var G__261084 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261085 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261084,G__261085) : tailrecursion.hoplon.span.call(null,G__261084,G__261085));
})();
var G__261079 = " ";
var G__261080 = (function (){var G__261086 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261087 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261086,G__261087) : tailrecursion.hoplon.span.call(null,G__261086,G__261087));
})();
var G__261081 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__261075,G__261076,G__261077,G__261078,G__261079,G__261080,G__261081) : tailrecursion.hoplon.pre.call(null,G__261075,G__261076,G__261077,G__261078,G__261079,G__261080,G__261081));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261073,G__261074) : tailrecursion.hoplon.div.call(null,G__261073,G__261074));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261072) : tailrecursion.hoplon.div.call(null,G__261072));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261056;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261055;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261054;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261053;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261088 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261089 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261090 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261091 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261092 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("3\n") : tailrecursion.hoplon.code.call(null,"3\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261092) : tailrecursion.hoplon.pre.call(null,G__261092));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261091;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261090;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261089;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261088;
}})()], 0)),"",(function (){var _STAR_references_STAR_261093 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261094 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261095 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261096 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261127 = (function (){var G__261128 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261129 = (function (){var G__261130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261131 = "(";
var G__261132 = (function (){var G__261144 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261145 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261144,G__261145) : tailrecursion.hoplon.span.call(null,G__261144,G__261145));
})();
var G__261133 = "(";
var G__261134 = (function (){var G__261146 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261147 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261146,G__261147) : tailrecursion.hoplon.span.call(null,G__261146,G__261147));
})();
var G__261135 = (function (){var G__261148 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261149 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261148,G__261149) : tailrecursion.hoplon.span.call(null,G__261148,G__261149));
})();
var G__261136 = " ";
var G__261137 = (function (){var G__261150 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261151 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261150,G__261151) : tailrecursion.hoplon.span.call(null,G__261150,G__261151));
})();
var G__261138 = ") (";
var G__261139 = (function (){var G__261152 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261153 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261152,G__261153) : tailrecursion.hoplon.span.call(null,G__261152,G__261153));
})();
var G__261140 = (function (){var G__261154 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261155 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261154,G__261155) : tailrecursion.hoplon.span.call(null,G__261154,G__261155));
})();
var G__261141 = " ";
var G__261142 = (function (){var G__261156 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261157 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261156,G__261157) : tailrecursion.hoplon.span.call(null,G__261156,G__261157));
})();
var G__261143 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__261130,G__261131,G__261132,G__261133,G__261134,G__261135,G__261136,G__261137,G__261138,G__261139,G__261140,G__261141,G__261142,G__261143) : tailrecursion.hoplon.pre.call(null,G__261130,G__261131,G__261132,G__261133,G__261134,G__261135,G__261136,G__261137,G__261138,G__261139,G__261140,G__261141,G__261142,G__261143));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261128,G__261129) : tailrecursion.hoplon.div.call(null,G__261128,G__261129));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261127) : tailrecursion.hoplon.div.call(null,G__261127));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261096;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261095;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261094;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261093;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261158 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261159 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261160 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261161 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261162 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("6\n") : tailrecursion.hoplon.code.call(null,"6\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261162) : tailrecursion.hoplon.pre.call(null,G__261162));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261161;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261160;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261159;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261158;
}})()], 0)),"",(function (){var _STAR_references_STAR_261163 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261164 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261165 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261166 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261182 = (function (){var G__261183 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261184 = (function (){var G__261185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261186 = "(";
var G__261187 = (function (){var G__261192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__261193 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261192,G__261193) : tailrecursion.hoplon.span.call(null,G__261192,G__261193));
})();
var G__261188 = (function (){var G__261194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261195 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261194,G__261195) : tailrecursion.hoplon.span.call(null,G__261194,G__261195));
})();
var G__261189 = " ";
var G__261190 = (function (){var G__261196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261197 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261196,G__261197) : tailrecursion.hoplon.span.call(null,G__261196,G__261197));
})();
var G__261191 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__261185,G__261186,G__261187,G__261188,G__261189,G__261190,G__261191) : tailrecursion.hoplon.pre.call(null,G__261185,G__261186,G__261187,G__261188,G__261189,G__261190,G__261191));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261183,G__261184) : tailrecursion.hoplon.div.call(null,G__261183,G__261184));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261182) : tailrecursion.hoplon.div.call(null,G__261182));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261166;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261165;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261164;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261163;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261198 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261199 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261200 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261201 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261202 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("a\n") : tailrecursion.hoplon.code.call(null,"a\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261202) : tailrecursion.hoplon.pre.call(null,G__261202));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261201;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261200;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261199;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261198;
}})()], 0)),"",(function (){var _STAR_references_STAR_261203 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261204 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261205 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261206 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261229 = (function (){var G__261230 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261231 = (function (){var G__261232 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261233 = "(";
var G__261234 = (function (){var G__261242 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__261243 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261242,G__261243) : tailrecursion.hoplon.span.call(null,G__261242,G__261243));
})();
var G__261235 = (function (){var G__261244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261245 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261244,G__261245) : tailrecursion.hoplon.span.call(null,G__261244,G__261245));
})();
var G__261236 = " (";
var G__261237 = (function (){var G__261246 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261247 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261246,G__261247) : tailrecursion.hoplon.span.call(null,G__261246,G__261247));
})();
var G__261238 = (function (){var G__261248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261249 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261248,G__261249) : tailrecursion.hoplon.span.call(null,G__261248,G__261249));
})();
var G__261239 = " ";
var G__261240 = (function (){var G__261250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261251 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261250,G__261251) : tailrecursion.hoplon.span.call(null,G__261250,G__261251));
})();
var G__261241 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10(G__261232,G__261233,G__261234,G__261235,G__261236,G__261237,G__261238,G__261239,G__261240,G__261241) : tailrecursion.hoplon.pre.call(null,G__261232,G__261233,G__261234,G__261235,G__261236,G__261237,G__261238,G__261239,G__261240,G__261241));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261230,G__261231) : tailrecursion.hoplon.div.call(null,G__261230,G__261231));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261229) : tailrecursion.hoplon.div.call(null,G__261229));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261206;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261205;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261204;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261203;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261252 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261253 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261254 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261255 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261256 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("b\n") : tailrecursion.hoplon.code.call(null,"b\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261256) : tailrecursion.hoplon.pre.call(null,G__261256));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261255;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261254;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261253;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261252;
}})()], 0)),"",(function (){var _STAR_references_STAR_261257 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261258 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261259 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261260 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261287 = (function (){var G__261288 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261289 = (function (){var G__261290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261291 = "(";
var G__261292 = (function (){var G__261302 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261303 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261302,G__261303) : tailrecursion.hoplon.span.call(null,G__261302,G__261303));
})();
var G__261293 = (function (){var G__261304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261305 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261304,G__261305) : tailrecursion.hoplon.span.call(null,G__261304,G__261305));
})();
var G__261294 = " ";
var G__261295 = (function (){var G__261306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261307 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261306,G__261307) : tailrecursion.hoplon.span.call(null,G__261306,G__261307));
})();
var G__261296 = " (";
var G__261297 = (function (){var G__261308 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261309 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261308,G__261309) : tailrecursion.hoplon.span.call(null,G__261308,G__261309));
})();
var G__261298 = (function (){var G__261310 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261311 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261310,G__261311) : tailrecursion.hoplon.span.call(null,G__261310,G__261311));
})();
var G__261299 = " ";
var G__261300 = (function (){var G__261312 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261313 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261312,G__261313) : tailrecursion.hoplon.span.call(null,G__261312,G__261313));
})();
var G__261301 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__261290,G__261291,G__261292,G__261293,G__261294,G__261295,G__261296,G__261297,G__261298,G__261299,G__261300,G__261301) : tailrecursion.hoplon.pre.call(null,G__261290,G__261291,G__261292,G__261293,G__261294,G__261295,G__261296,G__261297,G__261298,G__261299,G__261300,G__261301));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261288,G__261289) : tailrecursion.hoplon.div.call(null,G__261288,G__261289));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261287) : tailrecursion.hoplon.div.call(null,G__261287));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261260;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261259;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261258;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261257;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261314 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261315 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261316 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261317 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261318 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("19\n") : tailrecursion.hoplon.code.call(null,"19\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261318) : tailrecursion.hoplon.pre.call(null,G__261318));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261317;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261316;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261315;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261314;
}})()], 0)),"",(function (){var _STAR_references_STAR_261319 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261320 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261321 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261322 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261338 = (function (){var G__261339 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261340 = (function (){var G__261341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261342 = "(";
var G__261343 = (function (){var G__261348 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261349 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261348,G__261349) : tailrecursion.hoplon.span.call(null,G__261348,G__261349));
})();
var G__261344 = (function (){var G__261350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261351 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261350,G__261351) : tailrecursion.hoplon.span.call(null,G__261350,G__261351));
})();
var G__261345 = " ";
var G__261346 = (function (){var G__261352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261353 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261352,G__261353) : tailrecursion.hoplon.span.call(null,G__261352,G__261353));
})();
var G__261347 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__261341,G__261342,G__261343,G__261344,G__261345,G__261346,G__261347) : tailrecursion.hoplon.pre.call(null,G__261341,G__261342,G__261343,G__261344,G__261345,G__261346,G__261347));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261339,G__261340) : tailrecursion.hoplon.div.call(null,G__261339,G__261340));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261338) : tailrecursion.hoplon.div.call(null,G__261338));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261322;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261321;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261320;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261319;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261354 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261355 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261356 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261357 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261358 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("false\n") : tailrecursion.hoplon.code.call(null,"false\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261358) : tailrecursion.hoplon.pre.call(null,G__261358));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261357;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261356;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261355;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261354;
}})()], 0)),"",(function (){var _STAR_references_STAR_261359 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261360 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261361 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261362 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261412 = (function (){var G__261413 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261414 = (function (){var G__261415 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261416 = "(";
var G__261417 = (function (){var G__261438 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__261439 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261438,G__261439) : tailrecursion.hoplon.span.call(null,G__261438,G__261439));
})();
var G__261418 = "(";
var G__261419 = (function (){var G__261440 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261441 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261440,G__261441) : tailrecursion.hoplon.span.call(null,G__261440,G__261441));
})();
var G__261420 = "(";
var G__261421 = (function (){var G__261442 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261443 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261442,G__261443) : tailrecursion.hoplon.span.call(null,G__261442,G__261443));
})();
var G__261422 = (function (){var G__261444 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261445 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261444,G__261445) : tailrecursion.hoplon.span.call(null,G__261444,G__261445));
})();
var G__261423 = " ";
var G__261424 = (function (){var G__261446 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261447 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261446,G__261447) : tailrecursion.hoplon.span.call(null,G__261446,G__261447));
})();
var G__261425 = ") (";
var G__261426 = (function (){var G__261448 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261449 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261448,G__261449) : tailrecursion.hoplon.span.call(null,G__261448,G__261449));
})();
var G__261427 = (function (){var G__261450 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261451 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261450,G__261451) : tailrecursion.hoplon.span.call(null,G__261450,G__261451));
})();
var G__261428 = " (";
var G__261429 = (function (){var G__261452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261453 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261452,G__261453) : tailrecursion.hoplon.span.call(null,G__261452,G__261453));
})();
var G__261430 = (function (){var G__261454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261455 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261454,G__261455) : tailrecursion.hoplon.span.call(null,G__261454,G__261455));
})();
var G__261431 = " ";
var G__261432 = (function (){var G__261456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261457 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261456,G__261457) : tailrecursion.hoplon.span.call(null,G__261456,G__261457));
})();
var G__261433 = ")))\n    ";
var G__261434 = (function (){var G__261458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261459 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261458,G__261459) : tailrecursion.hoplon.span.call(null,G__261458,G__261459));
})();
var G__261435 = "\n    ";
var G__261436 = (function (){var G__261460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261461 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261460,G__261461) : tailrecursion.hoplon.span.call(null,G__261460,G__261461));
})();
var G__261437 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__261415,G__261416,G__261417,G__261418,G__261419,G__261420,G__261421,G__261422,G__261423,G__261424,G__261425,G__261426,G__261427,G__261428,G__261429,G__261430,G__261431,G__261432,G__261433,G__261434,G__261435,G__261436,G__261437) : tailrecursion.hoplon.pre.call(null,G__261415,G__261416,G__261417,G__261418,G__261419,G__261420,G__261421,G__261422,G__261423,G__261424,G__261425,G__261426,G__261427,G__261428,G__261429,G__261430,G__261431,G__261432,G__261433,G__261434,G__261435,G__261436,G__261437));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261413,G__261414) : tailrecursion.hoplon.div.call(null,G__261413,G__261414));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261412) : tailrecursion.hoplon.div.call(null,G__261412));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261362;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261361;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261360;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261359;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261462 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261463 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261464 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261465 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261466 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("4\n") : tailrecursion.hoplon.code.call(null,"4\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261466) : tailrecursion.hoplon.pre.call(null,G__261466));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261465;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261464;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261463;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261462;
}})()], 0)),"",(function (){var _STAR_references_STAR_261467 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261468 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261469 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261470 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261528 = (function (){var G__261529 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261530 = (function (){var G__261531 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261532 = "(";
var G__261533 = (function (){var G__261558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261559 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261558,G__261559) : tailrecursion.hoplon.span.call(null,G__261558,G__261559));
})();
var G__261534 = "(";
var G__261535 = (function (){var G__261560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261561 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261560,G__261561) : tailrecursion.hoplon.span.call(null,G__261560,G__261561));
})();
var G__261536 = (function (){var G__261562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261563 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261562,G__261563) : tailrecursion.hoplon.span.call(null,G__261562,G__261563));
})();
var G__261537 = " ";
var G__261538 = (function (){var G__261564 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261565 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261564,G__261565) : tailrecursion.hoplon.span.call(null,G__261564,G__261565));
})();
var G__261539 = ") ";
var G__261540 = (function (){var G__261566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261567 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261566,G__261567) : tailrecursion.hoplon.span.call(null,G__261566,G__261567));
})();
var G__261541 = "\n      (";
var G__261542 = (function (){var G__261568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261569 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261568,G__261569) : tailrecursion.hoplon.span.call(null,G__261568,G__261569));
})();
var G__261543 = (function (){var G__261570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261571 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261570,G__261571) : tailrecursion.hoplon.span.call(null,G__261570,G__261571));
})();
var G__261544 = " ";
var G__261545 = (function (){var G__261572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261573 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261572,G__261573) : tailrecursion.hoplon.span.call(null,G__261572,G__261573));
})();
var G__261546 = ") (";
var G__261547 = (function (){var G__261574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261575 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261574,G__261575) : tailrecursion.hoplon.span.call(null,G__261574,G__261575));
})();
var G__261548 = (function (){var G__261576 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261577 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261576,G__261577) : tailrecursion.hoplon.span.call(null,G__261576,G__261577));
})();
var G__261549 = " ";
var G__261550 = (function (){var G__261578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261579 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261578,G__261579) : tailrecursion.hoplon.span.call(null,G__261578,G__261579));
})();
var G__261551 = " ";
var G__261552 = (function (){var G__261580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261581 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261580,G__261581) : tailrecursion.hoplon.span.call(null,G__261580,G__261581));
})();
var G__261553 = ")\n      ";
var G__261554 = (function (){var G__261582 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261583 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261582,G__261583) : tailrecursion.hoplon.span.call(null,G__261582,G__261583));
})();
var G__261555 = " ";
var G__261556 = (function (){var G__261584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261585 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261584,G__261585) : tailrecursion.hoplon.span.call(null,G__261584,G__261585));
})();
var G__261557 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__261531,G__261532,G__261533,G__261534,G__261535,G__261536,G__261537,G__261538,G__261539,G__261540,G__261541,G__261542,G__261543,G__261544,G__261545,G__261546,G__261547,G__261548,G__261549,G__261550,G__261551,G__261552,G__261553,G__261554,G__261555,G__261556,G__261557) : tailrecursion.hoplon.pre.call(null,G__261531,G__261532,G__261533,G__261534,G__261535,G__261536,G__261537,G__261538,G__261539,G__261540,G__261541,G__261542,G__261543,G__261544,G__261545,G__261546,G__261547,G__261548,G__261549,G__261550,G__261551,G__261552,G__261553,G__261554,G__261555,G__261556,G__261557));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261529,G__261530) : tailrecursion.hoplon.div.call(null,G__261529,G__261530));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261528) : tailrecursion.hoplon.div.call(null,G__261528));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261470;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261469;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261468;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261467;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261586 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261587 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261588 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261589 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261590 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261590) : tailrecursion.hoplon.pre.call(null,G__261590));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261589;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261588;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261587;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261586;
}})()], 0)),"",(function (){var _STAR_references_STAR_261591 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261592 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261593 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261594 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261629 = (function (){var G__261630 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261631 = (function (){var G__261632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261633 = "(";
var G__261634 = (function (){var G__261648 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261649 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261648,G__261649) : tailrecursion.hoplon.span.call(null,G__261648,G__261649));
})();
var G__261635 = (function (){var G__261650 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261651 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261650,G__261651) : tailrecursion.hoplon.span.call(null,G__261650,G__261651));
})();
var G__261636 = " (";
var G__261637 = (function (){var G__261652 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__261653 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261652,G__261653) : tailrecursion.hoplon.span.call(null,G__261652,G__261653));
})();
var G__261638 = "(";
var G__261639 = (function (){var G__261654 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261655 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261654,G__261655) : tailrecursion.hoplon.span.call(null,G__261654,G__261655));
})();
var G__261640 = (function (){var G__261656 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261657 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261656,G__261657) : tailrecursion.hoplon.span.call(null,G__261656,G__261657));
})();
var G__261641 = " ";
var G__261642 = (function (){var G__261658 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261659 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261658,G__261659) : tailrecursion.hoplon.span.call(null,G__261658,G__261659));
})();
var G__261643 = ") ";
var G__261644 = (function (){var G__261660 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261661 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261660,G__261661) : tailrecursion.hoplon.span.call(null,G__261660,G__261661));
})();
var G__261645 = " ";
var G__261646 = (function (){var G__261662 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261663 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261662,G__261663) : tailrecursion.hoplon.span.call(null,G__261662,G__261663));
})();
var G__261647 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__261632,G__261633,G__261634,G__261635,G__261636,G__261637,G__261638,G__261639,G__261640,G__261641,G__261642,G__261643,G__261644,G__261645,G__261646,G__261647) : tailrecursion.hoplon.pre.call(null,G__261632,G__261633,G__261634,G__261635,G__261636,G__261637,G__261638,G__261639,G__261640,G__261641,G__261642,G__261643,G__261644,G__261645,G__261646,G__261647));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261630,G__261631) : tailrecursion.hoplon.div.call(null,G__261630,G__261631));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261629) : tailrecursion.hoplon.div.call(null,G__261629));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261594;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261593;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261592;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261591;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261664 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261665 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261666 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261667 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261668 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("5\n") : tailrecursion.hoplon.code.call(null,"5\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261668) : tailrecursion.hoplon.pre.call(null,G__261668));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261667;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261666;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261665;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261664;
}})()], 0)),"",(function (){var _STAR_references_STAR_261669 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261670 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261671 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261672 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261734 = (function (){var G__261735 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261736 = (function (){var G__261737 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261738 = "(";
var G__261739 = (function (){var G__261766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261767 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261766,G__261767) : tailrecursion.hoplon.span.call(null,G__261766,G__261767));
})();
var G__261740 = "(";
var G__261741 = (function (){var G__261768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261769 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261768,G__261769) : tailrecursion.hoplon.span.call(null,G__261768,G__261769));
})();
var G__261742 = "(";
var G__261743 = (function (){var G__261770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261771 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261770,G__261771) : tailrecursion.hoplon.span.call(null,G__261770,G__261771));
})();
var G__261744 = (function (){var G__261772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261773 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261772,G__261773) : tailrecursion.hoplon.span.call(null,G__261772,G__261773));
})();
var G__261745 = " ";
var G__261746 = (function (){var G__261774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261775 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261774,G__261775) : tailrecursion.hoplon.span.call(null,G__261774,G__261775));
})();
var G__261747 = ") ";
var G__261748 = (function (){var G__261776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261777 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261776,G__261777) : tailrecursion.hoplon.span.call(null,G__261776,G__261777));
})();
var G__261749 = "\n         (";
var G__261750 = (function (){var G__261778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261779 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261778,G__261779) : tailrecursion.hoplon.span.call(null,G__261778,G__261779));
})();
var G__261751 = (function (){var G__261780 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261781 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261780,G__261781) : tailrecursion.hoplon.span.call(null,G__261780,G__261781));
})();
var G__261752 = " ";
var G__261753 = (function (){var G__261782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261783 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261782,G__261783) : tailrecursion.hoplon.span.call(null,G__261782,G__261783));
})();
var G__261754 = ") ";
var G__261755 = (function (){var G__261784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261785 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261784,G__261785) : tailrecursion.hoplon.span.call(null,G__261784,G__261785));
})();
var G__261756 = "\n         ";
var G__261757 = (function (){var G__261786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261787 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261786,G__261787) : tailrecursion.hoplon.span.call(null,G__261786,G__261787));
})();
var G__261758 = " ";
var G__261759 = (function (){var G__261788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261789 = "-1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261788,G__261789) : tailrecursion.hoplon.span.call(null,G__261788,G__261789));
})();
var G__261760 = ")\n   (";
var G__261761 = (function (){var G__261790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261791 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261790,G__261791) : tailrecursion.hoplon.span.call(null,G__261790,G__261791));
})();
var G__261762 = (function (){var G__261792 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261793 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261792,G__261793) : tailrecursion.hoplon.span.call(null,G__261792,G__261793));
})();
var G__261763 = " ";
var G__261764 = (function (){var G__261794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261795 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261794,G__261795) : tailrecursion.hoplon.span.call(null,G__261794,G__261795));
})();
var G__261765 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__261737,G__261738,G__261739,G__261740,G__261741,G__261742,G__261743,G__261744,G__261745,G__261746,G__261747,G__261748,G__261749,G__261750,G__261751,G__261752,G__261753,G__261754,G__261755,G__261756,G__261757,G__261758,G__261759,G__261760,G__261761,G__261762,G__261763,G__261764,G__261765) : tailrecursion.hoplon.pre.call(null,G__261737,G__261738,G__261739,G__261740,G__261741,G__261742,G__261743,G__261744,G__261745,G__261746,G__261747,G__261748,G__261749,G__261750,G__261751,G__261752,G__261753,G__261754,G__261755,G__261756,G__261757,G__261758,G__261759,G__261760,G__261761,G__261762,G__261763,G__261764,G__261765));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261735,G__261736) : tailrecursion.hoplon.div.call(null,G__261735,G__261736));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261734) : tailrecursion.hoplon.div.call(null,G__261734));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261672;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261671;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261670;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261669;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261796 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261797 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261798 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261799 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261800 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261800) : tailrecursion.hoplon.pre.call(null,G__261800));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261799;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261798;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261797;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261796;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261801 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261802 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261803 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261804 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261805 = cljs.core.PersistentArrayMap.EMPTY;
var G__261806 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Translate the following expression into prefix form $$\\frac{5+4+\\left(2-\\left(3-\\left(6+\\frac{4}{5}\\right)\\right)\\right)}{3(6-2)(2-7)}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__261805,G__261806) : tailrecursion.hoplon.markdown.para_node.call(null,G__261805,G__261806));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261804;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261803;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261802;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261801;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261807 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261808 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261809 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261810 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261891 = (function (){var G__261892 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261893 = (function (){var G__261894 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261895 = "(";
var G__261896 = (function (){var G__261930 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261931 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261930,G__261931) : tailrecursion.hoplon.span.call(null,G__261930,G__261931));
})();
var G__261897 = "(";
var G__261898 = (function (){var G__261932 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261933 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261932,G__261933) : tailrecursion.hoplon.span.call(null,G__261932,G__261933));
})();
var G__261899 = (function (){var G__261934 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261935 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261934,G__261935) : tailrecursion.hoplon.span.call(null,G__261934,G__261935));
})();
var G__261900 = " ";
var G__261901 = (function (){var G__261936 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261937 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261936,G__261937) : tailrecursion.hoplon.span.call(null,G__261936,G__261937));
})();
var G__261902 = " (";
var G__261903 = (function (){var G__261938 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261939 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261938,G__261939) : tailrecursion.hoplon.span.call(null,G__261938,G__261939));
})();
var G__261904 = (function (){var G__261940 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261941 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261940,G__261941) : tailrecursion.hoplon.span.call(null,G__261940,G__261941));
})();
var G__261905 = " (";
var G__261906 = (function (){var G__261942 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261943 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261942,G__261943) : tailrecursion.hoplon.span.call(null,G__261942,G__261943));
})();
var G__261907 = (function (){var G__261944 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261945 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261944,G__261945) : tailrecursion.hoplon.span.call(null,G__261944,G__261945));
})();
var G__261908 = " (";
var G__261909 = (function (){var G__261946 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261947 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261946,G__261947) : tailrecursion.hoplon.span.call(null,G__261946,G__261947));
})();
var G__261910 = (function (){var G__261948 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261949 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261948,G__261949) : tailrecursion.hoplon.span.call(null,G__261948,G__261949));
})();
var G__261911 = " (";
var G__261912 = (function (){var G__261950 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261951 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261950,G__261951) : tailrecursion.hoplon.span.call(null,G__261950,G__261951));
})();
var G__261913 = (function (){var G__261952 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261953 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261952,G__261953) : tailrecursion.hoplon.span.call(null,G__261952,G__261953));
})();
var G__261914 = " ";
var G__261915 = (function (){var G__261954 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261955 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261954,G__261955) : tailrecursion.hoplon.span.call(null,G__261954,G__261955));
})();
var G__261916 = "))))) \n   (";
var G__261917 = (function (){var G__261956 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261957 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261956,G__261957) : tailrecursion.hoplon.span.call(null,G__261956,G__261957));
})();
var G__261918 = (function (){var G__261958 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261959 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261958,G__261959) : tailrecursion.hoplon.span.call(null,G__261958,G__261959));
})();
var G__261919 = " (";
var G__261920 = (function (){var G__261960 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261961 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261960,G__261961) : tailrecursion.hoplon.span.call(null,G__261960,G__261961));
})();
var G__261921 = (function (){var G__261962 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261963 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261962,G__261963) : tailrecursion.hoplon.span.call(null,G__261962,G__261963));
})();
var G__261922 = " ";
var G__261923 = (function (){var G__261964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261965 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261964,G__261965) : tailrecursion.hoplon.span.call(null,G__261964,G__261965));
})();
var G__261924 = ") (";
var G__261925 = (function (){var G__261966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261967 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261966,G__261967) : tailrecursion.hoplon.span.call(null,G__261966,G__261967));
})();
var G__261926 = (function (){var G__261968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261969 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261968,G__261969) : tailrecursion.hoplon.span.call(null,G__261968,G__261969));
})();
var G__261927 = " ";
var G__261928 = (function (){var G__261970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261971 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261970,G__261971) : tailrecursion.hoplon.span.call(null,G__261970,G__261971));
})();
var G__261929 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__261894,G__261895,G__261896,G__261897,G__261898,G__261899,G__261900,G__261901,G__261902,G__261903,G__261904,G__261905,G__261906,G__261907,G__261908,G__261909,G__261910,G__261911,G__261912,G__261913,G__261914,G__261915,G__261916,G__261917,G__261918,G__261919,G__261920,G__261921,G__261922,G__261923,G__261924,G__261925,G__261926,G__261927,G__261928,G__261929) : tailrecursion.hoplon.pre.call(null,G__261894,G__261895,G__261896,G__261897,G__261898,G__261899,G__261900,G__261901,G__261902,G__261903,G__261904,G__261905,G__261906,G__261907,G__261908,G__261909,G__261910,G__261911,G__261912,G__261913,G__261914,G__261915,G__261916,G__261917,G__261918,G__261919,G__261920,G__261921,G__261922,G__261923,G__261924,G__261925,G__261926,G__261927,G__261928,G__261929));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261892,G__261893) : tailrecursion.hoplon.div.call(null,G__261892,G__261893));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261891) : tailrecursion.hoplon.div.call(null,G__261891));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261810;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261809;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261808;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261807;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261972 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261973 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261974 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261975 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261976 = cljs.core.PersistentArrayMap.EMPTY;
var G__261977 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__261976,G__261977) : tailrecursion.hoplon.markdown.para_node.call(null,G__261976,G__261977));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261975;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261974;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261973;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261972;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261978 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261979 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261980 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261981 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262125 = (function (){var G__262126 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262127 = (function (){var G__262128 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262129 = "(";
var G__262130 = (function (){var G__262197 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262198 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262197,G__262198) : tailrecursion.hoplon.span.call(null,G__262197,G__262198));
})();
var G__262131 = (function (){var G__262199 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262200 = "sum-of-largest-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262199,G__262200) : tailrecursion.hoplon.span.call(null,G__262199,G__262200));
})();
var G__262132 = " [";
var G__262133 = (function (){var G__262201 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262202 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262201,G__262202) : tailrecursion.hoplon.span.call(null,G__262201,G__262202));
})();
var G__262134 = " ";
var G__262135 = (function (){var G__262203 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262204 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262203,G__262204) : tailrecursion.hoplon.span.call(null,G__262203,G__262204));
})();
var G__262136 = " ";
var G__262137 = (function (){var G__262205 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262206 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262205,G__262206) : tailrecursion.hoplon.span.call(null,G__262205,G__262206));
})();
var G__262138 = "]\n  (";
var G__262139 = (function (){var G__262207 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262208 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262207,G__262208) : tailrecursion.hoplon.span.call(null,G__262207,G__262208));
})();
var G__262140 = "(";
var G__262141 = (function (){var G__262209 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262210 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262209,G__262210) : tailrecursion.hoplon.span.call(null,G__262209,G__262210));
})();
var G__262142 = "(";
var G__262143 = (function (){var G__262211 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262212 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262211,G__262212) : tailrecursion.hoplon.span.call(null,G__262211,G__262212));
})();
var G__262144 = (function (){var G__262213 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262214 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262213,G__262214) : tailrecursion.hoplon.span.call(null,G__262213,G__262214));
})();
var G__262145 = " ";
var G__262146 = (function (){var G__262215 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262216 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262215,G__262216) : tailrecursion.hoplon.span.call(null,G__262215,G__262216));
})();
var G__262147 = ") (";
var G__262148 = (function (){var G__262217 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262218 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262217,G__262218) : tailrecursion.hoplon.span.call(null,G__262217,G__262218));
})();
var G__262149 = (function (){var G__262219 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262220 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262219,G__262220) : tailrecursion.hoplon.span.call(null,G__262219,G__262220));
})();
var G__262150 = " ";
var G__262151 = (function (){var G__262221 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262222 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262221,G__262222) : tailrecursion.hoplon.span.call(null,G__262221,G__262222));
})();
var G__262152 = ")) (";
var G__262153 = (function (){var G__262223 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262224 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262223,G__262224) : tailrecursion.hoplon.span.call(null,G__262223,G__262224));
})();
var G__262154 = "(";
var G__262155 = (function (){var G__262225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262226 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262225,G__262226) : tailrecursion.hoplon.span.call(null,G__262225,G__262226));
})();
var G__262156 = " ";
var G__262157 = (function (){var G__262227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262228 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262227,G__262228) : tailrecursion.hoplon.span.call(null,G__262227,G__262228));
})();
var G__262158 = ") (";
var G__262159 = (function (){var G__262229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262230 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262229,G__262230) : tailrecursion.hoplon.span.call(null,G__262229,G__262230));
})();
var G__262160 = " ";
var G__262161 = (function (){var G__262231 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262232 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262231,G__262232) : tailrecursion.hoplon.span.call(null,G__262231,G__262232));
})();
var G__262162 = "))\n        (";
var G__262163 = (function (){var G__262233 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262234 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262233,G__262234) : tailrecursion.hoplon.span.call(null,G__262233,G__262234));
})();
var G__262164 = "(";
var G__262165 = (function (){var G__262235 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262236 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262235,G__262236) : tailrecursion.hoplon.span.call(null,G__262235,G__262236));
})();
var G__262166 = (function (){var G__262237 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262238 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262237,G__262238) : tailrecursion.hoplon.span.call(null,G__262237,G__262238));
})();
var G__262167 = " ";
var G__262168 = (function (){var G__262239 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262240 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262239,G__262240) : tailrecursion.hoplon.span.call(null,G__262239,G__262240));
})();
var G__262169 = ") (";
var G__262170 = (function (){var G__262241 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262242 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262241,G__262242) : tailrecursion.hoplon.span.call(null,G__262241,G__262242));
})();
var G__262171 = (function (){var G__262243 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262244 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262243,G__262244) : tailrecursion.hoplon.span.call(null,G__262243,G__262244));
})();
var G__262172 = " ";
var G__262173 = (function (){var G__262245 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262246 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262245,G__262246) : tailrecursion.hoplon.span.call(null,G__262245,G__262246));
})();
var G__262174 = ")) (";
var G__262175 = (function (){var G__262247 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262248 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262247,G__262248) : tailrecursion.hoplon.span.call(null,G__262247,G__262248));
})();
var G__262176 = "(";
var G__262177 = (function (){var G__262249 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262250 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262249,G__262250) : tailrecursion.hoplon.span.call(null,G__262249,G__262250));
})();
var G__262178 = " ";
var G__262179 = (function (){var G__262251 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262252 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262251,G__262252) : tailrecursion.hoplon.span.call(null,G__262251,G__262252));
})();
var G__262180 = ") (";
var G__262181 = (function (){var G__262253 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262254 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262253,G__262254) : tailrecursion.hoplon.span.call(null,G__262253,G__262254));
})();
var G__262182 = " ";
var G__262183 = (function (){var G__262255 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262256 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262255,G__262256) : tailrecursion.hoplon.span.call(null,G__262255,G__262256));
})();
var G__262184 = "))\n        ";
var G__262185 = (function (){var G__262257 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262258 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262257,G__262258) : tailrecursion.hoplon.span.call(null,G__262257,G__262258));
})();
var G__262186 = " (";
var G__262187 = (function (){var G__262259 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262260 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262259,G__262260) : tailrecursion.hoplon.span.call(null,G__262259,G__262260));
})();
var G__262188 = "(";
var G__262189 = (function (){var G__262261 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262262 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262261,G__262262) : tailrecursion.hoplon.span.call(null,G__262261,G__262262));
})();
var G__262190 = " ";
var G__262191 = (function (){var G__262263 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262264 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262263,G__262264) : tailrecursion.hoplon.span.call(null,G__262263,G__262264));
})();
var G__262192 = ") (";
var G__262193 = (function (){var G__262265 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262266 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262265,G__262266) : tailrecursion.hoplon.span.call(null,G__262265,G__262266));
})();
var G__262194 = " ";
var G__262195 = (function (){var G__262267 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262268 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262267,G__262268) : tailrecursion.hoplon.span.call(null,G__262267,G__262268));
})();
var G__262196 = "))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69(G__262128,G__262129,G__262130,G__262131,G__262132,G__262133,G__262134,G__262135,G__262136,G__262137,G__262138,G__262139,G__262140,G__262141,G__262142,G__262143,G__262144,G__262145,G__262146,G__262147,G__262148,G__262149,G__262150,G__262151,G__262152,G__262153,G__262154,G__262155,G__262156,G__262157,G__262158,G__262159,G__262160,G__262161,G__262162,G__262163,G__262164,G__262165,G__262166,G__262167,G__262168,G__262169,G__262170,G__262171,G__262172,G__262173,G__262174,G__262175,G__262176,G__262177,G__262178,G__262179,G__262180,G__262181,G__262182,G__262183,G__262184,G__262185,G__262186,G__262187,G__262188,G__262189,G__262190,G__262191,G__262192,G__262193,G__262194,G__262195,G__262196) : tailrecursion.hoplon.pre.call(null,G__262128,G__262129,G__262130,G__262131,G__262132,G__262133,G__262134,G__262135,G__262136,G__262137,G__262138,G__262139,G__262140,G__262141,G__262142,G__262143,G__262144,G__262145,G__262146,G__262147,G__262148,G__262149,G__262150,G__262151,G__262152,G__262153,G__262154,G__262155,G__262156,G__262157,G__262158,G__262159,G__262160,G__262161,G__262162,G__262163,G__262164,G__262165,G__262166,G__262167,G__262168,G__262169,G__262170,G__262171,G__262172,G__262173,G__262174,G__262175,G__262176,G__262177,G__262178,G__262179,G__262180,G__262181,G__262182,G__262183,G__262184,G__262185,G__262186,G__262187,G__262188,G__262189,G__262190,G__262191,G__262192,G__262193,G__262194,G__262195,G__262196));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262126,G__262127) : tailrecursion.hoplon.div.call(null,G__262126,G__262127));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262125) : tailrecursion.hoplon.div.call(null,G__262125));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261981;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261980;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261979;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261978;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_262269 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262270 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262271 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262272 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262273 = cljs.core.PersistentArrayMap.EMPTY;
var G__262274 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262273,G__262274) : tailrecursion.hoplon.markdown.para_node.call(null,G__262273,G__262274));
})(),(function (){var G__262324 = (function (){var G__262325 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262326 = (function (){var G__262327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262328 = "(";
var G__262329 = (function (){var G__262350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262351 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262350,G__262351) : tailrecursion.hoplon.span.call(null,G__262350,G__262351));
})();
var G__262330 = (function (){var G__262352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262353 = "a-plus-abs-b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262352,G__262353) : tailrecursion.hoplon.span.call(null,G__262352,G__262353));
})();
var G__262331 = " [";
var G__262332 = (function (){var G__262354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262355 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262354,G__262355) : tailrecursion.hoplon.span.call(null,G__262354,G__262355));
})();
var G__262333 = " ";
var G__262334 = (function (){var G__262356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262357 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262356,G__262357) : tailrecursion.hoplon.span.call(null,G__262356,G__262357));
})();
var G__262335 = "]\n  ((";
var G__262336 = (function (){var G__262358 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262359 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262358,G__262359) : tailrecursion.hoplon.span.call(null,G__262358,G__262359));
})();
var G__262337 = "(";
var G__262338 = (function (){var G__262360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262361 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262360,G__262361) : tailrecursion.hoplon.span.call(null,G__262360,G__262361));
})();
var G__262339 = (function (){var G__262362 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262363 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262362,G__262363) : tailrecursion.hoplon.span.call(null,G__262362,G__262363));
})();
var G__262340 = " ";
var G__262341 = (function (){var G__262364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262365 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262364,G__262365) : tailrecursion.hoplon.span.call(null,G__262364,G__262365));
})();
var G__262342 = ") ";
var G__262343 = (function (){var G__262366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262367 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262366,G__262367) : tailrecursion.hoplon.span.call(null,G__262366,G__262367));
})();
var G__262344 = (function (){var G__262368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262369 = "-";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262368,G__262369) : tailrecursion.hoplon.span.call(null,G__262368,G__262369));
})();
var G__262345 = ") ";
var G__262346 = (function (){var G__262370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262371 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262370,G__262371) : tailrecursion.hoplon.span.call(null,G__262370,G__262371));
})();
var G__262347 = " ";
var G__262348 = (function (){var G__262372 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262373 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262372,G__262373) : tailrecursion.hoplon.span.call(null,G__262372,G__262373));
})();
var G__262349 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__262327,G__262328,G__262329,G__262330,G__262331,G__262332,G__262333,G__262334,G__262335,G__262336,G__262337,G__262338,G__262339,G__262340,G__262341,G__262342,G__262343,G__262344,G__262345,G__262346,G__262347,G__262348,G__262349) : tailrecursion.hoplon.pre.call(null,G__262327,G__262328,G__262329,G__262330,G__262331,G__262332,G__262333,G__262334,G__262335,G__262336,G__262337,G__262338,G__262339,G__262340,G__262341,G__262342,G__262343,G__262344,G__262345,G__262346,G__262347,G__262348,G__262349));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262325,G__262326) : tailrecursion.hoplon.div.call(null,G__262325,G__262326));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262324) : tailrecursion.hoplon.div.call(null,G__262324));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262272;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262271;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262270;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262269;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_262374 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262375 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262376 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262377 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262378 = cljs.core.PersistentArrayMap.EMPTY;
var G__262379 = new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It returns ",(function (){var G__262380 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__262381 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262380,G__262381) : tailrecursion.hoplon.markdown.code_node.call(null,G__262380,G__262381));
})(),". Note: if ",(function (){var G__262382 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(> b 0)"], null);
var G__262383 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262382,G__262383) : tailrecursion.hoplon.markdown.code_node.call(null,G__262382,G__262383));
})(),", then ",(function (){var G__262384 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) b)"], null);
var G__262385 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262384,G__262385) : tailrecursion.hoplon.markdown.code_node.call(null,G__262384,G__262385));
})(),", so ",(function (){var G__262386 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__262387 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262386,G__262387) : tailrecursion.hoplon.markdown.code_node.call(null,G__262386,G__262387));
})()," would be ",(function (){var G__262388 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a b)"], null);
var G__262389 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262388,G__262389) : tailrecursion.hoplon.markdown.code_node.call(null,G__262388,G__262389));
})(),", just as this function gives us. Alternatively, if ",(function (){var G__262390 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(not (> b 0))"], null);
var G__262391 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262390,G__262391) : tailrecursion.hoplon.markdown.code_node.call(null,G__262390,G__262391));
})(),", then b is negative and ",(function (){var G__262392 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) (- b))"], null);
var G__262393 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262392,G__262393) : tailrecursion.hoplon.markdown.code_node.call(null,G__262392,G__262393));
})()," which means, ",(function (){var G__262394 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__262395 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262394,G__262395) : tailrecursion.hoplon.markdown.code_node.call(null,G__262394,G__262395));
})()," is ",(function (){var G__262396 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (- b))"], null);
var G__262397 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262396,G__262397) : tailrecursion.hoplon.markdown.code_node.call(null,G__262396,G__262397));
})()," which is really just ",(function (){var G__262398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- a b)"], null);
var G__262399 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262398,G__262399) : tailrecursion.hoplon.markdown.code_node.call(null,G__262398,G__262399));
})()," as our function above gives us."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262378,G__262379) : tailrecursion.hoplon.markdown.para_node.call(null,G__262378,G__262379));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262377;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262376;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262375;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262374;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_262400 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262401 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262402 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262403 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262404 = cljs.core.PersistentArrayMap.EMPTY;
var G__262405 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262404,G__262405) : tailrecursion.hoplon.markdown.para_node.call(null,G__262404,G__262405));
})(),(function (){var G__262421 = (function (){var G__262422 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262423 = (function (){var G__262424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262425 = "(";
var G__262426 = (function (){var G__262431 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262432 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262431,G__262432) : tailrecursion.hoplon.span.call(null,G__262431,G__262432));
})();
var G__262427 = (function (){var G__262433 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262434 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262433,G__262434) : tailrecursion.hoplon.span.call(null,G__262433,G__262434));
})();
var G__262428 = " [] (";
var G__262429 = (function (){var G__262435 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262436 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262435,G__262436) : tailrecursion.hoplon.span.call(null,G__262435,G__262436));
})();
var G__262430 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__262424,G__262425,G__262426,G__262427,G__262428,G__262429,G__262430) : tailrecursion.hoplon.pre.call(null,G__262424,G__262425,G__262426,G__262427,G__262428,G__262429,G__262430));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262422,G__262423) : tailrecursion.hoplon.div.call(null,G__262422,G__262423));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262421) : tailrecursion.hoplon.div.call(null,G__262421));
})(),(function (){var G__262437 = cljs.core.PersistentArrayMap.EMPTY;
var G__262438 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262437,G__262438) : tailrecursion.hoplon.markdown.para_node.call(null,G__262437,G__262438));
})(),(function (){var G__262481 = (function (){var G__262482 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262483 = (function (){var G__262484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262485 = "(";
var G__262486 = (function (){var G__262504 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262505 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262504,G__262505) : tailrecursion.hoplon.span.call(null,G__262504,G__262505));
})();
var G__262487 = (function (){var G__262506 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262507 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262506,G__262507) : tailrecursion.hoplon.span.call(null,G__262506,G__262507));
})();
var G__262488 = "[";
var G__262489 = (function (){var G__262508 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262509 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262508,G__262509) : tailrecursion.hoplon.span.call(null,G__262508,G__262509));
})();
var G__262490 = " ";
var G__262491 = (function (){var G__262510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262511 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262510,G__262511) : tailrecursion.hoplon.span.call(null,G__262510,G__262511));
})();
var G__262492 = "]\n   (";
var G__262493 = (function (){var G__262512 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262513 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262512,G__262513) : tailrecursion.hoplon.span.call(null,G__262512,G__262513));
})();
var G__262494 = "(";
var G__262495 = (function (){var G__262514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262515 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262514,G__262515) : tailrecursion.hoplon.span.call(null,G__262514,G__262515));
})();
var G__262496 = (function (){var G__262516 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262517 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262516,G__262517) : tailrecursion.hoplon.span.call(null,G__262516,G__262517));
})();
var G__262497 = " ";
var G__262498 = (function (){var G__262518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262519 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262518,G__262519) : tailrecursion.hoplon.span.call(null,G__262518,G__262519));
})();
var G__262499 = ")\n   ";
var G__262500 = (function (){var G__262520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262521 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262520,G__262521) : tailrecursion.hoplon.span.call(null,G__262520,G__262521));
})();
var G__262501 = "\n   ";
var G__262502 = (function (){var G__262522 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262523 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262522,G__262523) : tailrecursion.hoplon.span.call(null,G__262522,G__262523));
})();
var G__262503 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__262484,G__262485,G__262486,G__262487,G__262488,G__262489,G__262490,G__262491,G__262492,G__262493,G__262494,G__262495,G__262496,G__262497,G__262498,G__262499,G__262500,G__262501,G__262502,G__262503) : tailrecursion.hoplon.pre.call(null,G__262484,G__262485,G__262486,G__262487,G__262488,G__262489,G__262490,G__262491,G__262492,G__262493,G__262494,G__262495,G__262496,G__262497,G__262498,G__262499,G__262500,G__262501,G__262502,G__262503));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262482,G__262483) : tailrecursion.hoplon.div.call(null,G__262482,G__262483));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262481) : tailrecursion.hoplon.div.call(null,G__262481));
})(),(function (){var G__262524 = cljs.core.PersistentArrayMap.EMPTY;
var G__262525 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then he evaluates the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262524,G__262525) : tailrecursion.hoplon.markdown.para_node.call(null,G__262524,G__262525));
})(),(function (){var G__262541 = (function (){var G__262542 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262543 = (function (){var G__262544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262545 = "(";
var G__262546 = (function (){var G__262551 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262552 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262551,G__262552) : tailrecursion.hoplon.span.call(null,G__262551,G__262552));
})();
var G__262547 = (function (){var G__262553 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262554 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262553,G__262554) : tailrecursion.hoplon.span.call(null,G__262553,G__262554));
})();
var G__262548 = " (";
var G__262549 = (function (){var G__262555 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262556 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262555,G__262556) : tailrecursion.hoplon.span.call(null,G__262555,G__262556));
})();
var G__262550 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__262544,G__262545,G__262546,G__262547,G__262548,G__262549,G__262550) : tailrecursion.hoplon.pre.call(null,G__262544,G__262545,G__262546,G__262547,G__262548,G__262549,G__262550));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262542,G__262543) : tailrecursion.hoplon.div.call(null,G__262542,G__262543));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262541) : tailrecursion.hoplon.div.call(null,G__262541));
})(),(function (){var G__262557 = cljs.core.PersistentArrayMap.EMPTY;
var G__262558 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262557,G__262558) : tailrecursion.hoplon.markdown.para_node.call(null,G__262557,G__262558));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262403;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262402;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262401;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262400;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_262559 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262560 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262561 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262562 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262563 = cljs.core.PersistentArrayMap.EMPTY;
var G__262564 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262565 = cljs.core.PersistentArrayMap.EMPTY;
var G__262566 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262567 = cljs.core.PersistentArrayMap.EMPTY;
var G__262568 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With normal order evaluation it compiles just as one  might expect: first the function itself is unraveled,  finding that it is an ",(function (){var G__262569 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__262570 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262569,G__262570) : tailrecursion.hoplon.markdown.code_node.call(null,G__262569,G__262570));
})()," statement, then the ",(function (){var G__262571 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__262572 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262571,G__262572) : tailrecursion.hoplon.markdown.code_node.call(null,G__262571,G__262572));
})(),"  statement is evaluated according to its own rules.  Finding that the first argument is 0, it returns 0."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262567,G__262568) : tailrecursion.hoplon.markdown.para_node.call(null,G__262567,G__262568));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__262565,G__262566) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__262565,G__262566));
})(),(function (){var G__262573 = cljs.core.PersistentArrayMap.EMPTY;
var G__262574 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_262575 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262576 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262577 = cljs.core.PersistentArrayMap.EMPTY;
var G__262578 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With applicative order evaluation the story is a bit more  interesting. Since the arguments to a function are always  evaluated first in applicative order evaluation, the  compiler would attempt to evaluate both the first and  second arguments and hence fall into an infinite loop  in the attempt to evaluate the second argument."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262577,G__262578) : tailrecursion.hoplon.markdown.para_node.call(null,G__262577,G__262578));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262576;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262575;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__262573,G__262574) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__262573,G__262574));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__262563,G__262564) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__262563,G__262564));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262562;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262561;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262560;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262559;
}})()], 0))], 0))], 0));
var G__258430 = "";
var G__258431 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Example: Square Roots by Newton's Method"], null),(function (){var _STAR_references_STAR_262579 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262580 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262581 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262582 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262583 = cljs.core.PersistentArrayMap.EMPTY;
var G__262584 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Procedures, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer procedures. Procedures must be effective. As a case in point, consider the problem of computing square roots. We can define the square-root function as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262583,G__262584) : tailrecursion.hoplon.markdown.para_node.call(null,G__262583,G__262584));
})(),(function (){var G__262585 = cljs.core.PersistentArrayMap.EMPTY;
var G__262586 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\sqrt x = \\text{ the } y \\text{ such that } y\\geq 0 \\text{ and } y^2 = x $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262585,G__262586) : tailrecursion.hoplon.markdown.para_node.call(null,G__262585,G__262586));
})(),(function (){var G__262587 = cljs.core.PersistentArrayMap.EMPTY;
var G__262588 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a procedure. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-Lisp: "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262587,G__262588) : tailrecursion.hoplon.markdown.para_node.call(null,G__262587,G__262588));
})(),(function (){var G__262643 = (function (){var G__262644 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262645 = (function (){var G__262646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262647 = "(";
var G__262648 = (function (){var G__262672 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262673 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262672,G__262673) : tailrecursion.hoplon.span.call(null,G__262672,G__262673));
})();
var G__262649 = (function (){var G__262674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262675 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262674,G__262675) : tailrecursion.hoplon.span.call(null,G__262674,G__262675));
})();
var G__262650 = " [";
var G__262651 = (function (){var G__262676 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262677 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262676,G__262677) : tailrecursion.hoplon.span.call(null,G__262676,G__262677));
})();
var G__262652 = "] \n  (";
var G__262653 = (function (){var G__262678 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262679 = "the";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262678,G__262679) : tailrecursion.hoplon.span.call(null,G__262678,G__262679));
})();
var G__262654 = " ";
var G__262655 = (function (){var G__262680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262681 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262680,G__262681) : tailrecursion.hoplon.span.call(null,G__262680,G__262681));
})();
var G__262656 = " (";
var G__262657 = (function (){var G__262682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262683 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262682,G__262683) : tailrecursion.hoplon.span.call(null,G__262682,G__262683));
})();
var G__262658 = "(";
var G__262659 = (function (){var G__262684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262685 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262684,G__262685) : tailrecursion.hoplon.span.call(null,G__262684,G__262685));
})();
var G__262660 = (function (){var G__262686 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262687 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262686,G__262687) : tailrecursion.hoplon.span.call(null,G__262686,G__262687));
})();
var G__262661 = " ";
var G__262662 = (function (){var G__262688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262689 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262688,G__262689) : tailrecursion.hoplon.span.call(null,G__262688,G__262689));
})();
var G__262663 = ") \n              (";
var G__262664 = (function (){var G__262690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262691 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262690,G__262691) : tailrecursion.hoplon.span.call(null,G__262690,G__262691));
})();
var G__262665 = "(";
var G__262666 = (function (){var G__262692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262693 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262692,G__262693) : tailrecursion.hoplon.span.call(null,G__262692,G__262693));
})();
var G__262667 = " ";
var G__262668 = (function (){var G__262694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262695 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262694,G__262695) : tailrecursion.hoplon.span.call(null,G__262694,G__262695));
})();
var G__262669 = ") ";
var G__262670 = (function (){var G__262696 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262697 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262696,G__262697) : tailrecursion.hoplon.span.call(null,G__262696,G__262697));
})();
var G__262671 = ")))) \n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26(G__262646,G__262647,G__262648,G__262649,G__262650,G__262651,G__262652,G__262653,G__262654,G__262655,G__262656,G__262657,G__262658,G__262659,G__262660,G__262661,G__262662,G__262663,G__262664,G__262665,G__262666,G__262667,G__262668,G__262669,G__262670,G__262671) : tailrecursion.hoplon.pre.call(null,G__262646,G__262647,G__262648,G__262649,G__262650,G__262651,G__262652,G__262653,G__262654,G__262655,G__262656,G__262657,G__262658,G__262659,G__262660,G__262661,G__262662,G__262663,G__262664,G__262665,G__262666,G__262667,G__262668,G__262669,G__262670,G__262671));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262644,G__262645) : tailrecursion.hoplon.div.call(null,G__262644,G__262645));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262643) : tailrecursion.hoplon.div.call(null,G__262643));
})(),(function (){var G__262698 = cljs.core.PersistentArrayMap.EMPTY;
var G__262699 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This only begs the question. The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.",(function (){var G__262700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__262701 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is ",(function (){var G__262702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__262703 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["correct"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262702,G__262703) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262702,G__262703));
})()," is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given ",(function (){var G__262704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__262705 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["what is"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262704,G__262705) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262704,G__262705));
})()," knowledge specified by the programmer, they can generate ",(function (){var G__262706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__262707 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how to"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262706,G__262707) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262706,G__262707));
})()," knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in chapter 4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262700,G__262701) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262700,G__262701));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262698,G__262699) : tailrecursion.hoplon.markdown.para_node.call(null,G__262698,G__262699));
})(),(function (){var G__262708 = cljs.core.PersistentArrayMap.EMPTY;
var G__262709 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How does one compute square roots? The most common way is to use Newton",(function (){var G__262710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262711 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262710,G__262711) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262710,G__262711));
})(),"s method of successive approximations, which says that whenever we have a guess y for the value of the square root of a number x, we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging y with x/y.",(function (){var G__262712 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__262713 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This square-root algorithm is actually a special case of Newton",(function (){var G__262714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262715 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262714,G__262715) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262714,G__262715));
})(),"s method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century A.D. We will see how to express the general Newton",(function (){var G__262716 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262717 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262716,G__262717) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262716,G__262717));
})(),"s method as a Lisp procedure in section 1.3.4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262712,G__262713) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262712,G__262713));
})()," For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262708,G__262709) : tailrecursion.hoplon.markdown.para_node.call(null,G__262708,G__262709));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262582;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262581;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262580;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262579;
}})(),"",(function (){var G__262718 = cljs.core.PersistentArrayMap.EMPTY;
var G__262719 = (function (){var G__262724 = cljs.core.PersistentArrayMap.EMPTY;
var G__262725 = (function (){var G__262728 = cljs.core.PersistentArrayMap.EMPTY;
var G__262729 = "Guess ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262728,G__262729) : tailrecursion.hoplon.td.call(null,G__262728,G__262729));
})();
var G__262726 = (function (){var G__262730 = cljs.core.PersistentArrayMap.EMPTY;
var G__262731 = "Quotient ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262730,G__262731) : tailrecursion.hoplon.td.call(null,G__262730,G__262731));
})();
var G__262727 = (function (){var G__262732 = cljs.core.PersistentArrayMap.EMPTY;
var G__262733 = "Average ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262732,G__262733) : tailrecursion.hoplon.td.call(null,G__262732,G__262733));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262724,G__262725,G__262726,G__262727) : tailrecursion.hoplon.tr.call(null,G__262724,G__262725,G__262726,G__262727));
})();
var G__262720 = (function (){var G__262734 = cljs.core.PersistentArrayMap.EMPTY;
var G__262735 = (function (){var G__262738 = cljs.core.PersistentArrayMap.EMPTY;
var G__262739 = "1 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262738,G__262739) : tailrecursion.hoplon.td.call(null,G__262738,G__262739));
})();
var G__262736 = (function (){var G__262740 = cljs.core.PersistentArrayMap.EMPTY;
var G__262741 = "(2/1) = 2 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262740,G__262741) : tailrecursion.hoplon.td.call(null,G__262740,G__262741));
})();
var G__262737 = (function (){var G__262742 = cljs.core.PersistentArrayMap.EMPTY;
var G__262743 = "((2+1)/2) = 1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262742,G__262743) : tailrecursion.hoplon.td.call(null,G__262742,G__262743));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262734,G__262735,G__262736,G__262737) : tailrecursion.hoplon.tr.call(null,G__262734,G__262735,G__262736,G__262737));
})();
var G__262721 = (function (){var G__262744 = cljs.core.PersistentArrayMap.EMPTY;
var G__262745 = (function (){var G__262748 = cljs.core.PersistentArrayMap.EMPTY;
var G__262749 = "1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262748,G__262749) : tailrecursion.hoplon.td.call(null,G__262748,G__262749));
})();
var G__262746 = (function (){var G__262750 = cljs.core.PersistentArrayMap.EMPTY;
var G__262751 = "(2/1.5) = 1.333...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262750,G__262751) : tailrecursion.hoplon.td.call(null,G__262750,G__262751));
})();
var G__262747 = (function (){var G__262752 = cljs.core.PersistentArrayMap.EMPTY;
var G__262753 = "((1.333... + 1.5)/2) = 1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262752,G__262753) : tailrecursion.hoplon.td.call(null,G__262752,G__262753));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262744,G__262745,G__262746,G__262747) : tailrecursion.hoplon.tr.call(null,G__262744,G__262745,G__262746,G__262747));
})();
var G__262722 = (function (){var G__262754 = cljs.core.PersistentArrayMap.EMPTY;
var G__262755 = (function (){var G__262758 = cljs.core.PersistentArrayMap.EMPTY;
var G__262759 = "1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262758,G__262759) : tailrecursion.hoplon.td.call(null,G__262758,G__262759));
})();
var G__262756 = (function (){var G__262760 = cljs.core.PersistentArrayMap.EMPTY;
var G__262761 = "(2/1.4167) = 1.4118 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262760,G__262761) : tailrecursion.hoplon.td.call(null,G__262760,G__262761));
})();
var G__262757 = (function (){var G__262762 = cljs.core.PersistentArrayMap.EMPTY;
var G__262763 = "((1.4167 + 1.4118)/2) = 1.4142 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262762,G__262763) : tailrecursion.hoplon.td.call(null,G__262762,G__262763));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262754,G__262755,G__262756,G__262757) : tailrecursion.hoplon.tr.call(null,G__262754,G__262755,G__262756,G__262757));
})();
var G__262723 = (function (){var G__262764 = cljs.core.PersistentArrayMap.EMPTY;
var G__262765 = (function (){var G__262768 = cljs.core.PersistentArrayMap.EMPTY;
var G__262769 = "1.4142...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262768,G__262769) : tailrecursion.hoplon.td.call(null,G__262768,G__262769));
})();
var G__262766 = (function (){var G__262770 = cljs.core.PersistentArrayMap.EMPTY;
var G__262771 = "...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262770,G__262771) : tailrecursion.hoplon.td.call(null,G__262770,G__262771));
})();
var G__262767 = (function (){var G__262772 = cljs.core.PersistentArrayMap.EMPTY;
var G__262773 = "...";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262772,G__262773) : tailrecursion.hoplon.td.call(null,G__262772,G__262773));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262764,G__262765,G__262766,G__262767) : tailrecursion.hoplon.tr.call(null,G__262764,G__262765,G__262766,G__262767));
})();
return (tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6 ? tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6(G__262718,G__262719,G__262720,G__262721,G__262722,G__262723) : tailrecursion.hoplon.table.call(null,G__262718,G__262719,G__262720,G__262721,G__262722,G__262723));
})(),(function (){var _STAR_references_STAR_262774 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262775 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262776 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262777 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262778 = cljs.core.PersistentArrayMap.EMPTY;
var G__262779 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Continuing this process, we obtain better and better approximations to the square root. "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262778,G__262779) : tailrecursion.hoplon.markdown.para_node.call(null,G__262778,G__262779));
})(),(function (){var G__262780 = cljs.core.PersistentArrayMap.EMPTY;
var G__262781 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now let",(function (){var G__262782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262783 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262782,G__262783) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262782,G__262783));
})(),"s formalize the process in terms of procedures. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262780,G__262781) : tailrecursion.hoplon.markdown.para_node.call(null,G__262780,G__262781));
})(),(function (){var G__262843 = (function (){var G__262844 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262845 = (function (){var G__262846 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262847 = "(";
var G__262848 = (function (){var G__262875 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262876 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262875,G__262876) : tailrecursion.hoplon.span.call(null,G__262875,G__262876));
})();
var G__262849 = (function (){var G__262877 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262878 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262877,G__262878) : tailrecursion.hoplon.span.call(null,G__262877,G__262878));
})();
var G__262850 = " [";
var G__262851 = (function (){var G__262879 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262880 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262879,G__262880) : tailrecursion.hoplon.span.call(null,G__262879,G__262880));
})();
var G__262852 = " ";
var G__262853 = (function (){var G__262881 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262882 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262881,G__262882) : tailrecursion.hoplon.span.call(null,G__262881,G__262882));
})();
var G__262854 = "]\n  (";
var G__262855 = (function (){var G__262883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262884 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262883,G__262884) : tailrecursion.hoplon.span.call(null,G__262883,G__262884));
})();
var G__262856 = "(";
var G__262857 = (function (){var G__262885 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262886 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262885,G__262886) : tailrecursion.hoplon.span.call(null,G__262885,G__262886));
})();
var G__262858 = " ";
var G__262859 = (function (){var G__262887 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262888 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262887,G__262888) : tailrecursion.hoplon.span.call(null,G__262887,G__262888));
})();
var G__262860 = " ";
var G__262861 = (function (){var G__262889 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262890 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262889,G__262890) : tailrecursion.hoplon.span.call(null,G__262889,G__262890));
})();
var G__262862 = ")\n      ";
var G__262863 = (function (){var G__262891 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262892 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262891,G__262892) : tailrecursion.hoplon.span.call(null,G__262891,G__262892));
})();
var G__262864 = "\n      (";
var G__262865 = (function (){var G__262893 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262894 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262893,G__262894) : tailrecursion.hoplon.span.call(null,G__262893,G__262894));
})();
var G__262866 = " (";
var G__262867 = (function (){var G__262895 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262896 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262895,G__262896) : tailrecursion.hoplon.span.call(null,G__262895,G__262896));
})();
var G__262868 = " ";
var G__262869 = (function (){var G__262897 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262898 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262897,G__262898) : tailrecursion.hoplon.span.call(null,G__262897,G__262898));
})();
var G__262870 = " ";
var G__262871 = (function (){var G__262899 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262900 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262899,G__262900) : tailrecursion.hoplon.span.call(null,G__262899,G__262900));
})();
var G__262872 = ")\n                 ";
var G__262873 = (function (){var G__262901 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262902 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262901,G__262902) : tailrecursion.hoplon.span.call(null,G__262901,G__262902));
})();
var G__262874 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__262846,G__262847,G__262848,G__262849,G__262850,G__262851,G__262852,G__262853,G__262854,G__262855,G__262856,G__262857,G__262858,G__262859,G__262860,G__262861,G__262862,G__262863,G__262864,G__262865,G__262866,G__262867,G__262868,G__262869,G__262870,G__262871,G__262872,G__262873,G__262874) : tailrecursion.hoplon.pre.call(null,G__262846,G__262847,G__262848,G__262849,G__262850,G__262851,G__262852,G__262853,G__262854,G__262855,G__262856,G__262857,G__262858,G__262859,G__262860,G__262861,G__262862,G__262863,G__262864,G__262865,G__262866,G__262867,G__262868,G__262869,G__262870,G__262871,G__262872,G__262873,G__262874));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262844,G__262845) : tailrecursion.hoplon.div.call(null,G__262844,G__262845));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262843) : tailrecursion.hoplon.div.call(null,G__262843));
})(),(function (){var G__262903 = cljs.core.PersistentArrayMap.EMPTY;
var G__262904 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A guess is improved by averaging it with the quotient of the radicand and the old guess:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262903,G__262904) : tailrecursion.hoplon.markdown.para_node.call(null,G__262903,G__262904));
})(),(function (){var G__262943 = (function (){var G__262944 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262945 = (function (){var G__262946 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262947 = "(";
var G__262948 = (function (){var G__262964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262965 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262964,G__262965) : tailrecursion.hoplon.span.call(null,G__262964,G__262965));
})();
var G__262949 = (function (){var G__262966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262967 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262966,G__262967) : tailrecursion.hoplon.span.call(null,G__262966,G__262967));
})();
var G__262950 = " [";
var G__262951 = (function (){var G__262968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262969 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262968,G__262969) : tailrecursion.hoplon.span.call(null,G__262968,G__262969));
})();
var G__262952 = " ";
var G__262953 = (function (){var G__262970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262971 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262970,G__262971) : tailrecursion.hoplon.span.call(null,G__262970,G__262971));
})();
var G__262954 = "]\n  (";
var G__262955 = (function (){var G__262972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262973 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262972,G__262973) : tailrecursion.hoplon.span.call(null,G__262972,G__262973));
})();
var G__262956 = " ";
var G__262957 = (function (){var G__262974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262975 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262974,G__262975) : tailrecursion.hoplon.span.call(null,G__262974,G__262975));
})();
var G__262958 = " (";
var G__262959 = (function (){var G__262976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262977 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262976,G__262977) : tailrecursion.hoplon.span.call(null,G__262976,G__262977));
})();
var G__262960 = (function (){var G__262978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262979 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262978,G__262979) : tailrecursion.hoplon.span.call(null,G__262978,G__262979));
})();
var G__262961 = " ";
var G__262962 = (function (){var G__262980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262981 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262980,G__262981) : tailrecursion.hoplon.span.call(null,G__262980,G__262981));
})();
var G__262963 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__262946,G__262947,G__262948,G__262949,G__262950,G__262951,G__262952,G__262953,G__262954,G__262955,G__262956,G__262957,G__262958,G__262959,G__262960,G__262961,G__262962,G__262963) : tailrecursion.hoplon.pre.call(null,G__262946,G__262947,G__262948,G__262949,G__262950,G__262951,G__262952,G__262953,G__262954,G__262955,G__262956,G__262957,G__262958,G__262959,G__262960,G__262961,G__262962,G__262963));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262944,G__262945) : tailrecursion.hoplon.div.call(null,G__262944,G__262945));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262943) : tailrecursion.hoplon.div.call(null,G__262943));
})(),(function (){var G__262982 = cljs.core.PersistentArrayMap.EMPTY;
var G__262983 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262982,G__262983) : tailrecursion.hoplon.markdown.para_node.call(null,G__262982,G__262983));
})(),(function (){var G__263022 = (function (){var G__263023 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263024 = (function (){var G__263025 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263026 = "(";
var G__263027 = (function (){var G__263043 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263044 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263043,G__263044) : tailrecursion.hoplon.span.call(null,G__263043,G__263044));
})();
var G__263028 = (function (){var G__263045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263046 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263045,G__263046) : tailrecursion.hoplon.span.call(null,G__263045,G__263046));
})();
var G__263029 = " [";
var G__263030 = (function (){var G__263047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263048 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263047,G__263048) : tailrecursion.hoplon.span.call(null,G__263047,G__263048));
})();
var G__263031 = " ";
var G__263032 = (function (){var G__263049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263050 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263049,G__263050) : tailrecursion.hoplon.span.call(null,G__263049,G__263050));
})();
var G__263033 = "]\n  (";
var G__263034 = (function (){var G__263051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263052 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263051,G__263052) : tailrecursion.hoplon.span.call(null,G__263051,G__263052));
})();
var G__263035 = "(";
var G__263036 = (function (){var G__263053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263054 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263053,G__263054) : tailrecursion.hoplon.span.call(null,G__263053,G__263054));
})();
var G__263037 = (function (){var G__263055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263056 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263055,G__263056) : tailrecursion.hoplon.span.call(null,G__263055,G__263056));
})();
var G__263038 = " ";
var G__263039 = (function (){var G__263057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263058 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263057,G__263058) : tailrecursion.hoplon.span.call(null,G__263057,G__263058));
})();
var G__263040 = ") ";
var G__263041 = (function (){var G__263059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263060 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263059,G__263060) : tailrecursion.hoplon.span.call(null,G__263059,G__263060));
})();
var G__263042 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__263025,G__263026,G__263027,G__263028,G__263029,G__263030,G__263031,G__263032,G__263033,G__263034,G__263035,G__263036,G__263037,G__263038,G__263039,G__263040,G__263041,G__263042) : tailrecursion.hoplon.pre.call(null,G__263025,G__263026,G__263027,G__263028,G__263029,G__263030,G__263031,G__263032,G__263033,G__263034,G__263035,G__263036,G__263037,G__263038,G__263039,G__263040,G__263041,G__263042));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263023,G__263024) : tailrecursion.hoplon.div.call(null,G__263023,G__263024));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263022) : tailrecursion.hoplon.div.call(null,G__263022));
})(),(function (){var G__263061 = cljs.core.PersistentArrayMap.EMPTY;
var G__263062 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We also have to say what we mean by ``good enough.",(function (){var G__263063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263064 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263063,G__263064) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263063,G__263064));
})(),(function (){var G__263065 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263066 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263065,G__263066) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263065,G__263066));
})()," The following will do for illustration, but it is not really a very good test. (See exercise 1.7.) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001):",(function (){var G__263067 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__263068 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention. As far as the interpreter is concerned, the question mark is just an ordinary character."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263067,G__263068) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263067,G__263068));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263061,G__263062) : tailrecursion.hoplon.markdown.para_node.call(null,G__263061,G__263062));
})(),(function (){var G__263116 = (function (){var G__263117 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263118 = (function (){var G__263119 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263120 = "(";
var G__263121 = (function (){var G__263142 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263143 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263142,G__263143) : tailrecursion.hoplon.span.call(null,G__263142,G__263143));
})();
var G__263122 = (function (){var G__263144 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263145 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263144,G__263145) : tailrecursion.hoplon.span.call(null,G__263144,G__263145));
})();
var G__263123 = " [";
var G__263124 = (function (){var G__263146 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263147 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263146,G__263147) : tailrecursion.hoplon.span.call(null,G__263146,G__263147));
})();
var G__263125 = " ";
var G__263126 = (function (){var G__263148 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263149 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263148,G__263149) : tailrecursion.hoplon.span.call(null,G__263148,G__263149));
})();
var G__263127 = "]\n  (";
var G__263128 = (function (){var G__263150 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263151 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263150,G__263151) : tailrecursion.hoplon.span.call(null,G__263150,G__263151));
})();
var G__263129 = "(";
var G__263130 = (function (){var G__263152 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263153 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263152,G__263153) : tailrecursion.hoplon.span.call(null,G__263152,G__263153));
})();
var G__263131 = " (";
var G__263132 = (function (){var G__263154 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263155 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263154,G__263155) : tailrecursion.hoplon.span.call(null,G__263154,G__263155));
})();
var G__263133 = "(";
var G__263134 = (function (){var G__263156 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263157 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263156,G__263157) : tailrecursion.hoplon.span.call(null,G__263156,G__263157));
})();
var G__263135 = " ";
var G__263136 = (function (){var G__263158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263159 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263158,G__263159) : tailrecursion.hoplon.span.call(null,G__263158,G__263159));
})();
var G__263137 = ") ";
var G__263138 = (function (){var G__263160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263161 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263160,G__263161) : tailrecursion.hoplon.span.call(null,G__263160,G__263161));
})();
var G__263139 = ")) ";
var G__263140 = (function (){var G__263162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263163 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263162,G__263163) : tailrecursion.hoplon.span.call(null,G__263162,G__263163));
})();
var G__263141 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__263119,G__263120,G__263121,G__263122,G__263123,G__263124,G__263125,G__263126,G__263127,G__263128,G__263129,G__263130,G__263131,G__263132,G__263133,G__263134,G__263135,G__263136,G__263137,G__263138,G__263139,G__263140,G__263141) : tailrecursion.hoplon.pre.call(null,G__263119,G__263120,G__263121,G__263122,G__263123,G__263124,G__263125,G__263126,G__263127,G__263128,G__263129,G__263130,G__263131,G__263132,G__263133,G__263134,G__263135,G__263136,G__263137,G__263138,G__263139,G__263140,G__263141));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263117,G__263118) : tailrecursion.hoplon.div.call(null,G__263117,G__263118));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263116) : tailrecursion.hoplon.div.call(null,G__263116));
})(),(function (){var G__263164 = cljs.core.PersistentArrayMap.EMPTY;
var G__263165 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:",(function (){var G__263166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__263167 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that we express our initial guess as 1.0 rather than 1. This would not make any difference in many Lisp implementations. MIT Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal. For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667. (We will learn how to implement arithmetic on rational numbers in section 2.1.1.) If we start with an initial guess of 1 in our square-root program, and \\(x\\) is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals. Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263166,G__263167) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263166,G__263167));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263164,G__263165) : tailrecursion.hoplon.markdown.para_node.call(null,G__263164,G__263165));
})(),(function (){var G__263195 = (function (){var G__263196 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263197 = (function (){var G__263198 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263199 = "(";
var G__263200 = (function (){var G__263211 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263212 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263211,G__263212) : tailrecursion.hoplon.span.call(null,G__263211,G__263212));
})();
var G__263201 = (function (){var G__263213 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263214 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263213,G__263214) : tailrecursion.hoplon.span.call(null,G__263213,G__263214));
})();
var G__263202 = " [";
var G__263203 = (function (){var G__263215 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263216 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263215,G__263216) : tailrecursion.hoplon.span.call(null,G__263215,G__263216));
})();
var G__263204 = "]\n  (";
var G__263205 = (function (){var G__263217 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263218 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263217,G__263218) : tailrecursion.hoplon.span.call(null,G__263217,G__263218));
})();
var G__263206 = " ";
var G__263207 = (function (){var G__263219 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263220 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263219,G__263220) : tailrecursion.hoplon.span.call(null,G__263219,G__263220));
})();
var G__263208 = " ";
var G__263209 = (function (){var G__263221 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263222 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263221,G__263222) : tailrecursion.hoplon.span.call(null,G__263221,G__263222));
})();
var G__263210 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__263198,G__263199,G__263200,G__263201,G__263202,G__263203,G__263204,G__263205,G__263206,G__263207,G__263208,G__263209,G__263210) : tailrecursion.hoplon.pre.call(null,G__263198,G__263199,G__263200,G__263201,G__263202,G__263203,G__263204,G__263205,G__263206,G__263207,G__263208,G__263209,G__263210));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263196,G__263197) : tailrecursion.hoplon.div.call(null,G__263196,G__263197));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263195) : tailrecursion.hoplon.div.call(null,G__263195));
})(),(function (){var G__263223 = cljs.core.PersistentArrayMap.EMPTY;
var G__263224 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we type these definitions to the interpreter, we can use sqrt just as we can use any procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263223,G__263224) : tailrecursion.hoplon.markdown.para_node.call(null,G__263223,G__263224));
})(),(function (){var G__263304 = (function (){var G__263305 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263306 = (function (){var G__263307 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263308 = "(";
var G__263309 = (function (){var G__263346 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263347 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263346,G__263347) : tailrecursion.hoplon.span.call(null,G__263346,G__263347));
})();
var G__263310 = " ";
var G__263311 = (function (){var G__263348 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263349 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263348,G__263349) : tailrecursion.hoplon.span.call(null,G__263348,G__263349));
})();
var G__263312 = ")\n";
var G__263313 = (function (){var G__263350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263351 = "3.00009155413138";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263350,G__263351) : tailrecursion.hoplon.span.call(null,G__263350,G__263351));
})();
var G__263314 = "\n(";
var G__263315 = (function (){var G__263352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263353 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263352,G__263353) : tailrecursion.hoplon.span.call(null,G__263352,G__263353));
})();
var G__263316 = " (";
var G__263317 = (function (){var G__263354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263355 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263354,G__263355) : tailrecursion.hoplon.span.call(null,G__263354,G__263355));
})();
var G__263318 = (function (){var G__263356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263357 = "100";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263356,G__263357) : tailrecursion.hoplon.span.call(null,G__263356,G__263357));
})();
var G__263319 = " ";
var G__263320 = (function (){var G__263358 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263359 = "37";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263358,G__263359) : tailrecursion.hoplon.span.call(null,G__263358,G__263359));
})();
var G__263321 = "))\n";
var G__263322 = (function (){var G__263360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263361 = "11.704699917758145";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263360,G__263361) : tailrecursion.hoplon.span.call(null,G__263360,G__263361));
})();
var G__263323 = "\n(";
var G__263324 = (function (){var G__263362 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263363 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263362,G__263363) : tailrecursion.hoplon.span.call(null,G__263362,G__263363));
})();
var G__263325 = " (";
var G__263326 = (function (){var G__263364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263365 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263364,G__263365) : tailrecursion.hoplon.span.call(null,G__263364,G__263365));
})();
var G__263327 = "(";
var G__263328 = (function (){var G__263366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263367 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263366,G__263367) : tailrecursion.hoplon.span.call(null,G__263366,G__263367));
})();
var G__263329 = " ";
var G__263330 = (function (){var G__263368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263369 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263368,G__263369) : tailrecursion.hoplon.span.call(null,G__263368,G__263369));
})();
var G__263331 = ") (";
var G__263332 = (function (){var G__263370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263371 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263370,G__263371) : tailrecursion.hoplon.span.call(null,G__263370,G__263371));
})();
var G__263333 = " ";
var G__263334 = (function (){var G__263372 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263373 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263372,G__263373) : tailrecursion.hoplon.span.call(null,G__263372,G__263373));
})();
var G__263335 = ")))\n";
var G__263336 = (function (){var G__263374 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263375 = "1.7739279023207892";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263374,G__263375) : tailrecursion.hoplon.span.call(null,G__263374,G__263375));
})();
var G__263337 = "\n(";
var G__263338 = (function (){var G__263376 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263377 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263376,G__263377) : tailrecursion.hoplon.span.call(null,G__263376,G__263377));
})();
var G__263339 = " (";
var G__263340 = (function (){var G__263378 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263379 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263378,G__263379) : tailrecursion.hoplon.span.call(null,G__263378,G__263379));
})();
var G__263341 = " ";
var G__263342 = (function (){var G__263380 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263381 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263380,G__263381) : tailrecursion.hoplon.span.call(null,G__263380,G__263381));
})();
var G__263343 = "))\n";
var G__263344 = (function (){var G__263382 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263383 = "1000.000369924366";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263382,G__263383) : tailrecursion.hoplon.span.call(null,G__263382,G__263383));
})();
var G__263345 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__263307,G__263308,G__263309,G__263310,G__263311,G__263312,G__263313,G__263314,G__263315,G__263316,G__263317,G__263318,G__263319,G__263320,G__263321,G__263322,G__263323,G__263324,G__263325,G__263326,G__263327,G__263328,G__263329,G__263330,G__263331,G__263332,G__263333,G__263334,G__263335,G__263336,G__263337,G__263338,G__263339,G__263340,G__263341,G__263342,G__263343,G__263344,G__263345) : tailrecursion.hoplon.pre.call(null,G__263307,G__263308,G__263309,G__263310,G__263311,G__263312,G__263313,G__263314,G__263315,G__263316,G__263317,G__263318,G__263319,G__263320,G__263321,G__263322,G__263323,G__263324,G__263325,G__263326,G__263327,G__263328,G__263329,G__263330,G__263331,G__263332,G__263333,G__263334,G__263335,G__263336,G__263337,G__263338,G__263339,G__263340,G__263341,G__263342,G__263343,G__263344,G__263345));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263305,G__263306) : tailrecursion.hoplon.div.call(null,G__263305,G__263306));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263304) : tailrecursion.hoplon.div.call(null,G__263304));
})(),(function (){var G__263384 = cljs.core.PersistentArrayMap.EMPTY;
var G__263385 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The sqrt program also illustrates that the simple procedural language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. Sqrt-iter, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a procedure.",(function (){var G__263386 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__263387 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on ``tail recursion",(function (){var G__263388 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263389 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263388,G__263389) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263388,G__263389));
})(),(function (){var G__263390 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263391 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263390,G__263391) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263390,G__263391));
})()," in section 1.2.1."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263386,G__263387) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263386,G__263387));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263384,G__263385) : tailrecursion.hoplon.markdown.para_node.call(null,G__263384,G__263385));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262777;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262776;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262775;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262774;
}})()], 0));
var G__258432 = "";
var G__258433 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263392 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263393 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263394 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263395 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263396 = cljs.core.PersistentArrayMap.EMPTY;
var G__263397 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Alyssa P. Hacker doesn",(function (){var G__263398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263399 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263398,G__263399) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263398,G__263399));
})(),"t see why if needs to be provided as a special form. ",(function (){var G__263400 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__263401 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Why can",(function (){var G__263402 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263403 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263402,G__263403) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263402,G__263403));
})(),"t I just define it as an ordinary procedure in terms of cond?"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263400,G__263401) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263400,G__263401));
})()," she asks. Alyssa",(function (){var G__263404 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263405 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263404,G__263405) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263404,G__263405));
})(),"s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263396,G__263397) : tailrecursion.hoplon.markdown.para_node.call(null,G__263396,G__263397));
})(),(function (){var G__263448 = (function (){var G__263449 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263450 = (function (){var G__263451 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263452 = "(";
var G__263453 = (function (){var G__263471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263472 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263471,G__263472) : tailrecursion.hoplon.span.call(null,G__263471,G__263472));
})();
var G__263454 = (function (){var G__263473 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263474 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263473,G__263474) : tailrecursion.hoplon.span.call(null,G__263473,G__263474));
})();
var G__263455 = " [";
var G__263456 = (function (){var G__263475 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263476 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263475,G__263476) : tailrecursion.hoplon.span.call(null,G__263475,G__263476));
})();
var G__263457 = " ";
var G__263458 = (function (){var G__263477 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263478 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263477,G__263478) : tailrecursion.hoplon.span.call(null,G__263477,G__263478));
})();
var G__263459 = " ";
var G__263460 = (function (){var G__263479 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263480 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263479,G__263480) : tailrecursion.hoplon.span.call(null,G__263479,G__263480));
})();
var G__263461 = "]\n  (";
var G__263462 = (function (){var G__263481 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263482 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263481,G__263482) : tailrecursion.hoplon.span.call(null,G__263481,G__263482));
})();
var G__263463 = (function (){var G__263483 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263484 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263483,G__263484) : tailrecursion.hoplon.span.call(null,G__263483,G__263484));
})();
var G__263464 = " ";
var G__263465 = (function (){var G__263485 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263486 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263485,G__263486) : tailrecursion.hoplon.span.call(null,G__263485,G__263486));
})();
var G__263466 = "\n        ";
var G__263467 = (function (){var G__263487 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263488 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263487,G__263488) : tailrecursion.hoplon.span.call(null,G__263487,G__263488));
})();
var G__263468 = " ";
var G__263469 = (function (){var G__263489 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263490 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263489,G__263490) : tailrecursion.hoplon.span.call(null,G__263489,G__263490));
})();
var G__263470 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__263451,G__263452,G__263453,G__263454,G__263455,G__263456,G__263457,G__263458,G__263459,G__263460,G__263461,G__263462,G__263463,G__263464,G__263465,G__263466,G__263467,G__263468,G__263469,G__263470) : tailrecursion.hoplon.pre.call(null,G__263451,G__263452,G__263453,G__263454,G__263455,G__263456,G__263457,G__263458,G__263459,G__263460,G__263461,G__263462,G__263463,G__263464,G__263465,G__263466,G__263467,G__263468,G__263469,G__263470));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263449,G__263450) : tailrecursion.hoplon.div.call(null,G__263449,G__263450));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263448) : tailrecursion.hoplon.div.call(null,G__263448));
})(),(function (){var G__263491 = cljs.core.PersistentArrayMap.EMPTY;
var G__263492 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Eva demonstrates the program for Alyssa:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263491,G__263492) : tailrecursion.hoplon.markdown.para_node.call(null,G__263491,G__263492));
})(),(function (){var G__263524 = (function (){var G__263525 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263526 = (function (){var G__263527 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263528 = "(";
var G__263529 = (function (){var G__263542 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263543 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263542,G__263543) : tailrecursion.hoplon.span.call(null,G__263542,G__263543));
})();
var G__263530 = " (";
var G__263531 = (function (){var G__263544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263545 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263544,G__263545) : tailrecursion.hoplon.span.call(null,G__263544,G__263545));
})();
var G__263532 = (function (){var G__263546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263547 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263546,G__263547) : tailrecursion.hoplon.span.call(null,G__263546,G__263547));
})();
var G__263533 = " ";
var G__263534 = (function (){var G__263548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263549 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263548,G__263549) : tailrecursion.hoplon.span.call(null,G__263548,G__263549));
})();
var G__263535 = ") ";
var G__263536 = (function (){var G__263550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263551 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263550,G__263551) : tailrecursion.hoplon.span.call(null,G__263550,G__263551));
})();
var G__263537 = " ";
var G__263538 = (function (){var G__263552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263553 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263552,G__263553) : tailrecursion.hoplon.span.call(null,G__263552,G__263553));
})();
var G__263539 = ")\n";
var G__263540 = (function (){var G__263554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263555 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263554,G__263555) : tailrecursion.hoplon.span.call(null,G__263554,G__263555));
})();
var G__263541 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__263527,G__263528,G__263529,G__263530,G__263531,G__263532,G__263533,G__263534,G__263535,G__263536,G__263537,G__263538,G__263539,G__263540,G__263541) : tailrecursion.hoplon.pre.call(null,G__263527,G__263528,G__263529,G__263530,G__263531,G__263532,G__263533,G__263534,G__263535,G__263536,G__263537,G__263538,G__263539,G__263540,G__263541));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263525,G__263526) : tailrecursion.hoplon.div.call(null,G__263525,G__263526));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263524) : tailrecursion.hoplon.div.call(null,G__263524));
})(),(function (){var G__263587 = (function (){var G__263588 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263589 = (function (){var G__263590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263591 = "(";
var G__263592 = (function (){var G__263605 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263606 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263605,G__263606) : tailrecursion.hoplon.span.call(null,G__263605,G__263606));
})();
var G__263593 = " (";
var G__263594 = (function (){var G__263607 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263608 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263607,G__263608) : tailrecursion.hoplon.span.call(null,G__263607,G__263608));
})();
var G__263595 = (function (){var G__263609 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263610 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263609,G__263610) : tailrecursion.hoplon.span.call(null,G__263609,G__263610));
})();
var G__263596 = " ";
var G__263597 = (function (){var G__263611 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263612 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263611,G__263612) : tailrecursion.hoplon.span.call(null,G__263611,G__263612));
})();
var G__263598 = ") ";
var G__263599 = (function (){var G__263613 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263614 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263613,G__263614) : tailrecursion.hoplon.span.call(null,G__263613,G__263614));
})();
var G__263600 = " ";
var G__263601 = (function (){var G__263615 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263616 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263615,G__263616) : tailrecursion.hoplon.span.call(null,G__263615,G__263616));
})();
var G__263602 = ")\n";
var G__263603 = (function (){var G__263617 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263618 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263617,G__263618) : tailrecursion.hoplon.span.call(null,G__263617,G__263618));
})();
var G__263604 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__263590,G__263591,G__263592,G__263593,G__263594,G__263595,G__263596,G__263597,G__263598,G__263599,G__263600,G__263601,G__263602,G__263603,G__263604) : tailrecursion.hoplon.pre.call(null,G__263590,G__263591,G__263592,G__263593,G__263594,G__263595,G__263596,G__263597,G__263598,G__263599,G__263600,G__263601,G__263602,G__263603,G__263604));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263588,G__263589) : tailrecursion.hoplon.div.call(null,G__263588,G__263589));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263587) : tailrecursion.hoplon.div.call(null,G__263587));
})(),(function (){var G__263619 = cljs.core.PersistentArrayMap.EMPTY;
var G__263620 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Delighted, Alyssa now uses ",(function (){var G__263621 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263622 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263621,G__263622) : tailrecursion.hoplon.markdown.code_node.call(null,G__263621,G__263622));
})()," to rewrite the square-root program:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263619,G__263620) : tailrecursion.hoplon.markdown.para_node.call(null,G__263619,G__263620));
})(),(function (){var G__263682 = (function (){var G__263683 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263684 = (function (){var G__263685 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263686 = "(";
var G__263687 = (function (){var G__263714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263715 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263714,G__263715) : tailrecursion.hoplon.span.call(null,G__263714,G__263715));
})();
var G__263688 = (function (){var G__263716 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263717 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263716,G__263717) : tailrecursion.hoplon.span.call(null,G__263716,G__263717));
})();
var G__263689 = " [";
var G__263690 = (function (){var G__263718 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263719 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263718,G__263719) : tailrecursion.hoplon.span.call(null,G__263718,G__263719));
})();
var G__263691 = " ";
var G__263692 = (function (){var G__263720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263721 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263720,G__263721) : tailrecursion.hoplon.span.call(null,G__263720,G__263721));
})();
var G__263693 = "]\n  (";
var G__263694 = (function (){var G__263722 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263723 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263722,G__263723) : tailrecursion.hoplon.span.call(null,G__263722,G__263723));
})();
var G__263695 = " (";
var G__263696 = (function (){var G__263724 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263725 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263724,G__263725) : tailrecursion.hoplon.span.call(null,G__263724,G__263725));
})();
var G__263697 = " ";
var G__263698 = (function (){var G__263726 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263727 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263726,G__263727) : tailrecursion.hoplon.span.call(null,G__263726,G__263727));
})();
var G__263699 = " ";
var G__263700 = (function (){var G__263728 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263729 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263728,G__263729) : tailrecursion.hoplon.span.call(null,G__263728,G__263729));
})();
var G__263701 = ")\n          ";
var G__263702 = (function (){var G__263730 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263731 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263730,G__263731) : tailrecursion.hoplon.span.call(null,G__263730,G__263731));
})();
var G__263703 = "\n          (";
var G__263704 = (function (){var G__263732 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263733 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263732,G__263733) : tailrecursion.hoplon.span.call(null,G__263732,G__263733));
})();
var G__263705 = " (";
var G__263706 = (function (){var G__263734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263735 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263734,G__263735) : tailrecursion.hoplon.span.call(null,G__263734,G__263735));
})();
var G__263707 = " ";
var G__263708 = (function (){var G__263736 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263737 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263736,G__263737) : tailrecursion.hoplon.span.call(null,G__263736,G__263737));
})();
var G__263709 = " ";
var G__263710 = (function (){var G__263738 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263739 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263738,G__263739) : tailrecursion.hoplon.span.call(null,G__263738,G__263739));
})();
var G__263711 = ")\n                     ";
var G__263712 = (function (){var G__263740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263741 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263740,G__263741) : tailrecursion.hoplon.span.call(null,G__263740,G__263741));
})();
var G__263713 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__263685,G__263686,G__263687,G__263688,G__263689,G__263690,G__263691,G__263692,G__263693,G__263694,G__263695,G__263696,G__263697,G__263698,G__263699,G__263700,G__263701,G__263702,G__263703,G__263704,G__263705,G__263706,G__263707,G__263708,G__263709,G__263710,G__263711,G__263712,G__263713) : tailrecursion.hoplon.pre.call(null,G__263685,G__263686,G__263687,G__263688,G__263689,G__263690,G__263691,G__263692,G__263693,G__263694,G__263695,G__263696,G__263697,G__263698,G__263699,G__263700,G__263701,G__263702,G__263703,G__263704,G__263705,G__263706,G__263707,G__263708,G__263709,G__263710,G__263711,G__263712,G__263713));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263683,G__263684) : tailrecursion.hoplon.div.call(null,G__263683,G__263684));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263682) : tailrecursion.hoplon.div.call(null,G__263682));
})(),(function (){var G__263742 = cljs.core.PersistentArrayMap.EMPTY;
var G__263743 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What happens when Alyssa attempts to use this to compute square roots? Explain."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263742,G__263743) : tailrecursion.hoplon.markdown.para_node.call(null,G__263742,G__263743));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263395;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263394;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263393;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263392;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263744 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263745 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263746 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263747 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263748 = cljs.core.PersistentArrayMap.EMPTY;
var G__263749 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since ",(function (){var G__263750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263751 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263750,G__263751) : tailrecursion.hoplon.markdown.code_node.call(null,G__263750,G__263751));
})()," is not a special form, it will be evaluated in applicative order. Hence, when ",(function (){var G__263752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(new-if a b c)"], null);
var G__263753 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263752,G__263753) : tailrecursion.hoplon.markdown.code_node.call(null,G__263752,G__263753));
})()," is called, a, b, and c are all evaluated before considering how they may or may not be used within the function ",(function (){var G__263754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263755 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263754,G__263755) : tailrecursion.hoplon.markdown.code_node.call(null,G__263754,G__263755));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263748,G__263749) : tailrecursion.hoplon.markdown.para_node.call(null,G__263748,G__263749));
})(),(function (){var G__263756 = cljs.core.PersistentArrayMap.EMPTY;
var G__263757 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So, in this particular case, let us compute the square root of 4 with our first guess being 2 (Alyssa would probably think that this would terminate immediately, but let",(function (){var G__263758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263759 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263758,G__263759) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263758,G__263759));
})(),"s see). ",(function (){var G__263760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"clj\n(sqrt-iter 2 4) ==>\n(new-if (good-enough? 2 4) 2 (sqrt-iter (improve 2 4) 4))\n"], null);
var G__263761 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263760,G__263761) : tailrecursion.hoplon.markdown.code_node.call(null,G__263760,G__263761));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263756,G__263757) : tailrecursion.hoplon.markdown.para_node.call(null,G__263756,G__263757));
})(),(function (){var G__263762 = cljs.core.PersistentArrayMap.EMPTY;
var G__263763 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["You can see that in this example, since ",(function (){var G__263764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(improve 2 4) = 2"], null);
var G__263765 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263764,G__263765) : tailrecursion.hoplon.markdown.code_node.call(null,G__263764,G__263765));
})(),", ",(function (){var G__263766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263767 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263766,G__263767) : tailrecursion.hoplon.markdown.code_node.call(null,G__263766,G__263767));
})()," is going to requre us to compute ",(function (){var G__263768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(sqrt-iter 2 4)"], null);
var G__263769 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263768,G__263769) : tailrecursion.hoplon.markdown.code_node.call(null,G__263768,G__263769));
})()," again. Then we",(function (){var G__263770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263771 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263770,G__263771) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263770,G__263771));
})(),"ll be computing the ",(function (){var G__263772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263773 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263772,G__263773) : tailrecursion.hoplon.markdown.code_node.call(null,G__263772,G__263773));
})()," again, and you can see the cycle that we",(function (){var G__263774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263775 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263774,G__263775) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263774,G__263775));
})(),"ve gotten ourselves in."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263762,G__263763) : tailrecursion.hoplon.markdown.para_node.call(null,G__263762,G__263763));
})(),(function (){var G__263776 = cljs.core.PersistentArrayMap.EMPTY;
var G__263777 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Long story short, this would result in an infinite loop."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263776,G__263777) : tailrecursion.hoplon.markdown.para_node.call(null,G__263776,G__263777));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263747;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263746;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263745;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263744;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263778 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263779 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263780 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263781 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263782 = cljs.core.PersistentArrayMap.EMPTY;
var G__263783 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",(function (){var G__263784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__263785 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263784,G__263785) : tailrecursion.hoplon.markdown.code_node.call(null,G__263784,G__263785));
})()," test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing ",(function (){var G__263786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__263787 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263786,G__263787) : tailrecursion.hoplon.markdown.code_node.call(null,G__263786,G__263787));
})()," is to watch how ",(function (){var G__263788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__263789 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263788,G__263789) : tailrecursion.hoplon.markdown.code_node.call(null,G__263788,G__263789));
})()," changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263782,G__263783) : tailrecursion.hoplon.markdown.para_node.call(null,G__263782,G__263783));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263781;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263780;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263779;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263778;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263790 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263791 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263792 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263793 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263794 = cljs.core.PersistentArrayMap.EMPTY;
var G__263795 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When finding the square root of a very small number (let",(function (){var G__263796 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263797 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263796,G__263797) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263796,G__263797));
})(),"s use 0.0000001, whose square root is 0.0001), since the answer we",(function (){var G__263798 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263799 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263798,G__263799) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263798,G__263799));
})(),"re looking for is smaller than our tollerance, you might get a zero or even a negative number as our answer! And on the other end of the spectrum, if our number is too large it would require enough calculations to make the precision larger than our tolerance. In that having a set tolerance is meaningless because our answer will be outside of that range due to the limitations of the computer!"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263794,G__263795) : tailrecursion.hoplon.markdown.para_node.call(null,G__263794,G__263795));
})(),(function (){var G__263800 = cljs.core.PersistentArrayMap.EMPTY;
var G__263801 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To avoid this problem we can set a dynamic tolerance like the exercise suggests. Let",(function (){var G__263802 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263803 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263802,G__263803) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263802,G__263803));
})(),"s say our problem allows for a 10% fractional tolerance. Then our ",(function (){var G__263804 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__263805 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263804,G__263805) : tailrecursion.hoplon.markdown.code_node.call(null,G__263804,G__263805));
})()," procedure would look like, "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263800,G__263801) : tailrecursion.hoplon.markdown.para_node.call(null,G__263800,G__263801));
})(),(function (){var G__263856 = (function (){var G__263857 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263858 = (function (){var G__263859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263860 = "(";
var G__263861 = (function (){var G__263883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263884 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263883,G__263884) : tailrecursion.hoplon.span.call(null,G__263883,G__263884));
})();
var G__263862 = (function (){var G__263885 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263886 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263885,G__263886) : tailrecursion.hoplon.span.call(null,G__263885,G__263886));
})();
var G__263863 = " [";
var G__263864 = (function (){var G__263887 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263888 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263887,G__263888) : tailrecursion.hoplon.span.call(null,G__263887,G__263888));
})();
var G__263865 = " ";
var G__263866 = (function (){var G__263889 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263890 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263889,G__263890) : tailrecursion.hoplon.span.call(null,G__263889,G__263890));
})();
var G__263867 = "]\n  (";
var G__263868 = (function (){var G__263891 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263892 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263891,G__263892) : tailrecursion.hoplon.span.call(null,G__263891,G__263892));
})();
var G__263869 = "(";
var G__263870 = (function (){var G__263893 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263894 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263893,G__263894) : tailrecursion.hoplon.span.call(null,G__263893,G__263894));
})();
var G__263871 = " (";
var G__263872 = (function (){var G__263895 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263896 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263895,G__263896) : tailrecursion.hoplon.span.call(null,G__263895,G__263896));
})();
var G__263873 = "(";
var G__263874 = (function (){var G__263897 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263898 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263897,G__263898) : tailrecursion.hoplon.span.call(null,G__263897,G__263898));
})();
var G__263875 = (function (){var G__263899 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263900 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263899,G__263900) : tailrecursion.hoplon.span.call(null,G__263899,G__263900));
})();
var G__263876 = " ";
var G__263877 = (function (){var G__263901 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263902 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263901,G__263902) : tailrecursion.hoplon.span.call(null,G__263901,G__263902));
})();
var G__263878 = ") ";
var G__263879 = (function (){var G__263903 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263904 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263903,G__263904) : tailrecursion.hoplon.span.call(null,G__263903,G__263904));
})();
var G__263880 = ")) ";
var G__263881 = (function (){var G__263905 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263906 = "0.1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263905,G__263906) : tailrecursion.hoplon.span.call(null,G__263905,G__263906));
})();
var G__263882 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24(G__263859,G__263860,G__263861,G__263862,G__263863,G__263864,G__263865,G__263866,G__263867,G__263868,G__263869,G__263870,G__263871,G__263872,G__263873,G__263874,G__263875,G__263876,G__263877,G__263878,G__263879,G__263880,G__263881,G__263882) : tailrecursion.hoplon.pre.call(null,G__263859,G__263860,G__263861,G__263862,G__263863,G__263864,G__263865,G__263866,G__263867,G__263868,G__263869,G__263870,G__263871,G__263872,G__263873,G__263874,G__263875,G__263876,G__263877,G__263878,G__263879,G__263880,G__263881,G__263882));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263857,G__263858) : tailrecursion.hoplon.div.call(null,G__263857,G__263858));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263856) : tailrecursion.hoplon.div.call(null,G__263856));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263793;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263792;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263791;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263790;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263907 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263908 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263909 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263910 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263911 = cljs.core.PersistentArrayMap.EMPTY;
var G__263912 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Newton",(function (){var G__263913 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263914 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263913,G__263914) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263913,G__263914));
})(),"s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263911,G__263912) : tailrecursion.hoplon.markdown.para_node.call(null,G__263911,G__263912));
})(),(function (){var G__263915 = cljs.core.PersistentArrayMap.EMPTY;
var G__263916 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\frac{x/y^2 +2y}{3} $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263915,G__263916) : tailrecursion.hoplon.markdown.para_node.call(null,G__263915,G__263916));
})(),(function (){var G__263917 = cljs.core.PersistentArrayMap.EMPTY;
var G__263918 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#!/sicp/ch/1/sect/3/sub/4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.3.4"], null)], 0))," we will see how to implement Newton",(function (){var G__263919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263920 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263919,G__263920) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263919,G__263920));
})(),"s method in general as an abstraction of these square-root and cube-root procedures.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263917,G__263918) : tailrecursion.hoplon.markdown.para_node.call(null,G__263917,G__263918));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263910;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263909;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263908;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263907;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263921 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263922 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263923 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263924 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263982 = (function (){var G__263983 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263984 = (function (){var G__263985 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263986 = "(";
var G__263987 = (function (){var G__264012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264013 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264012,G__264013) : tailrecursion.hoplon.span.call(null,G__264012,G__264013));
})();
var G__263988 = (function (){var G__264014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264015 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264014,G__264015) : tailrecursion.hoplon.span.call(null,G__264014,G__264015));
})();
var G__263989 = " [";
var G__263990 = (function (){var G__264016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264017 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264016,G__264017) : tailrecursion.hoplon.span.call(null,G__264016,G__264017));
})();
var G__263991 = " ";
var G__263992 = (function (){var G__264018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264019 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264018,G__264019) : tailrecursion.hoplon.span.call(null,G__264018,G__264019));
})();
var G__263993 = "]\n  (";
var G__263994 = (function (){var G__264020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264021 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264020,G__264021) : tailrecursion.hoplon.span.call(null,G__264020,G__264021));
})();
var G__263995 = "(";
var G__263996 = (function (){var G__264022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264023 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264022,G__264023) : tailrecursion.hoplon.span.call(null,G__264022,G__264023));
})();
var G__263997 = "(";
var G__263998 = (function (){var G__264024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264025 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264024,G__264025) : tailrecursion.hoplon.span.call(null,G__264024,G__264025));
})();
var G__263999 = (function (){var G__264026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264027 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264026,G__264027) : tailrecursion.hoplon.span.call(null,G__264026,G__264027));
})();
var G__264000 = " (";
var G__264001 = (function (){var G__264028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264029 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264028,G__264029) : tailrecursion.hoplon.span.call(null,G__264028,G__264029));
})();
var G__264002 = " ";
var G__264003 = (function (){var G__264030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264031 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264030,G__264031) : tailrecursion.hoplon.span.call(null,G__264030,G__264031));
})();
var G__264004 = ")) (";
var G__264005 = (function (){var G__264032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264033 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264032,G__264033) : tailrecursion.hoplon.span.call(null,G__264032,G__264033));
})();
var G__264006 = (function (){var G__264034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__264035 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264034,G__264035) : tailrecursion.hoplon.span.call(null,G__264034,G__264035));
})();
var G__264007 = " ";
var G__264008 = (function (){var G__264036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264037 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264036,G__264037) : tailrecursion.hoplon.span.call(null,G__264036,G__264037));
})();
var G__264009 = ")) ";
var G__264010 = (function (){var G__264038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__264039 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264038,G__264039) : tailrecursion.hoplon.span.call(null,G__264038,G__264039));
})();
var G__264011 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__263985,G__263986,G__263987,G__263988,G__263989,G__263990,G__263991,G__263992,G__263993,G__263994,G__263995,G__263996,G__263997,G__263998,G__263999,G__264000,G__264001,G__264002,G__264003,G__264004,G__264005,G__264006,G__264007,G__264008,G__264009,G__264010,G__264011) : tailrecursion.hoplon.pre.call(null,G__263985,G__263986,G__263987,G__263988,G__263989,G__263990,G__263991,G__263992,G__263993,G__263994,G__263995,G__263996,G__263997,G__263998,G__263999,G__264000,G__264001,G__264002,G__264003,G__264004,G__264005,G__264006,G__264007,G__264008,G__264009,G__264010,G__264011));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263983,G__263984) : tailrecursion.hoplon.div.call(null,G__263983,G__263984));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263982) : tailrecursion.hoplon.div.call(null,G__263982));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263924;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263923;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263922;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263921;
}})()], 0))], 0))], 0));
var G__258434 = "";
var G__258435 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Procedures as Black-Box Abstractions"], null),(function (){var _STAR_references_STAR_264040 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264041 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_264042 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264043 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__264044 = cljs.core.PersistentArrayMap.EMPTY;
var G__264045 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__264046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Sqrt"], null);
var G__264047 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264046,G__264047) : tailrecursion.hoplon.markdown.code_node.call(null,G__264046,G__264047));
})()," is our first example of a process defined by a set of mutually defined procedures. Notice that the definition of ",(function (){var G__264048 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__264049 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264048,G__264049) : tailrecursion.hoplon.markdown.code_node.call(null,G__264048,G__264049));
})()," is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0)),"; that is, the procedure is defined in terms of itself. The idea of being able to define a procedure in terms of itself may be disturbing; it may seem unclear how such a ",(function (){var G__264050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__264051 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["circular"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__264050,G__264051) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__264050,G__264051));
})()," definition could make sense at all, much less specify a well-defined process to be carried out by a computer. This will be addressed more carefully in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"\"#/sicp/ch/1/sect/2/\"",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.2"], null)], 0)),". But first let",(function (){var G__264052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264053 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264052,G__264053) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264052,G__264053));
})(),"s consider some other important points illustrated by the ",(function (){var G__264054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264055 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264054,G__264055) : tailrecursion.hoplon.markdown.code_node.call(null,G__264054,G__264055));
})()," example."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264044,G__264045) : tailrecursion.hoplon.markdown.para_node.call(null,G__264044,G__264045));
})(),(function (){var G__264056 = cljs.core.PersistentArrayMap.EMPTY;
var G__264057 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that the problem of computing square roots breaks up naturally into a number of subproblems: how to tell whether a guess is good enough, how to improve a guess, and so on. Each of these tasks is accomplished by a separate procedure. The entire ",(function (){var G__264058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264059 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264058,G__264059) : tailrecursion.hoplon.markdown.code_node.call(null,G__264058,G__264059));
})()," program can be viewed as a cluster of procedures (shown in figure 1.2) that mirrors the decomposition of the problem into subproblems."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264056,G__264057) : tailrecursion.hoplon.markdown.para_node.call(null,G__264056,G__264057));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264043;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264042;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264041;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264040;
}})(),book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Procedural decomposition of the sqrt program."], null)], 0)),"",(function (){var _STAR_references_STAR_264060 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264061 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_264062 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264063 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__264064 = cljs.core.PersistentArrayMap.EMPTY;
var G__264065 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The importance of this decomposition strategy is not simply that one is dividing the program into parts. After all, we could take any large program and divide it into parts ",(function (){var G__264066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__264067 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264066,G__264067) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264066,G__264067));
})()," the first ten lines, the next ten lines, the next ten lines, and so on. Rather, it is crucial that each procedure accomplishes an identifiable task that can be used as a module in defining other procedures. For example, when we define the ",(function (){var G__264068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264069 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264068,G__264069) : tailrecursion.hoplon.markdown.code_node.call(null,G__264068,G__264069));
})()," procedure in terms of ",(function (){var G__264070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264071 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264070,G__264071) : tailrecursion.hoplon.markdown.code_node.call(null,G__264070,G__264071));
})(),", we are able to regard the ",(function (){var G__264072 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264073 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264072,G__264073) : tailrecursion.hoplon.markdown.code_node.call(null,G__264072,G__264073));
})()," procedure as a ",(function (){var G__264074 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__264075 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["black box."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__264074,G__264075) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__264074,G__264075));
})()," We are not at that moment concerned with ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how"], null)], 0))," the procedure computes its result, only with the fact that it computes the square. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as the ",(function (){var G__264076 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264077 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264076,G__264077) : tailrecursion.hoplon.markdown.code_node.call(null,G__264076,G__264077));
})()," procedure is concerned, ",(function (){var G__264078 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264079 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264078,G__264079) : tailrecursion.hoplon.markdown.code_node.call(null,G__264078,G__264079));
})()," is not quite a procedure but rather an abstraction of a procedure, a so-called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedural abstraction"], null)], 0)),". At this level of abstraction, any procedure that computes the square is equally good."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264064,G__264065) : tailrecursion.hoplon.markdown.para_node.call(null,G__264064,G__264065));
})(),(function (){var G__264080 = cljs.core.PersistentArrayMap.EMPTY;
var G__264081 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus, considering only the values they return, the following two procedures for squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.",(function (){var G__264082 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__264083 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is not even clear which of these procedures is a more efficient implementation. This depends upon the hardware available. There are machines for which the ",(function (){var G__264084 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__264085 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["obvious"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__264084,G__264085) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__264084,G__264085));
})()," implementation is the less efficient one. Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__264082,G__264083) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__264082,G__264083));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264080,G__264081) : tailrecursion.hoplon.markdown.para_node.call(null,G__264080,G__264081));
})(),(function (){var G__264112 = (function (){var G__264113 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264114 = (function (){var G__264115 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264116 = "(";
var G__264117 = (function (){var G__264127 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264128 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264127,G__264128) : tailrecursion.hoplon.span.call(null,G__264127,G__264128));
})();
var G__264118 = (function (){var G__264129 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264130 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264129,G__264130) : tailrecursion.hoplon.span.call(null,G__264129,G__264130));
})();
var G__264119 = " [";
var G__264120 = (function (){var G__264131 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264132 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264131,G__264132) : tailrecursion.hoplon.span.call(null,G__264131,G__264132));
})();
var G__264121 = "] (";
var G__264122 = (function (){var G__264133 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264134 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264133,G__264134) : tailrecursion.hoplon.span.call(null,G__264133,G__264134));
})();
var G__264123 = (function (){var G__264135 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264136 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264135,G__264136) : tailrecursion.hoplon.span.call(null,G__264135,G__264136));
})();
var G__264124 = " ";
var G__264125 = (function (){var G__264137 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264138 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264137,G__264138) : tailrecursion.hoplon.span.call(null,G__264137,G__264138));
})();
var G__264126 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__264115,G__264116,G__264117,G__264118,G__264119,G__264120,G__264121,G__264122,G__264123,G__264124,G__264125,G__264126) : tailrecursion.hoplon.pre.call(null,G__264115,G__264116,G__264117,G__264118,G__264119,G__264120,G__264121,G__264122,G__264123,G__264124,G__264125,G__264126));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264113,G__264114) : tailrecursion.hoplon.div.call(null,G__264113,G__264114));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264112) : tailrecursion.hoplon.div.call(null,G__264112));
})(),(function (){var G__264139 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn square [x] \n  (exp (double (log x))))\n") : tailrecursion.hoplon.code.call(null,"(defn square [x] \n  (exp (double (log x))))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__264139) : tailrecursion.hoplon.pre.call(null,G__264139));
})(),(function (){var G__264166 = (function (){var G__264167 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264168 = (function (){var G__264169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264170 = "(";
var G__264171 = (function (){var G__264181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264182 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264181,G__264182) : tailrecursion.hoplon.span.call(null,G__264181,G__264182));
})();
var G__264172 = (function (){var G__264183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264184 = "double ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264183,G__264184) : tailrecursion.hoplon.span.call(null,G__264183,G__264184));
})();
var G__264173 = "[";
var G__264174 = (function (){var G__264185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264186 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264185,G__264186) : tailrecursion.hoplon.span.call(null,G__264185,G__264186));
})();
var G__264175 = "] (";
var G__264176 = (function (){var G__264187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264188 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264187,G__264188) : tailrecursion.hoplon.span.call(null,G__264187,G__264188));
})();
var G__264177 = (function (){var G__264189 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264190 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264189,G__264190) : tailrecursion.hoplon.span.call(null,G__264189,G__264190));
})();
var G__264178 = " ";
var G__264179 = (function (){var G__264191 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264192 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264191,G__264192) : tailrecursion.hoplon.span.call(null,G__264191,G__264192));
})();
var G__264180 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__264169,G__264170,G__264171,G__264172,G__264173,G__264174,G__264175,G__264176,G__264177,G__264178,G__264179,G__264180) : tailrecursion.hoplon.pre.call(null,G__264169,G__264170,G__264171,G__264172,G__264173,G__264174,G__264175,G__264176,G__264177,G__264178,G__264179,G__264180));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264167,G__264168) : tailrecursion.hoplon.div.call(null,G__264167,G__264168));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264166) : tailrecursion.hoplon.div.call(null,G__264166));
})(),(function (){var G__264193 = cljs.core.PersistentArrayMap.EMPTY;
var G__264194 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So a procedure definition should be able to suppress detail. The users of the procedure may not have written the procedure themselves, but may have obtained it from another programmer as a black box. A user should not need to know how the procedure is implemented in order to use it."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264193,G__264194) : tailrecursion.hoplon.markdown.para_node.call(null,G__264193,G__264194));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264063;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264062;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264061;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264060;
}})()], 0));
var G__258436 = "";
var G__258437 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Local Names"], null),(function (){var _STAR_references_STAR_264195 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264196 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_264197 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264198 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__264199 = cljs.core.PersistentArrayMap.EMPTY;
var G__264200 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One detail of a procedure",(function (){var G__264201 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264202 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264201,G__264202) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264201,G__264202));
})(),"s implementation that should not matter to the user of the procedure is the implementer",(function (){var G__264203 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264204 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264203,G__264204) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264203,G__264204));
})(),"s choice of names for the procedure",(function (){var G__264205 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264206 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264205,G__264206) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264205,G__264206));
})(),"s formal parameters. Thus, the following procedures should not be distinguishable:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264199,G__264200) : tailrecursion.hoplon.markdown.para_node.call(null,G__264199,G__264200));
})(),(function (){var G__264233 = (function (){var G__264234 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264235 = (function (){var G__264236 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264237 = "(";
var G__264238 = (function (){var G__264248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264249 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264248,G__264249) : tailrecursion.hoplon.span.call(null,G__264248,G__264249));
})();
var G__264239 = (function (){var G__264250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264251 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264250,G__264251) : tailrecursion.hoplon.span.call(null,G__264250,G__264251));
})();
var G__264240 = " [";
var G__264241 = (function (){var G__264252 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264253 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264252,G__264253) : tailrecursion.hoplon.span.call(null,G__264252,G__264253));
})();
var G__264242 = "] (";
var G__264243 = (function (){var G__264254 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264255 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264254,G__264255) : tailrecursion.hoplon.span.call(null,G__264254,G__264255));
})();
var G__264244 = (function (){var G__264256 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264257 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264256,G__264257) : tailrecursion.hoplon.span.call(null,G__264256,G__264257));
})();
var G__264245 = " ";
var G__264246 = (function (){var G__264258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264259 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264258,G__264259) : tailrecursion.hoplon.span.call(null,G__264258,G__264259));
})();
var G__264247 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__264236,G__264237,G__264238,G__264239,G__264240,G__264241,G__264242,G__264243,G__264244,G__264245,G__264246,G__264247) : tailrecursion.hoplon.pre.call(null,G__264236,G__264237,G__264238,G__264239,G__264240,G__264241,G__264242,G__264243,G__264244,G__264245,G__264246,G__264247));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264234,G__264235) : tailrecursion.hoplon.div.call(null,G__264234,G__264235));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264233) : tailrecursion.hoplon.div.call(null,G__264233));
})(),(function (){var G__264286 = (function (){var G__264287 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264288 = (function (){var G__264289 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264290 = "(";
var G__264291 = (function (){var G__264301 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264302 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264301,G__264302) : tailrecursion.hoplon.span.call(null,G__264301,G__264302));
})();
var G__264292 = (function (){var G__264303 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264304 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264303,G__264304) : tailrecursion.hoplon.span.call(null,G__264303,G__264304));
})();
var G__264293 = " [";
var G__264294 = (function (){var G__264305 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264306 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264305,G__264306) : tailrecursion.hoplon.span.call(null,G__264305,G__264306));
})();
var G__264295 = "] (";
var G__264296 = (function (){var G__264307 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264308 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264307,G__264308) : tailrecursion.hoplon.span.call(null,G__264307,G__264308));
})();
var G__264297 = (function (){var G__264309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264310 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264309,G__264310) : tailrecursion.hoplon.span.call(null,G__264309,G__264310));
})();
var G__264298 = " ";
var G__264299 = (function (){var G__264311 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264312 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264311,G__264312) : tailrecursion.hoplon.span.call(null,G__264311,G__264312));
})();
var G__264300 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__264289,G__264290,G__264291,G__264292,G__264293,G__264294,G__264295,G__264296,G__264297,G__264298,G__264299,G__264300) : tailrecursion.hoplon.pre.call(null,G__264289,G__264290,G__264291,G__264292,G__264293,G__264294,G__264295,G__264296,G__264297,G__264298,G__264299,G__264300));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264287,G__264288) : tailrecursion.hoplon.div.call(null,G__264287,G__264288));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264286) : tailrecursion.hoplon.div.call(null,G__264286));
})(),(function (){var G__264313 = cljs.core.PersistentArrayMap.EMPTY;
var G__264314 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This principle ",(function (){var G__264315 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__264316 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264315,G__264316) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264315,G__264316));
})()," that the meaning of a procedure should be independent of the parameter names used by its author ",(function (){var G__264317 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__264318 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264317,G__264318) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264317,G__264318));
})()," seems on the surface to be self-evident, but its consequences are profound. The simplest consequence is that the parameter names of a procedure must be local to the body of the procedure. For example, we used ",(function (){var G__264319 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264320 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264319,G__264320) : tailrecursion.hoplon.markdown.code_node.call(null,G__264319,G__264320));
})()," in the definition of ",(function (){var G__264321 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264322 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264321,G__264322) : tailrecursion.hoplon.markdown.code_node.call(null,G__264321,G__264322));
})()," in our square-root procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264313,G__264314) : tailrecursion.hoplon.markdown.para_node.call(null,G__264313,G__264314));
})(),(function (){var G__264370 = (function (){var G__264371 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264372 = (function (){var G__264373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264374 = "(";
var G__264375 = (function (){var G__264396 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264397 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264396,G__264397) : tailrecursion.hoplon.span.call(null,G__264396,G__264397));
})();
var G__264376 = (function (){var G__264398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264399 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264398,G__264399) : tailrecursion.hoplon.span.call(null,G__264398,G__264399));
})();
var G__264377 = " [";
var G__264378 = (function (){var G__264400 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264401 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264400,G__264401) : tailrecursion.hoplon.span.call(null,G__264400,G__264401));
})();
var G__264379 = " ";
var G__264380 = (function (){var G__264402 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264403 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264402,G__264403) : tailrecursion.hoplon.span.call(null,G__264402,G__264403));
})();
var G__264381 = "]\n  (";
var G__264382 = (function (){var G__264404 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264405 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264404,G__264405) : tailrecursion.hoplon.span.call(null,G__264404,G__264405));
})();
var G__264383 = "(";
var G__264384 = (function (){var G__264406 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264407 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264406,G__264407) : tailrecursion.hoplon.span.call(null,G__264406,G__264407));
})();
var G__264385 = " (";
var G__264386 = (function (){var G__264408 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264409 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264408,G__264409) : tailrecursion.hoplon.span.call(null,G__264408,G__264409));
})();
var G__264387 = "(";
var G__264388 = (function (){var G__264410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264411 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264410,G__264411) : tailrecursion.hoplon.span.call(null,G__264410,G__264411));
})();
var G__264389 = " ";
var G__264390 = (function (){var G__264412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264413 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264412,G__264413) : tailrecursion.hoplon.span.call(null,G__264412,G__264413));
})();
var G__264391 = ") ";
var G__264392 = (function (){var G__264414 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264415 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264414,G__264415) : tailrecursion.hoplon.span.call(null,G__264414,G__264415));
})();
var G__264393 = ")) ";
var G__264394 = (function (){var G__264416 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__264417 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264416,G__264417) : tailrecursion.hoplon.span.call(null,G__264416,G__264417));
})();
var G__264395 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__264373,G__264374,G__264375,G__264376,G__264377,G__264378,G__264379,G__264380,G__264381,G__264382,G__264383,G__264384,G__264385,G__264386,G__264387,G__264388,G__264389,G__264390,G__264391,G__264392,G__264393,G__264394,G__264395) : tailrecursion.hoplon.pre.call(null,G__264373,G__264374,G__264375,G__264376,G__264377,G__264378,G__264379,G__264380,G__264381,G__264382,G__264383,G__264384,G__264385,G__264386,G__264387,G__264388,G__264389,G__264390,G__264391,G__264392,G__264393,G__264394,G__264395));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264371,G__264372) : tailrecursion.hoplon.div.call(null,G__264371,G__264372));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264370) : tailrecursion.hoplon.div.call(null,G__264370));
})(),(function (){var G__264418 = cljs.core.PersistentArrayMap.EMPTY;
var G__264419 = cljs.core.PersistentVector.fromArray(["The intention of the author of ",(function (){var G__264420 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264421 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264420,G__264421) : tailrecursion.hoplon.markdown.code_node.call(null,G__264420,G__264421));
})()," is to determine if the square of the first argument is within a given tolerance of the second argument. We see that the author of ",(function (){var G__264422 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264423 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264422,G__264423) : tailrecursion.hoplon.markdown.code_node.call(null,G__264422,G__264423));
})()," used the name ",(function (){var G__264424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264425 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264424,G__264425) : tailrecursion.hoplon.markdown.code_node.call(null,G__264424,G__264425));
})()," to refer to the first argument and ",(function (){var G__264426 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264427 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264426,G__264427) : tailrecursion.hoplon.markdown.code_node.call(null,G__264426,G__264427));
})()," to refer to the second argument. The argument of ",(function (){var G__264428 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264429 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264428,G__264429) : tailrecursion.hoplon.markdown.code_node.call(null,G__264428,G__264429));
})()," is ",(function (){var G__264430 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264431 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264430,G__264431) : tailrecursion.hoplon.markdown.code_node.call(null,G__264430,G__264431));
})(),". If the author of ",(function (){var G__264432 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264433 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264432,G__264433) : tailrecursion.hoplon.markdown.code_node.call(null,G__264432,G__264433));
})()," used ",(function (){var G__264434 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264435 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264434,G__264435) : tailrecursion.hoplon.markdown.code_node.call(null,G__264434,G__264435));
})()," (as above) to refer to that argument, we see that the ",(function (){var G__264436 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264437 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264436,G__264437) : tailrecursion.hoplon.markdown.code_node.call(null,G__264436,G__264437));
})()," in ",(function (){var G__264438 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264439 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264438,G__264439) : tailrecursion.hoplon.markdown.code_node.call(null,G__264438,G__264439));
})()," must be a different ",(function (){var G__264440 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264441 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264440,G__264441) : tailrecursion.hoplon.markdown.code_node.call(null,G__264440,G__264441));
})()," than the one in ",(function (){var G__264442 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264443 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264442,G__264443) : tailrecursion.hoplon.markdown.code_node.call(null,G__264442,G__264443));
})(),". Running the procedure ",(function (){var G__264444 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264445 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264444,G__264445) : tailrecursion.hoplon.markdown.code_node.call(null,G__264444,G__264445));
})()," must not affect the value of ",(function (){var G__264446 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264447 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264446,G__264447) : tailrecursion.hoplon.markdown.code_node.call(null,G__264446,G__264447));
})()," that is used by ",(function (){var G__264448 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264449 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264448,G__264449) : tailrecursion.hoplon.markdown.code_node.call(null,G__264448,G__264449));
})(),", because that value of ",(function (){var G__264450 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264451 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264450,G__264451) : tailrecursion.hoplon.markdown.code_node.call(null,G__264450,G__264451));
})()," may be needed by ",(function (){var G__264452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264453 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264452,G__264453) : tailrecursion.hoplon.markdown.code_node.call(null,G__264452,G__264453));
})()," after ",(function (){var G__264454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264455 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264454,G__264455) : tailrecursion.hoplon.markdown.code_node.call(null,G__264454,G__264455));
})()," is done computing."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264418,G__264419) : tailrecursion.hoplon.markdown.para_node.call(null,G__264418,G__264419));
})(),(function (){var G__264456 = cljs.core.PersistentArrayMap.EMPTY;
var G__264457 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If the parameters were not local to the bodies of their respective procedures, then the parameter ",(function (){var G__264458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264459 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264458,G__264459) : tailrecursion.hoplon.markdown.code_node.call(null,G__264458,G__264459));
})()," in ",(function (){var G__264460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264461 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264460,G__264461) : tailrecursion.hoplon.markdown.code_node.call(null,G__264460,G__264461));
})()," could be confused with the parameter ",(function (){var G__264462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264463 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264462,G__264463) : tailrecursion.hoplon.markdown.code_node.call(null,G__264462,G__264463));
})()," in ",(function (){var G__264464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264465 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264464,G__264465) : tailrecursion.hoplon.markdown.code_node.call(null,G__264464,G__264465));
})(),", and the behavior of ",(function (){var G__264466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264467 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264466,G__264467) : tailrecursion.hoplon.markdown.code_node.call(null,G__264466,G__264467));
})()," would depend upon which version of ",(function (){var G__264468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264469 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264468,G__264469) : tailrecursion.hoplon.markdown.code_node.call(null,G__264468,G__264469));
})()," we used. Thus, ",(function (){var G__264470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264471 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264470,G__264471) : tailrecursion.hoplon.markdown.code_node.call(null,G__264470,G__264471));
})()," would not be the black box we desired."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264456,G__264457) : tailrecursion.hoplon.markdown.para_node.call(null,G__264456,G__264457));
})(),(function (){var G__264472 = cljs.core.PersistentArrayMap.EMPTY;
var G__264473 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A formal parameter of a procedure has a very special role in the procedure definition, in that it doesn",(function (){var G__264474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264475 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264474,G__264475) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264474,G__264475));
})(),"t matter what name the formal parameter has. Such a name is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["bound variable"], null)], 0)),", and we say that the procedure definition ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["binds"], null)], 0))," its formal parameters. The meaning of a procedure definition is unchanged if a bound variable is consistently renamed throughout the definition.",(function (){var G__264476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__264477 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The concept of consistent renaming is actually subtle and difficult to define formally. Famous logicians have made embarrassing errors here."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__264476,G__264477) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__264476,G__264477));
})()," If a variable is not bound, we say that it is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["free"], null)], 0)),". The set of expressions for which a binding defines a name is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["scope"], null)], 0))," of that name. In a procedure definition, the bound variables declared as the formal parameters of the procedure have the body of the procedure as their scope."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264472,G__264473) : tailrecursion.hoplon.markdown.para_node.call(null,G__264472,G__264473));
})(),(function (){var G__264478 = cljs.core.PersistentArrayMap.EMPTY;
var G__264479 = cljs.core.PersistentVector.fromArray(["In the definition of ",(function (){var G__264480 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264481 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264480,G__264481) : tailrecursion.hoplon.markdown.code_node.call(null,G__264480,G__264481));
})()," above, ",(function (){var G__264482 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264483 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264482,G__264483) : tailrecursion.hoplon.markdown.code_node.call(null,G__264482,G__264483));
})()," and ",(function (){var G__264484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264485 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264484,G__264485) : tailrecursion.hoplon.markdown.code_node.call(null,G__264484,G__264485));
})()," are bound variables but ",(function (){var G__264486 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__264487 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264486,G__264487) : tailrecursion.hoplon.markdown.code_node.call(null,G__264486,G__264487));
})(),", ",(function (){var G__264488 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__264489 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264488,G__264489) : tailrecursion.hoplon.markdown.code_node.call(null,G__264488,G__264489));
})(),", ",(function (){var G__264490 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264491 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264490,G__264491) : tailrecursion.hoplon.markdown.code_node.call(null,G__264490,G__264491));
})(),", and ",(function (){var G__264492 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264493 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264492,G__264493) : tailrecursion.hoplon.markdown.code_node.call(null,G__264492,G__264493));
})()," are free. The meaning of ",(function (){var G__264494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264495 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264494,G__264495) : tailrecursion.hoplon.markdown.code_node.call(null,G__264494,G__264495));
})()," should be independent of the names we choose for ",(function (){var G__264496 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264497 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264496,G__264497) : tailrecursion.hoplon.markdown.code_node.call(null,G__264496,G__264497));
})()," and ",(function (){var G__264498 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264499 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264498,G__264499) : tailrecursion.hoplon.markdown.code_node.call(null,G__264498,G__264499));
})()," so long as they are distinct and different from ",(function (){var G__264500 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__264501 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264500,G__264501) : tailrecursion.hoplon.markdown.code_node.call(null,G__264500,G__264501));
})(),", ",(function (){var G__264502 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__264503 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264502,G__264503) : tailrecursion.hoplon.markdown.code_node.call(null,G__264502,G__264503));
})(),", ",(function (){var G__264504 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264505 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264504,G__264505) : tailrecursion.hoplon.markdown.code_node.call(null,G__264504,G__264505));
})(),", and ",(function (){var G__264506 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264507 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264506,G__264507) : tailrecursion.hoplon.markdown.code_node.call(null,G__264506,G__264507));
})(),". (If we renamed ",(function (){var G__264508 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264509 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264508,G__264509) : tailrecursion.hoplon.markdown.code_node.call(null,G__264508,G__264509));
})()," to ",(function (){var G__264510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264511 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264510,G__264511) : tailrecursion.hoplon.markdown.code_node.call(null,G__264510,G__264511));
})()," we would have introduced a bug by ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["capturing"], null)], 0))," the variable ",(function (){var G__264512 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264513 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264512,G__264513) : tailrecursion.hoplon.markdown.code_node.call(null,G__264512,G__264513));
})(),". It would have changed from free to bound.) The meaning of ",(function (){var G__264514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264515 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264514,G__264515) : tailrecursion.hoplon.markdown.code_node.call(null,G__264514,G__264515));
})()," is not independent of the names of its free variables, however. It surely depends upon the fact (external to this definition) that the symbol ",(function (){var G__264516 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264517 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264516,G__264517) : tailrecursion.hoplon.markdown.code_node.call(null,G__264516,G__264517));
})()," names a procedure for computing the absolute value of a number. ",(function (){var G__264518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Good-enough?"], null);
var G__264519 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264518,G__264519) : tailrecursion.hoplon.markdown.code_node.call(null,G__264518,G__264519));
})()," will compute a different function if we substitute ",(function (){var G__264520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cos"], null);
var G__264521 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264520,G__264521) : tailrecursion.hoplon.markdown.code_node.call(null,G__264520,G__264521));
})()," for ",(function (){var G__264522 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264523 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264522,G__264523) : tailrecursion.hoplon.markdown.code_node.call(null,G__264522,G__264523));
})()," in its definition."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264478,G__264479) : tailrecursion.hoplon.markdown.para_node.call(null,G__264478,G__264479));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264198;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264197;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264196;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264195;
}})()], 0));
var G__258438 = "";
var G__258439 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Internal Definitions and Block Structures"], null),(function (){var _STAR_references_STAR_264524 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264525 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_264526 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264527 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__264528 = cljs.core.PersistentArrayMap.EMPTY;
var G__264529 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is instructive to note that the rest of this section does not work as well in Clojure. The reason is that ",(function (){var G__264530 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__264531 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264530,G__264531) : tailrecursion.hoplon.markdown.code_node.call(null,G__264530,G__264531));
})(),", ",(function (){var G__264532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__264533 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264532,G__264533) : tailrecursion.hoplon.markdown.code_node.call(null,G__264532,G__264533));
})()," and all other defining forms define things in the global environment directly (no matter where they are called). If this does not make sense to you just yet, don",(function (){var G__264534 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264535 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264534,G__264535) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264534,G__264535));
})(),"t worry: it should by the end of this section."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264528,G__264529) : tailrecursion.hoplon.markdown.para_node.call(null,G__264528,G__264529));
})(),(function (){var G__264536 = cljs.core.PersistentArrayMap.EMPTY;
var G__264537 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have one kind of name isolation available to us so far: The formal parameters of a procedure are local to the body of the procedure. The square-root program illustrates another way in which we would like to control the use of names. The existing program consists of separate procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264536,G__264537) : tailrecursion.hoplon.markdown.para_node.call(null,G__264536,G__264537));
})(),(function (){var G__264697 = (function (){var G__264698 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264699 = (function (){var G__264700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264701 = "(";
var G__264702 = (function (){var G__264777 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264778 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264777,G__264778) : tailrecursion.hoplon.span.call(null,G__264777,G__264778));
})();
var G__264703 = (function (){var G__264779 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264780 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264779,G__264780) : tailrecursion.hoplon.span.call(null,G__264779,G__264780));
})();
var G__264704 = " [";
var G__264705 = (function (){var G__264781 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264782 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264781,G__264782) : tailrecursion.hoplon.span.call(null,G__264781,G__264782));
})();
var G__264706 = "]\n  (";
var G__264707 = (function (){var G__264783 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264784 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264783,G__264784) : tailrecursion.hoplon.span.call(null,G__264783,G__264784));
})();
var G__264708 = " ";
var G__264709 = (function (){var G__264785 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__264786 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264785,G__264786) : tailrecursion.hoplon.span.call(null,G__264785,G__264786));
})();
var G__264710 = " ";
var G__264711 = (function (){var G__264787 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264788 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264787,G__264788) : tailrecursion.hoplon.span.call(null,G__264787,G__264788));
})();
var G__264712 = "))\n(";
var G__264713 = (function (){var G__264789 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264790 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264789,G__264790) : tailrecursion.hoplon.span.call(null,G__264789,G__264790));
})();
var G__264714 = (function (){var G__264791 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264792 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264791,G__264792) : tailrecursion.hoplon.span.call(null,G__264791,G__264792));
})();
var G__264715 = " [";
var G__264716 = (function (){var G__264793 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264794 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264793,G__264794) : tailrecursion.hoplon.span.call(null,G__264793,G__264794));
})();
var G__264717 = " ";
var G__264718 = (function (){var G__264795 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264796 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264795,G__264796) : tailrecursion.hoplon.span.call(null,G__264795,G__264796));
})();
var G__264719 = "]\n  (";
var G__264720 = (function (){var G__264797 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264798 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264797,G__264798) : tailrecursion.hoplon.span.call(null,G__264797,G__264798));
})();
var G__264721 = "(";
var G__264722 = (function (){var G__264799 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264800 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264799,G__264800) : tailrecursion.hoplon.span.call(null,G__264799,G__264800));
})();
var G__264723 = " ";
var G__264724 = (function (){var G__264801 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264802 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264801,G__264802) : tailrecursion.hoplon.span.call(null,G__264801,G__264802));
})();
var G__264725 = " ";
var G__264726 = (function (){var G__264803 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264804 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264803,G__264804) : tailrecursion.hoplon.span.call(null,G__264803,G__264804));
})();
var G__264727 = ")\n      ";
var G__264728 = (function (){var G__264805 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264806 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264805,G__264806) : tailrecursion.hoplon.span.call(null,G__264805,G__264806));
})();
var G__264729 = "\n      (";
var G__264730 = (function (){var G__264807 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264808 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264807,G__264808) : tailrecursion.hoplon.span.call(null,G__264807,G__264808));
})();
var G__264731 = " (";
var G__264732 = (function (){var G__264809 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264810 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264809,G__264810) : tailrecursion.hoplon.span.call(null,G__264809,G__264810));
})();
var G__264733 = " ";
var G__264734 = (function (){var G__264811 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264812 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264811,G__264812) : tailrecursion.hoplon.span.call(null,G__264811,G__264812));
})();
var G__264735 = " ";
var G__264736 = (function (){var G__264813 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264814 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264813,G__264814) : tailrecursion.hoplon.span.call(null,G__264813,G__264814));
})();
var G__264737 = ") ";
var G__264738 = (function (){var G__264815 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264816 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264815,G__264816) : tailrecursion.hoplon.span.call(null,G__264815,G__264816));
})();
var G__264739 = ")))\n(";
var G__264740 = (function (){var G__264817 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264818 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264817,G__264818) : tailrecursion.hoplon.span.call(null,G__264817,G__264818));
})();
var G__264741 = (function (){var G__264819 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264820 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264819,G__264820) : tailrecursion.hoplon.span.call(null,G__264819,G__264820));
})();
var G__264742 = " [";
var G__264743 = (function (){var G__264821 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264822 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264821,G__264822) : tailrecursion.hoplon.span.call(null,G__264821,G__264822));
})();
var G__264744 = " ";
var G__264745 = (function (){var G__264823 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264824 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264823,G__264824) : tailrecursion.hoplon.span.call(null,G__264823,G__264824));
})();
var G__264746 = "]\n  (";
var G__264747 = (function (){var G__264825 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264826 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264825,G__264826) : tailrecursion.hoplon.span.call(null,G__264825,G__264826));
})();
var G__264748 = "(";
var G__264749 = (function (){var G__264827 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264828 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264827,G__264828) : tailrecursion.hoplon.span.call(null,G__264827,G__264828));
})();
var G__264750 = " (";
var G__264751 = (function (){var G__264829 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264830 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264829,G__264830) : tailrecursion.hoplon.span.call(null,G__264829,G__264830));
})();
var G__264752 = "(";
var G__264753 = (function (){var G__264831 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264832 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264831,G__264832) : tailrecursion.hoplon.span.call(null,G__264831,G__264832));
})();
var G__264754 = " ";
var G__264755 = (function (){var G__264833 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264834 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264833,G__264834) : tailrecursion.hoplon.span.call(null,G__264833,G__264834));
})();
var G__264756 = ") ";
var G__264757 = (function (){var G__264835 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264836 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264835,G__264836) : tailrecursion.hoplon.span.call(null,G__264835,G__264836));
})();
var G__264758 = ")) ";
var G__264759 = (function (){var G__264837 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__264838 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264837,G__264838) : tailrecursion.hoplon.span.call(null,G__264837,G__264838));
})();
var G__264760 = "))\n(";
var G__264761 = (function (){var G__264839 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264840 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264839,G__264840) : tailrecursion.hoplon.span.call(null,G__264839,G__264840));
})();
var G__264762 = (function (){var G__264841 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264842 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264841,G__264842) : tailrecursion.hoplon.span.call(null,G__264841,G__264842));
})();
var G__264763 = " [";
var G__264764 = (function (){var G__264843 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264844 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264843,G__264844) : tailrecursion.hoplon.span.call(null,G__264843,G__264844));
})();
var G__264765 = " ";
var G__264766 = (function (){var G__264845 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264846 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264845,G__264846) : tailrecursion.hoplon.span.call(null,G__264845,G__264846));
})();
var G__264767 = "]\n  (";
var G__264768 = (function (){var G__264847 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264848 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264847,G__264848) : tailrecursion.hoplon.span.call(null,G__264847,G__264848));
})();
var G__264769 = " ";
var G__264770 = (function (){var G__264849 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264850 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264849,G__264850) : tailrecursion.hoplon.span.call(null,G__264849,G__264850));
})();
var G__264771 = " (";
var G__264772 = (function (){var G__264851 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264852 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264851,G__264852) : tailrecursion.hoplon.span.call(null,G__264851,G__264852));
})();
var G__264773 = (function (){var G__264853 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264854 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264853,G__264854) : tailrecursion.hoplon.span.call(null,G__264853,G__264854));
})();
var G__264774 = " ";
var G__264775 = (function (){var G__264855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264856 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264855,G__264856) : tailrecursion.hoplon.span.call(null,G__264855,G__264856));
})();
var G__264776 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77(G__264700,G__264701,G__264702,G__264703,G__264704,G__264705,G__264706,G__264707,G__264708,G__264709,G__264710,G__264711,G__264712,G__264713,G__264714,G__264715,G__264716,G__264717,G__264718,G__264719,G__264720,G__264721,G__264722,G__264723,G__264724,G__264725,G__264726,G__264727,G__264728,G__264729,G__264730,G__264731,G__264732,G__264733,G__264734,G__264735,G__264736,G__264737,G__264738,G__264739,G__264740,G__264741,G__264742,G__264743,G__264744,G__264745,G__264746,G__264747,G__264748,G__264749,G__264750,G__264751,G__264752,G__264753,G__264754,G__264755,G__264756,G__264757,G__264758,G__264759,G__264760,G__264761,G__264762,G__264763,G__264764,G__264765,G__264766,G__264767,G__264768,G__264769,G__264770,G__264771,G__264772,G__264773,G__264774,G__264775,G__264776) : tailrecursion.hoplon.pre.call(null,G__264700,G__264701,G__264702,G__264703,G__264704,G__264705,G__264706,G__264707,G__264708,G__264709,G__264710,G__264711,G__264712,G__264713,G__264714,G__264715,G__264716,G__264717,G__264718,G__264719,G__264720,G__264721,G__264722,G__264723,G__264724,G__264725,G__264726,G__264727,G__264728,G__264729,G__264730,G__264731,G__264732,G__264733,G__264734,G__264735,G__264736,G__264737,G__264738,G__264739,G__264740,G__264741,G__264742,G__264743,G__264744,G__264745,G__264746,G__264747,G__264748,G__264749,G__264750,G__264751,G__264752,G__264753,G__264754,G__264755,G__264756,G__264757,G__264758,G__264759,G__264760,G__264761,G__264762,G__264763,G__264764,G__264765,G__264766,G__264767,G__264768,G__264769,G__264770,G__264771,G__264772,G__264773,G__264774,G__264775,G__264776));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264698,G__264699) : tailrecursion.hoplon.div.call(null,G__264698,G__264699));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264697) : tailrecursion.hoplon.div.call(null,G__264697));
})(),(function (){var G__264857 = cljs.core.PersistentArrayMap.EMPTY;
var G__264858 = new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The problem with this program is that the only procedure that is important to users of ",(function (){var G__264859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264860 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264859,G__264860) : tailrecursion.hoplon.markdown.code_node.call(null,G__264859,G__264860));
})()," is ",(function (){var G__264861 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264862 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264861,G__264862) : tailrecursion.hoplon.markdown.code_node.call(null,G__264861,G__264862));
})(),". The other procedures (",(function (){var G__264863 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__264864 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264863,G__264864) : tailrecursion.hoplon.markdown.code_node.call(null,G__264863,G__264864));
})(),", ",(function (){var G__264865 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264866 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264865,G__264866) : tailrecursion.hoplon.markdown.code_node.call(null,G__264865,G__264866));
})(),", and ",(function (){var G__264867 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__264868 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264867,G__264868) : tailrecursion.hoplon.markdown.code_node.call(null,G__264867,G__264868));
})(),") only clutter up their minds. They may not define any other procedure called ",(function (){var G__264869 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264870 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264869,G__264870) : tailrecursion.hoplon.markdown.code_node.call(null,G__264869,G__264870));
})()," as part of another program to work together with the square-root program, because ",(function (){var G__264871 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264872 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264871,G__264872) : tailrecursion.hoplon.markdown.code_node.call(null,G__264871,G__264872));
})()," needs it. The problem is especially severe in the construction of large systems by many separate programmers. For example, in the construction of a large library of numerical procedures, many numerical functions are computed as successive approximations and thus might have procedures named ",(function (){var G__264873 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264874 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264873,G__264874) : tailrecursion.hoplon.markdown.code_node.call(null,G__264873,G__264874));
})()," and ",(function (){var G__264875 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__264876 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264875,G__264876) : tailrecursion.hoplon.markdown.code_node.call(null,G__264875,G__264876));
})()," as auxiliary procedures. We would like to localize the subprocedures, hiding them inside ",(function (){var G__264877 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264878 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264877,G__264878) : tailrecursion.hoplon.markdown.code_node.call(null,G__264877,G__264878));
})()," so that ",(function (){var G__264879 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264880 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264879,G__264880) : tailrecursion.hoplon.markdown.code_node.call(null,G__264879,G__264880));
})()," could coexist with other successive approximations, each having its own private ",(function (){var G__264881 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264882 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264881,G__264882) : tailrecursion.hoplon.markdown.code_node.call(null,G__264881,G__264882));
})()," procedure. To make this possible, we allow a procedure to have internal definitions that are local to that procedure. For example, in the ",(function (){var G__264883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square-root"], null);
var G__264884 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264883,G__264884) : tailrecursion.hoplon.markdown.code_node.call(null,G__264883,G__264884));
})()," problem we can write"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264857,G__264858) : tailrecursion.hoplon.markdown.para_node.call(null,G__264857,G__264858));
})(),(function (){var G__265047 = (function (){var G__265048 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__265049 = (function (){var G__265050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__265051 = "(";
var G__265052 = (function (){var G__265130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265131 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265130,G__265131) : tailrecursion.hoplon.span.call(null,G__265130,G__265131));
})();
var G__265053 = "(";
var G__265054 = (function (){var G__265132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265133 = "sqrt ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265132,G__265133) : tailrecursion.hoplon.span.call(null,G__265132,G__265133));
})();
var G__265055 = (function (){var G__265134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265135 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265134,G__265135) : tailrecursion.hoplon.span.call(null,G__265134,G__265135));
})();
var G__265056 = ")\n  (";
var G__265057 = (function (){var G__265136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265137 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265136,G__265137) : tailrecursion.hoplon.span.call(null,G__265136,G__265137));
})();
var G__265058 = "(";
var G__265059 = (function (){var G__265138 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265139 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265138,G__265139) : tailrecursion.hoplon.span.call(null,G__265138,G__265139));
})();
var G__265060 = " ";
var G__265061 = (function (){var G__265140 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265141 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265140,G__265141) : tailrecursion.hoplon.span.call(null,G__265140,G__265141));
})();
var G__265062 = " ";
var G__265063 = (function (){var G__265142 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265143 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265142,G__265143) : tailrecursion.hoplon.span.call(null,G__265142,G__265143));
})();
var G__265064 = ")\n    (";
var G__265065 = (function (){var G__265144 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265145 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265144,G__265145) : tailrecursion.hoplon.span.call(null,G__265144,G__265145));
})();
var G__265066 = "(";
var G__265067 = (function (){var G__265146 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265147 = "abs ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265146,G__265147) : tailrecursion.hoplon.span.call(null,G__265146,G__265147));
})();
var G__265068 = "(";
var G__265069 = (function (){var G__265148 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265149 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265148,G__265149) : tailrecursion.hoplon.span.call(null,G__265148,G__265149));
})();
var G__265070 = "(";
var G__265071 = (function (){var G__265150 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265151 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265150,G__265151) : tailrecursion.hoplon.span.call(null,G__265150,G__265151));
})();
var G__265072 = " ";
var G__265073 = (function (){var G__265152 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265153 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265152,G__265153) : tailrecursion.hoplon.span.call(null,G__265152,G__265153));
})();
var G__265074 = ") ";
var G__265075 = (function (){var G__265154 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265155 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265154,G__265155) : tailrecursion.hoplon.span.call(null,G__265154,G__265155));
})();
var G__265076 = ")) ";
var G__265077 = (function (){var G__265156 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__265157 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265156,G__265157) : tailrecursion.hoplon.span.call(null,G__265156,G__265157));
})();
var G__265078 = "))\n  (";
var G__265079 = (function (){var G__265158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265159 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265158,G__265159) : tailrecursion.hoplon.span.call(null,G__265158,G__265159));
})();
var G__265080 = "(";
var G__265081 = (function (){var G__265160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265161 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265160,G__265161) : tailrecursion.hoplon.span.call(null,G__265160,G__265161));
})();
var G__265082 = " ";
var G__265083 = (function (){var G__265162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265163 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265162,G__265163) : tailrecursion.hoplon.span.call(null,G__265162,G__265163));
})();
var G__265084 = " ";
var G__265085 = (function (){var G__265164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265165 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265164,G__265165) : tailrecursion.hoplon.span.call(null,G__265164,G__265165));
})();
var G__265086 = ")\n    (";
var G__265087 = (function (){var G__265166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265167 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265166,G__265167) : tailrecursion.hoplon.span.call(null,G__265166,G__265167));
})();
var G__265088 = " ";
var G__265089 = (function (){var G__265168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265169 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265168,G__265169) : tailrecursion.hoplon.span.call(null,G__265168,G__265169));
})();
var G__265090 = " (";
var G__265091 = (function (){var G__265170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265171 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265170,G__265171) : tailrecursion.hoplon.span.call(null,G__265170,G__265171));
})();
var G__265092 = (function (){var G__265172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265173 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265172,G__265173) : tailrecursion.hoplon.span.call(null,G__265172,G__265173));
})();
var G__265093 = " ";
var G__265094 = (function (){var G__265174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265175 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265174,G__265175) : tailrecursion.hoplon.span.call(null,G__265174,G__265175));
})();
var G__265095 = ")))\n  (";
var G__265096 = (function (){var G__265176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265177 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265176,G__265177) : tailrecursion.hoplon.span.call(null,G__265176,G__265177));
})();
var G__265097 = "(";
var G__265098 = (function (){var G__265178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265179 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265178,G__265179) : tailrecursion.hoplon.span.call(null,G__265178,G__265179));
})();
var G__265099 = " ";
var G__265100 = (function (){var G__265180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265181 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265180,G__265181) : tailrecursion.hoplon.span.call(null,G__265180,G__265181));
})();
var G__265101 = " ";
var G__265102 = (function (){var G__265182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265183 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265182,G__265183) : tailrecursion.hoplon.span.call(null,G__265182,G__265183));
})();
var G__265103 = ")\n    (";
var G__265104 = (function (){var G__265184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265185 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265184,G__265185) : tailrecursion.hoplon.span.call(null,G__265184,G__265185));
})();
var G__265105 = "(";
var G__265106 = (function (){var G__265186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265187 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265186,G__265187) : tailrecursion.hoplon.span.call(null,G__265186,G__265187));
})();
var G__265107 = " ";
var G__265108 = (function (){var G__265188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265189 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265188,G__265189) : tailrecursion.hoplon.span.call(null,G__265188,G__265189));
})();
var G__265109 = " ";
var G__265110 = (function (){var G__265190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265191 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265190,G__265191) : tailrecursion.hoplon.span.call(null,G__265190,G__265191));
})();
var G__265111 = ")\n        ";
var G__265112 = (function (){var G__265192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265193 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265192,G__265193) : tailrecursion.hoplon.span.call(null,G__265192,G__265193));
})();
var G__265113 = "\n        (";
var G__265114 = (function (){var G__265194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265195 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265194,G__265195) : tailrecursion.hoplon.span.call(null,G__265194,G__265195));
})();
var G__265115 = " (";
var G__265116 = (function (){var G__265196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265197 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265196,G__265197) : tailrecursion.hoplon.span.call(null,G__265196,G__265197));
})();
var G__265117 = " ";
var G__265118 = (function (){var G__265198 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265199 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265198,G__265199) : tailrecursion.hoplon.span.call(null,G__265198,G__265199));
})();
var G__265119 = " ";
var G__265120 = (function (){var G__265200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265201 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265200,G__265201) : tailrecursion.hoplon.span.call(null,G__265200,G__265201));
})();
var G__265121 = ") ";
var G__265122 = (function (){var G__265202 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265203 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265202,G__265203) : tailrecursion.hoplon.span.call(null,G__265202,G__265203));
})();
var G__265123 = ")))\n  (";
var G__265124 = (function (){var G__265204 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265205 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265204,G__265205) : tailrecursion.hoplon.span.call(null,G__265204,G__265205));
})();
var G__265125 = " ";
var G__265126 = (function (){var G__265206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__265207 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265206,G__265207) : tailrecursion.hoplon.span.call(null,G__265206,G__265207));
})();
var G__265127 = " ";
var G__265128 = (function (){var G__265208 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265209 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265208,G__265209) : tailrecursion.hoplon.span.call(null,G__265208,G__265209));
})();
var G__265129 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80(G__265050,G__265051,G__265052,G__265053,G__265054,G__265055,G__265056,G__265057,G__265058,G__265059,G__265060,G__265061,G__265062,G__265063,G__265064,G__265065,G__265066,G__265067,G__265068,G__265069,G__265070,G__265071,G__265072,G__265073,G__265074,G__265075,G__265076,G__265077,G__265078,G__265079,G__265080,G__265081,G__265082,G__265083,G__265084,G__265085,G__265086,G__265087,G__265088,G__265089,G__265090,G__265091,G__265092,G__265093,G__265094,G__265095,G__265096,G__265097,G__265098,G__265099,G__265100,G__265101,G__265102,G__265103,G__265104,G__265105,G__265106,G__265107,G__265108,G__265109,G__265110,G__265111,G__265112,G__265113,G__265114,G__265115,G__265116,G__265117,G__265118,G__265119,G__265120,G__265121,G__265122,G__265123,G__265124,G__265125,G__265126,G__265127,G__265128,G__265129) : tailrecursion.hoplon.pre.call(null,G__265050,G__265051,G__265052,G__265053,G__265054,G__265055,G__265056,G__265057,G__265058,G__265059,G__265060,G__265061,G__265062,G__265063,G__265064,G__265065,G__265066,G__265067,G__265068,G__265069,G__265070,G__265071,G__265072,G__265073,G__265074,G__265075,G__265076,G__265077,G__265078,G__265079,G__265080,G__265081,G__265082,G__265083,G__265084,G__265085,G__265086,G__265087,G__265088,G__265089,G__265090,G__265091,G__265092,G__265093,G__265094,G__265095,G__265096,G__265097,G__265098,G__265099,G__265100,G__265101,G__265102,G__265103,G__265104,G__265105,G__265106,G__265107,G__265108,G__265109,G__265110,G__265111,G__265112,G__265113,G__265114,G__265115,G__265116,G__265117,G__265118,G__265119,G__265120,G__265121,G__265122,G__265123,G__265124,G__265125,G__265126,G__265127,G__265128,G__265129));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__265048,G__265049) : tailrecursion.hoplon.div.call(null,G__265048,G__265049));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__265047) : tailrecursion.hoplon.div.call(null,G__265047));
})(),(function (){var G__265210 = cljs.core.PersistentArrayMap.EMPTY;
var G__265211 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note: This approach does not solve our problem in Clojure. In Clojure, whenever ",(function (){var G__265212 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__265213 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265212,G__265213) : tailrecursion.hoplon.markdown.code_node.call(null,G__265212,G__265213));
})()," or ",(function (){var G__265214 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__265215 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265214,G__265215) : tailrecursion.hoplon.markdown.code_node.call(null,G__265214,G__265215));
})()," are used, they add the definitions to the global environment. What that means is, every time you run the ",(function (){var G__265216 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__265217 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265216,G__265217) : tailrecursion.hoplon.markdown.code_node.call(null,G__265216,G__265217));
})()," procedure, you would end up redefining ",(function (){var G__265218 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__265219 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265218,G__265219) : tailrecursion.hoplon.markdown.code_node.call(null,G__265218,G__265219));
})()," for every program that uses it. Now, if every program that uses ",(function (){var G__265220 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__265221 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265220,G__265221) : tailrecursion.hoplon.markdown.code_node.call(null,G__265220,G__265221));
})()," redefines ",(function (){var G__265222 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__265223 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265222,G__265223) : tailrecursion.hoplon.markdown.code_node.call(null,G__265222,G__265223));
})(),", then you might not run into any problems; but either way, there is a better alternative: we could use what",(function (){var G__265224 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__265225 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__265224,G__265225) : tailrecursion.hoplon.markdown.simple_node.call(null,G__265224,G__265225));
})(),"s called a ",(function (){var G__265226 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"let"], null);
var G__265227 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265226,G__265227) : tailrecursion.hoplon.markdown.code_node.call(null,G__265226,G__265227));
})()," binding, but we",(function (){var G__265228 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__265229 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__265228,G__265229) : tailrecursion.hoplon.markdown.simple_node.call(null,G__265228,G__265229));
})(),"ll learn about those a little later."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265210,G__265211) : tailrecursion.hoplon.markdown.para_node.call(null,G__265210,G__265211));
})(),(function (){var G__265230 = cljs.core.PersistentArrayMap.EMPTY;
var G__265231 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The thing to remember is the evaluation model. When the compiler is given a symbol, it has a set procedure for determining what this symbol means: first it looks to see if the symbol is a special form (like ",(function (){var G__265232 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__265233 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265232,G__265233) : tailrecursion.hoplon.markdown.code_node.call(null,G__265232,G__265233));
})(),"), if it",(function (){var G__265234 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__265235 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__265234,G__265235) : tailrecursion.hoplon.markdown.simple_node.call(null,G__265234,G__265235));
})(),"s not, then it checks each successive nested local environment until it reaches the global environment. The point is, in Scheme, ",(function (){var G__265236 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__265237 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265236,G__265237) : tailrecursion.hoplon.markdown.code_node.call(null,G__265236,G__265237));
})()," only mutates the local environment, whatever that may be; the same is not true in Clojure. Defining forms mutate the global environment directly, so using ",(function (){var G__265238 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__265239 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265238,G__265239) : tailrecursion.hoplon.markdown.code_node.call(null,G__265238,G__265239));
})()," to change the definition of a function in one place changes it in all places."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265230,G__265231) : tailrecursion.hoplon.markdown.para_node.call(null,G__265230,G__265231));
})(),(function (){var G__265240 = cljs.core.PersistentArrayMap.EMPTY;
var G__265241 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Luckily, Cloure has a built in pair of functions ",(function (){var G__265242 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__265243 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265242,G__265243) : tailrecursion.hoplon.markdown.code_node.call(null,G__265242,G__265243));
})()," and ",(function (){var G__265244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__265245 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265244,G__265245) : tailrecursion.hoplon.markdown.code_node.call(null,G__265244,G__265245));
})()," that do help us a bit. We can replace the ",(function (){var G__265246 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"iter"], null);
var G__265247 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265246,G__265247) : tailrecursion.hoplon.markdown.code_node.call(null,G__265246,G__265247));
})()," definition with this ",(function (){var G__265248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__265249 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265248,G__265249) : tailrecursion.hoplon.markdown.code_node.call(null,G__265248,G__265249));
})()," ",(function (){var G__265250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__265251 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265250,G__265251) : tailrecursion.hoplon.markdown.code_node.call(null,G__265250,G__265251));
})()," business thusly (assuming ",(function (){var G__265252 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough"], null);
var G__265253 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265252,G__265253) : tailrecursion.hoplon.markdown.code_node.call(null,G__265252,G__265253));
})()," and ",(function (){var G__265254 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__265255 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265254,G__265255) : tailrecursion.hoplon.markdown.code_node.call(null,G__265254,G__265255));
})()," were already defined):"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265240,G__265241) : tailrecursion.hoplon.markdown.para_node.call(null,G__265240,G__265241));
})(),(function (){var G__265319 = (function (){var G__265320 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__265321 = (function (){var G__265322 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__265323 = "(";
var G__265324 = (function (){var G__265353 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265354 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265353,G__265354) : tailrecursion.hoplon.span.call(null,G__265353,G__265354));
})();
var G__265325 = (function (){var G__265355 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265356 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265355,G__265356) : tailrecursion.hoplon.span.call(null,G__265355,G__265356));
})();
var G__265326 = " [";
var G__265327 = (function (){var G__265357 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265358 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265357,G__265358) : tailrecursion.hoplon.span.call(null,G__265357,G__265358));
})();
var G__265328 = "]\n  (";
var G__265329 = (function (){var G__265359 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265360 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265359,G__265360) : tailrecursion.hoplon.span.call(null,G__265359,G__265360));
})();
var G__265330 = "[";
var G__265331 = (function (){var G__265361 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265362 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265361,G__265362) : tailrecursion.hoplon.span.call(null,G__265361,G__265362));
})();
var G__265332 = " ";
var G__265333 = (function (){var G__265363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__265364 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265363,G__265364) : tailrecursion.hoplon.span.call(null,G__265363,G__265364));
})();
var G__265334 = "]\n    (";
var G__265335 = (function (){var G__265365 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265366 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265365,G__265366) : tailrecursion.hoplon.span.call(null,G__265365,G__265366));
})();
var G__265336 = "(";
var G__265337 = (function (){var G__265367 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265368 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265367,G__265368) : tailrecursion.hoplon.span.call(null,G__265367,G__265368));
})();
var G__265338 = " ";
var G__265339 = (function (){var G__265369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265370 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265369,G__265370) : tailrecursion.hoplon.span.call(null,G__265369,G__265370));
})();
var G__265340 = " ";
var G__265341 = (function (){var G__265371 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265372 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265371,G__265372) : tailrecursion.hoplon.span.call(null,G__265371,G__265372));
})();
var G__265342 = ")\n        ";
var G__265343 = (function (){var G__265373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265374 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265373,G__265374) : tailrecursion.hoplon.span.call(null,G__265373,G__265374));
})();
var G__265344 = "\n        (";
var G__265345 = (function (){var G__265375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265376 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265375,G__265376) : tailrecursion.hoplon.span.call(null,G__265375,G__265376));
})();
var G__265346 = " (";
var G__265347 = (function (){var G__265377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265378 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265377,G__265378) : tailrecursion.hoplon.span.call(null,G__265377,G__265378));
})();
var G__265348 = " ";
var G__265349 = (function (){var G__265379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265380 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265379,G__265380) : tailrecursion.hoplon.span.call(null,G__265379,G__265380));
})();
var G__265350 = " ";
var G__265351 = (function (){var G__265381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265382 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265381,G__265382) : tailrecursion.hoplon.span.call(null,G__265381,G__265382));
})();
var G__265352 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31(G__265322,G__265323,G__265324,G__265325,G__265326,G__265327,G__265328,G__265329,G__265330,G__265331,G__265332,G__265333,G__265334,G__265335,G__265336,G__265337,G__265338,G__265339,G__265340,G__265341,G__265342,G__265343,G__265344,G__265345,G__265346,G__265347,G__265348,G__265349,G__265350,G__265351,G__265352) : tailrecursion.hoplon.pre.call(null,G__265322,G__265323,G__265324,G__265325,G__265326,G__265327,G__265328,G__265329,G__265330,G__265331,G__265332,G__265333,G__265334,G__265335,G__265336,G__265337,G__265338,G__265339,G__265340,G__265341,G__265342,G__265343,G__265344,G__265345,G__265346,G__265347,G__265348,G__265349,G__265350,G__265351,G__265352));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__265320,G__265321) : tailrecursion.hoplon.div.call(null,G__265320,G__265321));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__265319) : tailrecursion.hoplon.div.call(null,G__265319));
})(),(function (){var G__265383 = cljs.core.PersistentArrayMap.EMPTY;
var G__265384 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The genearl format for these will be,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265383,G__265384) : tailrecursion.hoplon.markdown.para_node.call(null,G__265383,G__265384));
})(),(function (){var G__265480 = (function (){var G__265481 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__265482 = (function (){var G__265483 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__265484 = "(";
var G__265485 = (function (){var G__265528 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265529 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265528,G__265529) : tailrecursion.hoplon.span.call(null,G__265528,G__265529));
})();
var G__265486 = (function (){var G__265530 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265531 = "function";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265530,G__265531) : tailrecursion.hoplon.span.call(null,G__265530,G__265531));
})();
var G__265487 = " [";
var G__265488 = (function (){var G__265532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265533 = "arguments";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265532,G__265533) : tailrecursion.hoplon.span.call(null,G__265532,G__265533));
})();
var G__265489 = "]\n  (";
var G__265490 = (function (){var G__265534 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265535 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265534,G__265535) : tailrecursion.hoplon.span.call(null,G__265534,G__265535));
})();
var G__265491 = "[";
var G__265492 = (function (){var G__265536 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265537 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265536,G__265537) : tailrecursion.hoplon.span.call(null,G__265536,G__265537));
})();
var G__265493 = " ";
var G__265494 = (function (){var G__265538 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265539 = "initial-value1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265538,G__265539) : tailrecursion.hoplon.span.call(null,G__265538,G__265539));
})();
var G__265495 = "\n         ";
var G__265496 = (function (){var G__265540 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265541 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265540,G__265541) : tailrecursion.hoplon.span.call(null,G__265540,G__265541));
})();
var G__265497 = " ";
var G__265498 = (function (){var G__265542 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265543 = "initial-value2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265542,G__265543) : tailrecursion.hoplon.span.call(null,G__265542,G__265543));
})();
var G__265499 = "\n         ";
var G__265500 = (function (){var G__265544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265545 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265544,G__265545) : tailrecursion.hoplon.span.call(null,G__265544,G__265545));
})();
var G__265501 = "\n         ";
var G__265502 = (function (){var G__265546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265547 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265546,G__265547) : tailrecursion.hoplon.span.call(null,G__265546,G__265547));
})();
var G__265503 = " ";
var G__265504 = (function (){var G__265548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265549 = "initial-valuen";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265548,G__265549) : tailrecursion.hoplon.span.call(null,G__265548,G__265549));
})();
var G__265505 = "]\n    (";
var G__265506 = (function (){var G__265550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265551 = "<if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265550,G__265551) : tailrecursion.hoplon.span.call(null,G__265550,G__265551));
})();
var G__265507 = " ";
var G__265508 = (function (){var G__265552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265553 = "or cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265552,G__265553) : tailrecursion.hoplon.span.call(null,G__265552,G__265553));
})();
var G__265509 = (function (){var G__265554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265555 = "can";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265554,G__265555) : tailrecursion.hoplon.span.call(null,G__265554,G__265555));
})();
var G__265510 = " ";
var G__265511 = (function (){var G__265556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265557 = "go";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265556,G__265557) : tailrecursion.hoplon.span.call(null,G__265556,G__265557));
})();
var G__265512 = " ";
var G__265513 = (function (){var G__265558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265559 = "here>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265558,G__265559) : tailrecursion.hoplon.span.call(null,G__265558,G__265559));
})();
var G__265514 = " (";
var G__265515 = (function (){var G__265560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265561 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265560,G__265561) : tailrecursion.hoplon.span.call(null,G__265560,G__265561));
})();
var G__265516 = " (";
var G__265517 = (function (){var G__265562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265563 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265562,G__265563) : tailrecursion.hoplon.span.call(null,G__265562,G__265563));
})();
var G__265518 = (function (){var G__265564 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265565 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265564,G__265565) : tailrecursion.hoplon.span.call(null,G__265564,G__265565));
})();
var G__265519 = ") (";
var G__265520 = (function (){var G__265566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265567 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265566,G__265567) : tailrecursion.hoplon.span.call(null,G__265566,G__265567));
})();
var G__265521 = (function (){var G__265568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265569 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265568,G__265569) : tailrecursion.hoplon.span.call(null,G__265568,G__265569));
})();
var G__265522 = ")";
var G__265523 = (function (){var G__265570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265571 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265570,G__265571) : tailrecursion.hoplon.span.call(null,G__265570,G__265571));
})();
var G__265524 = "(";
var G__265525 = (function (){var G__265572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265573 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265572,G__265573) : tailrecursion.hoplon.span.call(null,G__265572,G__265573));
})();
var G__265526 = (function (){var G__265574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265575 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265574,G__265575) : tailrecursion.hoplon.span.call(null,G__265574,G__265575));
})();
var G__265527 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45(G__265483,G__265484,G__265485,G__265486,G__265487,G__265488,G__265489,G__265490,G__265491,G__265492,G__265493,G__265494,G__265495,G__265496,G__265497,G__265498,G__265499,G__265500,G__265501,G__265502,G__265503,G__265504,G__265505,G__265506,G__265507,G__265508,G__265509,G__265510,G__265511,G__265512,G__265513,G__265514,G__265515,G__265516,G__265517,G__265518,G__265519,G__265520,G__265521,G__265522,G__265523,G__265524,G__265525,G__265526,G__265527) : tailrecursion.hoplon.pre.call(null,G__265483,G__265484,G__265485,G__265486,G__265487,G__265488,G__265489,G__265490,G__265491,G__265492,G__265493,G__265494,G__265495,G__265496,G__265497,G__265498,G__265499,G__265500,G__265501,G__265502,G__265503,G__265504,G__265505,G__265506,G__265507,G__265508,G__265509,G__265510,G__265511,G__265512,G__265513,G__265514,G__265515,G__265516,G__265517,G__265518,G__265519,G__265520,G__265521,G__265522,G__265523,G__265524,G__265525,G__265526,G__265527));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__265481,G__265482) : tailrecursion.hoplon.div.call(null,G__265481,G__265482));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__265480) : tailrecursion.hoplon.div.call(null,G__265480));
})(),(function (){var G__265576 = cljs.core.PersistentArrayMap.EMPTY;
var G__265577 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This ",(function (){var G__265578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[thing1 intial-value1]"], null);
var G__265579 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265578,G__265579) : tailrecursion.hoplon.markdown.code_node.call(null,G__265578,G__265579));
})()," defines ",(function (){var G__265580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"thing1"], null);
var G__265581 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265580,G__265581) : tailrecursion.hoplon.markdown.code_node.call(null,G__265580,G__265581));
})()," to be ",(function (){var G__265582 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"value1"], null);
var G__265583 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265582,G__265583) : tailrecursion.hoplon.markdown.code_node.call(null,G__265582,G__265583));
})()," for the first iteration, then when you call ",(function (){var G__265584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__265585 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265584,G__265585) : tailrecursion.hoplon.markdown.code_node.call(null,G__265584,G__265585));
})(),", it goes back to loop with the new values given (in the same order they appear in the ",(function (){var G__265586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__265587 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265586,G__265587) : tailrecursion.hoplon.markdown.code_node.call(null,G__265586,G__265587));
})()," bindings)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265576,G__265577) : tailrecursion.hoplon.markdown.para_node.call(null,G__265576,G__265577));
})(),(function (){var G__265588 = cljs.core.PersistentArrayMap.EMPTY;
var G__265589 = new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such nesting of definitions, called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["block structure"], null)], 0)),", is basically the right solution to the simplest name-packaging problem. But there is a better idea lurking here. In addition to internalizing the definitions of the auxiliary procedures, we can simplify them. Since ",(function (){var G__265590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265591 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265590,G__265591) : tailrecursion.hoplon.markdown.code_node.call(null,G__265590,G__265591));
})()," is bound in the definition of ",(function (){var G__265592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__265593 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265592,G__265593) : tailrecursion.hoplon.markdown.code_node.call(null,G__265592,G__265593));
})(),", the procedures ",(function (){var G__265594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__265595 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265594,G__265595) : tailrecursion.hoplon.markdown.code_node.call(null,G__265594,G__265595));
})(),", ",(function (){var G__265596 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__265597 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265596,G__265597) : tailrecursion.hoplon.markdown.code_node.call(null,G__265596,G__265597));
})(),", and ",(function (){var G__265598 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__265599 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265598,G__265599) : tailrecursion.hoplon.markdown.code_node.call(null,G__265598,G__265599));
})(),", which are defined internally to ",(function (){var G__265600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__265601 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265600,G__265601) : tailrecursion.hoplon.markdown.code_node.call(null,G__265600,G__265601));
})(),", are in the scope of ",(function (){var G__265602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265603 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265602,G__265603) : tailrecursion.hoplon.markdown.code_node.call(null,G__265602,G__265603));
})(),". Thus, it is not necessary to pass ",(function (){var G__265604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265605 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265604,G__265605) : tailrecursion.hoplon.markdown.code_node.call(null,G__265604,G__265605));
})()," explicitly to each of these procedures. Instead, we allow ",(function (){var G__265606 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265607 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265606,G__265607) : tailrecursion.hoplon.markdown.code_node.call(null,G__265606,G__265607));
})()," to be a free variable in the internal definitions, as shown below. Then ",(function (){var G__265608 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265609 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265608,G__265609) : tailrecursion.hoplon.markdown.code_node.call(null,G__265608,G__265609));
})()," gets its value from the argument with which the enclosing procedure ",(function (){var G__265610 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__265611 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265610,G__265611) : tailrecursion.hoplon.markdown.code_node.call(null,G__265610,G__265611));
})()," is called. This discipline is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["lexical scoping"], null)], 0)),".",(function (){var G__265612 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__265613 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lexical scoping dictates that free variables in a procedure are taken to refer to bindings made by enclosing procedure definitions; that is, they are looked up in the environment in which the procedure was defined. We will see how this works in detail in chapter 3 when we study environments and the detailed behavior of the interpreter."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__265612,G__265613) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__265612,G__265613));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265588,G__265589) : tailrecursion.hoplon.markdown.para_node.call(null,G__265588,G__265589));
})(),(function (){var G__265614 = cljs.core.PersistentArrayMap.EMPTY;
var G__265615 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__265616 = cljs.core.PersistentArrayMap.EMPTY;
var G__265617 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This would still work in Clojure, if one were so inclined, it would just define all of these functions globally (as is explained above)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265616,G__265617) : tailrecursion.hoplon.markdown.para_node.call(null,G__265616,G__265617));
})()], null);
return (tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2(G__265614,G__265615) : tailrecursion.hoplon.markdown.block_quote_node.call(null,G__265614,G__265615));
})(),(function (){var G__265749 = (function (){var G__265750 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__265751 = (function (){var G__265752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__265753 = "(";
var G__265754 = (function (){var G__265815 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265816 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265815,G__265816) : tailrecursion.hoplon.span.call(null,G__265815,G__265816));
})();
var G__265755 = (function (){var G__265817 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265818 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265817,G__265818) : tailrecursion.hoplon.span.call(null,G__265817,G__265818));
})();
var G__265756 = " [";
var G__265757 = (function (){var G__265819 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265820 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265819,G__265820) : tailrecursion.hoplon.span.call(null,G__265819,G__265820));
})();
var G__265758 = "]\n  (";
var G__265759 = (function (){var G__265821 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265822 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265821,G__265822) : tailrecursion.hoplon.span.call(null,G__265821,G__265822));
})();
var G__265760 = (function (){var G__265823 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265824 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265823,G__265824) : tailrecursion.hoplon.span.call(null,G__265823,G__265824));
})();
var G__265761 = " [";
var G__265762 = (function (){var G__265825 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265826 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265825,G__265826) : tailrecursion.hoplon.span.call(null,G__265825,G__265826));
})();
var G__265763 = "]\n    (";
var G__265764 = (function (){var G__265827 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265828 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265827,G__265828) : tailrecursion.hoplon.span.call(null,G__265827,G__265828));
})();
var G__265765 = "(";
var G__265766 = (function (){var G__265829 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265830 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265829,G__265830) : tailrecursion.hoplon.span.call(null,G__265829,G__265830));
})();
var G__265767 = " (";
var G__265768 = (function (){var G__265831 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265832 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265831,G__265832) : tailrecursion.hoplon.span.call(null,G__265831,G__265832));
})();
var G__265769 = "(";
var G__265770 = (function (){var G__265833 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265834 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265833,G__265834) : tailrecursion.hoplon.span.call(null,G__265833,G__265834));
})();
var G__265771 = " ";
var G__265772 = (function (){var G__265835 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265836 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265835,G__265836) : tailrecursion.hoplon.span.call(null,G__265835,G__265836));
})();
var G__265773 = ") ";
var G__265774 = (function (){var G__265837 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265838 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265837,G__265838) : tailrecursion.hoplon.span.call(null,G__265837,G__265838));
})();
var G__265775 = ")) ";
var G__265776 = (function (){var G__265839 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__265840 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265839,G__265840) : tailrecursion.hoplon.span.call(null,G__265839,G__265840));
})();
var G__265777 = "))\n  (";
var G__265778 = (function (){var G__265841 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265842 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265841,G__265842) : tailrecursion.hoplon.span.call(null,G__265841,G__265842));
})();
var G__265779 = (function (){var G__265843 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265844 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265843,G__265844) : tailrecursion.hoplon.span.call(null,G__265843,G__265844));
})();
var G__265780 = " [";
var G__265781 = (function (){var G__265845 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265846 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265845,G__265846) : tailrecursion.hoplon.span.call(null,G__265845,G__265846));
})();
var G__265782 = "]\n    (";
var G__265783 = (function (){var G__265847 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265848 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265847,G__265848) : tailrecursion.hoplon.span.call(null,G__265847,G__265848));
})();
var G__265784 = " ";
var G__265785 = (function (){var G__265849 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265850 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265849,G__265850) : tailrecursion.hoplon.span.call(null,G__265849,G__265850));
})();
var G__265786 = " (";
var G__265787 = (function (){var G__265851 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265852 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265851,G__265852) : tailrecursion.hoplon.span.call(null,G__265851,G__265852));
})();
var G__265788 = (function (){var G__265853 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265854 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265853,G__265854) : tailrecursion.hoplon.span.call(null,G__265853,G__265854));
})();
var G__265789 = " ";
var G__265790 = (function (){var G__265855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265856 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265855,G__265856) : tailrecursion.hoplon.span.call(null,G__265855,G__265856));
})();
var G__265791 = ")))\n  (";
var G__265792 = (function (){var G__265857 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265858 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265857,G__265858) : tailrecursion.hoplon.span.call(null,G__265857,G__265858));
})();
var G__265793 = (function (){var G__265859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265860 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265859,G__265860) : tailrecursion.hoplon.span.call(null,G__265859,G__265860));
})();
var G__265794 = " [";
var G__265795 = (function (){var G__265861 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265862 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265861,G__265862) : tailrecursion.hoplon.span.call(null,G__265861,G__265862));
})();
var G__265796 = "]\n    (";
var G__265797 = (function (){var G__265863 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265864 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265863,G__265864) : tailrecursion.hoplon.span.call(null,G__265863,G__265864));
})();
var G__265798 = "(";
var G__265799 = (function (){var G__265865 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265866 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265865,G__265866) : tailrecursion.hoplon.span.call(null,G__265865,G__265866));
})();
var G__265800 = " ";
var G__265801 = (function (){var G__265867 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265868 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265867,G__265868) : tailrecursion.hoplon.span.call(null,G__265867,G__265868));
})();
var G__265802 = ")\n        ";
var G__265803 = (function (){var G__265869 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265870 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265869,G__265870) : tailrecursion.hoplon.span.call(null,G__265869,G__265870));
})();
var G__265804 = "\n        (";
var G__265805 = (function (){var G__265871 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265872 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265871,G__265872) : tailrecursion.hoplon.span.call(null,G__265871,G__265872));
})();
var G__265806 = " (";
var G__265807 = (function (){var G__265873 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265874 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265873,G__265874) : tailrecursion.hoplon.span.call(null,G__265873,G__265874));
})();
var G__265808 = " ";
var G__265809 = (function (){var G__265875 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265876 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265875,G__265876) : tailrecursion.hoplon.span.call(null,G__265875,G__265876));
})();
var G__265810 = "))))\n  (";
var G__265811 = (function (){var G__265877 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265878 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265877,G__265878) : tailrecursion.hoplon.span.call(null,G__265877,G__265878));
})();
var G__265812 = " ";
var G__265813 = (function (){var G__265879 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__265880 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265879,G__265880) : tailrecursion.hoplon.span.call(null,G__265879,G__265880));
})();
var G__265814 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63(G__265752,G__265753,G__265754,G__265755,G__265756,G__265757,G__265758,G__265759,G__265760,G__265761,G__265762,G__265763,G__265764,G__265765,G__265766,G__265767,G__265768,G__265769,G__265770,G__265771,G__265772,G__265773,G__265774,G__265775,G__265776,G__265777,G__265778,G__265779,G__265780,G__265781,G__265782,G__265783,G__265784,G__265785,G__265786,G__265787,G__265788,G__265789,G__265790,G__265791,G__265792,G__265793,G__265794,G__265795,G__265796,G__265797,G__265798,G__265799,G__265800,G__265801,G__265802,G__265803,G__265804,G__265805,G__265806,G__265807,G__265808,G__265809,G__265810,G__265811,G__265812,G__265813,G__265814) : tailrecursion.hoplon.pre.call(null,G__265752,G__265753,G__265754,G__265755,G__265756,G__265757,G__265758,G__265759,G__265760,G__265761,G__265762,G__265763,G__265764,G__265765,G__265766,G__265767,G__265768,G__265769,G__265770,G__265771,G__265772,G__265773,G__265774,G__265775,G__265776,G__265777,G__265778,G__265779,G__265780,G__265781,G__265782,G__265783,G__265784,G__265785,G__265786,G__265787,G__265788,G__265789,G__265790,G__265791,G__265792,G__265793,G__265794,G__265795,G__265796,G__265797,G__265798,G__265799,G__265800,G__265801,G__265802,G__265803,G__265804,G__265805,G__265806,G__265807,G__265808,G__265809,G__265810,G__265811,G__265812,G__265813,G__265814));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__265750,G__265751) : tailrecursion.hoplon.div.call(null,G__265750,G__265751));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__265749) : tailrecursion.hoplon.div.call(null,G__265749));
})(),(function (){var G__265881 = cljs.core.PersistentArrayMap.EMPTY;
var G__265882 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will use block structure extensively to help us break up large programs into tractable pieces.",(function (){var G__265883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__265884 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Embedded definitions must come first in a procedure body. The management is not responsible for the consequences of running programs that intertwine definition and use."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__265883,G__265884) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__265883,G__265884));
})()," The idea of block structure originated with the programming language Algol 60. It appears in most advanced programming languages and is an important tool for helping to organize the construction of large programs."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265881,G__265882) : tailrecursion.hoplon.markdown.para_node.call(null,G__265881,G__265882));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264527;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264526;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264525;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264524;
}})()], 0));
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27(G__258413,G__258414,G__258415,G__258416,G__258417,G__258418,G__258419,G__258420,G__258421,G__258422,G__258423,G__258424,G__258425,G__258426,G__258427,G__258428,G__258429,G__258430,G__258431,G__258432,G__258433,G__258434,G__258435,G__258436,G__258437,G__258438,G__258439) : tailrecursion.hoplon.div.call(null,G__258413,G__258414,G__258415,G__258416,G__258417,G__258418,G__258419,G__258420,G__258421,G__258422,G__258423,G__258424,G__258425,G__258426,G__258427,G__258428,G__258429,G__258430,G__258431,G__258432,G__258433,G__258434,G__258435,G__258436,G__258437,G__258438,G__258439));
};
var book$sicp$texts$ch1sect1$content = function (var_args){
var args__8262__auto__ = null;
if (arguments.length > 0) {
var G__265885__i = 0, G__265885__a = new Array(arguments.length -  0);
while (G__265885__i < G__265885__a.length) {G__265885__a[G__265885__i] = arguments[G__265885__i + 0]; ++G__265885__i;}
  args__8262__auto__ = new cljs.core.IndexedSeq(G__265885__a,0);
} 
return book$sicp$texts$ch1sect1$content__delegate.call(this,args__8262__auto__);};
book$sicp$texts$ch1sect1$content.cljs$lang$maxFixedArity = 0;
book$sicp$texts$ch1sect1$content.cljs$lang$applyTo = (function (arglist__265886){
var args__8262__auto__ = cljs.core.seq(arglist__265886);
return book$sicp$texts$ch1sect1$content__delegate(args__8262__auto__);
});
book$sicp$texts$ch1sect1$content.cljs$core$IFn$_invoke$arity$variadic = book$sicp$texts$ch1sect1$content__delegate;
return book$sicp$texts$ch1sect1$content;
})()
;
