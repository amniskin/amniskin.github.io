// Compiled by ClojureScript 1.7.48 {:static-fns true, :optimize-constants true}
goog.provide('book.sicp.texts.ch1sect1');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('book.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
book.sicp.texts.ch1sect1.content = (function() { 
var book$sicp$texts$ch1sect1$content__delegate = function (args__8262__auto__){
var vec__237028 = tailrecursion.hoplon.parse_args(args__8262__auto__);
var attr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__237028,(0),null);
var kids = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__237028,(1),null);
var G__237029 = cljs.core.PersistentArrayMap.EMPTY;
var G__237030 = book.sicp.book_data.sect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Elements of Programming"], null),(function (){var _STAR_references_STAR_237056 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_237057 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_237058 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_237059 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__237060 = cljs.core.PersistentArrayMap.EMPTY;
var G__237061 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes. Thus, when we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three mechanisms for accomplishing this:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237060,G__237061) : tailrecursion.hoplon.markdown.para_node.call(null,G__237060,G__237061));
})(),(function (){var G__237062 = cljs.core.PersistentArrayMap.EMPTY;
var G__237063 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__237064 = cljs.core.PersistentArrayMap.EMPTY;
var G__237065 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__237066 = cljs.core.PersistentArrayMap.EMPTY;
var G__237067 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["primitive expressions"], null)], 0)),", which represent the simplest entities the language is concerned with,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237066,G__237067) : tailrecursion.hoplon.markdown.para_node.call(null,G__237066,G__237067));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__237064,G__237065) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__237064,G__237065));
})(),(function (){var G__237068 = cljs.core.PersistentArrayMap.EMPTY;
var G__237069 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_237070 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_237071 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__237072 = cljs.core.PersistentArrayMap.EMPTY;
var G__237073 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of combination"], null)], 0)),", by which compound elements are built from simpler ones, and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237072,G__237073) : tailrecursion.hoplon.markdown.para_node.call(null,G__237072,G__237073));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_237071;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_237070;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__237068,G__237069) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__237068,G__237069));
})(),(function (){var G__237074 = cljs.core.PersistentArrayMap.EMPTY;
var G__237075 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_237076 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_237077 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__237078 = cljs.core.PersistentArrayMap.EMPTY;
var G__237079 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of abstraction"], null)], 0)),", by which compound elements can be named and manipulated as units."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237078,G__237079) : tailrecursion.hoplon.markdown.para_node.call(null,G__237078,G__237079));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_237077;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_237076;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__237074,G__237075) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__237074,G__237075));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__237062,G__237063) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__237062,G__237063));
})(),(function (){var G__237080 = cljs.core.PersistentArrayMap.EMPTY;
var G__237081 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In programming, we deal with two kinds of elements: procedures and data. (Later we will discover that they are really not so distinct.) Informally, data is ``stuff",(function (){var G__237082 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__237083 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__237082,G__237083) : tailrecursion.hoplon.markdown.simple_node.call(null,G__237082,G__237083));
})(),(function (){var G__237084 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__237085 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__237084,G__237085) : tailrecursion.hoplon.markdown.simple_node.call(null,G__237084,G__237085));
})()," that we want to manipulate, and procedures are descriptions of the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive procedures and should have methods for combining and abstracting procedures and data."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237080,G__237081) : tailrecursion.hoplon.markdown.para_node.call(null,G__237080,G__237081));
})(),(function (){var G__237086 = cljs.core.PersistentArrayMap.EMPTY;
var G__237087 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this chapter we will deal only with simple numerical data so that we can focus on the rules for building procedures.",(function (){var G__237088 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__237089 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The characterization of numbers as ",(function (){var G__237090 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__237091 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["simple data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__237090,G__237091) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__237090,G__237091));
})()," is a barefaced bluff. In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language. Some typical issues involved are these: Some computer systems distinguish ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["integers"], null)], 0)),", such as 2, from ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["real numbers"], null)], 0)),", such as 2.71. Is the real number 2.00 different from the integer 2? Are the arithmetic operations used for integers the same as the operations used for real numbers? Does 6 divided by 2 produce 3, or 3.0? How large a number can we represent? How many decimal places of accuracy can we represent? Is the range of integers the same as the range of real numbers? Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors ",(function (){var G__237092 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__237093 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__237092,G__237093) : tailrecursion.hoplon.markdown.simple_node.call(null,G__237092,G__237093));
})()," the entire science of numerical analysis. Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems. The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__237088,G__237089) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__237088,G__237089));
})()," In later chapters we will see that these same rules allow us to build procedures to manipulate compound data as well."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237086,G__237087) : tailrecursion.hoplon.markdown.para_node.call(null,G__237086,G__237087));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_237059;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_237058;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_237057;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_237056;
}})()], 0));
var G__237031 = "";
var G__237032 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Expressions"], null),(function (){var _STAR_references_STAR_237094 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_237095 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_237096 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_237097 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 24, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__237098 = cljs.core.PersistentArrayMap.EMPTY;
var G__237099 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One easy way to get started at programming is to examine some typical interactions with an interpreter for the Scheme dialect of Lisp. Imagine that you are sitting at a computer terminal. You type an ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["expression"], null)], 0)),", and the interpreter responds by displaying the result of its evaluating that expression."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237098,G__237099) : tailrecursion.hoplon.markdown.para_node.call(null,G__237098,G__237099));
})(),(function (){var G__237100 = cljs.core.PersistentArrayMap.EMPTY;
var G__237101 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One kind of primitive expression you might type is a number. (More precisely, the expression that you type consists of the numerals that represent the number in base 10.) If you present Lisp with a number"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237100,G__237101) : tailrecursion.hoplon.markdown.para_node.call(null,G__237100,G__237101));
})(),(function (){var G__237102 = cljs.core.PersistentArrayMap.EMPTY;
var G__237103 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237102,G__237103) : tailrecursion.hoplon.markdown.para_node.call(null,G__237102,G__237103));
})(),(function (){var G__237104 = cljs.core.PersistentArrayMap.EMPTY;
var G__237105 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the interpreter will respond by printing",(function (){var G__237106 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__237107 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, when we wish to emphasize the distinction between the input typed by the user and the response printed by the interpreter, we will show the latter in slanted characters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__237106,G__237107) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__237106,G__237107));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237104,G__237105) : tailrecursion.hoplon.markdown.para_node.call(null,G__237104,G__237105));
})(),(function (){var G__237108 = cljs.core.PersistentArrayMap.EMPTY;
var G__237109 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237108,G__237109) : tailrecursion.hoplon.markdown.para_node.call(null,G__237108,G__237109));
})(),(function (){var G__237110 = cljs.core.PersistentArrayMap.EMPTY;
var G__237111 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions representing numbers may be combined with an expression representing a primitive procedure (such as + or ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,false,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [") to form a compound expression that represents the application of the procedure to those numbers. For example:"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237110,G__237111) : tailrecursion.hoplon.markdown.para_node.call(null,G__237110,G__237111));
})(),(function (){var G__237131 = (function (){var G__237132 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237133 = (function (){var G__237134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237135 = "(";
var G__237136 = (function (){var G__237143 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237144 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237143,G__237144) : tailrecursion.hoplon.span.call(null,G__237143,G__237144));
})();
var G__237137 = (function (){var G__237145 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237146 = "137";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237145,G__237146) : tailrecursion.hoplon.span.call(null,G__237145,G__237146));
})();
var G__237138 = " ";
var G__237139 = (function (){var G__237147 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237148 = "349";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237147,G__237148) : tailrecursion.hoplon.span.call(null,G__237147,G__237148));
})();
var G__237140 = ")\n";
var G__237141 = (function (){var G__237149 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237150 = "486";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237149,G__237150) : tailrecursion.hoplon.span.call(null,G__237149,G__237150));
})();
var G__237142 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__237134,G__237135,G__237136,G__237137,G__237138,G__237139,G__237140,G__237141,G__237142) : tailrecursion.hoplon.pre.call(null,G__237134,G__237135,G__237136,G__237137,G__237138,G__237139,G__237140,G__237141,G__237142));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237132,G__237133) : tailrecursion.hoplon.div.call(null,G__237132,G__237133));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237131) : tailrecursion.hoplon.div.call(null,G__237131));
})(),(function (){var G__237170 = (function (){var G__237171 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237172 = (function (){var G__237173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237174 = "(";
var G__237175 = (function (){var G__237182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237183 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237182,G__237183) : tailrecursion.hoplon.span.call(null,G__237182,G__237183));
})();
var G__237176 = (function (){var G__237184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237185 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237184,G__237185) : tailrecursion.hoplon.span.call(null,G__237184,G__237185));
})();
var G__237177 = " ";
var G__237178 = (function (){var G__237186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237187 = "334";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237186,G__237187) : tailrecursion.hoplon.span.call(null,G__237186,G__237187));
})();
var G__237179 = ")\n";
var G__237180 = (function (){var G__237188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237189 = "666";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237188,G__237189) : tailrecursion.hoplon.span.call(null,G__237188,G__237189));
})();
var G__237181 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__237173,G__237174,G__237175,G__237176,G__237177,G__237178,G__237179,G__237180,G__237181) : tailrecursion.hoplon.pre.call(null,G__237173,G__237174,G__237175,G__237176,G__237177,G__237178,G__237179,G__237180,G__237181));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237171,G__237172) : tailrecursion.hoplon.div.call(null,G__237171,G__237172));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237170) : tailrecursion.hoplon.div.call(null,G__237170));
})(),(function (){var G__237209 = (function (){var G__237210 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237211 = (function (){var G__237212 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237213 = "(";
var G__237214 = (function (){var G__237221 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237222 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237221,G__237222) : tailrecursion.hoplon.span.call(null,G__237221,G__237222));
})();
var G__237215 = (function (){var G__237223 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237224 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237223,G__237224) : tailrecursion.hoplon.span.call(null,G__237223,G__237224));
})();
var G__237216 = " ";
var G__237217 = (function (){var G__237225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237226 = "99";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237225,G__237226) : tailrecursion.hoplon.span.call(null,G__237225,G__237226));
})();
var G__237218 = ")\n";
var G__237219 = (function (){var G__237227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237228 = "495";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237227,G__237228) : tailrecursion.hoplon.span.call(null,G__237227,G__237228));
})();
var G__237220 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__237212,G__237213,G__237214,G__237215,G__237216,G__237217,G__237218,G__237219,G__237220) : tailrecursion.hoplon.pre.call(null,G__237212,G__237213,G__237214,G__237215,G__237216,G__237217,G__237218,G__237219,G__237220));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237210,G__237211) : tailrecursion.hoplon.div.call(null,G__237210,G__237211));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237209) : tailrecursion.hoplon.div.call(null,G__237209));
})(),(function (){var G__237248 = (function (){var G__237249 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237250 = (function (){var G__237251 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237252 = "(";
var G__237253 = (function (){var G__237260 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237261 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237260,G__237261) : tailrecursion.hoplon.span.call(null,G__237260,G__237261));
})();
var G__237254 = (function (){var G__237262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237263 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237262,G__237263) : tailrecursion.hoplon.span.call(null,G__237262,G__237263));
})();
var G__237255 = " ";
var G__237256 = (function (){var G__237264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237265 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237264,G__237265) : tailrecursion.hoplon.span.call(null,G__237264,G__237265));
})();
var G__237257 = ")\n";
var G__237258 = (function (){var G__237266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237267 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237266,G__237267) : tailrecursion.hoplon.span.call(null,G__237266,G__237267));
})();
var G__237259 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__237251,G__237252,G__237253,G__237254,G__237255,G__237256,G__237257,G__237258,G__237259) : tailrecursion.hoplon.pre.call(null,G__237251,G__237252,G__237253,G__237254,G__237255,G__237256,G__237257,G__237258,G__237259));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237249,G__237250) : tailrecursion.hoplon.div.call(null,G__237249,G__237250));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237248) : tailrecursion.hoplon.div.call(null,G__237248));
})(),(function (){var G__237287 = (function (){var G__237288 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237289 = (function (){var G__237290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237291 = "(";
var G__237292 = (function (){var G__237299 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237300 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237299,G__237300) : tailrecursion.hoplon.span.call(null,G__237299,G__237300));
})();
var G__237293 = (function (){var G__237301 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237302 = "2.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237301,G__237302) : tailrecursion.hoplon.span.call(null,G__237301,G__237302));
})();
var G__237294 = " ";
var G__237295 = (function (){var G__237303 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237304 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237303,G__237304) : tailrecursion.hoplon.span.call(null,G__237303,G__237304));
})();
var G__237296 = ")\n";
var G__237297 = (function (){var G__237305 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237306 = "12.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237305,G__237306) : tailrecursion.hoplon.span.call(null,G__237305,G__237306));
})();
var G__237298 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__237290,G__237291,G__237292,G__237293,G__237294,G__237295,G__237296,G__237297,G__237298) : tailrecursion.hoplon.pre.call(null,G__237290,G__237291,G__237292,G__237293,G__237294,G__237295,G__237296,G__237297,G__237298));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237288,G__237289) : tailrecursion.hoplon.div.call(null,G__237288,G__237289));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237287) : tailrecursion.hoplon.div.call(null,G__237287));
})(),(function (){var G__237307 = cljs.core.PersistentArrayMap.EMPTY;
var G__237308 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions such as these, formed by delimiting a list of expressions within parentheses in order to denote procedure application, are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["combinations"], null)], 0)),". The leftmost element in the list is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operator"], null)], 0)),", and the other elements are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operands"], null)], 0)),". The value of a combination is obtained by applying the procedure specified by the operator to the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["arguments"], null)], 0))," that are the values of the operands."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237307,G__237308) : tailrecursion.hoplon.markdown.para_node.call(null,G__237307,G__237308));
})(),(function (){var G__237309 = cljs.core.PersistentArrayMap.EMPTY;
var G__237310 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The convention of placing the operator to the left of the operands is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["prefix notation"], null)], 0)),", and it may be somewhat confusing at first because it departs significantly from the customary mathematical convention. Prefix notation has several advantages, however. One of them is that it can accommodate procedures that may take an arbitrary number of arguments, as in the following examples:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237309,G__237310) : tailrecursion.hoplon.markdown.para_node.call(null,G__237309,G__237310));
})(),(function (){var G__237338 = (function (){var G__237339 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237340 = (function (){var G__237341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237342 = "(";
var G__237343 = (function (){var G__237354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237355 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237354,G__237355) : tailrecursion.hoplon.span.call(null,G__237354,G__237355));
})();
var G__237344 = (function (){var G__237356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237357 = "21";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237356,G__237357) : tailrecursion.hoplon.span.call(null,G__237356,G__237357));
})();
var G__237345 = " ";
var G__237346 = (function (){var G__237358 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237359 = "35";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237358,G__237359) : tailrecursion.hoplon.span.call(null,G__237358,G__237359));
})();
var G__237347 = " ";
var G__237348 = (function (){var G__237360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237361 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237360,G__237361) : tailrecursion.hoplon.span.call(null,G__237360,G__237361));
})();
var G__237349 = " ";
var G__237350 = (function (){var G__237362 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237363 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237362,G__237363) : tailrecursion.hoplon.span.call(null,G__237362,G__237363));
})();
var G__237351 = ")\n";
var G__237352 = (function (){var G__237364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237365 = "75";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237364,G__237365) : tailrecursion.hoplon.span.call(null,G__237364,G__237365));
})();
var G__237353 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__237341,G__237342,G__237343,G__237344,G__237345,G__237346,G__237347,G__237348,G__237349,G__237350,G__237351,G__237352,G__237353) : tailrecursion.hoplon.pre.call(null,G__237341,G__237342,G__237343,G__237344,G__237345,G__237346,G__237347,G__237348,G__237349,G__237350,G__237351,G__237352,G__237353));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237339,G__237340) : tailrecursion.hoplon.div.call(null,G__237339,G__237340));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237338) : tailrecursion.hoplon.div.call(null,G__237338));
})(),(function (){var G__237389 = (function (){var G__237390 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237391 = (function (){var G__237392 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237393 = "(";
var G__237394 = (function (){var G__237403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237404 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237403,G__237404) : tailrecursion.hoplon.span.call(null,G__237403,G__237404));
})();
var G__237395 = (function (){var G__237405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237406 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237405,G__237406) : tailrecursion.hoplon.span.call(null,G__237405,G__237406));
})();
var G__237396 = " ";
var G__237397 = (function (){var G__237407 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237408 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237407,G__237408) : tailrecursion.hoplon.span.call(null,G__237407,G__237408));
})();
var G__237398 = " ";
var G__237399 = (function (){var G__237409 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237410 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237409,G__237410) : tailrecursion.hoplon.span.call(null,G__237409,G__237410));
})();
var G__237400 = ")\n";
var G__237401 = (function (){var G__237411 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237412 = "1200";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237411,G__237412) : tailrecursion.hoplon.span.call(null,G__237411,G__237412));
})();
var G__237402 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__237392,G__237393,G__237394,G__237395,G__237396,G__237397,G__237398,G__237399,G__237400,G__237401,G__237402) : tailrecursion.hoplon.pre.call(null,G__237392,G__237393,G__237394,G__237395,G__237396,G__237397,G__237398,G__237399,G__237400,G__237401,G__237402));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237390,G__237391) : tailrecursion.hoplon.div.call(null,G__237390,G__237391));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237389) : tailrecursion.hoplon.div.call(null,G__237389));
})(),(function (){var G__237413 = cljs.core.PersistentArrayMap.EMPTY;
var G__237414 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["No ambiguity can arise, because the operator is always the leftmost element and the entire combination is delimited by the parentheses."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237413,G__237414) : tailrecursion.hoplon.markdown.para_node.call(null,G__237413,G__237414));
})(),(function (){var G__237415 = cljs.core.PersistentArrayMap.EMPTY;
var G__237416 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A second advantage of prefix notation is that it extends in a straightforward way to allow combinations to be ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["nested"], null)], 0)),", that is, to have combinations whose elements are themselves combinations:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237415,G__237416) : tailrecursion.hoplon.markdown.para_node.call(null,G__237415,G__237416));
})(),(function (){var G__237451 = (function (){var G__237452 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237453 = (function (){var G__237454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237455 = "(";
var G__237456 = (function (){var G__237470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237471 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237470,G__237471) : tailrecursion.hoplon.span.call(null,G__237470,G__237471));
})();
var G__237457 = "(";
var G__237458 = (function (){var G__237472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237473 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237472,G__237473) : tailrecursion.hoplon.span.call(null,G__237472,G__237473));
})();
var G__237459 = (function (){var G__237474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237475 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237474,G__237475) : tailrecursion.hoplon.span.call(null,G__237474,G__237475));
})();
var G__237460 = " ";
var G__237461 = (function (){var G__237476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237477 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237476,G__237477) : tailrecursion.hoplon.span.call(null,G__237476,G__237477));
})();
var G__237462 = ") (";
var G__237463 = (function (){var G__237478 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237479 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237478,G__237479) : tailrecursion.hoplon.span.call(null,G__237478,G__237479));
})();
var G__237464 = (function (){var G__237480 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237481 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237480,G__237481) : tailrecursion.hoplon.span.call(null,G__237480,G__237481));
})();
var G__237465 = " ";
var G__237466 = (function (){var G__237482 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237483 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237482,G__237483) : tailrecursion.hoplon.span.call(null,G__237482,G__237483));
})();
var G__237467 = "))\n";
var G__237468 = (function (){var G__237484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237485 = "19";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237484,G__237485) : tailrecursion.hoplon.span.call(null,G__237484,G__237485));
})();
var G__237469 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__237454,G__237455,G__237456,G__237457,G__237458,G__237459,G__237460,G__237461,G__237462,G__237463,G__237464,G__237465,G__237466,G__237467,G__237468,G__237469) : tailrecursion.hoplon.pre.call(null,G__237454,G__237455,G__237456,G__237457,G__237458,G__237459,G__237460,G__237461,G__237462,G__237463,G__237464,G__237465,G__237466,G__237467,G__237468,G__237469));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237452,G__237453) : tailrecursion.hoplon.div.call(null,G__237452,G__237453));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237451) : tailrecursion.hoplon.div.call(null,G__237451));
})(),(function (){var G__237486 = cljs.core.PersistentArrayMap.EMPTY;
var G__237487 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the Lisp interpreter can evaluate. It is we humans who get confused by still relatively simple expressions such as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237486,G__237487) : tailrecursion.hoplon.markdown.para_node.call(null,G__237486,G__237487));
})(),(function (){var G__237548 = (function (){var G__237549 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237550 = (function (){var G__237551 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237552 = "(";
var G__237553 = (function (){var G__237579 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237580 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237579,G__237580) : tailrecursion.hoplon.span.call(null,G__237579,G__237580));
})();
var G__237554 = "(";
var G__237555 = (function (){var G__237581 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237582 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237581,G__237582) : tailrecursion.hoplon.span.call(null,G__237581,G__237582));
})();
var G__237556 = (function (){var G__237583 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237584 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237583,G__237584) : tailrecursion.hoplon.span.call(null,G__237583,G__237584));
})();
var G__237557 = " (";
var G__237558 = (function (){var G__237585 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237586 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237585,G__237586) : tailrecursion.hoplon.span.call(null,G__237585,G__237586));
})();
var G__237559 = "(";
var G__237560 = (function (){var G__237587 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237588 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237587,G__237588) : tailrecursion.hoplon.span.call(null,G__237587,G__237588));
})();
var G__237561 = (function (){var G__237589 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237590 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237589,G__237590) : tailrecursion.hoplon.span.call(null,G__237589,G__237590));
})();
var G__237562 = " ";
var G__237563 = (function (){var G__237591 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237592 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237591,G__237592) : tailrecursion.hoplon.span.call(null,G__237591,G__237592));
})();
var G__237564 = ") (";
var G__237565 = (function (){var G__237593 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237594 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237593,G__237594) : tailrecursion.hoplon.span.call(null,G__237593,G__237594));
})();
var G__237566 = (function (){var G__237595 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237596 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237595,G__237596) : tailrecursion.hoplon.span.call(null,G__237595,G__237596));
})();
var G__237567 = " ";
var G__237568 = (function (){var G__237597 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237598 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237597,G__237598) : tailrecursion.hoplon.span.call(null,G__237597,G__237598));
})();
var G__237569 = "))) (";
var G__237570 = (function (){var G__237599 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237600 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237599,G__237600) : tailrecursion.hoplon.span.call(null,G__237599,G__237600));
})();
var G__237571 = "(";
var G__237572 = (function (){var G__237601 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237602 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237601,G__237602) : tailrecursion.hoplon.span.call(null,G__237601,G__237602));
})();
var G__237573 = (function (){var G__237603 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237604 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237603,G__237604) : tailrecursion.hoplon.span.call(null,G__237603,G__237604));
})();
var G__237574 = " ";
var G__237575 = (function (){var G__237605 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237606 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237605,G__237606) : tailrecursion.hoplon.span.call(null,G__237605,G__237606));
})();
var G__237576 = ") ";
var G__237577 = (function (){var G__237607 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237608 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237607,G__237608) : tailrecursion.hoplon.span.call(null,G__237607,G__237608));
})();
var G__237578 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__237551,G__237552,G__237553,G__237554,G__237555,G__237556,G__237557,G__237558,G__237559,G__237560,G__237561,G__237562,G__237563,G__237564,G__237565,G__237566,G__237567,G__237568,G__237569,G__237570,G__237571,G__237572,G__237573,G__237574,G__237575,G__237576,G__237577,G__237578) : tailrecursion.hoplon.pre.call(null,G__237551,G__237552,G__237553,G__237554,G__237555,G__237556,G__237557,G__237558,G__237559,G__237560,G__237561,G__237562,G__237563,G__237564,G__237565,G__237566,G__237567,G__237568,G__237569,G__237570,G__237571,G__237572,G__237573,G__237574,G__237575,G__237576,G__237577,G__237578));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237549,G__237550) : tailrecursion.hoplon.div.call(null,G__237549,G__237550));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237548) : tailrecursion.hoplon.div.call(null,G__237548));
})(),(function (){var G__237609 = cljs.core.PersistentArrayMap.EMPTY;
var G__237610 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which the interpreter would readily evaluate to be 57. We can help ourselves by writing such an expression in the form"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237609,G__237610) : tailrecursion.hoplon.markdown.para_node.call(null,G__237609,G__237610));
})(),(function (){var G__237671 = (function (){var G__237672 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237673 = (function (){var G__237674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237675 = "(";
var G__237676 = (function (){var G__237702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237703 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237702,G__237703) : tailrecursion.hoplon.span.call(null,G__237702,G__237703));
})();
var G__237677 = "(";
var G__237678 = (function (){var G__237704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237705 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237704,G__237705) : tailrecursion.hoplon.span.call(null,G__237704,G__237705));
})();
var G__237679 = (function (){var G__237706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237707 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237706,G__237707) : tailrecursion.hoplon.span.call(null,G__237706,G__237707));
})();
var G__237680 = "\n      (";
var G__237681 = (function (){var G__237708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237709 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237708,G__237709) : tailrecursion.hoplon.span.call(null,G__237708,G__237709));
})();
var G__237682 = "(";
var G__237683 = (function (){var G__237710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237711 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237710,G__237711) : tailrecursion.hoplon.span.call(null,G__237710,G__237711));
})();
var G__237684 = (function (){var G__237712 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237713 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237712,G__237713) : tailrecursion.hoplon.span.call(null,G__237712,G__237713));
})();
var G__237685 = " ";
var G__237686 = (function (){var G__237714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237715 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237714,G__237715) : tailrecursion.hoplon.span.call(null,G__237714,G__237715));
})();
var G__237687 = ")\n         (";
var G__237688 = (function (){var G__237716 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237717 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237716,G__237717) : tailrecursion.hoplon.span.call(null,G__237716,G__237717));
})();
var G__237689 = (function (){var G__237718 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237719 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237718,G__237719) : tailrecursion.hoplon.span.call(null,G__237718,G__237719));
})();
var G__237690 = " ";
var G__237691 = (function (){var G__237720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237721 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237720,G__237721) : tailrecursion.hoplon.span.call(null,G__237720,G__237721));
})();
var G__237692 = ")))\n   (";
var G__237693 = (function (){var G__237722 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237723 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237722,G__237723) : tailrecursion.hoplon.span.call(null,G__237722,G__237723));
})();
var G__237694 = "(";
var G__237695 = (function (){var G__237724 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237725 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237724,G__237725) : tailrecursion.hoplon.span.call(null,G__237724,G__237725));
})();
var G__237696 = (function (){var G__237726 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237727 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237726,G__237727) : tailrecursion.hoplon.span.call(null,G__237726,G__237727));
})();
var G__237697 = " ";
var G__237698 = (function (){var G__237728 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237729 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237728,G__237729) : tailrecursion.hoplon.span.call(null,G__237728,G__237729));
})();
var G__237699 = ")\n      ";
var G__237700 = (function (){var G__237730 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237731 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237730,G__237731) : tailrecursion.hoplon.span.call(null,G__237730,G__237731));
})();
var G__237701 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__237674,G__237675,G__237676,G__237677,G__237678,G__237679,G__237680,G__237681,G__237682,G__237683,G__237684,G__237685,G__237686,G__237687,G__237688,G__237689,G__237690,G__237691,G__237692,G__237693,G__237694,G__237695,G__237696,G__237697,G__237698,G__237699,G__237700,G__237701) : tailrecursion.hoplon.pre.call(null,G__237674,G__237675,G__237676,G__237677,G__237678,G__237679,G__237680,G__237681,G__237682,G__237683,G__237684,G__237685,G__237686,G__237687,G__237688,G__237689,G__237690,G__237691,G__237692,G__237693,G__237694,G__237695,G__237696,G__237697,G__237698,G__237699,G__237700,G__237701));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237672,G__237673) : tailrecursion.hoplon.div.call(null,G__237672,G__237673));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237671) : tailrecursion.hoplon.div.call(null,G__237671));
})(),(function (){var G__237732 = cljs.core.PersistentArrayMap.EMPTY;
var G__237733 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["following a formatting convention known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["pretty-printing"], null)], 0)),", in which each long combination is written so that the operands are aligned vertically. The resulting indentations display clearly the structure of the expression.",(function (){var G__237734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__237735 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp systems typically provide features to aid the user in formatting expressions. Two especially useful features are one that automatically indents to the proper pretty-print position whenever a new line is started and one that highlights the matching left parenthesis whenever a right parenthesis is typed."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__237734,G__237735) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__237734,G__237735));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237732,G__237733) : tailrecursion.hoplon.markdown.para_node.call(null,G__237732,G__237733));
})(),(function (){var G__237736 = cljs.core.PersistentArrayMap.EMPTY;
var G__237737 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even with complex expressions, the interpreter always operates in the same basic cycle: It reads an expression from the terminal, evaluates the expression, and prints the result. This mode of operation is often expressed by saying that the interpreter runs in a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["read-eval-print loop"], null)], 0)),". Observe in particular that it is not necessary to explicitly instruct the interpreter to print the value of the expression.",(function (){var G__237738 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__237739 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp obeys the convention that every expression has a value. This convention, together with the old reputation of Lisp as an inefficient language, is the source of the quip by Alan Perlis (paraphrasing Oscar Wilde) that ",(function (){var G__237740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__237741 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp programmers know the value of everything but the cost of nothing."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__237740,G__237741) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__237740,G__237741));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__237738,G__237739) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__237738,G__237739));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237736,G__237737) : tailrecursion.hoplon.markdown.para_node.call(null,G__237736,G__237737));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_237097;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_237096;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_237095;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_237094;
}})()], 0));
var G__237033 = "";
var G__237034 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Naming and the Environment"], null),(function (){var _STAR_references_STAR_237742 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_237743 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_237744 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_237745 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__237746 = cljs.core.PersistentArrayMap.EMPTY;
var G__237747 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A critical aspect of a programming language is the means it provides for using names to refer to computational objects. We say that the name identifies a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["variable"], null)], 0))," whose ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["value"], null)], 0))," is the object."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237746,G__237747) : tailrecursion.hoplon.markdown.para_node.call(null,G__237746,G__237747));
})(),(function (){var G__237748 = cljs.core.PersistentArrayMap.EMPTY;
var G__237749 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In the Scheme dialect of Lisp, we name things with ",(function (){var G__237750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__237751 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__237750,G__237751) : tailrecursion.hoplon.markdown.code_node.call(null,G__237750,G__237751));
})(),". Typing"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237748,G__237749) : tailrecursion.hoplon.markdown.para_node.call(null,G__237748,G__237749));
})(),(function (){var G__237767 = (function (){var G__237768 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237769 = (function (){var G__237770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237771 = "(";
var G__237772 = (function (){var G__237777 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__237778 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237777,G__237778) : tailrecursion.hoplon.span.call(null,G__237777,G__237778));
})();
var G__237773 = (function (){var G__237779 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__237780 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237779,G__237780) : tailrecursion.hoplon.span.call(null,G__237779,G__237780));
})();
var G__237774 = " ";
var G__237775 = (function (){var G__237781 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237782 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237781,G__237782) : tailrecursion.hoplon.span.call(null,G__237781,G__237782));
})();
var G__237776 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__237770,G__237771,G__237772,G__237773,G__237774,G__237775,G__237776) : tailrecursion.hoplon.pre.call(null,G__237770,G__237771,G__237772,G__237773,G__237774,G__237775,G__237776));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237768,G__237769) : tailrecursion.hoplon.div.call(null,G__237768,G__237769));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237767) : tailrecursion.hoplon.div.call(null,G__237767));
})(),(function (){var G__237783 = cljs.core.PersistentArrayMap.EMPTY;
var G__237784 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["causes the interpreter to associate the value 2 with the name size.",(function (){var G__237785 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__237786 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this book, we do not show the interpreter",(function (){var G__237787 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__237788 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__237787,G__237788) : tailrecursion.hoplon.markdown.simple_node.call(null,G__237787,G__237788));
})(),"s response to evaluating definitions, since this is highly implementation-dependent."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__237785,G__237786) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__237785,G__237786));
})()," In Clojure we would use ",(function (){var G__237789 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__237790 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__237789,G__237790) : tailrecursion.hoplon.markdown.code_node.call(null,G__237789,G__237790));
})()," to accomplish the same goal. i.e."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237783,G__237784) : tailrecursion.hoplon.markdown.para_node.call(null,G__237783,G__237784));
})(),(function (){var G__237806 = (function (){var G__237807 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237808 = (function (){var G__237809 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237810 = "(";
var G__237811 = (function (){var G__237816 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__237817 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237816,G__237817) : tailrecursion.hoplon.span.call(null,G__237816,G__237817));
})();
var G__237812 = (function (){var G__237818 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__237819 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237818,G__237819) : tailrecursion.hoplon.span.call(null,G__237818,G__237819));
})();
var G__237813 = " ";
var G__237814 = (function (){var G__237820 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237821 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237820,G__237821) : tailrecursion.hoplon.span.call(null,G__237820,G__237821));
})();
var G__237815 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__237809,G__237810,G__237811,G__237812,G__237813,G__237814,G__237815) : tailrecursion.hoplon.pre.call(null,G__237809,G__237810,G__237811,G__237812,G__237813,G__237814,G__237815));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237807,G__237808) : tailrecursion.hoplon.div.call(null,G__237807,G__237808));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237806) : tailrecursion.hoplon.div.call(null,G__237806));
})(),(function (){var G__237822 = cljs.core.PersistentArrayMap.EMPTY;
var G__237823 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and the interpreter will now associate the value 2 with the name size. Once the name size has been associated with the number 2, we can refer to the value 2 by name:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237822,G__237823) : tailrecursion.hoplon.markdown.para_node.call(null,G__237822,G__237823));
})(),(function (){var G__237835 = (function (){var G__237836 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237837 = (function (){var G__237838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237839 = (function (){var G__237843 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__237844 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237843,G__237844) : tailrecursion.hoplon.span.call(null,G__237843,G__237844));
})();
var G__237840 = "\n";
var G__237841 = (function (){var G__237845 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237846 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237845,G__237846) : tailrecursion.hoplon.span.call(null,G__237845,G__237846));
})();
var G__237842 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5(G__237838,G__237839,G__237840,G__237841,G__237842) : tailrecursion.hoplon.pre.call(null,G__237838,G__237839,G__237840,G__237841,G__237842));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237836,G__237837) : tailrecursion.hoplon.div.call(null,G__237836,G__237837));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237835) : tailrecursion.hoplon.div.call(null,G__237835));
})(),(function (){var G__237866 = (function (){var G__237867 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237868 = (function (){var G__237869 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237870 = "(";
var G__237871 = (function (){var G__237878 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__237879 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237878,G__237879) : tailrecursion.hoplon.span.call(null,G__237878,G__237879));
})();
var G__237872 = (function (){var G__237880 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237881 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237880,G__237881) : tailrecursion.hoplon.span.call(null,G__237880,G__237881));
})();
var G__237873 = " ";
var G__237874 = (function (){var G__237882 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__237883 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237882,G__237883) : tailrecursion.hoplon.span.call(null,G__237882,G__237883));
})();
var G__237875 = ")\n";
var G__237876 = (function (){var G__237884 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__237885 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__237884,G__237885) : tailrecursion.hoplon.span.call(null,G__237884,G__237885));
})();
var G__237877 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__237869,G__237870,G__237871,G__237872,G__237873,G__237874,G__237875,G__237876,G__237877) : tailrecursion.hoplon.pre.call(null,G__237869,G__237870,G__237871,G__237872,G__237873,G__237874,G__237875,G__237876,G__237877));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237867,G__237868) : tailrecursion.hoplon.div.call(null,G__237867,G__237868));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237866) : tailrecursion.hoplon.div.call(null,G__237866));
})(),(function (){var G__237886 = cljs.core.PersistentArrayMap.EMPTY;
var G__237887 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here are further examples of the use of ",(function (){var G__237888 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__237889 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__237888,G__237889) : tailrecursion.hoplon.markdown.code_node.call(null,G__237888,G__237889));
})(),":"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__237886,G__237887) : tailrecursion.hoplon.markdown.para_node.call(null,G__237886,G__237887));
})(),(function (){var G__237968 = (function (){var G__237969 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__237970 = (function (){var G__237971 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__237972 = "(";
var G__237973 = (function (){var G__238007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__238008 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238007,G__238008) : tailrecursion.hoplon.span.call(null,G__238007,G__238008));
})();
var G__237974 = (function (){var G__238009 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238010 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238009,G__238010) : tailrecursion.hoplon.span.call(null,G__238009,G__238010));
})();
var G__237975 = " ";
var G__237976 = (function (){var G__238011 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238012 = "3.14159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238011,G__238012) : tailrecursion.hoplon.span.call(null,G__238011,G__238012));
})();
var G__237977 = ")\n(";
var G__237978 = (function (){var G__238013 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__238014 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238013,G__238014) : tailrecursion.hoplon.span.call(null,G__238013,G__238014));
})();
var G__237979 = (function (){var G__238015 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238016 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238015,G__238016) : tailrecursion.hoplon.span.call(null,G__238015,G__238016));
})();
var G__237980 = " ";
var G__237981 = (function (){var G__238017 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238018 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238017,G__238018) : tailrecursion.hoplon.span.call(null,G__238017,G__238018));
})();
var G__237982 = ")\n(";
var G__237983 = (function (){var G__238019 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238020 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238019,G__238020) : tailrecursion.hoplon.span.call(null,G__238019,G__238020));
})();
var G__237984 = (function (){var G__238021 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238022 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238021,G__238022) : tailrecursion.hoplon.span.call(null,G__238021,G__238022));
})();
var G__237985 = " (";
var G__237986 = (function (){var G__238023 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238024 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238023,G__238024) : tailrecursion.hoplon.span.call(null,G__238023,G__238024));
})();
var G__237987 = (function (){var G__238025 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238026 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238025,G__238026) : tailrecursion.hoplon.span.call(null,G__238025,G__238026));
})();
var G__237988 = " ";
var G__237989 = (function (){var G__238027 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238028 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238027,G__238028) : tailrecursion.hoplon.span.call(null,G__238027,G__238028));
})();
var G__237990 = "))\n";
var G__237991 = (function (){var G__238029 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238030 = "314.159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238029,G__238030) : tailrecursion.hoplon.span.call(null,G__238029,G__238030));
})();
var G__237992 = "\n(";
var G__237993 = (function (){var G__238031 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__238032 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238031,G__238032) : tailrecursion.hoplon.span.call(null,G__238031,G__238032));
})();
var G__237994 = (function (){var G__238033 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238034 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238033,G__238034) : tailrecursion.hoplon.span.call(null,G__238033,G__238034));
})();
var G__237995 = " (";
var G__237996 = (function (){var G__238035 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238036 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238035,G__238036) : tailrecursion.hoplon.span.call(null,G__238035,G__238036));
})();
var G__237997 = (function (){var G__238037 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238038 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238037,G__238038) : tailrecursion.hoplon.span.call(null,G__238037,G__238038));
})();
var G__237998 = " ";
var G__237999 = (function (){var G__238039 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238040 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238039,G__238040) : tailrecursion.hoplon.span.call(null,G__238039,G__238040));
})();
var G__238000 = " ";
var G__238001 = (function (){var G__238041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238042 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238041,G__238042) : tailrecursion.hoplon.span.call(null,G__238041,G__238042));
})();
var G__238002 = "))\n";
var G__238003 = (function (){var G__238043 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238044 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238043,G__238044) : tailrecursion.hoplon.span.call(null,G__238043,G__238044));
})();
var G__238004 = "\n";
var G__238005 = (function (){var G__238045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238046 = "62.8318";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238045,G__238046) : tailrecursion.hoplon.span.call(null,G__238045,G__238046));
})();
var G__238006 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__237971,G__237972,G__237973,G__237974,G__237975,G__237976,G__237977,G__237978,G__237979,G__237980,G__237981,G__237982,G__237983,G__237984,G__237985,G__237986,G__237987,G__237988,G__237989,G__237990,G__237991,G__237992,G__237993,G__237994,G__237995,G__237996,G__237997,G__237998,G__237999,G__238000,G__238001,G__238002,G__238003,G__238004,G__238005,G__238006) : tailrecursion.hoplon.pre.call(null,G__237971,G__237972,G__237973,G__237974,G__237975,G__237976,G__237977,G__237978,G__237979,G__237980,G__237981,G__237982,G__237983,G__237984,G__237985,G__237986,G__237987,G__237988,G__237989,G__237990,G__237991,G__237992,G__237993,G__237994,G__237995,G__237996,G__237997,G__237998,G__237999,G__238000,G__238001,G__238002,G__238003,G__238004,G__238005,G__238006));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__237969,G__237970) : tailrecursion.hoplon.div.call(null,G__237969,G__237970));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__237968) : tailrecursion.hoplon.div.call(null,G__237968));
})(),(function (){var G__238047 = cljs.core.PersistentArrayMap.EMPTY;
var G__238048 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__238050 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238049,G__238050) : tailrecursion.hoplon.markdown.code_node.call(null,G__238049,G__238050));
})()," is our language",(function (){var G__238051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__238052 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238051,G__238052) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238051,G__238052));
})(),"s simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the ",(function (){var G__238053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"circumference"], null);
var G__238054 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238053,G__238054) : tailrecursion.hoplon.markdown.code_node.call(null,G__238053,G__238054));
})()," computed above. In general, computational objects may have very complex structures, and it would be extremely inconvenient to have to remember and repeat their details each time we want to use them. Indeed, complex programs are constructed by building, step by step, computational objects of increasing complexity. The interpreter makes this step-by-step program construction particularly convenient because name-object associations can be created incrementally in successive interactions. This feature encourages the incremental development and testing of programs and is largely responsible for the fact that a Lisp program usually consists of a large number of relatively simple procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238047,G__238048) : tailrecursion.hoplon.markdown.para_node.call(null,G__238047,G__238048));
})(),(function (){var G__238055 = cljs.core.PersistentArrayMap.EMPTY;
var G__238056 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It should be clear that the possibility of associating values with symbols and later retrieving them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. This memory is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["environment"], null)], 0))," (more precisely the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["global environment"], null)], 0)),", since we will see later that a computation may involve a number of different environments).",(function (){var G__238057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__238058 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Chapter 3 will show that this notion of environment is crucial, both for understanding how the interpreter works and for implementing interpreters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238057,G__238058) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238057,G__238058));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238055,G__238056) : tailrecursion.hoplon.markdown.para_node.call(null,G__238055,G__238056));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_237745;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_237744;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_237743;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_237742;
}})()], 0));
var G__237035 = " ";
var G__237036 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Evaluating Combinations"], null),(function (){var _STAR_references_STAR_238059 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238060 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_238061 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238062 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238063 = cljs.core.PersistentArrayMap.EMPTY;
var G__238064 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating combinations, the interpreter is itself following a procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238063,G__238064) : tailrecursion.hoplon.markdown.para_node.call(null,G__238063,G__238064));
})(),(function (){var G__238065 = cljs.core.PersistentArrayMap.EMPTY;
var G__238066 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238067 = cljs.core.PersistentArrayMap.EMPTY;
var G__238068 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238069 = cljs.core.PersistentArrayMap.EMPTY;
var G__238070 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination, do the following:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238069,G__238070) : tailrecursion.hoplon.markdown.para_node.call(null,G__238069,G__238070));
})(),(function (){var _STAR_references_STAR_238071 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238072 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238073 = cljs.core.PersistentArrayMap.EMPTY;
var G__238074 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238075 = cljs.core.PersistentArrayMap.EMPTY;
var G__238076 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_238077 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238078 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Evaluate the subexpressions of the combination."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238078;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238077;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238075,G__238076) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238075,G__238076));
})(),(function (){var G__238079 = cljs.core.PersistentArrayMap.EMPTY;
var G__238080 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_238081 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238082 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands)."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238082;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238081;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238079,G__238080) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238079,G__238080));
})()], null);
return (tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2(G__238073,G__238074) : tailrecursion.hoplon.markdown.ordered_list_node.call(null,G__238073,G__238074));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238072;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238071;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238067,G__238068) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238067,G__238068));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__238065,G__238066) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__238065,G__238066));
})(),(function (){var G__238083 = cljs.core.PersistentArrayMap.EMPTY;
var G__238084 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even this simple rule illustrates some important points about processes in general. First, observe that the first step dictates that in order to accomplish the evaluation process for a combination we must first perform the evaluation process on each element of the combination. Thus, the evaluation rule is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0))," in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.",(function (){var G__238085 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__238086 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It may seem strange that the evaluation rule says, as part of the first step, that we should evaluate the leftmost element of a combination, since at this point that can only be an operator such as ",(function (){var G__238087 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__238088 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238087,G__238088) : tailrecursion.hoplon.markdown.code_node.call(null,G__238087,G__238088));
})()," or ",(function (){var G__238089 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__238090 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238089,G__238090) : tailrecursion.hoplon.markdown.code_node.call(null,G__238089,G__238090));
})()," representing a built-in primitive procedure such as addition or multiplication. We will see later that it is useful to be able to work with combinations whose operators are themselves compound expressions."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238085,G__238086) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238085,G__238086));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238083,G__238084) : tailrecursion.hoplon.markdown.para_node.call(null,G__238083,G__238084));
})(),(function (){var G__238091 = cljs.core.PersistentArrayMap.EMPTY;
var G__238092 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice how succinctly the idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process. For example, evaluating"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238091,G__238092) : tailrecursion.hoplon.markdown.para_node.call(null,G__238091,G__238092));
})(),(function (){var G__238134 = (function (){var G__238135 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__238136 = (function (){var G__238137 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__238138 = "(";
var G__238139 = (function (){var G__238156 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238157 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238156,G__238157) : tailrecursion.hoplon.span.call(null,G__238156,G__238157));
})();
var G__238140 = "(";
var G__238141 = (function (){var G__238158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238159 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238158,G__238159) : tailrecursion.hoplon.span.call(null,G__238158,G__238159));
})();
var G__238142 = (function (){var G__238160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238161 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238160,G__238161) : tailrecursion.hoplon.span.call(null,G__238160,G__238161));
})();
var G__238143 = " (";
var G__238144 = (function (){var G__238162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238163 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238162,G__238163) : tailrecursion.hoplon.span.call(null,G__238162,G__238163));
})();
var G__238145 = (function (){var G__238164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238165 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238164,G__238165) : tailrecursion.hoplon.span.call(null,G__238164,G__238165));
})();
var G__238146 = " ";
var G__238147 = (function (){var G__238166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238167 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238166,G__238167) : tailrecursion.hoplon.span.call(null,G__238166,G__238167));
})();
var G__238148 = "))\n   (";
var G__238149 = (function (){var G__238168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238169 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238168,G__238169) : tailrecursion.hoplon.span.call(null,G__238168,G__238169));
})();
var G__238150 = (function (){var G__238170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238171 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238170,G__238171) : tailrecursion.hoplon.span.call(null,G__238170,G__238171));
})();
var G__238151 = " ";
var G__238152 = (function (){var G__238172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238173 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238172,G__238173) : tailrecursion.hoplon.span.call(null,G__238172,G__238173));
})();
var G__238153 = " ";
var G__238154 = (function (){var G__238174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238175 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238174,G__238175) : tailrecursion.hoplon.span.call(null,G__238174,G__238175));
})();
var G__238155 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__238137,G__238138,G__238139,G__238140,G__238141,G__238142,G__238143,G__238144,G__238145,G__238146,G__238147,G__238148,G__238149,G__238150,G__238151,G__238152,G__238153,G__238154,G__238155) : tailrecursion.hoplon.pre.call(null,G__238137,G__238138,G__238139,G__238140,G__238141,G__238142,G__238143,G__238144,G__238145,G__238146,G__238147,G__238148,G__238149,G__238150,G__238151,G__238152,G__238153,G__238154,G__238155));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__238135,G__238136) : tailrecursion.hoplon.div.call(null,G__238135,G__238136));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__238134) : tailrecursion.hoplon.div.call(null,G__238134));
})(),(function (){var G__238176 = cljs.core.PersistentArrayMap.EMPTY;
var G__238177 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["requires that the evaluation rule be applied to four different combinations. We can obtain a picture of this process by representing the combination in the form of a tree, as shown in figure 1.1. Each combination is represented by a node with branches corresponding to the operator and the operands of the combination stemming from it. The terminal nodes (that is, nodes with no branches stemming from them) represent either operators or numbers. Viewing evaluation in terms of the tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels. In general, we shall see that recursion is a very powerful technique for dealing with hierarchical, treelike objects. In fact, the ``percolate values upward",(function (){var G__238178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__238179 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238178,G__238179) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238178,G__238179));
})(),(function (){var G__238180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__238181 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238180,G__238181) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238180,G__238181));
})()," form of the evaluation rule is an example of a general kind of process known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["tree accumulation"], null)], 0)),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238176,G__238177) : tailrecursion.hoplon.markdown.para_node.call(null,G__238176,G__238177));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238062;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238061;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238060;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238059;
}})(),"",book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Tree representation, showing the value of each subcombination."], null)], 0)),(function (){var _STAR_references_STAR_238182 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238183 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_238184 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238185 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238186 = cljs.core.PersistentArrayMap.EMPTY;
var G__238187 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not combinations, but primitive expressions such as numerals, built-in operators, or other names. We take care of the primitive cases by stipulating that"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238186,G__238187) : tailrecursion.hoplon.markdown.para_node.call(null,G__238186,G__238187));
})(),(function (){var G__238188 = cljs.core.PersistentArrayMap.EMPTY;
var G__238189 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238190 = cljs.core.PersistentArrayMap.EMPTY;
var G__238191 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_238192 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238193 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of numerals are the numbers that they name,"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238193;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238192;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238190,G__238191) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238190,G__238191));
})(),(function (){var G__238194 = cljs.core.PersistentArrayMap.EMPTY;
var G__238195 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_238196 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238197 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of built-in operators are the machine  instruction sequences that carry out the corresponding operations, and"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238197;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238196;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238194,G__238195) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238194,G__238195));
})(),(function (){var G__238198 = cljs.core.PersistentArrayMap.EMPTY;
var G__238199 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_238200 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238201 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of other names are the objects associated with  those names in the environment."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238201;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238200;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238198,G__238199) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238198,G__238199));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__238188,G__238189) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__238188,G__238189));
})(),(function (){var G__238202 = cljs.core.PersistentArrayMap.EMPTY;
var G__238203 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We may regard the second rule as a special case of the third one by stipulating that symbols such as + and * are also included in the global environment, and are associated with the sequences of machine instructions that are their ",(function (){var G__238204 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238205 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["values."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238204,G__238205) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238204,G__238205));
})()," The key point to notice is the role of the environment in determining the meaning of the symbols in expressions. In an interactive language such as Lisp, it is meaningless to speak of the value of an expression such as ",(function (){var G__238206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+\nx 1)"], null);
var G__238207 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238206,G__238207) : tailrecursion.hoplon.markdown.code_node.call(null,G__238206,G__238207));
})()," without specifying any information about the environment that would provide a meaning for the symbol ",(function (){var G__238208 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__238209 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238208,G__238209) : tailrecursion.hoplon.markdown.code_node.call(null,G__238208,G__238209));
})()," (or even for the symbol ",(function (){var G__238210 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__238211 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238210,G__238211) : tailrecursion.hoplon.markdown.code_node.call(null,G__238210,G__238211));
})(),"). As we shall see in chapter 3, the general notion of the environment as providing a context in which evaluation takes place will play an important role in our understanding of program execution."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238202,G__238203) : tailrecursion.hoplon.markdown.para_node.call(null,G__238202,G__238203));
})(),(function (){var G__238212 = cljs.core.PersistentArrayMap.EMPTY;
var G__238213 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that the evaluation rule given above does not handle definitions. For instance, evaluating ",(function (){var G__238214 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x 3)"], null);
var G__238215 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238214,G__238215) : tailrecursion.hoplon.markdown.code_node.call(null,G__238214,G__238215));
})()," does not apply ",(function (){var G__238216 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__238217 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238216,G__238217) : tailrecursion.hoplon.markdown.code_node.call(null,G__238216,G__238217));
})()," to two arguments, one of which is the value of the symbol ",(function (){var G__238218 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__238219 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238218,G__238219) : tailrecursion.hoplon.markdown.code_node.call(null,G__238218,G__238219));
})()," and the other of which is 3, since the purpose of the define is precisely to associate ",(function (){var G__238220 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__238221 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238220,G__238221) : tailrecursion.hoplon.markdown.code_node.call(null,G__238220,G__238221));
})()," with a value. (That is, ",(function (){var G__238222 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x\n3)"], null);
var G__238223 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238222,G__238223) : tailrecursion.hoplon.markdown.code_node.call(null,G__238222,G__238223));
})()," is not a combination.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238212,G__238213) : tailrecursion.hoplon.markdown.para_node.call(null,G__238212,G__238213));
})(),(function (){var G__238224 = cljs.core.PersistentArrayMap.EMPTY;
var G__238225 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such exceptions to the general evaluation rule are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["special forms"], null)], 0)),". ",(function (){var G__238226 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__238227 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238226,G__238227) : tailrecursion.hoplon.markdown.code_node.call(null,G__238226,G__238227));
})()," is the only example of a special form that we have seen so far, but we will meet others shortly. Each special form has its own evaluation rule. The various kinds of expressions (each with its associated evaluation rule) constitute the syntax of the programming language. In comparison with most other programming languages, Lisp has a very simple syntax; that is, the evaluation rule for expressions can be described by a simple general rule together with specialized rules for a small number of special forms.",(function (){var G__238228 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__238229 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Special syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["syntactic sugar"], null)], 0)),", to use a phrase coined by Peter Landin. In comparison with users of other languages, Lisp programmers, as a rule, are less concerned with matters of syntax. (By contrast, examine any Pascal manual and notice how much of it is devoted to descriptions of syntax.) This disdain for syntax is due partly to the flexibility of Lisp, which makes it easy to change surface syntax, and partly to the observation that many ",(function (){var G__238230 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238231 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["convenient"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238230,G__238231) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238230,G__238231));
})()," syntactic constructs, which make the language less uniform, end up causing more trouble than they are worth when programs become large and complex. In the words of Alan Perlis, ",(function (){var G__238232 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238233 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Syntactic sugar causes cancer of the semicolon."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238232,G__238233) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238232,G__238233));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238228,G__238229) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238228,G__238229));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238224,G__238225) : tailrecursion.hoplon.markdown.para_node.call(null,G__238224,G__238225));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238185;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238184;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238183;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238182;
}})()], 0));
var G__237037 = "";
var G__237038 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Compound Procedures"], null),(function (){var _STAR_references_STAR_238234 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238235 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_238236 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238237 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238238 = cljs.core.PersistentArrayMap.EMPTY;
var G__238239 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have identified in Lisp some of the elements that must appear in any powerful programming language:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238238,G__238239) : tailrecursion.hoplon.markdown.para_node.call(null,G__238238,G__238239));
})(),(function (){var G__238240 = cljs.core.PersistentArrayMap.EMPTY;
var G__238241 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238242 = cljs.core.PersistentArrayMap.EMPTY;
var G__238243 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238244 = cljs.core.PersistentArrayMap.EMPTY;
var G__238245 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Numbers and arithmetic operations are primitive data and procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238244,G__238245) : tailrecursion.hoplon.markdown.para_node.call(null,G__238244,G__238245));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238242,G__238243) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238242,G__238243));
})(),(function (){var G__238246 = cljs.core.PersistentArrayMap.EMPTY;
var G__238247 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_238248 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238249 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238250 = cljs.core.PersistentArrayMap.EMPTY;
var G__238251 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Nesting of combinations provides a means of combining operations."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238250,G__238251) : tailrecursion.hoplon.markdown.para_node.call(null,G__238250,G__238251));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238249;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238248;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238246,G__238247) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238246,G__238247));
})(),(function (){var G__238252 = cljs.core.PersistentArrayMap.EMPTY;
var G__238253 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_238254 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238255 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238256 = cljs.core.PersistentArrayMap.EMPTY;
var G__238257 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Definitions that associate names with values provide a  limited means of abstraction."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238256,G__238257) : tailrecursion.hoplon.markdown.para_node.call(null,G__238256,G__238257));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238255;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238254;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238252,G__238253) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238252,G__238253));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__238240,G__238241) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__238240,G__238241));
})(),(function (){var G__238258 = cljs.core.PersistentArrayMap.EMPTY;
var G__238259 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we will learn about ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedure definitions"], null)], 0)),", a much more powerful abstraction technique by which a compound operation can be given a name and then referred to as a unit."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238258,G__238259) : tailrecursion.hoplon.markdown.para_node.call(null,G__238258,G__238259));
})(),(function (){var G__238260 = cljs.core.PersistentArrayMap.EMPTY;
var G__238261 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We begin by examining how to express the idea of ",(function (){var G__238262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238263 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["squaring."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238262,G__238263) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238262,G__238263));
})()," We might say, ",(function (){var G__238264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238265 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To square something, multiply it by itself."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238264,G__238265) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238264,G__238265));
})()," This is expressed in scheme as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238260,G__238261) : tailrecursion.hoplon.markdown.para_node.call(null,G__238260,G__238261));
})(),(function (){var G__238293 = (function (){var G__238294 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__238295 = (function (){var G__238296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__238297 = "(";
var G__238298 = (function (){var G__238309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__238310 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238309,G__238310) : tailrecursion.hoplon.span.call(null,G__238309,G__238310));
})();
var G__238299 = "(";
var G__238300 = (function (){var G__238311 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__238312 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238311,G__238312) : tailrecursion.hoplon.span.call(null,G__238311,G__238312));
})();
var G__238301 = " ";
var G__238302 = (function (){var G__238313 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238314 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238313,G__238314) : tailrecursion.hoplon.span.call(null,G__238313,G__238314));
})();
var G__238303 = ") (";
var G__238304 = (function (){var G__238315 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238316 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238315,G__238316) : tailrecursion.hoplon.span.call(null,G__238315,G__238316));
})();
var G__238305 = (function (){var G__238317 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238318 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238317,G__238318) : tailrecursion.hoplon.span.call(null,G__238317,G__238318));
})();
var G__238306 = " ";
var G__238307 = (function (){var G__238319 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238320 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238319,G__238320) : tailrecursion.hoplon.span.call(null,G__238319,G__238320));
})();
var G__238308 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__238296,G__238297,G__238298,G__238299,G__238300,G__238301,G__238302,G__238303,G__238304,G__238305,G__238306,G__238307,G__238308) : tailrecursion.hoplon.pre.call(null,G__238296,G__238297,G__238298,G__238299,G__238300,G__238301,G__238302,G__238303,G__238304,G__238305,G__238306,G__238307,G__238308));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__238294,G__238295) : tailrecursion.hoplon.div.call(null,G__238294,G__238295));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__238293) : tailrecursion.hoplon.div.call(null,G__238293));
})(),(function (){var G__238321 = cljs.core.PersistentArrayMap.EMPTY;
var G__238322 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["but in Clojure, we would write that as,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238321,G__238322) : tailrecursion.hoplon.markdown.para_node.call(null,G__238321,G__238322));
})(),(function (){var G__238349 = (function (){var G__238350 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__238351 = (function (){var G__238352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__238353 = "(";
var G__238354 = (function (){var G__238364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__238365 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238364,G__238365) : tailrecursion.hoplon.span.call(null,G__238364,G__238365));
})();
var G__238355 = (function (){var G__238366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238367 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238366,G__238367) : tailrecursion.hoplon.span.call(null,G__238366,G__238367));
})();
var G__238356 = " [";
var G__238357 = (function (){var G__238368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238369 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238368,G__238369) : tailrecursion.hoplon.span.call(null,G__238368,G__238369));
})();
var G__238358 = "] (";
var G__238359 = (function (){var G__238370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238371 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238370,G__238371) : tailrecursion.hoplon.span.call(null,G__238370,G__238371));
})();
var G__238360 = (function (){var G__238372 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238373 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238372,G__238373) : tailrecursion.hoplon.span.call(null,G__238372,G__238373));
})();
var G__238361 = " ";
var G__238362 = (function (){var G__238374 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238375 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238374,G__238375) : tailrecursion.hoplon.span.call(null,G__238374,G__238375));
})();
var G__238363 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__238352,G__238353,G__238354,G__238355,G__238356,G__238357,G__238358,G__238359,G__238360,G__238361,G__238362,G__238363) : tailrecursion.hoplon.pre.call(null,G__238352,G__238353,G__238354,G__238355,G__238356,G__238357,G__238358,G__238359,G__238360,G__238361,G__238362,G__238363));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__238350,G__238351) : tailrecursion.hoplon.div.call(null,G__238350,G__238351));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__238349) : tailrecursion.hoplon.div.call(null,G__238349));
})(),(function (){var G__238376 = cljs.core.PersistentArrayMap.EMPTY;
var G__238377 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note that Clojure differentiates between definining an atom and defining a procedure! We can understand this in the following way:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238376,G__238377) : tailrecursion.hoplon.markdown.para_node.call(null,G__238376,G__238377));
})(),(function (){var G__238457 = (function (){var G__238458 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__238459 = (function (){var G__238460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__238461 = "(";
var G__238462 = (function (){var G__238499 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__238500 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238499,G__238500) : tailrecursion.hoplon.span.call(null,G__238499,G__238500));
})();
var G__238463 = (function (){var G__238501 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238502 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238501,G__238502) : tailrecursion.hoplon.span.call(null,G__238501,G__238502));
})();
var G__238464 = "      [";
var G__238465 = (function (){var G__238503 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238504 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238503,G__238504) : tailrecursion.hoplon.span.call(null,G__238503,G__238504));
})();
var G__238466 = "]      (";
var G__238467 = (function (){var G__238505 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238506 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238505,G__238506) : tailrecursion.hoplon.span.call(null,G__238505,G__238506));
})();
var G__238468 = "     ";
var G__238469 = (function (){var G__238507 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238508 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238507,G__238508) : tailrecursion.hoplon.span.call(null,G__238507,G__238508));
})();
var G__238470 = "      ";
var G__238471 = (function (){var G__238509 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238510 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238509,G__238510) : tailrecursion.hoplon.span.call(null,G__238509,G__238510));
})();
var G__238472 = "))\n  ";
var G__238473 = (function (){var G__238511 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__238512 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238511,G__238512) : tailrecursion.hoplon.span.call(null,G__238511,G__238512));
})();
var G__238474 = "    ";
var G__238475 = (function (){var G__238513 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__238514 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238513,G__238514) : tailrecursion.hoplon.span.call(null,G__238513,G__238514));
})();
var G__238476 = "          ";
var G__238477 = (function (){var G__238515 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__238516 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238515,G__238516) : tailrecursion.hoplon.span.call(null,G__238515,G__238516));
})();
var G__238478 = "        ";
var G__238479 = (function (){var G__238517 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__238518 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238517,G__238518) : tailrecursion.hoplon.span.call(null,G__238517,G__238518));
})();
var G__238480 = "     ";
var G__238481 = (function (){var G__238519 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__238520 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238519,G__238520) : tailrecursion.hoplon.span.call(null,G__238519,G__238520));
})();
var G__238482 = "      ";
var G__238483 = (function (){var G__238521 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__238522 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238521,G__238522) : tailrecursion.hoplon.span.call(null,G__238521,G__238522));
})();
var G__238484 = "\n ";
var G__238485 = (function (){var G__238523 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238524 = "to";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238523,G__238524) : tailrecursion.hoplon.span.call(null,G__238523,G__238524));
})();
var G__238486 = "  ";
var G__238487 = (function (){var G__238525 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #BA2121"], null);
var G__238526 = "\"square\"";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238525,G__238526) : tailrecursion.hoplon.span.call(null,G__238525,G__238526));
})();
var G__238488 = " ";
var G__238489 = (function (){var G__238527 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238528 = "something";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238527,G__238528) : tailrecursion.hoplon.span.call(null,G__238527,G__238528));
})();
var G__238490 = ", ";
var G__238491 = (function (){var G__238529 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238530 = "multiply";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238529,G__238530) : tailrecursion.hoplon.span.call(null,G__238529,G__238530));
})();
var G__238492 = " ";
var G__238493 = (function (){var G__238531 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238532 = "it";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238531,G__238532) : tailrecursion.hoplon.span.call(null,G__238531,G__238532));
})();
var G__238494 = " ";
var G__238495 = (function (){var G__238533 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238534 = "by";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238533,G__238534) : tailrecursion.hoplon.span.call(null,G__238533,G__238534));
})();
var G__238496 = " ";
var G__238497 = (function (){var G__238535 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238536 = "itself.";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238535,G__238536) : tailrecursion.hoplon.span.call(null,G__238535,G__238536));
})();
var G__238498 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__238460,G__238461,G__238462,G__238463,G__238464,G__238465,G__238466,G__238467,G__238468,G__238469,G__238470,G__238471,G__238472,G__238473,G__238474,G__238475,G__238476,G__238477,G__238478,G__238479,G__238480,G__238481,G__238482,G__238483,G__238484,G__238485,G__238486,G__238487,G__238488,G__238489,G__238490,G__238491,G__238492,G__238493,G__238494,G__238495,G__238496,G__238497,G__238498) : tailrecursion.hoplon.pre.call(null,G__238460,G__238461,G__238462,G__238463,G__238464,G__238465,G__238466,G__238467,G__238468,G__238469,G__238470,G__238471,G__238472,G__238473,G__238474,G__238475,G__238476,G__238477,G__238478,G__238479,G__238480,G__238481,G__238482,G__238483,G__238484,G__238485,G__238486,G__238487,G__238488,G__238489,G__238490,G__238491,G__238492,G__238493,G__238494,G__238495,G__238496,G__238497,G__238498));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__238458,G__238459) : tailrecursion.hoplon.div.call(null,G__238458,G__238459));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__238457) : tailrecursion.hoplon.div.call(null,G__238457));
})(),(function (){var G__238537 = cljs.core.PersistentArrayMap.EMPTY;
var G__238538 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have here a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["compound procedure"], null)], 0)),", which has been given the name ",(function (){var G__238539 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__238540 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238539,G__238540) : tailrecursion.hoplon.markdown.code_node.call(null,G__238539,G__238540));
})(),". The procedure represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, x, which plays the same role that a pronoun plays in natural language. Evaluating the definition creates this compound procedure and associates it with the name square.",(function (){var G__238541 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__238542 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that there are two different operations being combined here: we are creating the procedure, and we are giving it the name ",(function (){var G__238543 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__238544 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238543,G__238544) : tailrecursion.hoplon.markdown.code_node.call(null,G__238543,G__238544));
})(),". It is possible, indeed important, to be able to separate these two notions ",(function (){var G__238545 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__238546 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238545,G__238546) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238545,G__238546));
})()," to create procedures without naming them, and to give names to procedures that have already been created. We will see how to do this in section 1.3.2."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238541,G__238542) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238541,G__238542));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238537,G__238538) : tailrecursion.hoplon.markdown.para_node.call(null,G__238537,G__238538));
})(),(function (){var G__238547 = cljs.core.PersistentArrayMap.EMPTY;
var G__238548 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a procedure definition is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238547,G__238548) : tailrecursion.hoplon.markdown.para_node.call(null,G__238547,G__238548));
})(),(function (){var G__238572 = (function (){var G__238573 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__238574 = (function (){var G__238575 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__238576 = "(";
var G__238577 = (function (){var G__238586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__238587 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238586,G__238587) : tailrecursion.hoplon.span.call(null,G__238586,G__238587));
})();
var G__238578 = (function (){var G__238588 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238589 = "<name>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238588,G__238589) : tailrecursion.hoplon.span.call(null,G__238588,G__238589));
})();
var G__238579 = " [";
var G__238580 = (function (){var G__238590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238591 = "<formal";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238590,G__238591) : tailrecursion.hoplon.span.call(null,G__238590,G__238591));
})();
var G__238581 = " ";
var G__238582 = (function (){var G__238592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238593 = "parameters>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238592,G__238593) : tailrecursion.hoplon.span.call(null,G__238592,G__238593));
})();
var G__238583 = "] ";
var G__238584 = (function (){var G__238594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238595 = "<body>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238594,G__238595) : tailrecursion.hoplon.span.call(null,G__238594,G__238595));
})();
var G__238585 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__238575,G__238576,G__238577,G__238578,G__238579,G__238580,G__238581,G__238582,G__238583,G__238584,G__238585) : tailrecursion.hoplon.pre.call(null,G__238575,G__238576,G__238577,G__238578,G__238579,G__238580,G__238581,G__238582,G__238583,G__238584,G__238585));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__238573,G__238574) : tailrecursion.hoplon.div.call(null,G__238573,G__238574));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__238572) : tailrecursion.hoplon.div.call(null,G__238572));
})(),(function (){var G__238596 = cljs.core.PersistentArrayMap.EMPTY;
var G__238597 = new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Just in case you end up reading from the original SICP, let",(function (){var G__238598 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__238599 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238598,G__238599) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238598,G__238599));
})(),"s take a moment to note the differences between the Scheme method of defining compound procedures, and the Clojure method. The Scheme method ",(function (){var G__238600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(define\n(<name> <formal parameters>) <body>)"], null);
var G__238601 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238600,G__238601) : tailrecursion.hoplon.markdown.code_node.call(null,G__238600,G__238601));
})()," is very straight forward: it defines the first form to be the second. In this way, we can see ",(function (){var G__238602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__238603 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238602,G__238603) : tailrecursion.hoplon.markdown.code_node.call(null,G__238602,G__238603));
})()," to be a procedure that takes two arguments. The procedure ",(function (){var G__238604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__238605 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238604,G__238605) : tailrecursion.hoplon.markdown.code_node.call(null,G__238604,G__238605));
})()," in Clojure takes three arguments: the first being the name of the intended procedure (in our example ",(function (){var G__238606 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238607 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238608 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__238609 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238608,G__238609) : tailrecursion.hoplon.markdown.code_node.call(null,G__238608,G__238609));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238606,G__238607) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238606,G__238607));
})(),"), the second is a list of all the arguments (we",(function (){var G__238610 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__238611 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238610,G__238611) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238610,G__238611));
})(),"ll cover lists later, but in our example it was ",(function (){var G__238612 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[x]"], null);
var G__238613 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238612,G__238613) : tailrecursion.hoplon.markdown.code_node.call(null,G__238612,G__238613));
})(),"), and the third is the intended procedure or the body (in our example it was ",(function (){var G__238614 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* x x)"], null);
var G__238615 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238614,G__238615) : tailrecursion.hoplon.markdown.code_node.call(null,G__238614,G__238615));
})(),")."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238596,G__238597) : tailrecursion.hoplon.markdown.para_node.call(null,G__238596,G__238597));
})(),(function (){var G__238616 = cljs.core.PersistentArrayMap.EMPTY;
var G__238617 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The <name> is a symbol to be associated with the procedure definition in the environment.",(function (){var G__238618 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__238619 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, we will describe the general syntax of expressions by using italic symbols delimited by angle brackets ",(function (){var G__238620 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__238621 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238620,G__238621) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238620,G__238621));
})()," e.g., ",(function (){var G__238622 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<name>"], null);
var G__238623 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238622,G__238623) : tailrecursion.hoplon.markdown.code_node.call(null,G__238622,G__238623));
})()," ",(function (){var G__238624 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__238625 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238624,G__238625) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238624,G__238625));
})()," to denote the ",(function (){var G__238626 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238627 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["slots"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238626,G__238627) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238626,G__238627));
})()," in the expression to be filled in when such an expression is actually used."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238618,G__238619) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238618,G__238619));
})()," The <formal\nparameters> are the names used within the body of the procedure to refer to the corresponding arguments of the procedure. The <body> is an expression that will yield the value of the procedure application when the formal parameters are replaced by the actual arguments to which the procedure is applied.",(function (){var G__238628 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__238629 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["More generally, the body of the procedure can be a sequence of expressions. In this case, the interpreter evaluates each expression in the sequence in turn and returns the value of the final expression as the value of the procedure application."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238628,G__238629) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238628,G__238629));
})()," In Scheme, the <name> and the <formal parameters> are grouped within parentheses, just as they would be in an actual call to the procedure being defined, but in Clojure they are not."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238616,G__238617) : tailrecursion.hoplon.markdown.para_node.call(null,G__238616,G__238617));
})(),(function (){var G__238630 = cljs.core.PersistentArrayMap.EMPTY;
var G__238631 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Having defined square, we can now use it:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238630,G__238631) : tailrecursion.hoplon.markdown.para_node.call(null,G__238630,G__238631));
})(),(function (){var G__238632 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square 21)\n441\n") : tailrecursion.hoplon.code.call(null,"(square 21)\n441\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238632) : tailrecursion.hoplon.pre.call(null,G__238632));
})(),(function (){var G__238633 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (+ 2 5))\n49\n") : tailrecursion.hoplon.code.call(null,"(square (+ 2 5))\n49\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238633) : tailrecursion.hoplon.pre.call(null,G__238633));
})(),(function (){var G__238634 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (square 3))\n81\n") : tailrecursion.hoplon.code.call(null,"(square (square 3))\n81\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238634) : tailrecursion.hoplon.pre.call(null,G__238634));
})(),(function (){var G__238635 = cljs.core.PersistentArrayMap.EMPTY;
var G__238636 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can also use square as a building block in defining other procedures. For example, \\(x^2 + y^2\\) can be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238635,G__238636) : tailrecursion.hoplon.markdown.para_node.call(null,G__238635,G__238636));
})(),(function (){var G__238637 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square x) (square y))\n") : tailrecursion.hoplon.code.call(null,"(+ (square x) (square y))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238637) : tailrecursion.hoplon.pre.call(null,G__238637));
})(),(function (){var G__238638 = cljs.core.PersistentArrayMap.EMPTY;
var G__238639 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can easily define a procedure sum-of-squares that, given any two numbers as arguments, produces the sum of their squares:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238638,G__238639) : tailrecursion.hoplon.markdown.para_node.call(null,G__238638,G__238639));
})(),(function (){var G__238679 = (function (){var G__238680 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__238681 = (function (){var G__238682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__238683 = "(";
var G__238684 = (function (){var G__238701 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__238702 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238701,G__238702) : tailrecursion.hoplon.span.call(null,G__238701,G__238702));
})();
var G__238685 = (function (){var G__238703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238704 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238703,G__238704) : tailrecursion.hoplon.span.call(null,G__238703,G__238704));
})();
var G__238686 = " [";
var G__238687 = (function (){var G__238705 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238706 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238705,G__238706) : tailrecursion.hoplon.span.call(null,G__238705,G__238706));
})();
var G__238688 = " ";
var G__238689 = (function (){var G__238707 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238708 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238707,G__238708) : tailrecursion.hoplon.span.call(null,G__238707,G__238708));
})();
var G__238690 = "]\n  (";
var G__238691 = (function (){var G__238709 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238710 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238709,G__238710) : tailrecursion.hoplon.span.call(null,G__238709,G__238710));
})();
var G__238692 = "(";
var G__238693 = (function (){var G__238711 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__238712 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238711,G__238712) : tailrecursion.hoplon.span.call(null,G__238711,G__238712));
})();
var G__238694 = " ";
var G__238695 = (function (){var G__238713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238714 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238713,G__238714) : tailrecursion.hoplon.span.call(null,G__238713,G__238714));
})();
var G__238696 = ") (";
var G__238697 = (function (){var G__238715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__238716 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238715,G__238716) : tailrecursion.hoplon.span.call(null,G__238715,G__238716));
})();
var G__238698 = " ";
var G__238699 = (function (){var G__238717 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238718 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238717,G__238718) : tailrecursion.hoplon.span.call(null,G__238717,G__238718));
})();
var G__238700 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__238682,G__238683,G__238684,G__238685,G__238686,G__238687,G__238688,G__238689,G__238690,G__238691,G__238692,G__238693,G__238694,G__238695,G__238696,G__238697,G__238698,G__238699,G__238700) : tailrecursion.hoplon.pre.call(null,G__238682,G__238683,G__238684,G__238685,G__238686,G__238687,G__238688,G__238689,G__238690,G__238691,G__238692,G__238693,G__238694,G__238695,G__238696,G__238697,G__238698,G__238699,G__238700));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__238680,G__238681) : tailrecursion.hoplon.div.call(null,G__238680,G__238681));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__238679) : tailrecursion.hoplon.div.call(null,G__238679));
})(),(function (){var G__238719 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares 3 4)\n25\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares 3 4)\n25\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238719) : tailrecursion.hoplon.pre.call(null,G__238719));
})(),(function (){var G__238720 = cljs.core.PersistentArrayMap.EMPTY;
var G__238721 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we can use sum-of-squares as a building block in constructing further procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238720,G__238721) : tailrecursion.hoplon.markdown.para_node.call(null,G__238720,G__238721));
})(),(function (){var G__238763 = (function (){var G__238764 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__238765 = (function (){var G__238766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__238767 = "(";
var G__238768 = (function (){var G__238785 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__238786 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238785,G__238786) : tailrecursion.hoplon.span.call(null,G__238785,G__238786));
})();
var G__238769 = (function (){var G__238787 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238788 = "f";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238787,G__238788) : tailrecursion.hoplon.span.call(null,G__238787,G__238788));
})();
var G__238770 = " [";
var G__238771 = (function (){var G__238789 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238790 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238789,G__238790) : tailrecursion.hoplon.span.call(null,G__238789,G__238790));
})();
var G__238772 = "]\n  (";
var G__238773 = (function (){var G__238791 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__238792 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238791,G__238792) : tailrecursion.hoplon.span.call(null,G__238791,G__238792));
})();
var G__238774 = " (";
var G__238775 = (function (){var G__238793 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238794 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238793,G__238794) : tailrecursion.hoplon.span.call(null,G__238793,G__238794));
})();
var G__238776 = (function (){var G__238795 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238796 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238795,G__238796) : tailrecursion.hoplon.span.call(null,G__238795,G__238796));
})();
var G__238777 = " ";
var G__238778 = (function (){var G__238797 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238798 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238797,G__238798) : tailrecursion.hoplon.span.call(null,G__238797,G__238798));
})();
var G__238779 = ") (";
var G__238780 = (function (){var G__238799 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__238800 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238799,G__238800) : tailrecursion.hoplon.span.call(null,G__238799,G__238800));
})();
var G__238781 = (function (){var G__238801 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__238802 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238801,G__238802) : tailrecursion.hoplon.span.call(null,G__238801,G__238802));
})();
var G__238782 = " ";
var G__238783 = (function (){var G__238803 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__238804 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__238803,G__238804) : tailrecursion.hoplon.span.call(null,G__238803,G__238804));
})();
var G__238784 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__238766,G__238767,G__238768,G__238769,G__238770,G__238771,G__238772,G__238773,G__238774,G__238775,G__238776,G__238777,G__238778,G__238779,G__238780,G__238781,G__238782,G__238783,G__238784) : tailrecursion.hoplon.pre.call(null,G__238766,G__238767,G__238768,G__238769,G__238770,G__238771,G__238772,G__238773,G__238774,G__238775,G__238776,G__238777,G__238778,G__238779,G__238780,G__238781,G__238782,G__238783,G__238784));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__238764,G__238765) : tailrecursion.hoplon.div.call(null,G__238764,G__238765));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__238763) : tailrecursion.hoplon.div.call(null,G__238763));
})(),(function (){var G__238805 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n136\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238805) : tailrecursion.hoplon.pre.call(null,G__238805));
})(),(function (){var G__238806 = cljs.core.PersistentArrayMap.EMPTY;
var G__238807 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Compound procedures are used in exactly the same way as primitive procedures. Indeed, one could not tell by looking at the definition of ",(function (){var G__238808 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__238809 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238808,G__238809) : tailrecursion.hoplon.markdown.code_node.call(null,G__238808,G__238809));
})()," given above whether ",(function (){var G__238810 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__238811 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238810,G__238811) : tailrecursion.hoplon.markdown.code_node.call(null,G__238810,G__238811));
})()," was built into the interpreter, like ",(function (){var G__238812 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__238813 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238812,G__238813) : tailrecursion.hoplon.markdown.code_node.call(null,G__238812,G__238813));
})()," and ",(function (){var G__238814 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__238815 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238814,G__238815) : tailrecursion.hoplon.markdown.code_node.call(null,G__238814,G__238815));
})(),", or defined as a compound procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238806,G__238807) : tailrecursion.hoplon.markdown.para_node.call(null,G__238806,G__238807));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238237;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238236;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238235;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238234;
}})()], 0));
var G__237039 = "";
var G__237040 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Substitution Model for Procedure Application"], null),(function (){var _STAR_references_STAR_238816 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238817 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_238818 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238819 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238820 = cljs.core.PersistentArrayMap.EMPTY;
var G__238821 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination whose operator names a compound procedure, the interpreter follows much the same process as for combinations whose operators name primitive procedures, which we described in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),". That is, the interpreter evaluates the elements of the combination and applies the procedure (which is the value of the operator of the combination) to the arguments (which are the values of the operands of the combination)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238820,G__238821) : tailrecursion.hoplon.markdown.para_node.call(null,G__238820,G__238821));
})(),(function (){var G__238822 = cljs.core.PersistentArrayMap.EMPTY;
var G__238823 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can assume that the mechanism for applying primitive procedures to arguments is built into the interpreter. For compound procedures, the application process is as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238822,G__238823) : tailrecursion.hoplon.markdown.para_node.call(null,G__238822,G__238823));
})(),(function (){var G__238824 = cljs.core.PersistentArrayMap.EMPTY;
var G__238825 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238826 = cljs.core.PersistentArrayMap.EMPTY;
var G__238827 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_238828 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238829 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238829;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238828;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238826,G__238827) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238826,G__238827));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__238824,G__238825) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__238824,G__238825));
})(),(function (){var G__238830 = cljs.core.PersistentArrayMap.EMPTY;
var G__238831 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To illustrate this process, let",(function (){var G__238832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__238833 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238832,G__238833) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238832,G__238833));
})(),"s evaluate the combination"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238830,G__238831) : tailrecursion.hoplon.markdown.para_node.call(null,G__238830,G__238831));
})(),(function (){var G__238834 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238834) : tailrecursion.hoplon.pre.call(null,G__238834));
})(),(function (){var G__238835 = cljs.core.PersistentArrayMap.EMPTY;
var G__238836 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where f is the procedure defined in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.4"], null)], 0)),". We begin by retrieving the body of f:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238835,G__238836) : tailrecursion.hoplon.markdown.para_node.call(null,G__238835,G__238836));
})(),(function (){var G__238837 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ a 1) (* a 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ a 1) (* a 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238837) : tailrecursion.hoplon.pre.call(null,G__238837));
})(),(function (){var G__238838 = cljs.core.PersistentArrayMap.EMPTY;
var G__238839 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then we replace the formal parameter a by the argument 5:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238838,G__238839) : tailrecursion.hoplon.markdown.para_node.call(null,G__238838,G__238839));
})(),(function (){var G__238840 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238840) : tailrecursion.hoplon.pre.call(null,G__238840));
})(),(function (){var G__238841 = cljs.core.PersistentArrayMap.EMPTY;
var G__238842 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus the problem reduces to the evaluation of a combination with two operands and an operator ",(function (){var G__238843 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__238844 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238843,G__238844) : tailrecursion.hoplon.markdown.code_node.call(null,G__238843,G__238844));
})(),". Evaluating this combination involves three subproblems. We must evaluate the operator to get the procedure to be applied, and we must evaluate the operands to get the arguments. Now ",(function (){var G__238845 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__238846 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238845,G__238846) : tailrecursion.hoplon.markdown.code_node.call(null,G__238845,G__238846));
})()," produces 6 and ",(function (){var G__238847 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__238848 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238847,G__238848) : tailrecursion.hoplon.markdown.code_node.call(null,G__238847,G__238848));
})()," produces 10, so we must apply the ",(function (){var G__238849 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__238850 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238849,G__238850) : tailrecursion.hoplon.markdown.code_node.call(null,G__238849,G__238850));
})()," procedure to 6 and 10. These values are substituted for the formal parameters ",(function (){var G__238851 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__238852 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238851,G__238852) : tailrecursion.hoplon.markdown.code_node.call(null,G__238851,G__238852));
})()," and ",(function (){var G__238853 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"y"], null);
var G__238854 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238853,G__238854) : tailrecursion.hoplon.markdown.code_node.call(null,G__238853,G__238854));
})()," in the body of ",(function (){var G__238855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__238856 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238855,G__238856) : tailrecursion.hoplon.markdown.code_node.call(null,G__238855,G__238856));
})(),", reducing the expression to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238841,G__238842) : tailrecursion.hoplon.markdown.para_node.call(null,G__238841,G__238842));
})(),(function (){var G__238857 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square 6) (square 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (square 6) (square 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238857) : tailrecursion.hoplon.pre.call(null,G__238857));
})(),(function (){var G__238858 = cljs.core.PersistentArrayMap.EMPTY;
var G__238859 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we use the definition of ",(function (){var G__238860 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__238861 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238860,G__238861) : tailrecursion.hoplon.markdown.code_node.call(null,G__238860,G__238861));
})(),", this reduces to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238858,G__238859) : tailrecursion.hoplon.markdown.para_node.call(null,G__238858,G__238859));
})(),(function (){var G__238862 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238862) : tailrecursion.hoplon.pre.call(null,G__238862));
})(),(function (){var G__238863 = cljs.core.PersistentArrayMap.EMPTY;
var G__238864 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which reduces by multiplication to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238863,G__238864) : tailrecursion.hoplon.markdown.para_node.call(null,G__238863,G__238864));
})(),(function (){var G__238865 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ 36 100)\n") : tailrecursion.hoplon.code.call(null,"(+ 36 100)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238865) : tailrecursion.hoplon.pre.call(null,G__238865));
})(),(function (){var G__238866 = cljs.core.PersistentArrayMap.EMPTY;
var G__238867 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and finally to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238866,G__238867) : tailrecursion.hoplon.markdown.para_node.call(null,G__238866,G__238867));
})(),(function (){var G__238868 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("136\n") : tailrecursion.hoplon.code.call(null,"136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238868) : tailrecursion.hoplon.pre.call(null,G__238868));
})(),(function (){var G__238869 = cljs.core.PersistentArrayMap.EMPTY;
var G__238870 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The process we have just described is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution model"], null)], 0))," for procedure application. It can be taken as a model that determines the ",(function (){var G__238871 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238872 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["meaning"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238871,G__238872) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238871,G__238872));
})()," of procedure application, insofar as the procedures in this chapter are concerned. However, there are two points that should be stressed:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238869,G__238870) : tailrecursion.hoplon.markdown.para_node.call(null,G__238869,G__238870));
})(),(function (){var G__238873 = cljs.core.PersistentArrayMap.EMPTY;
var G__238874 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238875 = cljs.core.PersistentArrayMap.EMPTY;
var G__238876 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238877 = cljs.core.PersistentArrayMap.EMPTY;
var G__238878 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The purpose of the substitution is to help us think about procedure application, not to provide a description of how the interpreter really works. Typical interpreters do not evaluate procedure applications by manipulating the text of a procedure to substitute values for the formal parameters. In practice, the ",(function (){var G__238879 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238880 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238879,G__238880) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238879,G__238880));
})()," is accomplished by using a local environment for the formal parameters. We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238877,G__238878) : tailrecursion.hoplon.markdown.para_node.call(null,G__238877,G__238878));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238875,G__238876) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238875,G__238876));
})(),(function (){var G__238881 = cljs.core.PersistentArrayMap.EMPTY;
var G__238882 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_238883 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238884 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238885 = cljs.core.PersistentArrayMap.EMPTY;
var G__238886 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Over the course of this book, we will present a sequence of increasingly elaborate models of how interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. The substitution model is only the first of these models ",(function (){var G__238887 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__238888 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238887,G__238888) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238887,G__238888));
})()," a way to get started thinking formally about the evaluation process. In general, when modeling phenomena in science and engineering, we begin with simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate and must be replaced by more refined models. The substitution model is no exception. In particular, when we address in chapter 3 the use of procedures with ",(function (){var G__238889 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238890 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mutable data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238889,G__238890) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238889,G__238890));
})(),", we will see that the substitution model breaks down and must be replaced by a more complicated model of procedure application.",(function (){var G__238891 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__238892 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process. The problem arises from the possibility of confusion between the names used for the formal parameters of a procedure and the (possibly identical) names used in the expressions to which the procedure may be applied. Indeed, there is a long history of erroneous definitions of substitution in the literature of logic and programming semantics. See Stoy 1977 for a careful discussion of substitution."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238891,G__238892) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238891,G__238892));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238885,G__238886) : tailrecursion.hoplon.markdown.para_node.call(null,G__238885,G__238886));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238884;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238883;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__238881,G__238882) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__238881,G__238882));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__238873,G__238874) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__238873,G__238874));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238819;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238818;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238817;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238816;
}})()], 0));
var G__237041 = "";
var G__237042 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Applicative Order vs Normal Order"], null),(function (){var _STAR_references_STAR_238893 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238894 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_238895 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238896 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238897 = cljs.core.PersistentArrayMap.EMPTY;
var G__238898 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["According to the description of evaluation given in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),", the interpreter first evaluates the operator and operands and then applies the resulting procedure to the resulting arguments. This is not the only way to perform evaluation. An alternative evaluation model would not evaluate the operands until their values were needed. Instead it would first substitute operand expressions for parameters until it obtained an expression involving only primitive operators, and would then perform the evaluation. If we used this method, the evaluation of"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238897,G__238898) : tailrecursion.hoplon.markdown.para_node.call(null,G__238897,G__238898));
})(),(function (){var G__238899 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238899) : tailrecursion.hoplon.pre.call(null,G__238899));
})(),(function (){var G__238900 = cljs.core.PersistentArrayMap.EMPTY;
var G__238901 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["would proceed according to the sequence of expansions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238900,G__238901) : tailrecursion.hoplon.markdown.para_node.call(null,G__238900,G__238901));
})(),(function (){var G__238902 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238902) : tailrecursion.hoplon.pre.call(null,G__238902));
})(),(function (){var G__238903 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (square (+ 5 1))      (square (* 5 2))  )\n") : tailrecursion.hoplon.code.call(null,"(+    (square (+ 5 1))      (square (* 5 2))  )\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238903) : tailrecursion.hoplon.pre.call(null,G__238903));
})(),(function (){var G__238904 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n") : tailrecursion.hoplon.code.call(null,"(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238904) : tailrecursion.hoplon.pre.call(null,G__238904));
})(),(function (){var G__238905 = cljs.core.PersistentArrayMap.EMPTY;
var G__238906 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["followed by the reductions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238905,G__238906) : tailrecursion.hoplon.markdown.para_node.call(null,G__238905,G__238906));
})(),(function (){var G__238907 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238907) : tailrecursion.hoplon.pre.call(null,G__238907));
})(),(function (){var G__238908 = cljs.core.PersistentArrayMap.EMPTY;
var G__238909 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This gives the same answer as our previous evaluation model, but the process is different. In particular, the evaluations of ",(function (){var G__238910 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__238911 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238910,G__238911) : tailrecursion.hoplon.markdown.code_node.call(null,G__238910,G__238911));
})()," and ",(function (){var G__238912 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__238913 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238912,G__238913) : tailrecursion.hoplon.markdown.code_node.call(null,G__238912,G__238913));
})()," are each performed twice here, corresponding to the reduction of the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238908,G__238909) : tailrecursion.hoplon.markdown.para_node.call(null,G__238908,G__238909));
})(),(function (){var G__238914 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(* x x)\n") : tailrecursion.hoplon.code.call(null,"(* x x)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238914) : tailrecursion.hoplon.pre.call(null,G__238914));
})(),(function (){var G__238915 = cljs.core.PersistentArrayMap.EMPTY;
var G__238916 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["with ",(function (){var G__238917 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__238918 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238917,G__238918) : tailrecursion.hoplon.markdown.code_node.call(null,G__238917,G__238918));
})()," replaced respectively by ",(function (){var G__238919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__238920 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238919,G__238920) : tailrecursion.hoplon.markdown.code_node.call(null,G__238919,G__238920));
})()," and ",(function (){var G__238921 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__238922 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238921,G__238922) : tailrecursion.hoplon.markdown.code_node.call(null,G__238921,G__238922));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238915,G__238916) : tailrecursion.hoplon.markdown.para_node.call(null,G__238915,G__238916));
})(),(function (){var G__238923 = cljs.core.PersistentArrayMap.EMPTY;
var G__238924 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This alternative ",(function (){var G__238925 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238926 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["fully expand and then reduce"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238925,G__238926) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238925,G__238926));
})()," evaluation method is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["normal-order evaluation"], null)], 0)),", in contrast to the ",(function (){var G__238927 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238928 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["evaluate the arguments and then apply"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238927,G__238928) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238927,G__238928));
})()," method that the interpreter actually uses, which is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["applicative-order evaluation"], null)], 0)),". It can be shown that, for procedure applications that can be modeled using substitution (including all the procedures in the first two chapters of this book) and that yield legitimate values, normal-order and applicative-order evaluation produce the same value. (See ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#q1.5",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.5"], null)], 0))," for an instance of an ",(function (){var G__238929 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238930 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["illegitimate"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238929,G__238930) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238929,G__238930));
})()," value where normal-order and applicative-order evaluation do not give the same result.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238923,G__238924) : tailrecursion.hoplon.markdown.para_node.call(null,G__238923,G__238924));
})(),(function (){var G__238931 = cljs.core.PersistentArrayMap.EMPTY;
var G__238932 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp uses applicative-order evaluation, partly because of the additional efficiency obtained from avoiding multiple evaluations of expressions such as those illustrated with ",(function (){var G__238933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__238934 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238933,G__238934) : tailrecursion.hoplon.markdown.code_node.call(null,G__238933,G__238934));
})()," and ",(function (){var G__238935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__238936 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238935,G__238936) : tailrecursion.hoplon.markdown.code_node.call(null,G__238935,G__238936));
})()," above and, more significantly, because normal-order evaluation becomes much more complicated to deal with when we leave the realm of procedures that can be modeled by substitution. On the other hand, normal-order evaluation can be an extremely valuable tool, and we will investigate some of its implications in chapters 3 and 4.",(function (){var G__238937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__238938 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In chapter 3 we will introduce ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["stream processing"], null)], 0)),", which is a way of handling apparently ",(function (){var G__238939 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238940 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["infinite"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238939,G__238940) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238939,G__238940));
})()," data structures by incorporating a limited form of normal-order evaluation. In section 4.2 we will modify the Scheme interpreter to produce a normal-order variant of Scheme."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238937,G__238938) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238937,G__238938));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238931,G__238932) : tailrecursion.hoplon.markdown.para_node.call(null,G__238931,G__238932));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238896;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238895;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238894;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238893;
}})()], 0));
var G__237043 = "";
var G__237044 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Conditional Expressions and Predicates"], null),(function (){var _STAR_references_STAR_238941 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238942 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_238943 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_238944 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 31, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238945 = cljs.core.PersistentArrayMap.EMPTY;
var G__238946 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The expressive power of the class of procedures that we can define at this point is very limited, because we have no way to make tests and to perform different operations depending on the result of a test. For instance, we cannot define a procedure that computes the absolute value of a number by testing whether the number is positive, negative, or zero and taking different actions in the different cases according to the rule"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238945,G__238946) : tailrecursion.hoplon.markdown.para_node.call(null,G__238945,G__238946));
})(),(function (){var G__238947 = cljs.core.PersistentArrayMap.EMPTY;
var G__238948 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$| x |= \\begin{cases} x &\\mbox{if } x > 0 \\cr 0 &\\mbox{if } x = 0 \\cr -x &\\mbox{if } x < 0 \\end{cases}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238947,G__238948) : tailrecursion.hoplon.markdown.para_node.call(null,G__238947,G__238948));
})(),(function (){var G__238949 = cljs.core.PersistentArrayMap.EMPTY;
var G__238950 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This construct is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["case analysis"], null)], 0)),", and there is a special form in Lisp for notating such a case analysis. It is called ",(function (){var G__238951 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__238952 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238951,G__238952) : tailrecursion.hoplon.markdown.code_node.call(null,G__238951,G__238952));
})()," (which stands for ",(function (){var G__238953 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238954 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["conditional"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238953,G__238954) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238953,G__238954));
})(),"), and it is used as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238949,G__238950) : tailrecursion.hoplon.markdown.para_node.call(null,G__238949,G__238950));
})(),(function (){var G__238955 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n") : tailrecursion.hoplon.code.call(null,"(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238955) : tailrecursion.hoplon.pre.call(null,G__238955));
})(),(function (){var G__238956 = cljs.core.PersistentArrayMap.EMPTY;
var G__238957 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a conditional expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238956,G__238957) : tailrecursion.hoplon.markdown.para_node.call(null,G__238956,G__238957));
})(),(function (){var G__238958 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n") : tailrecursion.hoplon.code.call(null,"(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__238958) : tailrecursion.hoplon.pre.call(null,G__238958));
})(),(function (){var G__238959 = cljs.core.PersistentArrayMap.EMPTY;
var G__238960 = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consisting of the symbol cond followed by pairs of expressions <p> <e> called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clauses"], null)], 0)),". The first expression in each pair is a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," ",(function (){var G__238961 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__238962 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238961,G__238962) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238961,G__238962));
})()," that is, an expression whose value is interpreted as either ",(function (){var G__238963 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__238964 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238963,G__238964) : tailrecursion.hoplon.markdown.code_node.call(null,G__238963,G__238964));
})()," or ",(function (){var G__238965 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__238966 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238965,G__238966) : tailrecursion.hoplon.markdown.code_node.call(null,G__238965,G__238966));
})(),".",(function (){var G__238967 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__238968 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__238969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__238970 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Interpreted as either true or false"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238969,G__238970) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238969,G__238970));
})()," means this: In Scheme, there are two distinguished values that are denoted by the constants ",(function (){var G__238971 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__238972 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238971,G__238972) : tailrecursion.hoplon.markdown.code_node.call(null,G__238971,G__238972));
})()," and ",(function (){var G__238973 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__238974 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238973,G__238974) : tailrecursion.hoplon.markdown.code_node.call(null,G__238973,G__238974));
})(),". When the interpreter checks a predicate",(function (){var G__238975 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__238976 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238975,G__238976) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238975,G__238976));
})(),"s value, it interprets",(function (){var G__238977 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__238978 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238977,G__238978) : tailrecursion.hoplon.markdown.code_node.call(null,G__238977,G__238978));
})()," and ",(function (){var G__238979 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"nil"], null);
var G__238980 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238979,G__238980) : tailrecursion.hoplon.markdown.code_node.call(null,G__238979,G__238980));
})()," as false. Any other value is treated as true. (Thus, providing ",(function (){var G__238981 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__238982 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238981,G__238982) : tailrecursion.hoplon.markdown.code_node.call(null,G__238981,G__238982));
})()," is logically unnecessary, but it is convenient.)"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__238967,G__238968) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__238967,G__238968));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238959,G__238960) : tailrecursion.hoplon.markdown.para_node.call(null,G__238959,G__238960));
})(),(function (){var G__238983 = cljs.core.PersistentArrayMap.EMPTY;
var G__238984 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Conditional expressions are evaluated as follows. The predicate <p1> is evaluated first. If its value is false, then <p2> is evaluated. If <p2>",(function (){var G__238985 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__238986 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238985,G__238986) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238985,G__238986));
})(),"s value is also false, then <p3> is evaluated. This process continues until a predicate is found whose value is true, in which case the interpreter returns the value of the corresponding ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consequent expression"], null)], 0))," <e> of the clause as the value of the conditional expression. If none of the <p>",(function (){var G__238987 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__238988 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__238987,G__238988) : tailrecursion.hoplon.markdown.simple_node.call(null,G__238987,G__238988));
})(),"s is found to be true, the value of the ",(function (){var G__238989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__238990 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238989,G__238990) : tailrecursion.hoplon.markdown.code_node.call(null,G__238989,G__238990));
})()," is undefined."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238983,G__238984) : tailrecursion.hoplon.markdown.para_node.call(null,G__238983,G__238984));
})(),(function (){var G__238991 = cljs.core.PersistentArrayMap.EMPTY;
var G__238992 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The word ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," is used for procedures that return ",(function (){var G__238993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__238994 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238993,G__238994) : tailrecursion.hoplon.markdown.code_node.call(null,G__238993,G__238994));
})()," or ",(function (){var G__238995 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__238996 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238995,G__238996) : tailrecursion.hoplon.markdown.code_node.call(null,G__238995,G__238996));
})(),", as well as for expressions that evaluate to ",(function (){var G__238997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__238998 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238997,G__238998) : tailrecursion.hoplon.markdown.code_node.call(null,G__238997,G__238998));
})()," or ",(function (){var G__238999 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__239000 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__238999,G__239000) : tailrecursion.hoplon.markdown.code_node.call(null,G__238999,G__239000));
})(),". The absolute-value procedure ",(function (){var G__239001 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__239002 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239001,G__239002) : tailrecursion.hoplon.markdown.code_node.call(null,G__239001,G__239002));
})()," makes use of the primitive predicates >, <, and =.",(function (){var G__239003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__239004 = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239005 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Abs"], null);
var G__239006 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239005,G__239006) : tailrecursion.hoplon.markdown.code_node.call(null,G__239005,G__239006));
})()," also uses the ",(function (){var G__239007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__239008 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["minus"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__239007,G__239008) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__239007,G__239008));
})()," operator ",(function (){var G__239009 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__239010 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239009,G__239010) : tailrecursion.hoplon.markdown.code_node.call(null,G__239009,G__239010));
})(),", which, when used with a single operand, as in ",(function (){var G__239011 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- x)"], null);
var G__239012 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239011,G__239012) : tailrecursion.hoplon.markdown.code_node.call(null,G__239011,G__239012));
})(),", indicates negation."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__239003,G__239004) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__239003,G__239004));
})()," These take two numbers as arguments and test whether the first number is, respectively, greater than, less than, or equal to the second number, returning true or false accordingly."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__238991,G__238992) : tailrecursion.hoplon.markdown.para_node.call(null,G__238991,G__238992));
})(),(function (){var G__239013 = cljs.core.PersistentArrayMap.EMPTY;
var G__239014 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Another way to write the absolute-value procedure is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239013,G__239014) : tailrecursion.hoplon.markdown.para_node.call(null,G__239013,G__239014));
})(),(function (){var G__239060 = (function (){var G__239061 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239062 = (function (){var G__239063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239064 = "(";
var G__239065 = (function (){var G__239084 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__239085 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239084,G__239085) : tailrecursion.hoplon.span.call(null,G__239084,G__239085));
})();
var G__239066 = (function (){var G__239086 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239087 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239086,G__239087) : tailrecursion.hoplon.span.call(null,G__239086,G__239087));
})();
var G__239067 = " [";
var G__239068 = (function (){var G__239088 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239089 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239088,G__239089) : tailrecursion.hoplon.span.call(null,G__239088,G__239089));
})();
var G__239069 = "]\n  (";
var G__239070 = (function (){var G__239090 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239091 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239090,G__239091) : tailrecursion.hoplon.span.call(null,G__239090,G__239091));
})();
var G__239071 = "(";
var G__239072 = (function (){var G__239092 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239093 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239092,G__239093) : tailrecursion.hoplon.span.call(null,G__239092,G__239093));
})();
var G__239073 = (function (){var G__239094 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239095 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239094,G__239095) : tailrecursion.hoplon.span.call(null,G__239094,G__239095));
})();
var G__239074 = " ";
var G__239075 = (function (){var G__239096 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239097 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239096,G__239097) : tailrecursion.hoplon.span.call(null,G__239096,G__239097));
})();
var G__239076 = ") (";
var G__239077 = (function (){var G__239098 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239099 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239098,G__239099) : tailrecursion.hoplon.span.call(null,G__239098,G__239099));
})();
var G__239078 = (function (){var G__239100 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239101 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239100,G__239101) : tailrecursion.hoplon.span.call(null,G__239100,G__239101));
})();
var G__239079 = ")\n        ";
var G__239080 = (function (){var G__239102 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239103 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239102,G__239103) : tailrecursion.hoplon.span.call(null,G__239102,G__239103));
})();
var G__239081 = " ";
var G__239082 = (function (){var G__239104 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239105 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239104,G__239105) : tailrecursion.hoplon.span.call(null,G__239104,G__239105));
})();
var G__239083 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__239063,G__239064,G__239065,G__239066,G__239067,G__239068,G__239069,G__239070,G__239071,G__239072,G__239073,G__239074,G__239075,G__239076,G__239077,G__239078,G__239079,G__239080,G__239081,G__239082,G__239083) : tailrecursion.hoplon.pre.call(null,G__239063,G__239064,G__239065,G__239066,G__239067,G__239068,G__239069,G__239070,G__239071,G__239072,G__239073,G__239074,G__239075,G__239076,G__239077,G__239078,G__239079,G__239080,G__239081,G__239082,G__239083));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239061,G__239062) : tailrecursion.hoplon.div.call(null,G__239061,G__239062));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239060) : tailrecursion.hoplon.div.call(null,G__239060));
})(),(function (){var G__239106 = cljs.core.PersistentArrayMap.EMPTY;
var G__239107 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which could be expressed in English as ",(function (){var G__239108 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__239109 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If x is less than zero return - x; otherwise return x."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__239108,G__239109) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__239108,G__239109));
})()," ",(function (){var G__239110 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,":else"], null);
var G__239111 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239110,G__239111) : tailrecursion.hoplon.markdown.code_node.call(null,G__239110,G__239111));
})()," is a special symbol that can be used in place of the <p> in the final clause of a ",(function (){var G__239112 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__239113 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239112,G__239113) : tailrecursion.hoplon.markdown.code_node.call(null,G__239112,G__239113));
})(),". This causes the ",(function (){var G__239114 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__239115 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239114,G__239115) : tailrecursion.hoplon.markdown.code_node.call(null,G__239114,G__239115));
})()," to return as its value the value of the corresponding <e> whenever all previous clauses have been bypassed. In fact, any expression that always evaluates to a true value could be used as the <p> here."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239106,G__239107) : tailrecursion.hoplon.markdown.para_node.call(null,G__239106,G__239107));
})(),(function (){var G__239116 = cljs.core.PersistentArrayMap.EMPTY;
var G__239117 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here is yet another way to write the absolute-value procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239116,G__239117) : tailrecursion.hoplon.markdown.para_node.call(null,G__239116,G__239117));
})(),(function (){var G__239159 = (function (){var G__239160 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239161 = (function (){var G__239162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239163 = "(";
var G__239164 = (function (){var G__239181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__239182 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239181,G__239182) : tailrecursion.hoplon.span.call(null,G__239181,G__239182));
})();
var G__239165 = (function (){var G__239183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239184 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239183,G__239184) : tailrecursion.hoplon.span.call(null,G__239183,G__239184));
})();
var G__239166 = " [";
var G__239167 = (function (){var G__239185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239186 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239185,G__239186) : tailrecursion.hoplon.span.call(null,G__239185,G__239186));
})();
var G__239168 = "]\n  (";
var G__239169 = (function (){var G__239187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__239188 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239187,G__239188) : tailrecursion.hoplon.span.call(null,G__239187,G__239188));
})();
var G__239170 = "(";
var G__239171 = (function (){var G__239189 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239190 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239189,G__239190) : tailrecursion.hoplon.span.call(null,G__239189,G__239190));
})();
var G__239172 = (function (){var G__239191 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239192 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239191,G__239192) : tailrecursion.hoplon.span.call(null,G__239191,G__239192));
})();
var G__239173 = " ";
var G__239174 = (function (){var G__239193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239194 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239193,G__239194) : tailrecursion.hoplon.span.call(null,G__239193,G__239194));
})();
var G__239175 = ")\n      (";
var G__239176 = (function (){var G__239195 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239196 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239195,G__239196) : tailrecursion.hoplon.span.call(null,G__239195,G__239196));
})();
var G__239177 = (function (){var G__239197 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239198 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239197,G__239198) : tailrecursion.hoplon.span.call(null,G__239197,G__239198));
})();
var G__239178 = ")\n      ";
var G__239179 = (function (){var G__239199 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239200 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239199,G__239200) : tailrecursion.hoplon.span.call(null,G__239199,G__239200));
})();
var G__239180 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__239162,G__239163,G__239164,G__239165,G__239166,G__239167,G__239168,G__239169,G__239170,G__239171,G__239172,G__239173,G__239174,G__239175,G__239176,G__239177,G__239178,G__239179,G__239180) : tailrecursion.hoplon.pre.call(null,G__239162,G__239163,G__239164,G__239165,G__239166,G__239167,G__239168,G__239169,G__239170,G__239171,G__239172,G__239173,G__239174,G__239175,G__239176,G__239177,G__239178,G__239179,G__239180));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239160,G__239161) : tailrecursion.hoplon.div.call(null,G__239160,G__239161));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239159) : tailrecursion.hoplon.div.call(null,G__239159));
})(),(function (){var G__239201 = cljs.core.PersistentArrayMap.EMPTY;
var G__239202 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This uses the special form ",(function (){var G__239203 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__239204 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239203,G__239204) : tailrecursion.hoplon.markdown.code_node.call(null,G__239203,G__239204));
})(),", a restricted type of conditional that can be used when there are precisely two cases in the case analysis. The general form of an ",(function (){var G__239205 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__239206 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239205,G__239206) : tailrecursion.hoplon.markdown.code_node.call(null,G__239205,G__239206));
})()," expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239201,G__239202) : tailrecursion.hoplon.markdown.para_node.call(null,G__239201,G__239202));
})(),(function (){var G__239226 = (function (){var G__239227 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239228 = (function (){var G__239229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239230 = "(";
var G__239231 = (function (){var G__239238 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__239239 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239238,G__239239) : tailrecursion.hoplon.span.call(null,G__239238,G__239239));
})();
var G__239232 = (function (){var G__239240 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239241 = "<predicate>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239240,G__239241) : tailrecursion.hoplon.span.call(null,G__239240,G__239241));
})();
var G__239233 = " ";
var G__239234 = (function (){var G__239242 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239243 = "<consequent>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239242,G__239243) : tailrecursion.hoplon.span.call(null,G__239242,G__239243));
})();
var G__239235 = " ";
var G__239236 = (function (){var G__239244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239245 = "<alternative>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239244,G__239245) : tailrecursion.hoplon.span.call(null,G__239244,G__239245));
})();
var G__239237 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__239229,G__239230,G__239231,G__239232,G__239233,G__239234,G__239235,G__239236,G__239237) : tailrecursion.hoplon.pre.call(null,G__239229,G__239230,G__239231,G__239232,G__239233,G__239234,G__239235,G__239236,G__239237));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239227,G__239228) : tailrecursion.hoplon.div.call(null,G__239227,G__239228));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239226) : tailrecursion.hoplon.div.call(null,G__239226));
})(),(function (){var G__239246 = cljs.core.PersistentArrayMap.EMPTY;
var G__239247 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate an ",(function (){var G__239248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__239249 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239248,G__239249) : tailrecursion.hoplon.markdown.code_node.call(null,G__239248,G__239249));
})()," expression, the interpreter starts by evaluating the <predicate> part of the expression. If the <predicate> evaluates to a true value, the interpreter then evaluates the <consequent> and returns its value. Otherwise it evaluates the <alternative> and returns its value.",(function (){var G__239250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__239251 = new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In Scheme, a minor difference between ",(function (){var G__239252 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__239253 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239252,G__239253) : tailrecursion.hoplon.markdown.code_node.call(null,G__239252,G__239253));
})()," and ",(function (){var G__239254 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__239255 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239254,G__239255) : tailrecursion.hoplon.markdown.code_node.call(null,G__239254,G__239255));
})()," is that the ",(function (){var G__239256 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__239257 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239256,G__239257) : tailrecursion.hoplon.markdown.code_node.call(null,G__239256,G__239257));
})()," part of each ",(function (){var G__239258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__239259 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239258,G__239259) : tailrecursion.hoplon.markdown.code_node.call(null,G__239258,G__239259));
})()," clause may be a sequence of expressions. If the corresponding ",(function (){var G__239260 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<p>"], null);
var G__239261 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239260,G__239261) : tailrecursion.hoplon.markdown.code_node.call(null,G__239260,G__239261));
})()," is found to be true, the expressions ",(function (){var G__239262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__239263 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239262,G__239263) : tailrecursion.hoplon.markdown.code_node.call(null,G__239262,G__239263));
})()," are evaluated in sequence and the value of the final expression in the sequence is returned as the value of the ",(function (){var G__239264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__239265 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239264,G__239265) : tailrecursion.hoplon.markdown.code_node.call(null,G__239264,G__239265));
})(),". In an ",(function (){var G__239266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__239267 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239266,G__239267) : tailrecursion.hoplon.markdown.code_node.call(null,G__239266,G__239267));
})()," expression, however, the ",(function (){var G__239268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<consequent>"], null);
var G__239269 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239268,G__239269) : tailrecursion.hoplon.markdown.code_node.call(null,G__239268,G__239269));
})()," and ",(function (){var G__239270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<alternative>"], null);
var G__239271 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239270,G__239271) : tailrecursion.hoplon.markdown.code_node.call(null,G__239270,G__239271));
})()," must be single expressions. In Clojure, however, these must all be single expressioins. To get a similar functionality one could use ",(function (){var G__239272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"do"], null);
var G__239273 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239272,G__239273) : tailrecursion.hoplon.markdown.code_node.call(null,G__239272,G__239273));
})(),"."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__239250,G__239251) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__239250,G__239251));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239246,G__239247) : tailrecursion.hoplon.markdown.para_node.call(null,G__239246,G__239247));
})(),(function (){var G__239274 = cljs.core.PersistentArrayMap.EMPTY;
var G__239275 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In addition to primitive predicates such as <, =, and >, there are logical composition operations, which enable us to construct compound predicates. The three most frequently used are these:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239274,G__239275) : tailrecursion.hoplon.markdown.para_node.call(null,G__239274,G__239275));
})(),(function (){var G__239276 = cljs.core.PersistentArrayMap.EMPTY;
var G__239277 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239278 = cljs.core.PersistentArrayMap.EMPTY;
var G__239279 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_239280 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239281 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__239282 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (and <e1> ... <en>)\n"], null);
var G__239283 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239282,G__239283) : tailrecursion.hoplon.markdown.code_node.call(null,G__239282,G__239283));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239281;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239280;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__239278,G__239279) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__239278,G__239279));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__239276,G__239277) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__239276,G__239277));
})(),(function (){var G__239284 = cljs.core.PersistentArrayMap.EMPTY;
var G__239285 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to false, the value of the  ",(function (){var G__239286 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__239287 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239286,G__239287) : tailrecursion.hoplon.markdown.code_node.call(null,G__239286,G__239287));
})()," expression is false, and the rest of the <e>",(function (){var G__239288 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__239289 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__239288,G__239289) : tailrecursion.hoplon.markdown.simple_node.call(null,G__239288,G__239289));
})(),"s are not  evaluated. If all <e>",(function (){var G__239290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__239291 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__239290,G__239291) : tailrecursion.hoplon.markdown.simple_node.call(null,G__239290,G__239291));
})(),"s evaluate to true values, the value of the and  expression is the value of the last one."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239284,G__239285) : tailrecursion.hoplon.markdown.para_node.call(null,G__239284,G__239285));
})(),(function (){var G__239292 = cljs.core.PersistentArrayMap.EMPTY;
var G__239293 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239294 = cljs.core.PersistentArrayMap.EMPTY;
var G__239295 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_239296 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239297 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__239298 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (or <e1> ... <en>)\n"], null);
var G__239299 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239298,G__239299) : tailrecursion.hoplon.markdown.code_node.call(null,G__239298,G__239299));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239297;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239296;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__239294,G__239295) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__239294,G__239295));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__239292,G__239293) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__239292,G__239293));
})(),(function (){var G__239300 = cljs.core.PersistentArrayMap.EMPTY;
var G__239301 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to a true value, that value  is returned as the value of the or expression, and the rest of the  <e>",(function (){var G__239302 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__239303 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__239302,G__239303) : tailrecursion.hoplon.markdown.simple_node.call(null,G__239302,G__239303));
})(),"s are not evaluated. If all <e>",(function (){var G__239304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__239305 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__239304,G__239305) : tailrecursion.hoplon.markdown.simple_node.call(null,G__239304,G__239305));
})(),"s evaluate to false, the value of  the ",(function (){var G__239306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__239307 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239306,G__239307) : tailrecursion.hoplon.markdown.code_node.call(null,G__239306,G__239307));
})()," expression is false."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239300,G__239301) : tailrecursion.hoplon.markdown.para_node.call(null,G__239300,G__239301));
})(),(function (){var G__239308 = cljs.core.PersistentArrayMap.EMPTY;
var G__239309 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239310 = cljs.core.PersistentArrayMap.EMPTY;
var G__239311 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_239312 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239313 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__239314 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (not <e>)\n"], null);
var G__239315 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239314,G__239315) : tailrecursion.hoplon.markdown.code_node.call(null,G__239314,G__239315));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239313;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239312;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__239310,G__239311) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__239310,G__239311));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__239308,G__239309) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__239308,G__239309));
})(),(function (){var G__239316 = cljs.core.PersistentArrayMap.EMPTY;
var G__239317 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The value of a ",(function (){var G__239318 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__239319 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239318,G__239319) : tailrecursion.hoplon.markdown.code_node.call(null,G__239318,G__239319));
})()," expression is true when the expression <e>  evaluates to false, and false otherwise."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239316,G__239317) : tailrecursion.hoplon.markdown.para_node.call(null,G__239316,G__239317));
})(),(function (){var G__239320 = cljs.core.PersistentArrayMap.EMPTY;
var G__239321 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that ",(function (){var G__239322 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__239323 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239322,G__239323) : tailrecursion.hoplon.markdown.code_node.call(null,G__239322,G__239323));
})()," and ",(function (){var G__239324 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__239325 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239324,G__239325) : tailrecursion.hoplon.markdown.code_node.call(null,G__239324,G__239325));
})()," are special forms, not procedures, because the subexpressions are not necessarily all evaluated. ",(function (){var G__239326 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__239327 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__239326,G__239327) : tailrecursion.hoplon.markdown.code_node.call(null,G__239326,G__239327));
})()," is an ordinary procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239320,G__239321) : tailrecursion.hoplon.markdown.para_node.call(null,G__239320,G__239321));
})(),(function (){var G__239328 = cljs.core.PersistentArrayMap.EMPTY;
var G__239329 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As an example of how these are used, the condition that a number x be in the range \\(5 \\lt x \\lt 10\\) may be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239328,G__239329) : tailrecursion.hoplon.markdown.para_node.call(null,G__239328,G__239329));
})(),(function (){var G__239360 = (function (){var G__239361 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239362 = (function (){var G__239363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239364 = "(";
var G__239365 = (function (){var G__239377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239378 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239377,G__239378) : tailrecursion.hoplon.span.call(null,G__239377,G__239378));
})();
var G__239366 = "(";
var G__239367 = (function (){var G__239379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239380 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239379,G__239380) : tailrecursion.hoplon.span.call(null,G__239379,G__239380));
})();
var G__239368 = (function (){var G__239381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239382 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239381,G__239382) : tailrecursion.hoplon.span.call(null,G__239381,G__239382));
})();
var G__239369 = " ";
var G__239370 = (function (){var G__239383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239384 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239383,G__239384) : tailrecursion.hoplon.span.call(null,G__239383,G__239384));
})();
var G__239371 = ") (";
var G__239372 = (function (){var G__239385 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239386 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239385,G__239386) : tailrecursion.hoplon.span.call(null,G__239385,G__239386));
})();
var G__239373 = (function (){var G__239387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239388 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239387,G__239388) : tailrecursion.hoplon.span.call(null,G__239387,G__239388));
})();
var G__239374 = " ";
var G__239375 = (function (){var G__239389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239390 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239389,G__239390) : tailrecursion.hoplon.span.call(null,G__239389,G__239390));
})();
var G__239376 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__239363,G__239364,G__239365,G__239366,G__239367,G__239368,G__239369,G__239370,G__239371,G__239372,G__239373,G__239374,G__239375,G__239376) : tailrecursion.hoplon.pre.call(null,G__239363,G__239364,G__239365,G__239366,G__239367,G__239368,G__239369,G__239370,G__239371,G__239372,G__239373,G__239374,G__239375,G__239376));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239361,G__239362) : tailrecursion.hoplon.div.call(null,G__239361,G__239362));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239360) : tailrecursion.hoplon.div.call(null,G__239360));
})(),(function (){var G__239391 = cljs.core.PersistentArrayMap.EMPTY;
var G__239392 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As another example, we can define a predicate to test whether one number is greater than or equal to another as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239391,G__239392) : tailrecursion.hoplon.markdown.para_node.call(null,G__239391,G__239392));
})(),(function (){var G__239438 = (function (){var G__239439 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239440 = (function (){var G__239441 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239442 = "(";
var G__239443 = (function (){var G__239462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__239463 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239462,G__239463) : tailrecursion.hoplon.span.call(null,G__239462,G__239463));
})();
var G__239444 = (function (){var G__239464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239465 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239464,G__239465) : tailrecursion.hoplon.span.call(null,G__239464,G__239465));
})();
var G__239445 = "[";
var G__239446 = (function (){var G__239466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239467 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239466,G__239467) : tailrecursion.hoplon.span.call(null,G__239466,G__239467));
})();
var G__239447 = " ";
var G__239448 = (function (){var G__239468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239469 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239468,G__239469) : tailrecursion.hoplon.span.call(null,G__239468,G__239469));
})();
var G__239449 = "] \n  (";
var G__239450 = (function (){var G__239470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239471 = "or ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239470,G__239471) : tailrecursion.hoplon.span.call(null,G__239470,G__239471));
})();
var G__239451 = "(";
var G__239452 = (function (){var G__239472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239473 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239472,G__239473) : tailrecursion.hoplon.span.call(null,G__239472,G__239473));
})();
var G__239453 = (function (){var G__239474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239475 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239474,G__239475) : tailrecursion.hoplon.span.call(null,G__239474,G__239475));
})();
var G__239454 = " ";
var G__239455 = (function (){var G__239476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239477 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239476,G__239477) : tailrecursion.hoplon.span.call(null,G__239476,G__239477));
})();
var G__239456 = ") (";
var G__239457 = (function (){var G__239478 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239479 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239478,G__239479) : tailrecursion.hoplon.span.call(null,G__239478,G__239479));
})();
var G__239458 = (function (){var G__239480 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239481 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239480,G__239481) : tailrecursion.hoplon.span.call(null,G__239480,G__239481));
})();
var G__239459 = " ";
var G__239460 = (function (){var G__239482 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239483 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239482,G__239483) : tailrecursion.hoplon.span.call(null,G__239482,G__239483));
})();
var G__239461 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__239441,G__239442,G__239443,G__239444,G__239445,G__239446,G__239447,G__239448,G__239449,G__239450,G__239451,G__239452,G__239453,G__239454,G__239455,G__239456,G__239457,G__239458,G__239459,G__239460,G__239461) : tailrecursion.hoplon.pre.call(null,G__239441,G__239442,G__239443,G__239444,G__239445,G__239446,G__239447,G__239448,G__239449,G__239450,G__239451,G__239452,G__239453,G__239454,G__239455,G__239456,G__239457,G__239458,G__239459,G__239460,G__239461));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239439,G__239440) : tailrecursion.hoplon.div.call(null,G__239439,G__239440));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239438) : tailrecursion.hoplon.div.call(null,G__239438));
})(),(function (){var G__239484 = cljs.core.PersistentArrayMap.EMPTY;
var G__239485 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["or alternatively as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239484,G__239485) : tailrecursion.hoplon.markdown.para_node.call(null,G__239484,G__239485));
})(),(function (){var G__239520 = (function (){var G__239521 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239522 = (function (){var G__239523 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239524 = "(";
var G__239525 = (function (){var G__239539 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__239540 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239539,G__239540) : tailrecursion.hoplon.span.call(null,G__239539,G__239540));
})();
var G__239526 = (function (){var G__239541 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239542 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239541,G__239542) : tailrecursion.hoplon.span.call(null,G__239541,G__239542));
})();
var G__239527 = "[";
var G__239528 = (function (){var G__239543 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239544 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239543,G__239544) : tailrecursion.hoplon.span.call(null,G__239543,G__239544));
})();
var G__239529 = " ";
var G__239530 = (function (){var G__239545 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239546 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239545,G__239546) : tailrecursion.hoplon.span.call(null,G__239545,G__239546));
})();
var G__239531 = "]\n  (";
var G__239532 = (function (){var G__239547 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239548 = "not ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239547,G__239548) : tailrecursion.hoplon.span.call(null,G__239547,G__239548));
})();
var G__239533 = "(";
var G__239534 = (function (){var G__239549 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239550 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239549,G__239550) : tailrecursion.hoplon.span.call(null,G__239549,G__239550));
})();
var G__239535 = (function (){var G__239551 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239552 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239551,G__239552) : tailrecursion.hoplon.span.call(null,G__239551,G__239552));
})();
var G__239536 = " ";
var G__239537 = (function (){var G__239553 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239554 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239553,G__239554) : tailrecursion.hoplon.span.call(null,G__239553,G__239554));
})();
var G__239538 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__239523,G__239524,G__239525,G__239526,G__239527,G__239528,G__239529,G__239530,G__239531,G__239532,G__239533,G__239534,G__239535,G__239536,G__239537,G__239538) : tailrecursion.hoplon.pre.call(null,G__239523,G__239524,G__239525,G__239526,G__239527,G__239528,G__239529,G__239530,G__239531,G__239532,G__239533,G__239534,G__239535,G__239536,G__239537,G__239538));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239521,G__239522) : tailrecursion.hoplon.div.call(null,G__239521,G__239522));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239520) : tailrecursion.hoplon.div.call(null,G__239520));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238944;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238943;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_238942;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_238941;
}})()], 0));
var G__237045 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239555 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239556 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239557 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239558 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239559 = cljs.core.PersistentArrayMap.EMPTY;
var G__239560 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239559,G__239560) : tailrecursion.hoplon.markdown.para_node.call(null,G__239559,G__239560));
})(),(function (){var G__239568 = (function (){var G__239569 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239570 = (function (){var G__239571 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239572 = (function (){var G__239574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239575 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239574,G__239575) : tailrecursion.hoplon.span.call(null,G__239574,G__239575));
})();
var G__239573 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3(G__239571,G__239572,G__239573) : tailrecursion.hoplon.pre.call(null,G__239571,G__239572,G__239573));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239569,G__239570) : tailrecursion.hoplon.div.call(null,G__239569,G__239570));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239568) : tailrecursion.hoplon.div.call(null,G__239568));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239558;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239557;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239556;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239555;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239576 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239577 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239578 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239579 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239580 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("10\n") : tailrecursion.hoplon.code.call(null,"10\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__239580) : tailrecursion.hoplon.pre.call(null,G__239580));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239579;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239578;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239577;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239576;
}})()], 0)),"",(function (){var _STAR_references_STAR_239581 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239582 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239583 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239584 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239604 = (function (){var G__239605 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239606 = (function (){var G__239607 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239608 = "(";
var G__239609 = (function (){var G__239616 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239617 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239616,G__239617) : tailrecursion.hoplon.span.call(null,G__239616,G__239617));
})();
var G__239610 = (function (){var G__239618 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239619 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239618,G__239619) : tailrecursion.hoplon.span.call(null,G__239618,G__239619));
})();
var G__239611 = " ";
var G__239612 = (function (){var G__239620 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239621 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239620,G__239621) : tailrecursion.hoplon.span.call(null,G__239620,G__239621));
})();
var G__239613 = " ";
var G__239614 = (function (){var G__239622 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239623 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239622,G__239623) : tailrecursion.hoplon.span.call(null,G__239622,G__239623));
})();
var G__239615 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__239607,G__239608,G__239609,G__239610,G__239611,G__239612,G__239613,G__239614,G__239615) : tailrecursion.hoplon.pre.call(null,G__239607,G__239608,G__239609,G__239610,G__239611,G__239612,G__239613,G__239614,G__239615));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239605,G__239606) : tailrecursion.hoplon.div.call(null,G__239605,G__239606));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239604) : tailrecursion.hoplon.div.call(null,G__239604));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239584;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239583;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239582;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239581;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239624 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239625 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239626 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239627 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239628 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("12\n") : tailrecursion.hoplon.code.call(null,"12\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__239628) : tailrecursion.hoplon.pre.call(null,G__239628));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239627;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239626;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239625;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239624;
}})()], 0)),"",(function (){var _STAR_references_STAR_239629 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239630 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239631 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239632 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239648 = (function (){var G__239649 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239650 = (function (){var G__239651 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239652 = "(";
var G__239653 = (function (){var G__239658 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239659 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239658,G__239659) : tailrecursion.hoplon.span.call(null,G__239658,G__239659));
})();
var G__239654 = (function (){var G__239660 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239661 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239660,G__239661) : tailrecursion.hoplon.span.call(null,G__239660,G__239661));
})();
var G__239655 = " ";
var G__239656 = (function (){var G__239662 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239663 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239662,G__239663) : tailrecursion.hoplon.span.call(null,G__239662,G__239663));
})();
var G__239657 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__239651,G__239652,G__239653,G__239654,G__239655,G__239656,G__239657) : tailrecursion.hoplon.pre.call(null,G__239651,G__239652,G__239653,G__239654,G__239655,G__239656,G__239657));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239649,G__239650) : tailrecursion.hoplon.div.call(null,G__239649,G__239650));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239648) : tailrecursion.hoplon.div.call(null,G__239648));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239632;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239631;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239630;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239629;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239664 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239665 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239666 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239667 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239668 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("8\n") : tailrecursion.hoplon.code.call(null,"8\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__239668) : tailrecursion.hoplon.pre.call(null,G__239668));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239667;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239666;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239665;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239664;
}})()], 0)),"",(function (){var _STAR_references_STAR_239669 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239670 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239671 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239672 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239688 = (function (){var G__239689 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239690 = (function (){var G__239691 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239692 = "(";
var G__239693 = (function (){var G__239698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239699 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239698,G__239699) : tailrecursion.hoplon.span.call(null,G__239698,G__239699));
})();
var G__239694 = (function (){var G__239700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239701 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239700,G__239701) : tailrecursion.hoplon.span.call(null,G__239700,G__239701));
})();
var G__239695 = " ";
var G__239696 = (function (){var G__239702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239703 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239702,G__239703) : tailrecursion.hoplon.span.call(null,G__239702,G__239703));
})();
var G__239697 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__239691,G__239692,G__239693,G__239694,G__239695,G__239696,G__239697) : tailrecursion.hoplon.pre.call(null,G__239691,G__239692,G__239693,G__239694,G__239695,G__239696,G__239697));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239689,G__239690) : tailrecursion.hoplon.div.call(null,G__239689,G__239690));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239688) : tailrecursion.hoplon.div.call(null,G__239688));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239672;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239671;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239670;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239669;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239704 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239705 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239706 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239707 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239708 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("3\n") : tailrecursion.hoplon.code.call(null,"3\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__239708) : tailrecursion.hoplon.pre.call(null,G__239708));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239707;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239706;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239705;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239704;
}})()], 0)),"",(function (){var _STAR_references_STAR_239709 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239710 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239711 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239712 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239743 = (function (){var G__239744 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239745 = (function (){var G__239746 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239747 = "(";
var G__239748 = (function (){var G__239760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239761 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239760,G__239761) : tailrecursion.hoplon.span.call(null,G__239760,G__239761));
})();
var G__239749 = "(";
var G__239750 = (function (){var G__239762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239763 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239762,G__239763) : tailrecursion.hoplon.span.call(null,G__239762,G__239763));
})();
var G__239751 = (function (){var G__239764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239765 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239764,G__239765) : tailrecursion.hoplon.span.call(null,G__239764,G__239765));
})();
var G__239752 = " ";
var G__239753 = (function (){var G__239766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239767 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239766,G__239767) : tailrecursion.hoplon.span.call(null,G__239766,G__239767));
})();
var G__239754 = ") (";
var G__239755 = (function (){var G__239768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239769 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239768,G__239769) : tailrecursion.hoplon.span.call(null,G__239768,G__239769));
})();
var G__239756 = (function (){var G__239770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239771 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239770,G__239771) : tailrecursion.hoplon.span.call(null,G__239770,G__239771));
})();
var G__239757 = " ";
var G__239758 = (function (){var G__239772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239773 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239772,G__239773) : tailrecursion.hoplon.span.call(null,G__239772,G__239773));
})();
var G__239759 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__239746,G__239747,G__239748,G__239749,G__239750,G__239751,G__239752,G__239753,G__239754,G__239755,G__239756,G__239757,G__239758,G__239759) : tailrecursion.hoplon.pre.call(null,G__239746,G__239747,G__239748,G__239749,G__239750,G__239751,G__239752,G__239753,G__239754,G__239755,G__239756,G__239757,G__239758,G__239759));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239744,G__239745) : tailrecursion.hoplon.div.call(null,G__239744,G__239745));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239743) : tailrecursion.hoplon.div.call(null,G__239743));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239712;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239711;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239710;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239709;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239774 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239775 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239776 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239777 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239778 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("6\n") : tailrecursion.hoplon.code.call(null,"6\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__239778) : tailrecursion.hoplon.pre.call(null,G__239778));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239777;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239776;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239775;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239774;
}})()], 0)),"",(function (){var _STAR_references_STAR_239779 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239780 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239781 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239782 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239798 = (function (){var G__239799 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239800 = (function (){var G__239801 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239802 = "(";
var G__239803 = (function (){var G__239808 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__239809 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239808,G__239809) : tailrecursion.hoplon.span.call(null,G__239808,G__239809));
})();
var G__239804 = (function (){var G__239810 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239811 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239810,G__239811) : tailrecursion.hoplon.span.call(null,G__239810,G__239811));
})();
var G__239805 = " ";
var G__239806 = (function (){var G__239812 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239813 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239812,G__239813) : tailrecursion.hoplon.span.call(null,G__239812,G__239813));
})();
var G__239807 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__239801,G__239802,G__239803,G__239804,G__239805,G__239806,G__239807) : tailrecursion.hoplon.pre.call(null,G__239801,G__239802,G__239803,G__239804,G__239805,G__239806,G__239807));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239799,G__239800) : tailrecursion.hoplon.div.call(null,G__239799,G__239800));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239798) : tailrecursion.hoplon.div.call(null,G__239798));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239782;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239781;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239780;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239779;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239814 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239815 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239816 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239817 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239818 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("a\n") : tailrecursion.hoplon.code.call(null,"a\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__239818) : tailrecursion.hoplon.pre.call(null,G__239818));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239817;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239816;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239815;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239814;
}})()], 0)),"",(function (){var _STAR_references_STAR_239819 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239820 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239821 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239822 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239845 = (function (){var G__239846 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239847 = (function (){var G__239848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239849 = "(";
var G__239850 = (function (){var G__239858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__239859 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239858,G__239859) : tailrecursion.hoplon.span.call(null,G__239858,G__239859));
})();
var G__239851 = (function (){var G__239860 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239861 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239860,G__239861) : tailrecursion.hoplon.span.call(null,G__239860,G__239861));
})();
var G__239852 = " (";
var G__239853 = (function (){var G__239862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239863 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239862,G__239863) : tailrecursion.hoplon.span.call(null,G__239862,G__239863));
})();
var G__239854 = (function (){var G__239864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239865 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239864,G__239865) : tailrecursion.hoplon.span.call(null,G__239864,G__239865));
})();
var G__239855 = " ";
var G__239856 = (function (){var G__239866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__239867 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239866,G__239867) : tailrecursion.hoplon.span.call(null,G__239866,G__239867));
})();
var G__239857 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10(G__239848,G__239849,G__239850,G__239851,G__239852,G__239853,G__239854,G__239855,G__239856,G__239857) : tailrecursion.hoplon.pre.call(null,G__239848,G__239849,G__239850,G__239851,G__239852,G__239853,G__239854,G__239855,G__239856,G__239857));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239846,G__239847) : tailrecursion.hoplon.div.call(null,G__239846,G__239847));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239845) : tailrecursion.hoplon.div.call(null,G__239845));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239822;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239821;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239820;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239819;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239868 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239869 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239870 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239871 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239872 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("b\n") : tailrecursion.hoplon.code.call(null,"b\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__239872) : tailrecursion.hoplon.pre.call(null,G__239872));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239871;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239870;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239869;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239868;
}})()], 0)),"",(function (){var _STAR_references_STAR_239873 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239874 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239875 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239876 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239903 = (function (){var G__239904 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239905 = (function (){var G__239906 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239907 = "(";
var G__239908 = (function (){var G__239918 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239919 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239918,G__239919) : tailrecursion.hoplon.span.call(null,G__239918,G__239919));
})();
var G__239909 = (function (){var G__239920 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239921 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239920,G__239921) : tailrecursion.hoplon.span.call(null,G__239920,G__239921));
})();
var G__239910 = " ";
var G__239911 = (function (){var G__239922 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239923 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239922,G__239923) : tailrecursion.hoplon.span.call(null,G__239922,G__239923));
})();
var G__239912 = " (";
var G__239913 = (function (){var G__239924 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239925 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239924,G__239925) : tailrecursion.hoplon.span.call(null,G__239924,G__239925));
})();
var G__239914 = (function (){var G__239926 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239927 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239926,G__239927) : tailrecursion.hoplon.span.call(null,G__239926,G__239927));
})();
var G__239915 = " ";
var G__239916 = (function (){var G__239928 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239929 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239928,G__239929) : tailrecursion.hoplon.span.call(null,G__239928,G__239929));
})();
var G__239917 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__239906,G__239907,G__239908,G__239909,G__239910,G__239911,G__239912,G__239913,G__239914,G__239915,G__239916,G__239917) : tailrecursion.hoplon.pre.call(null,G__239906,G__239907,G__239908,G__239909,G__239910,G__239911,G__239912,G__239913,G__239914,G__239915,G__239916,G__239917));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239904,G__239905) : tailrecursion.hoplon.div.call(null,G__239904,G__239905));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239903) : tailrecursion.hoplon.div.call(null,G__239903));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239876;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239875;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239874;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239873;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239930 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239931 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239932 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239933 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239934 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("19\n") : tailrecursion.hoplon.code.call(null,"19\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__239934) : tailrecursion.hoplon.pre.call(null,G__239934));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239933;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239932;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239931;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239930;
}})()], 0)),"",(function (){var _STAR_references_STAR_239935 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239936 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239937 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239938 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239954 = (function (){var G__239955 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__239956 = (function (){var G__239957 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__239958 = "(";
var G__239959 = (function (){var G__239964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__239965 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239964,G__239965) : tailrecursion.hoplon.span.call(null,G__239964,G__239965));
})();
var G__239960 = (function (){var G__239966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239967 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239966,G__239967) : tailrecursion.hoplon.span.call(null,G__239966,G__239967));
})();
var G__239961 = " ";
var G__239962 = (function (){var G__239968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__239969 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__239968,G__239969) : tailrecursion.hoplon.span.call(null,G__239968,G__239969));
})();
var G__239963 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__239957,G__239958,G__239959,G__239960,G__239961,G__239962,G__239963) : tailrecursion.hoplon.pre.call(null,G__239957,G__239958,G__239959,G__239960,G__239961,G__239962,G__239963));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__239955,G__239956) : tailrecursion.hoplon.div.call(null,G__239955,G__239956));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__239954) : tailrecursion.hoplon.div.call(null,G__239954));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239938;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239937;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239936;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239935;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_239970 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239971 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239972 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239973 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239974 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("false\n") : tailrecursion.hoplon.code.call(null,"false\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__239974) : tailrecursion.hoplon.pre.call(null,G__239974));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239973;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239972;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239971;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239970;
}})()], 0)),"",(function (){var _STAR_references_STAR_239975 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239976 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239977 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239978 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240028 = (function (){var G__240029 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240030 = (function (){var G__240031 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240032 = "(";
var G__240033 = (function (){var G__240054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240055 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240054,G__240055) : tailrecursion.hoplon.span.call(null,G__240054,G__240055));
})();
var G__240034 = "(";
var G__240035 = (function (){var G__240056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240057 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240056,G__240057) : tailrecursion.hoplon.span.call(null,G__240056,G__240057));
})();
var G__240036 = "(";
var G__240037 = (function (){var G__240058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240059 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240058,G__240059) : tailrecursion.hoplon.span.call(null,G__240058,G__240059));
})();
var G__240038 = (function (){var G__240060 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240061 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240060,G__240061) : tailrecursion.hoplon.span.call(null,G__240060,G__240061));
})();
var G__240039 = " ";
var G__240040 = (function (){var G__240062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240063 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240062,G__240063) : tailrecursion.hoplon.span.call(null,G__240062,G__240063));
})();
var G__240041 = ") (";
var G__240042 = (function (){var G__240064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240065 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240064,G__240065) : tailrecursion.hoplon.span.call(null,G__240064,G__240065));
})();
var G__240043 = (function (){var G__240066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240067 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240066,G__240067) : tailrecursion.hoplon.span.call(null,G__240066,G__240067));
})();
var G__240044 = " (";
var G__240045 = (function (){var G__240068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240069 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240068,G__240069) : tailrecursion.hoplon.span.call(null,G__240068,G__240069));
})();
var G__240046 = (function (){var G__240070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240071 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240070,G__240071) : tailrecursion.hoplon.span.call(null,G__240070,G__240071));
})();
var G__240047 = " ";
var G__240048 = (function (){var G__240072 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240073 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240072,G__240073) : tailrecursion.hoplon.span.call(null,G__240072,G__240073));
})();
var G__240049 = ")))\n    ";
var G__240050 = (function (){var G__240074 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240075 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240074,G__240075) : tailrecursion.hoplon.span.call(null,G__240074,G__240075));
})();
var G__240051 = "\n    ";
var G__240052 = (function (){var G__240076 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240077 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240076,G__240077) : tailrecursion.hoplon.span.call(null,G__240076,G__240077));
})();
var G__240053 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__240031,G__240032,G__240033,G__240034,G__240035,G__240036,G__240037,G__240038,G__240039,G__240040,G__240041,G__240042,G__240043,G__240044,G__240045,G__240046,G__240047,G__240048,G__240049,G__240050,G__240051,G__240052,G__240053) : tailrecursion.hoplon.pre.call(null,G__240031,G__240032,G__240033,G__240034,G__240035,G__240036,G__240037,G__240038,G__240039,G__240040,G__240041,G__240042,G__240043,G__240044,G__240045,G__240046,G__240047,G__240048,G__240049,G__240050,G__240051,G__240052,G__240053));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240029,G__240030) : tailrecursion.hoplon.div.call(null,G__240029,G__240030));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240028) : tailrecursion.hoplon.div.call(null,G__240028));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239978;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239977;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239976;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239975;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240078 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240079 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240080 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240081 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240082 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("4\n") : tailrecursion.hoplon.code.call(null,"4\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__240082) : tailrecursion.hoplon.pre.call(null,G__240082));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240081;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240080;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240079;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240078;
}})()], 0)),"",(function (){var _STAR_references_STAR_240083 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240084 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240085 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240086 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240144 = (function (){var G__240145 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240146 = (function (){var G__240147 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240148 = "(";
var G__240149 = (function (){var G__240174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240175 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240174,G__240175) : tailrecursion.hoplon.span.call(null,G__240174,G__240175));
})();
var G__240150 = "(";
var G__240151 = (function (){var G__240176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240177 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240176,G__240177) : tailrecursion.hoplon.span.call(null,G__240176,G__240177));
})();
var G__240152 = (function (){var G__240178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240179 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240178,G__240179) : tailrecursion.hoplon.span.call(null,G__240178,G__240179));
})();
var G__240153 = " ";
var G__240154 = (function (){var G__240180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240181 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240180,G__240181) : tailrecursion.hoplon.span.call(null,G__240180,G__240181));
})();
var G__240155 = ") ";
var G__240156 = (function (){var G__240182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240183 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240182,G__240183) : tailrecursion.hoplon.span.call(null,G__240182,G__240183));
})();
var G__240157 = "\n      (";
var G__240158 = (function (){var G__240184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240185 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240184,G__240185) : tailrecursion.hoplon.span.call(null,G__240184,G__240185));
})();
var G__240159 = (function (){var G__240186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240187 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240186,G__240187) : tailrecursion.hoplon.span.call(null,G__240186,G__240187));
})();
var G__240160 = " ";
var G__240161 = (function (){var G__240188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240189 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240188,G__240189) : tailrecursion.hoplon.span.call(null,G__240188,G__240189));
})();
var G__240162 = ") (";
var G__240163 = (function (){var G__240190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240191 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240190,G__240191) : tailrecursion.hoplon.span.call(null,G__240190,G__240191));
})();
var G__240164 = (function (){var G__240192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240193 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240192,G__240193) : tailrecursion.hoplon.span.call(null,G__240192,G__240193));
})();
var G__240165 = " ";
var G__240166 = (function (){var G__240194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240195 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240194,G__240195) : tailrecursion.hoplon.span.call(null,G__240194,G__240195));
})();
var G__240167 = " ";
var G__240168 = (function (){var G__240196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240197 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240196,G__240197) : tailrecursion.hoplon.span.call(null,G__240196,G__240197));
})();
var G__240169 = ")\n      ";
var G__240170 = (function (){var G__240198 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240199 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240198,G__240199) : tailrecursion.hoplon.span.call(null,G__240198,G__240199));
})();
var G__240171 = " ";
var G__240172 = (function (){var G__240200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240201 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240200,G__240201) : tailrecursion.hoplon.span.call(null,G__240200,G__240201));
})();
var G__240173 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__240147,G__240148,G__240149,G__240150,G__240151,G__240152,G__240153,G__240154,G__240155,G__240156,G__240157,G__240158,G__240159,G__240160,G__240161,G__240162,G__240163,G__240164,G__240165,G__240166,G__240167,G__240168,G__240169,G__240170,G__240171,G__240172,G__240173) : tailrecursion.hoplon.pre.call(null,G__240147,G__240148,G__240149,G__240150,G__240151,G__240152,G__240153,G__240154,G__240155,G__240156,G__240157,G__240158,G__240159,G__240160,G__240161,G__240162,G__240163,G__240164,G__240165,G__240166,G__240167,G__240168,G__240169,G__240170,G__240171,G__240172,G__240173));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240145,G__240146) : tailrecursion.hoplon.div.call(null,G__240145,G__240146));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240144) : tailrecursion.hoplon.div.call(null,G__240144));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240086;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240085;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240084;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240083;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240202 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240203 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240204 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240205 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240206 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__240206) : tailrecursion.hoplon.pre.call(null,G__240206));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240205;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240204;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240203;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240202;
}})()], 0)),"",(function (){var _STAR_references_STAR_240207 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240208 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240209 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240210 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240245 = (function (){var G__240246 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240247 = (function (){var G__240248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240249 = "(";
var G__240250 = (function (){var G__240264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240265 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240264,G__240265) : tailrecursion.hoplon.span.call(null,G__240264,G__240265));
})();
var G__240251 = (function (){var G__240266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240267 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240266,G__240267) : tailrecursion.hoplon.span.call(null,G__240266,G__240267));
})();
var G__240252 = " (";
var G__240253 = (function (){var G__240268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240269 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240268,G__240269) : tailrecursion.hoplon.span.call(null,G__240268,G__240269));
})();
var G__240254 = "(";
var G__240255 = (function (){var G__240270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240271 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240270,G__240271) : tailrecursion.hoplon.span.call(null,G__240270,G__240271));
})();
var G__240256 = (function (){var G__240272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240273 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240272,G__240273) : tailrecursion.hoplon.span.call(null,G__240272,G__240273));
})();
var G__240257 = " ";
var G__240258 = (function (){var G__240274 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240275 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240274,G__240275) : tailrecursion.hoplon.span.call(null,G__240274,G__240275));
})();
var G__240259 = ") ";
var G__240260 = (function (){var G__240276 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240277 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240276,G__240277) : tailrecursion.hoplon.span.call(null,G__240276,G__240277));
})();
var G__240261 = " ";
var G__240262 = (function (){var G__240278 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240279 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240278,G__240279) : tailrecursion.hoplon.span.call(null,G__240278,G__240279));
})();
var G__240263 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__240248,G__240249,G__240250,G__240251,G__240252,G__240253,G__240254,G__240255,G__240256,G__240257,G__240258,G__240259,G__240260,G__240261,G__240262,G__240263) : tailrecursion.hoplon.pre.call(null,G__240248,G__240249,G__240250,G__240251,G__240252,G__240253,G__240254,G__240255,G__240256,G__240257,G__240258,G__240259,G__240260,G__240261,G__240262,G__240263));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240246,G__240247) : tailrecursion.hoplon.div.call(null,G__240246,G__240247));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240245) : tailrecursion.hoplon.div.call(null,G__240245));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240210;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240209;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240208;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240207;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240280 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240281 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240282 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240283 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240284 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("5\n") : tailrecursion.hoplon.code.call(null,"5\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__240284) : tailrecursion.hoplon.pre.call(null,G__240284));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240283;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240282;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240281;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240280;
}})()], 0)),"",(function (){var _STAR_references_STAR_240285 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240286 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240287 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240288 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240350 = (function (){var G__240351 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240352 = (function (){var G__240353 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240354 = "(";
var G__240355 = (function (){var G__240382 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240383 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240382,G__240383) : tailrecursion.hoplon.span.call(null,G__240382,G__240383));
})();
var G__240356 = "(";
var G__240357 = (function (){var G__240384 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240385 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240384,G__240385) : tailrecursion.hoplon.span.call(null,G__240384,G__240385));
})();
var G__240358 = "(";
var G__240359 = (function (){var G__240386 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240387 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240386,G__240387) : tailrecursion.hoplon.span.call(null,G__240386,G__240387));
})();
var G__240360 = (function (){var G__240388 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240389 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240388,G__240389) : tailrecursion.hoplon.span.call(null,G__240388,G__240389));
})();
var G__240361 = " ";
var G__240362 = (function (){var G__240390 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240391 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240390,G__240391) : tailrecursion.hoplon.span.call(null,G__240390,G__240391));
})();
var G__240363 = ") ";
var G__240364 = (function (){var G__240392 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240393 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240392,G__240393) : tailrecursion.hoplon.span.call(null,G__240392,G__240393));
})();
var G__240365 = "\n         (";
var G__240366 = (function (){var G__240394 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240395 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240394,G__240395) : tailrecursion.hoplon.span.call(null,G__240394,G__240395));
})();
var G__240367 = (function (){var G__240396 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240397 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240396,G__240397) : tailrecursion.hoplon.span.call(null,G__240396,G__240397));
})();
var G__240368 = " ";
var G__240369 = (function (){var G__240398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240399 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240398,G__240399) : tailrecursion.hoplon.span.call(null,G__240398,G__240399));
})();
var G__240370 = ") ";
var G__240371 = (function (){var G__240400 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240401 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240400,G__240401) : tailrecursion.hoplon.span.call(null,G__240400,G__240401));
})();
var G__240372 = "\n         ";
var G__240373 = (function (){var G__240402 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240403 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240402,G__240403) : tailrecursion.hoplon.span.call(null,G__240402,G__240403));
})();
var G__240374 = " ";
var G__240375 = (function (){var G__240404 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240405 = "-1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240404,G__240405) : tailrecursion.hoplon.span.call(null,G__240404,G__240405));
})();
var G__240376 = ")\n   (";
var G__240377 = (function (){var G__240406 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240407 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240406,G__240407) : tailrecursion.hoplon.span.call(null,G__240406,G__240407));
})();
var G__240378 = (function (){var G__240408 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240409 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240408,G__240409) : tailrecursion.hoplon.span.call(null,G__240408,G__240409));
})();
var G__240379 = " ";
var G__240380 = (function (){var G__240410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240411 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240410,G__240411) : tailrecursion.hoplon.span.call(null,G__240410,G__240411));
})();
var G__240381 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__240353,G__240354,G__240355,G__240356,G__240357,G__240358,G__240359,G__240360,G__240361,G__240362,G__240363,G__240364,G__240365,G__240366,G__240367,G__240368,G__240369,G__240370,G__240371,G__240372,G__240373,G__240374,G__240375,G__240376,G__240377,G__240378,G__240379,G__240380,G__240381) : tailrecursion.hoplon.pre.call(null,G__240353,G__240354,G__240355,G__240356,G__240357,G__240358,G__240359,G__240360,G__240361,G__240362,G__240363,G__240364,G__240365,G__240366,G__240367,G__240368,G__240369,G__240370,G__240371,G__240372,G__240373,G__240374,G__240375,G__240376,G__240377,G__240378,G__240379,G__240380,G__240381));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240351,G__240352) : tailrecursion.hoplon.div.call(null,G__240351,G__240352));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240350) : tailrecursion.hoplon.div.call(null,G__240350));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240288;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240287;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240286;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240285;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240412 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240413 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240414 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240415 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240416 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__240416) : tailrecursion.hoplon.pre.call(null,G__240416));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240415;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240414;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240413;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240412;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240417 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240418 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240419 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240420 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240421 = cljs.core.PersistentArrayMap.EMPTY;
var G__240422 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Translate the following expression into prefix form $$\\frac{5+4+\\left(2-\\left(3-\\left(6+\\frac{4}{5}\\right)\\right)\\right)}{3(6-2)(2-7)}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240421,G__240422) : tailrecursion.hoplon.markdown.para_node.call(null,G__240421,G__240422));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240420;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240419;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240418;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240417;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240423 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240424 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240425 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240426 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240507 = (function (){var G__240508 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240509 = (function (){var G__240510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240511 = "(";
var G__240512 = (function (){var G__240546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240547 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240546,G__240547) : tailrecursion.hoplon.span.call(null,G__240546,G__240547));
})();
var G__240513 = "(";
var G__240514 = (function (){var G__240548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240549 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240548,G__240549) : tailrecursion.hoplon.span.call(null,G__240548,G__240549));
})();
var G__240515 = (function (){var G__240550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240551 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240550,G__240551) : tailrecursion.hoplon.span.call(null,G__240550,G__240551));
})();
var G__240516 = " ";
var G__240517 = (function (){var G__240552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240553 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240552,G__240553) : tailrecursion.hoplon.span.call(null,G__240552,G__240553));
})();
var G__240518 = " (";
var G__240519 = (function (){var G__240554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240555 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240554,G__240555) : tailrecursion.hoplon.span.call(null,G__240554,G__240555));
})();
var G__240520 = (function (){var G__240556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240557 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240556,G__240557) : tailrecursion.hoplon.span.call(null,G__240556,G__240557));
})();
var G__240521 = " (";
var G__240522 = (function (){var G__240558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240559 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240558,G__240559) : tailrecursion.hoplon.span.call(null,G__240558,G__240559));
})();
var G__240523 = (function (){var G__240560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240561 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240560,G__240561) : tailrecursion.hoplon.span.call(null,G__240560,G__240561));
})();
var G__240524 = " (";
var G__240525 = (function (){var G__240562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240563 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240562,G__240563) : tailrecursion.hoplon.span.call(null,G__240562,G__240563));
})();
var G__240526 = (function (){var G__240564 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240565 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240564,G__240565) : tailrecursion.hoplon.span.call(null,G__240564,G__240565));
})();
var G__240527 = " (";
var G__240528 = (function (){var G__240566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240567 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240566,G__240567) : tailrecursion.hoplon.span.call(null,G__240566,G__240567));
})();
var G__240529 = (function (){var G__240568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240569 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240568,G__240569) : tailrecursion.hoplon.span.call(null,G__240568,G__240569));
})();
var G__240530 = " ";
var G__240531 = (function (){var G__240570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240571 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240570,G__240571) : tailrecursion.hoplon.span.call(null,G__240570,G__240571));
})();
var G__240532 = "))))) \n   (";
var G__240533 = (function (){var G__240572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240573 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240572,G__240573) : tailrecursion.hoplon.span.call(null,G__240572,G__240573));
})();
var G__240534 = (function (){var G__240574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240575 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240574,G__240575) : tailrecursion.hoplon.span.call(null,G__240574,G__240575));
})();
var G__240535 = " (";
var G__240536 = (function (){var G__240576 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240577 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240576,G__240577) : tailrecursion.hoplon.span.call(null,G__240576,G__240577));
})();
var G__240537 = (function (){var G__240578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240579 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240578,G__240579) : tailrecursion.hoplon.span.call(null,G__240578,G__240579));
})();
var G__240538 = " ";
var G__240539 = (function (){var G__240580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240581 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240580,G__240581) : tailrecursion.hoplon.span.call(null,G__240580,G__240581));
})();
var G__240540 = ") (";
var G__240541 = (function (){var G__240582 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240583 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240582,G__240583) : tailrecursion.hoplon.span.call(null,G__240582,G__240583));
})();
var G__240542 = (function (){var G__240584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240585 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240584,G__240585) : tailrecursion.hoplon.span.call(null,G__240584,G__240585));
})();
var G__240543 = " ";
var G__240544 = (function (){var G__240586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240587 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240586,G__240587) : tailrecursion.hoplon.span.call(null,G__240586,G__240587));
})();
var G__240545 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__240510,G__240511,G__240512,G__240513,G__240514,G__240515,G__240516,G__240517,G__240518,G__240519,G__240520,G__240521,G__240522,G__240523,G__240524,G__240525,G__240526,G__240527,G__240528,G__240529,G__240530,G__240531,G__240532,G__240533,G__240534,G__240535,G__240536,G__240537,G__240538,G__240539,G__240540,G__240541,G__240542,G__240543,G__240544,G__240545) : tailrecursion.hoplon.pre.call(null,G__240510,G__240511,G__240512,G__240513,G__240514,G__240515,G__240516,G__240517,G__240518,G__240519,G__240520,G__240521,G__240522,G__240523,G__240524,G__240525,G__240526,G__240527,G__240528,G__240529,G__240530,G__240531,G__240532,G__240533,G__240534,G__240535,G__240536,G__240537,G__240538,G__240539,G__240540,G__240541,G__240542,G__240543,G__240544,G__240545));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240508,G__240509) : tailrecursion.hoplon.div.call(null,G__240508,G__240509));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240507) : tailrecursion.hoplon.div.call(null,G__240507));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240426;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240425;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240424;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240423;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240588 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240589 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240590 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240591 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240592 = cljs.core.PersistentArrayMap.EMPTY;
var G__240593 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240592,G__240593) : tailrecursion.hoplon.markdown.para_node.call(null,G__240592,G__240593));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240591;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240590;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240589;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240588;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240594 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240595 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240596 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240597 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240741 = (function (){var G__240742 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240743 = (function (){var G__240744 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240745 = "(";
var G__240746 = (function (){var G__240813 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240814 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240813,G__240814) : tailrecursion.hoplon.span.call(null,G__240813,G__240814));
})();
var G__240747 = (function (){var G__240815 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240816 = "sum-of-largest-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240815,G__240816) : tailrecursion.hoplon.span.call(null,G__240815,G__240816));
})();
var G__240748 = " [";
var G__240749 = (function (){var G__240817 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240818 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240817,G__240818) : tailrecursion.hoplon.span.call(null,G__240817,G__240818));
})();
var G__240750 = " ";
var G__240751 = (function (){var G__240819 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240820 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240819,G__240820) : tailrecursion.hoplon.span.call(null,G__240819,G__240820));
})();
var G__240752 = " ";
var G__240753 = (function (){var G__240821 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240822 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240821,G__240822) : tailrecursion.hoplon.span.call(null,G__240821,G__240822));
})();
var G__240754 = "]\n  (";
var G__240755 = (function (){var G__240823 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240824 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240823,G__240824) : tailrecursion.hoplon.span.call(null,G__240823,G__240824));
})();
var G__240756 = "(";
var G__240757 = (function (){var G__240825 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240826 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240825,G__240826) : tailrecursion.hoplon.span.call(null,G__240825,G__240826));
})();
var G__240758 = "(";
var G__240759 = (function (){var G__240827 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240828 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240827,G__240828) : tailrecursion.hoplon.span.call(null,G__240827,G__240828));
})();
var G__240760 = (function (){var G__240829 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240830 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240829,G__240830) : tailrecursion.hoplon.span.call(null,G__240829,G__240830));
})();
var G__240761 = " ";
var G__240762 = (function (){var G__240831 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240832 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240831,G__240832) : tailrecursion.hoplon.span.call(null,G__240831,G__240832));
})();
var G__240763 = ") (";
var G__240764 = (function (){var G__240833 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240834 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240833,G__240834) : tailrecursion.hoplon.span.call(null,G__240833,G__240834));
})();
var G__240765 = (function (){var G__240835 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240836 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240835,G__240836) : tailrecursion.hoplon.span.call(null,G__240835,G__240836));
})();
var G__240766 = " ";
var G__240767 = (function (){var G__240837 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240838 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240837,G__240838) : tailrecursion.hoplon.span.call(null,G__240837,G__240838));
})();
var G__240768 = ")) (";
var G__240769 = (function (){var G__240839 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240840 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240839,G__240840) : tailrecursion.hoplon.span.call(null,G__240839,G__240840));
})();
var G__240770 = "(";
var G__240771 = (function (){var G__240841 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__240842 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240841,G__240842) : tailrecursion.hoplon.span.call(null,G__240841,G__240842));
})();
var G__240772 = " ";
var G__240773 = (function (){var G__240843 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240844 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240843,G__240844) : tailrecursion.hoplon.span.call(null,G__240843,G__240844));
})();
var G__240774 = ") (";
var G__240775 = (function (){var G__240845 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__240846 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240845,G__240846) : tailrecursion.hoplon.span.call(null,G__240845,G__240846));
})();
var G__240776 = " ";
var G__240777 = (function (){var G__240847 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240848 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240847,G__240848) : tailrecursion.hoplon.span.call(null,G__240847,G__240848));
})();
var G__240778 = "))\n        (";
var G__240779 = (function (){var G__240849 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240850 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240849,G__240850) : tailrecursion.hoplon.span.call(null,G__240849,G__240850));
})();
var G__240780 = "(";
var G__240781 = (function (){var G__240851 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240852 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240851,G__240852) : tailrecursion.hoplon.span.call(null,G__240851,G__240852));
})();
var G__240782 = (function (){var G__240853 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240854 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240853,G__240854) : tailrecursion.hoplon.span.call(null,G__240853,G__240854));
})();
var G__240783 = " ";
var G__240784 = (function (){var G__240855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240856 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240855,G__240856) : tailrecursion.hoplon.span.call(null,G__240855,G__240856));
})();
var G__240785 = ") (";
var G__240786 = (function (){var G__240857 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240858 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240857,G__240858) : tailrecursion.hoplon.span.call(null,G__240857,G__240858));
})();
var G__240787 = (function (){var G__240859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240860 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240859,G__240860) : tailrecursion.hoplon.span.call(null,G__240859,G__240860));
})();
var G__240788 = " ";
var G__240789 = (function (){var G__240861 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240862 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240861,G__240862) : tailrecursion.hoplon.span.call(null,G__240861,G__240862));
})();
var G__240790 = ")) (";
var G__240791 = (function (){var G__240863 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240864 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240863,G__240864) : tailrecursion.hoplon.span.call(null,G__240863,G__240864));
})();
var G__240792 = "(";
var G__240793 = (function (){var G__240865 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__240866 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240865,G__240866) : tailrecursion.hoplon.span.call(null,G__240865,G__240866));
})();
var G__240794 = " ";
var G__240795 = (function (){var G__240867 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240868 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240867,G__240868) : tailrecursion.hoplon.span.call(null,G__240867,G__240868));
})();
var G__240796 = ") (";
var G__240797 = (function (){var G__240869 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__240870 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240869,G__240870) : tailrecursion.hoplon.span.call(null,G__240869,G__240870));
})();
var G__240798 = " ";
var G__240799 = (function (){var G__240871 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240872 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240871,G__240872) : tailrecursion.hoplon.span.call(null,G__240871,G__240872));
})();
var G__240800 = "))\n        ";
var G__240801 = (function (){var G__240873 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240874 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240873,G__240874) : tailrecursion.hoplon.span.call(null,G__240873,G__240874));
})();
var G__240802 = " (";
var G__240803 = (function (){var G__240875 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240876 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240875,G__240876) : tailrecursion.hoplon.span.call(null,G__240875,G__240876));
})();
var G__240804 = "(";
var G__240805 = (function (){var G__240877 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__240878 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240877,G__240878) : tailrecursion.hoplon.span.call(null,G__240877,G__240878));
})();
var G__240806 = " ";
var G__240807 = (function (){var G__240879 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240880 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240879,G__240880) : tailrecursion.hoplon.span.call(null,G__240879,G__240880));
})();
var G__240808 = ") (";
var G__240809 = (function (){var G__240881 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__240882 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240881,G__240882) : tailrecursion.hoplon.span.call(null,G__240881,G__240882));
})();
var G__240810 = " ";
var G__240811 = (function (){var G__240883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240884 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240883,G__240884) : tailrecursion.hoplon.span.call(null,G__240883,G__240884));
})();
var G__240812 = "))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69(G__240744,G__240745,G__240746,G__240747,G__240748,G__240749,G__240750,G__240751,G__240752,G__240753,G__240754,G__240755,G__240756,G__240757,G__240758,G__240759,G__240760,G__240761,G__240762,G__240763,G__240764,G__240765,G__240766,G__240767,G__240768,G__240769,G__240770,G__240771,G__240772,G__240773,G__240774,G__240775,G__240776,G__240777,G__240778,G__240779,G__240780,G__240781,G__240782,G__240783,G__240784,G__240785,G__240786,G__240787,G__240788,G__240789,G__240790,G__240791,G__240792,G__240793,G__240794,G__240795,G__240796,G__240797,G__240798,G__240799,G__240800,G__240801,G__240802,G__240803,G__240804,G__240805,G__240806,G__240807,G__240808,G__240809,G__240810,G__240811,G__240812) : tailrecursion.hoplon.pre.call(null,G__240744,G__240745,G__240746,G__240747,G__240748,G__240749,G__240750,G__240751,G__240752,G__240753,G__240754,G__240755,G__240756,G__240757,G__240758,G__240759,G__240760,G__240761,G__240762,G__240763,G__240764,G__240765,G__240766,G__240767,G__240768,G__240769,G__240770,G__240771,G__240772,G__240773,G__240774,G__240775,G__240776,G__240777,G__240778,G__240779,G__240780,G__240781,G__240782,G__240783,G__240784,G__240785,G__240786,G__240787,G__240788,G__240789,G__240790,G__240791,G__240792,G__240793,G__240794,G__240795,G__240796,G__240797,G__240798,G__240799,G__240800,G__240801,G__240802,G__240803,G__240804,G__240805,G__240806,G__240807,G__240808,G__240809,G__240810,G__240811,G__240812));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240742,G__240743) : tailrecursion.hoplon.div.call(null,G__240742,G__240743));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240741) : tailrecursion.hoplon.div.call(null,G__240741));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240597;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240596;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240595;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240594;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240885 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240886 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240887 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240888 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240889 = cljs.core.PersistentArrayMap.EMPTY;
var G__240890 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240889,G__240890) : tailrecursion.hoplon.markdown.para_node.call(null,G__240889,G__240890));
})(),(function (){var G__240940 = (function (){var G__240941 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240942 = (function (){var G__240943 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240944 = "(";
var G__240945 = (function (){var G__240966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240967 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240966,G__240967) : tailrecursion.hoplon.span.call(null,G__240966,G__240967));
})();
var G__240946 = (function (){var G__240968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240969 = "a-plus-abs-b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240968,G__240969) : tailrecursion.hoplon.span.call(null,G__240968,G__240969));
})();
var G__240947 = " [";
var G__240948 = (function (){var G__240970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240971 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240970,G__240971) : tailrecursion.hoplon.span.call(null,G__240970,G__240971));
})();
var G__240949 = " ";
var G__240950 = (function (){var G__240972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240973 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240972,G__240973) : tailrecursion.hoplon.span.call(null,G__240972,G__240973));
})();
var G__240951 = "]\n  ((";
var G__240952 = (function (){var G__240974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240975 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240974,G__240975) : tailrecursion.hoplon.span.call(null,G__240974,G__240975));
})();
var G__240953 = "(";
var G__240954 = (function (){var G__240976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240977 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240976,G__240977) : tailrecursion.hoplon.span.call(null,G__240976,G__240977));
})();
var G__240955 = (function (){var G__240978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240979 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240978,G__240979) : tailrecursion.hoplon.span.call(null,G__240978,G__240979));
})();
var G__240956 = " ";
var G__240957 = (function (){var G__240980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240981 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240980,G__240981) : tailrecursion.hoplon.span.call(null,G__240980,G__240981));
})();
var G__240958 = ") ";
var G__240959 = (function (){var G__240982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240983 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240982,G__240983) : tailrecursion.hoplon.span.call(null,G__240982,G__240983));
})();
var G__240960 = (function (){var G__240984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240985 = "-";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240984,G__240985) : tailrecursion.hoplon.span.call(null,G__240984,G__240985));
})();
var G__240961 = ") ";
var G__240962 = (function (){var G__240986 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240987 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240986,G__240987) : tailrecursion.hoplon.span.call(null,G__240986,G__240987));
})();
var G__240963 = " ";
var G__240964 = (function (){var G__240988 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240989 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240988,G__240989) : tailrecursion.hoplon.span.call(null,G__240988,G__240989));
})();
var G__240965 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__240943,G__240944,G__240945,G__240946,G__240947,G__240948,G__240949,G__240950,G__240951,G__240952,G__240953,G__240954,G__240955,G__240956,G__240957,G__240958,G__240959,G__240960,G__240961,G__240962,G__240963,G__240964,G__240965) : tailrecursion.hoplon.pre.call(null,G__240943,G__240944,G__240945,G__240946,G__240947,G__240948,G__240949,G__240950,G__240951,G__240952,G__240953,G__240954,G__240955,G__240956,G__240957,G__240958,G__240959,G__240960,G__240961,G__240962,G__240963,G__240964,G__240965));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240941,G__240942) : tailrecursion.hoplon.div.call(null,G__240941,G__240942));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240940) : tailrecursion.hoplon.div.call(null,G__240940));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240888;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240887;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240886;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240885;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_240990 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240991 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240992 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240993 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240994 = cljs.core.PersistentArrayMap.EMPTY;
var G__240995 = new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It returns ",(function (){var G__240996 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__240997 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__240996,G__240997) : tailrecursion.hoplon.markdown.code_node.call(null,G__240996,G__240997));
})(),". Note: if ",(function (){var G__240998 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(> b 0)"], null);
var G__240999 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__240998,G__240999) : tailrecursion.hoplon.markdown.code_node.call(null,G__240998,G__240999));
})(),", then ",(function (){var G__241000 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) b)"], null);
var G__241001 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241000,G__241001) : tailrecursion.hoplon.markdown.code_node.call(null,G__241000,G__241001));
})(),", so ",(function (){var G__241002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__241003 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241002,G__241003) : tailrecursion.hoplon.markdown.code_node.call(null,G__241002,G__241003));
})()," would be ",(function (){var G__241004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a b)"], null);
var G__241005 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241004,G__241005) : tailrecursion.hoplon.markdown.code_node.call(null,G__241004,G__241005));
})(),", just as this function gives us. Alternatively, if ",(function (){var G__241006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(not (> b 0))"], null);
var G__241007 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241006,G__241007) : tailrecursion.hoplon.markdown.code_node.call(null,G__241006,G__241007));
})(),", then b is negative and ",(function (){var G__241008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) (- b))"], null);
var G__241009 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241008,G__241009) : tailrecursion.hoplon.markdown.code_node.call(null,G__241008,G__241009));
})()," which means, ",(function (){var G__241010 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__241011 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241010,G__241011) : tailrecursion.hoplon.markdown.code_node.call(null,G__241010,G__241011));
})()," is ",(function (){var G__241012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (- b))"], null);
var G__241013 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241012,G__241013) : tailrecursion.hoplon.markdown.code_node.call(null,G__241012,G__241013));
})()," which is really just ",(function (){var G__241014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- a b)"], null);
var G__241015 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241014,G__241015) : tailrecursion.hoplon.markdown.code_node.call(null,G__241014,G__241015));
})()," as our function above gives us."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240994,G__240995) : tailrecursion.hoplon.markdown.para_node.call(null,G__240994,G__240995));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240993;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240992;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240991;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240990;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_241016 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241017 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_241018 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241019 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241020 = cljs.core.PersistentArrayMap.EMPTY;
var G__241021 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241020,G__241021) : tailrecursion.hoplon.markdown.para_node.call(null,G__241020,G__241021));
})(),(function (){var G__241037 = (function (){var G__241038 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241039 = (function (){var G__241040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241041 = "(";
var G__241042 = (function (){var G__241047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241048 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241047,G__241048) : tailrecursion.hoplon.span.call(null,G__241047,G__241048));
})();
var G__241043 = (function (){var G__241049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241050 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241049,G__241050) : tailrecursion.hoplon.span.call(null,G__241049,G__241050));
})();
var G__241044 = " [] (";
var G__241045 = (function (){var G__241051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241052 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241051,G__241052) : tailrecursion.hoplon.span.call(null,G__241051,G__241052));
})();
var G__241046 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__241040,G__241041,G__241042,G__241043,G__241044,G__241045,G__241046) : tailrecursion.hoplon.pre.call(null,G__241040,G__241041,G__241042,G__241043,G__241044,G__241045,G__241046));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241038,G__241039) : tailrecursion.hoplon.div.call(null,G__241038,G__241039));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241037) : tailrecursion.hoplon.div.call(null,G__241037));
})(),(function (){var G__241053 = cljs.core.PersistentArrayMap.EMPTY;
var G__241054 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241053,G__241054) : tailrecursion.hoplon.markdown.para_node.call(null,G__241053,G__241054));
})(),(function (){var G__241097 = (function (){var G__241098 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241099 = (function (){var G__241100 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241101 = "(";
var G__241102 = (function (){var G__241120 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241121 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241120,G__241121) : tailrecursion.hoplon.span.call(null,G__241120,G__241121));
})();
var G__241103 = (function (){var G__241122 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241123 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241122,G__241123) : tailrecursion.hoplon.span.call(null,G__241122,G__241123));
})();
var G__241104 = "[";
var G__241105 = (function (){var G__241124 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241125 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241124,G__241125) : tailrecursion.hoplon.span.call(null,G__241124,G__241125));
})();
var G__241106 = " ";
var G__241107 = (function (){var G__241126 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241127 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241126,G__241127) : tailrecursion.hoplon.span.call(null,G__241126,G__241127));
})();
var G__241108 = "]\n   (";
var G__241109 = (function (){var G__241128 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241129 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241128,G__241129) : tailrecursion.hoplon.span.call(null,G__241128,G__241129));
})();
var G__241110 = "(";
var G__241111 = (function (){var G__241130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241131 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241130,G__241131) : tailrecursion.hoplon.span.call(null,G__241130,G__241131));
})();
var G__241112 = (function (){var G__241132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241133 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241132,G__241133) : tailrecursion.hoplon.span.call(null,G__241132,G__241133));
})();
var G__241113 = " ";
var G__241114 = (function (){var G__241134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241135 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241134,G__241135) : tailrecursion.hoplon.span.call(null,G__241134,G__241135));
})();
var G__241115 = ")\n   ";
var G__241116 = (function (){var G__241136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241137 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241136,G__241137) : tailrecursion.hoplon.span.call(null,G__241136,G__241137));
})();
var G__241117 = "\n   ";
var G__241118 = (function (){var G__241138 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241139 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241138,G__241139) : tailrecursion.hoplon.span.call(null,G__241138,G__241139));
})();
var G__241119 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__241100,G__241101,G__241102,G__241103,G__241104,G__241105,G__241106,G__241107,G__241108,G__241109,G__241110,G__241111,G__241112,G__241113,G__241114,G__241115,G__241116,G__241117,G__241118,G__241119) : tailrecursion.hoplon.pre.call(null,G__241100,G__241101,G__241102,G__241103,G__241104,G__241105,G__241106,G__241107,G__241108,G__241109,G__241110,G__241111,G__241112,G__241113,G__241114,G__241115,G__241116,G__241117,G__241118,G__241119));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241098,G__241099) : tailrecursion.hoplon.div.call(null,G__241098,G__241099));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241097) : tailrecursion.hoplon.div.call(null,G__241097));
})(),(function (){var G__241140 = cljs.core.PersistentArrayMap.EMPTY;
var G__241141 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then he evaluates the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241140,G__241141) : tailrecursion.hoplon.markdown.para_node.call(null,G__241140,G__241141));
})(),(function (){var G__241157 = (function (){var G__241158 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241159 = (function (){var G__241160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241161 = "(";
var G__241162 = (function (){var G__241167 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241168 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241167,G__241168) : tailrecursion.hoplon.span.call(null,G__241167,G__241168));
})();
var G__241163 = (function (){var G__241169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241170 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241169,G__241170) : tailrecursion.hoplon.span.call(null,G__241169,G__241170));
})();
var G__241164 = " (";
var G__241165 = (function (){var G__241171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241172 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241171,G__241172) : tailrecursion.hoplon.span.call(null,G__241171,G__241172));
})();
var G__241166 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__241160,G__241161,G__241162,G__241163,G__241164,G__241165,G__241166) : tailrecursion.hoplon.pre.call(null,G__241160,G__241161,G__241162,G__241163,G__241164,G__241165,G__241166));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241158,G__241159) : tailrecursion.hoplon.div.call(null,G__241158,G__241159));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241157) : tailrecursion.hoplon.div.call(null,G__241157));
})(),(function (){var G__241173 = cljs.core.PersistentArrayMap.EMPTY;
var G__241174 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241173,G__241174) : tailrecursion.hoplon.markdown.para_node.call(null,G__241173,G__241174));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241019;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241018;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241017;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241016;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_241175 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241176 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_241177 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241178 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241179 = cljs.core.PersistentArrayMap.EMPTY;
var G__241180 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241181 = cljs.core.PersistentArrayMap.EMPTY;
var G__241182 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241183 = cljs.core.PersistentArrayMap.EMPTY;
var G__241184 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With normal order evaluation it compiles just as one  might expect: first the function itself is unraveled,  finding that it is an ",(function (){var G__241185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__241186 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241185,G__241186) : tailrecursion.hoplon.markdown.code_node.call(null,G__241185,G__241186));
})()," statement, then the ",(function (){var G__241187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__241188 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241187,G__241188) : tailrecursion.hoplon.markdown.code_node.call(null,G__241187,G__241188));
})(),"  statement is evaluated according to its own rules.  Finding that the first argument is 0, it returns 0."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241183,G__241184) : tailrecursion.hoplon.markdown.para_node.call(null,G__241183,G__241184));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241181,G__241182) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241181,G__241182));
})(),(function (){var G__241189 = cljs.core.PersistentArrayMap.EMPTY;
var G__241190 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_241191 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241192 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241193 = cljs.core.PersistentArrayMap.EMPTY;
var G__241194 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With applicative order evaluation the story is a bit more  interesting. Since the arguments to a function are always  evaluated first in applicative order evaluation, the  compiler would attempt to evaluate both the first and  second arguments and hence fall into an infinite loop  in the attempt to evaluate the second argument."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241193,G__241194) : tailrecursion.hoplon.markdown.para_node.call(null,G__241193,G__241194));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241192;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241191;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241189,G__241190) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241189,G__241190));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__241179,G__241180) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__241179,G__241180));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241178;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241177;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241176;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241175;
}})()], 0))], 0))], 0));
var G__237046 = "";
var G__237047 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Example: Square Roots by Newton's Method"], null),(function (){var _STAR_references_STAR_241195 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241196 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_241197 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241198 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241199 = cljs.core.PersistentArrayMap.EMPTY;
var G__241200 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Procedures, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer procedures. Procedures must be effective. As a case in point, consider the problem of computing square roots. We can define the square-root function as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241199,G__241200) : tailrecursion.hoplon.markdown.para_node.call(null,G__241199,G__241200));
})(),(function (){var G__241201 = cljs.core.PersistentArrayMap.EMPTY;
var G__241202 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\sqrt x = \\text{ the } y \\text{ such that } y\\geq 0 \\text{ and } y^2 = x $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241201,G__241202) : tailrecursion.hoplon.markdown.para_node.call(null,G__241201,G__241202));
})(),(function (){var G__241203 = cljs.core.PersistentArrayMap.EMPTY;
var G__241204 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a procedure. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-Lisp: "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241203,G__241204) : tailrecursion.hoplon.markdown.para_node.call(null,G__241203,G__241204));
})(),(function (){var G__241259 = (function (){var G__241260 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241261 = (function (){var G__241262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241263 = "(";
var G__241264 = (function (){var G__241288 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241289 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241288,G__241289) : tailrecursion.hoplon.span.call(null,G__241288,G__241289));
})();
var G__241265 = (function (){var G__241290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241291 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241290,G__241291) : tailrecursion.hoplon.span.call(null,G__241290,G__241291));
})();
var G__241266 = " [";
var G__241267 = (function (){var G__241292 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241293 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241292,G__241293) : tailrecursion.hoplon.span.call(null,G__241292,G__241293));
})();
var G__241268 = "] \n  (";
var G__241269 = (function (){var G__241294 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241295 = "the";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241294,G__241295) : tailrecursion.hoplon.span.call(null,G__241294,G__241295));
})();
var G__241270 = " ";
var G__241271 = (function (){var G__241296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241297 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241296,G__241297) : tailrecursion.hoplon.span.call(null,G__241296,G__241297));
})();
var G__241272 = " (";
var G__241273 = (function (){var G__241298 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241299 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241298,G__241299) : tailrecursion.hoplon.span.call(null,G__241298,G__241299));
})();
var G__241274 = "(";
var G__241275 = (function (){var G__241300 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241301 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241300,G__241301) : tailrecursion.hoplon.span.call(null,G__241300,G__241301));
})();
var G__241276 = (function (){var G__241302 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241303 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241302,G__241303) : tailrecursion.hoplon.span.call(null,G__241302,G__241303));
})();
var G__241277 = " ";
var G__241278 = (function (){var G__241304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241305 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241304,G__241305) : tailrecursion.hoplon.span.call(null,G__241304,G__241305));
})();
var G__241279 = ") \n              (";
var G__241280 = (function (){var G__241306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241307 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241306,G__241307) : tailrecursion.hoplon.span.call(null,G__241306,G__241307));
})();
var G__241281 = "(";
var G__241282 = (function (){var G__241308 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241309 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241308,G__241309) : tailrecursion.hoplon.span.call(null,G__241308,G__241309));
})();
var G__241283 = " ";
var G__241284 = (function (){var G__241310 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241311 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241310,G__241311) : tailrecursion.hoplon.span.call(null,G__241310,G__241311));
})();
var G__241285 = ") ";
var G__241286 = (function (){var G__241312 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241313 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241312,G__241313) : tailrecursion.hoplon.span.call(null,G__241312,G__241313));
})();
var G__241287 = ")))) \n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26(G__241262,G__241263,G__241264,G__241265,G__241266,G__241267,G__241268,G__241269,G__241270,G__241271,G__241272,G__241273,G__241274,G__241275,G__241276,G__241277,G__241278,G__241279,G__241280,G__241281,G__241282,G__241283,G__241284,G__241285,G__241286,G__241287) : tailrecursion.hoplon.pre.call(null,G__241262,G__241263,G__241264,G__241265,G__241266,G__241267,G__241268,G__241269,G__241270,G__241271,G__241272,G__241273,G__241274,G__241275,G__241276,G__241277,G__241278,G__241279,G__241280,G__241281,G__241282,G__241283,G__241284,G__241285,G__241286,G__241287));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241260,G__241261) : tailrecursion.hoplon.div.call(null,G__241260,G__241261));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241259) : tailrecursion.hoplon.div.call(null,G__241259));
})(),(function (){var G__241314 = cljs.core.PersistentArrayMap.EMPTY;
var G__241315 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This only begs the question. The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.",(function (){var G__241316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241317 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is ",(function (){var G__241318 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241319 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["correct"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241318,G__241319) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241318,G__241319));
})()," is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given ",(function (){var G__241320 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241321 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["what is"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241320,G__241321) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241320,G__241321));
})()," knowledge specified by the programmer, they can generate ",(function (){var G__241322 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241323 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how to"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241322,G__241323) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241322,G__241323));
})()," knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in chapter 4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241316,G__241317) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241316,G__241317));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241314,G__241315) : tailrecursion.hoplon.markdown.para_node.call(null,G__241314,G__241315));
})(),(function (){var G__241324 = cljs.core.PersistentArrayMap.EMPTY;
var G__241325 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How does one compute square roots? The most common way is to use Newton",(function (){var G__241326 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241327 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241326,G__241327) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241326,G__241327));
})(),"s method of successive approximations, which says that whenever we have a guess y for the value of the square root of a number x, we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging y with x/y.",(function (){var G__241328 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241329 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This square-root algorithm is actually a special case of Newton",(function (){var G__241330 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241331 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241330,G__241331) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241330,G__241331));
})(),"s method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century A.D. We will see how to express the general Newton",(function (){var G__241332 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241333 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241332,G__241333) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241332,G__241333));
})(),"s method as a Lisp procedure in section 1.3.4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241328,G__241329) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241328,G__241329));
})()," For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241324,G__241325) : tailrecursion.hoplon.markdown.para_node.call(null,G__241324,G__241325));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241198;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241197;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241196;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241195;
}})(),"",(function (){var G__241334 = cljs.core.PersistentArrayMap.EMPTY;
var G__241335 = (function (){var G__241340 = cljs.core.PersistentArrayMap.EMPTY;
var G__241341 = (function (){var G__241344 = cljs.core.PersistentArrayMap.EMPTY;
var G__241345 = "Guess ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241344,G__241345) : tailrecursion.hoplon.td.call(null,G__241344,G__241345));
})();
var G__241342 = (function (){var G__241346 = cljs.core.PersistentArrayMap.EMPTY;
var G__241347 = "Quotient ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241346,G__241347) : tailrecursion.hoplon.td.call(null,G__241346,G__241347));
})();
var G__241343 = (function (){var G__241348 = cljs.core.PersistentArrayMap.EMPTY;
var G__241349 = "Average ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241348,G__241349) : tailrecursion.hoplon.td.call(null,G__241348,G__241349));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__241340,G__241341,G__241342,G__241343) : tailrecursion.hoplon.tr.call(null,G__241340,G__241341,G__241342,G__241343));
})();
var G__241336 = (function (){var G__241350 = cljs.core.PersistentArrayMap.EMPTY;
var G__241351 = (function (){var G__241354 = cljs.core.PersistentArrayMap.EMPTY;
var G__241355 = "1 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241354,G__241355) : tailrecursion.hoplon.td.call(null,G__241354,G__241355));
})();
var G__241352 = (function (){var G__241356 = cljs.core.PersistentArrayMap.EMPTY;
var G__241357 = "(2/1) = 2 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241356,G__241357) : tailrecursion.hoplon.td.call(null,G__241356,G__241357));
})();
var G__241353 = (function (){var G__241358 = cljs.core.PersistentArrayMap.EMPTY;
var G__241359 = "((2+1)/2) = 1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241358,G__241359) : tailrecursion.hoplon.td.call(null,G__241358,G__241359));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__241350,G__241351,G__241352,G__241353) : tailrecursion.hoplon.tr.call(null,G__241350,G__241351,G__241352,G__241353));
})();
var G__241337 = (function (){var G__241360 = cljs.core.PersistentArrayMap.EMPTY;
var G__241361 = (function (){var G__241364 = cljs.core.PersistentArrayMap.EMPTY;
var G__241365 = "1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241364,G__241365) : tailrecursion.hoplon.td.call(null,G__241364,G__241365));
})();
var G__241362 = (function (){var G__241366 = cljs.core.PersistentArrayMap.EMPTY;
var G__241367 = "(2/1.5) = 1.333...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241366,G__241367) : tailrecursion.hoplon.td.call(null,G__241366,G__241367));
})();
var G__241363 = (function (){var G__241368 = cljs.core.PersistentArrayMap.EMPTY;
var G__241369 = "((1.333... + 1.5)/2) = 1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241368,G__241369) : tailrecursion.hoplon.td.call(null,G__241368,G__241369));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__241360,G__241361,G__241362,G__241363) : tailrecursion.hoplon.tr.call(null,G__241360,G__241361,G__241362,G__241363));
})();
var G__241338 = (function (){var G__241370 = cljs.core.PersistentArrayMap.EMPTY;
var G__241371 = (function (){var G__241374 = cljs.core.PersistentArrayMap.EMPTY;
var G__241375 = "1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241374,G__241375) : tailrecursion.hoplon.td.call(null,G__241374,G__241375));
})();
var G__241372 = (function (){var G__241376 = cljs.core.PersistentArrayMap.EMPTY;
var G__241377 = "(2/1.4167) = 1.4118 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241376,G__241377) : tailrecursion.hoplon.td.call(null,G__241376,G__241377));
})();
var G__241373 = (function (){var G__241378 = cljs.core.PersistentArrayMap.EMPTY;
var G__241379 = "((1.4167 + 1.4118)/2) = 1.4142 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241378,G__241379) : tailrecursion.hoplon.td.call(null,G__241378,G__241379));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__241370,G__241371,G__241372,G__241373) : tailrecursion.hoplon.tr.call(null,G__241370,G__241371,G__241372,G__241373));
})();
var G__241339 = (function (){var G__241380 = cljs.core.PersistentArrayMap.EMPTY;
var G__241381 = (function (){var G__241384 = cljs.core.PersistentArrayMap.EMPTY;
var G__241385 = "1.4142...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241384,G__241385) : tailrecursion.hoplon.td.call(null,G__241384,G__241385));
})();
var G__241382 = (function (){var G__241386 = cljs.core.PersistentArrayMap.EMPTY;
var G__241387 = "...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241386,G__241387) : tailrecursion.hoplon.td.call(null,G__241386,G__241387));
})();
var G__241383 = (function (){var G__241388 = cljs.core.PersistentArrayMap.EMPTY;
var G__241389 = "...";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__241388,G__241389) : tailrecursion.hoplon.td.call(null,G__241388,G__241389));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__241380,G__241381,G__241382,G__241383) : tailrecursion.hoplon.tr.call(null,G__241380,G__241381,G__241382,G__241383));
})();
return (tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6 ? tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6(G__241334,G__241335,G__241336,G__241337,G__241338,G__241339) : tailrecursion.hoplon.table.call(null,G__241334,G__241335,G__241336,G__241337,G__241338,G__241339));
})(),(function (){var _STAR_references_STAR_241390 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241391 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_241392 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241393 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241394 = cljs.core.PersistentArrayMap.EMPTY;
var G__241395 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Continuing this process, we obtain better and better approximations to the square root. "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241394,G__241395) : tailrecursion.hoplon.markdown.para_node.call(null,G__241394,G__241395));
})(),(function (){var G__241396 = cljs.core.PersistentArrayMap.EMPTY;
var G__241397 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now let",(function (){var G__241398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241399 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241398,G__241399) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241398,G__241399));
})(),"s formalize the process in terms of procedures. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241396,G__241397) : tailrecursion.hoplon.markdown.para_node.call(null,G__241396,G__241397));
})(),(function (){var G__241459 = (function (){var G__241460 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241461 = (function (){var G__241462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241463 = "(";
var G__241464 = (function (){var G__241491 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241492 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241491,G__241492) : tailrecursion.hoplon.span.call(null,G__241491,G__241492));
})();
var G__241465 = (function (){var G__241493 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241494 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241493,G__241494) : tailrecursion.hoplon.span.call(null,G__241493,G__241494));
})();
var G__241466 = " [";
var G__241467 = (function (){var G__241495 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241496 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241495,G__241496) : tailrecursion.hoplon.span.call(null,G__241495,G__241496));
})();
var G__241468 = " ";
var G__241469 = (function (){var G__241497 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241498 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241497,G__241498) : tailrecursion.hoplon.span.call(null,G__241497,G__241498));
})();
var G__241470 = "]\n  (";
var G__241471 = (function (){var G__241499 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241500 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241499,G__241500) : tailrecursion.hoplon.span.call(null,G__241499,G__241500));
})();
var G__241472 = "(";
var G__241473 = (function (){var G__241501 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241502 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241501,G__241502) : tailrecursion.hoplon.span.call(null,G__241501,G__241502));
})();
var G__241474 = " ";
var G__241475 = (function (){var G__241503 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241504 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241503,G__241504) : tailrecursion.hoplon.span.call(null,G__241503,G__241504));
})();
var G__241476 = " ";
var G__241477 = (function (){var G__241505 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241506 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241505,G__241506) : tailrecursion.hoplon.span.call(null,G__241505,G__241506));
})();
var G__241478 = ")\n      ";
var G__241479 = (function (){var G__241507 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241508 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241507,G__241508) : tailrecursion.hoplon.span.call(null,G__241507,G__241508));
})();
var G__241480 = "\n      (";
var G__241481 = (function (){var G__241509 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241510 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241509,G__241510) : tailrecursion.hoplon.span.call(null,G__241509,G__241510));
})();
var G__241482 = " (";
var G__241483 = (function (){var G__241511 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241512 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241511,G__241512) : tailrecursion.hoplon.span.call(null,G__241511,G__241512));
})();
var G__241484 = " ";
var G__241485 = (function (){var G__241513 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241514 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241513,G__241514) : tailrecursion.hoplon.span.call(null,G__241513,G__241514));
})();
var G__241486 = " ";
var G__241487 = (function (){var G__241515 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241516 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241515,G__241516) : tailrecursion.hoplon.span.call(null,G__241515,G__241516));
})();
var G__241488 = ")\n                 ";
var G__241489 = (function (){var G__241517 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241518 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241517,G__241518) : tailrecursion.hoplon.span.call(null,G__241517,G__241518));
})();
var G__241490 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__241462,G__241463,G__241464,G__241465,G__241466,G__241467,G__241468,G__241469,G__241470,G__241471,G__241472,G__241473,G__241474,G__241475,G__241476,G__241477,G__241478,G__241479,G__241480,G__241481,G__241482,G__241483,G__241484,G__241485,G__241486,G__241487,G__241488,G__241489,G__241490) : tailrecursion.hoplon.pre.call(null,G__241462,G__241463,G__241464,G__241465,G__241466,G__241467,G__241468,G__241469,G__241470,G__241471,G__241472,G__241473,G__241474,G__241475,G__241476,G__241477,G__241478,G__241479,G__241480,G__241481,G__241482,G__241483,G__241484,G__241485,G__241486,G__241487,G__241488,G__241489,G__241490));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241460,G__241461) : tailrecursion.hoplon.div.call(null,G__241460,G__241461));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241459) : tailrecursion.hoplon.div.call(null,G__241459));
})(),(function (){var G__241519 = cljs.core.PersistentArrayMap.EMPTY;
var G__241520 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A guess is improved by averaging it with the quotient of the radicand and the old guess:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241519,G__241520) : tailrecursion.hoplon.markdown.para_node.call(null,G__241519,G__241520));
})(),(function (){var G__241559 = (function (){var G__241560 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241561 = (function (){var G__241562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241563 = "(";
var G__241564 = (function (){var G__241580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241581 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241580,G__241581) : tailrecursion.hoplon.span.call(null,G__241580,G__241581));
})();
var G__241565 = (function (){var G__241582 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241583 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241582,G__241583) : tailrecursion.hoplon.span.call(null,G__241582,G__241583));
})();
var G__241566 = " [";
var G__241567 = (function (){var G__241584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241585 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241584,G__241585) : tailrecursion.hoplon.span.call(null,G__241584,G__241585));
})();
var G__241568 = " ";
var G__241569 = (function (){var G__241586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241587 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241586,G__241587) : tailrecursion.hoplon.span.call(null,G__241586,G__241587));
})();
var G__241570 = "]\n  (";
var G__241571 = (function (){var G__241588 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241589 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241588,G__241589) : tailrecursion.hoplon.span.call(null,G__241588,G__241589));
})();
var G__241572 = " ";
var G__241573 = (function (){var G__241590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241591 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241590,G__241591) : tailrecursion.hoplon.span.call(null,G__241590,G__241591));
})();
var G__241574 = " (";
var G__241575 = (function (){var G__241592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241593 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241592,G__241593) : tailrecursion.hoplon.span.call(null,G__241592,G__241593));
})();
var G__241576 = (function (){var G__241594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241595 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241594,G__241595) : tailrecursion.hoplon.span.call(null,G__241594,G__241595));
})();
var G__241577 = " ";
var G__241578 = (function (){var G__241596 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241597 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241596,G__241597) : tailrecursion.hoplon.span.call(null,G__241596,G__241597));
})();
var G__241579 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__241562,G__241563,G__241564,G__241565,G__241566,G__241567,G__241568,G__241569,G__241570,G__241571,G__241572,G__241573,G__241574,G__241575,G__241576,G__241577,G__241578,G__241579) : tailrecursion.hoplon.pre.call(null,G__241562,G__241563,G__241564,G__241565,G__241566,G__241567,G__241568,G__241569,G__241570,G__241571,G__241572,G__241573,G__241574,G__241575,G__241576,G__241577,G__241578,G__241579));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241560,G__241561) : tailrecursion.hoplon.div.call(null,G__241560,G__241561));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241559) : tailrecursion.hoplon.div.call(null,G__241559));
})(),(function (){var G__241598 = cljs.core.PersistentArrayMap.EMPTY;
var G__241599 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241598,G__241599) : tailrecursion.hoplon.markdown.para_node.call(null,G__241598,G__241599));
})(),(function (){var G__241638 = (function (){var G__241639 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241640 = (function (){var G__241641 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241642 = "(";
var G__241643 = (function (){var G__241659 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241660 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241659,G__241660) : tailrecursion.hoplon.span.call(null,G__241659,G__241660));
})();
var G__241644 = (function (){var G__241661 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241662 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241661,G__241662) : tailrecursion.hoplon.span.call(null,G__241661,G__241662));
})();
var G__241645 = " [";
var G__241646 = (function (){var G__241663 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241664 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241663,G__241664) : tailrecursion.hoplon.span.call(null,G__241663,G__241664));
})();
var G__241647 = " ";
var G__241648 = (function (){var G__241665 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241666 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241665,G__241666) : tailrecursion.hoplon.span.call(null,G__241665,G__241666));
})();
var G__241649 = "]\n  (";
var G__241650 = (function (){var G__241667 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241668 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241667,G__241668) : tailrecursion.hoplon.span.call(null,G__241667,G__241668));
})();
var G__241651 = "(";
var G__241652 = (function (){var G__241669 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241670 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241669,G__241670) : tailrecursion.hoplon.span.call(null,G__241669,G__241670));
})();
var G__241653 = (function (){var G__241671 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241672 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241671,G__241672) : tailrecursion.hoplon.span.call(null,G__241671,G__241672));
})();
var G__241654 = " ";
var G__241655 = (function (){var G__241673 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241674 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241673,G__241674) : tailrecursion.hoplon.span.call(null,G__241673,G__241674));
})();
var G__241656 = ") ";
var G__241657 = (function (){var G__241675 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241676 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241675,G__241676) : tailrecursion.hoplon.span.call(null,G__241675,G__241676));
})();
var G__241658 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__241641,G__241642,G__241643,G__241644,G__241645,G__241646,G__241647,G__241648,G__241649,G__241650,G__241651,G__241652,G__241653,G__241654,G__241655,G__241656,G__241657,G__241658) : tailrecursion.hoplon.pre.call(null,G__241641,G__241642,G__241643,G__241644,G__241645,G__241646,G__241647,G__241648,G__241649,G__241650,G__241651,G__241652,G__241653,G__241654,G__241655,G__241656,G__241657,G__241658));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241639,G__241640) : tailrecursion.hoplon.div.call(null,G__241639,G__241640));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241638) : tailrecursion.hoplon.div.call(null,G__241638));
})(),(function (){var G__241677 = cljs.core.PersistentArrayMap.EMPTY;
var G__241678 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We also have to say what we mean by ``good enough.",(function (){var G__241679 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241680 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241679,G__241680) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241679,G__241680));
})(),(function (){var G__241681 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241682 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241681,G__241682) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241681,G__241682));
})()," The following will do for illustration, but it is not really a very good test. (See exercise 1.7.) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001):",(function (){var G__241683 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241684 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention. As far as the interpreter is concerned, the question mark is just an ordinary character."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241683,G__241684) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241683,G__241684));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241677,G__241678) : tailrecursion.hoplon.markdown.para_node.call(null,G__241677,G__241678));
})(),(function (){var G__241732 = (function (){var G__241733 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241734 = (function (){var G__241735 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241736 = "(";
var G__241737 = (function (){var G__241758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241759 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241758,G__241759) : tailrecursion.hoplon.span.call(null,G__241758,G__241759));
})();
var G__241738 = (function (){var G__241760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241761 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241760,G__241761) : tailrecursion.hoplon.span.call(null,G__241760,G__241761));
})();
var G__241739 = " [";
var G__241740 = (function (){var G__241762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241763 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241762,G__241763) : tailrecursion.hoplon.span.call(null,G__241762,G__241763));
})();
var G__241741 = " ";
var G__241742 = (function (){var G__241764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241765 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241764,G__241765) : tailrecursion.hoplon.span.call(null,G__241764,G__241765));
})();
var G__241743 = "]\n  (";
var G__241744 = (function (){var G__241766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241767 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241766,G__241767) : tailrecursion.hoplon.span.call(null,G__241766,G__241767));
})();
var G__241745 = "(";
var G__241746 = (function (){var G__241768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241769 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241768,G__241769) : tailrecursion.hoplon.span.call(null,G__241768,G__241769));
})();
var G__241747 = " (";
var G__241748 = (function (){var G__241770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241771 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241770,G__241771) : tailrecursion.hoplon.span.call(null,G__241770,G__241771));
})();
var G__241749 = "(";
var G__241750 = (function (){var G__241772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241773 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241772,G__241773) : tailrecursion.hoplon.span.call(null,G__241772,G__241773));
})();
var G__241751 = " ";
var G__241752 = (function (){var G__241774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241775 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241774,G__241775) : tailrecursion.hoplon.span.call(null,G__241774,G__241775));
})();
var G__241753 = ") ";
var G__241754 = (function (){var G__241776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241777 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241776,G__241777) : tailrecursion.hoplon.span.call(null,G__241776,G__241777));
})();
var G__241755 = ")) ";
var G__241756 = (function (){var G__241778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241779 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241778,G__241779) : tailrecursion.hoplon.span.call(null,G__241778,G__241779));
})();
var G__241757 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__241735,G__241736,G__241737,G__241738,G__241739,G__241740,G__241741,G__241742,G__241743,G__241744,G__241745,G__241746,G__241747,G__241748,G__241749,G__241750,G__241751,G__241752,G__241753,G__241754,G__241755,G__241756,G__241757) : tailrecursion.hoplon.pre.call(null,G__241735,G__241736,G__241737,G__241738,G__241739,G__241740,G__241741,G__241742,G__241743,G__241744,G__241745,G__241746,G__241747,G__241748,G__241749,G__241750,G__241751,G__241752,G__241753,G__241754,G__241755,G__241756,G__241757));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241733,G__241734) : tailrecursion.hoplon.div.call(null,G__241733,G__241734));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241732) : tailrecursion.hoplon.div.call(null,G__241732));
})(),(function (){var G__241780 = cljs.core.PersistentArrayMap.EMPTY;
var G__241781 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:",(function (){var G__241782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241783 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that we express our initial guess as 1.0 rather than 1. This would not make any difference in many Lisp implementations. MIT Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal. For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667. (We will learn how to implement arithmetic on rational numbers in section 2.1.1.) If we start with an initial guess of 1 in our square-root program, and \\(x\\) is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals. Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241782,G__241783) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241782,G__241783));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241780,G__241781) : tailrecursion.hoplon.markdown.para_node.call(null,G__241780,G__241781));
})(),(function (){var G__241811 = (function (){var G__241812 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241813 = (function (){var G__241814 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241815 = "(";
var G__241816 = (function (){var G__241827 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241828 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241827,G__241828) : tailrecursion.hoplon.span.call(null,G__241827,G__241828));
})();
var G__241817 = (function (){var G__241829 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241830 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241829,G__241830) : tailrecursion.hoplon.span.call(null,G__241829,G__241830));
})();
var G__241818 = " [";
var G__241819 = (function (){var G__241831 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241832 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241831,G__241832) : tailrecursion.hoplon.span.call(null,G__241831,G__241832));
})();
var G__241820 = "]\n  (";
var G__241821 = (function (){var G__241833 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241834 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241833,G__241834) : tailrecursion.hoplon.span.call(null,G__241833,G__241834));
})();
var G__241822 = " ";
var G__241823 = (function (){var G__241835 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241836 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241835,G__241836) : tailrecursion.hoplon.span.call(null,G__241835,G__241836));
})();
var G__241824 = " ";
var G__241825 = (function (){var G__241837 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241838 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241837,G__241838) : tailrecursion.hoplon.span.call(null,G__241837,G__241838));
})();
var G__241826 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__241814,G__241815,G__241816,G__241817,G__241818,G__241819,G__241820,G__241821,G__241822,G__241823,G__241824,G__241825,G__241826) : tailrecursion.hoplon.pre.call(null,G__241814,G__241815,G__241816,G__241817,G__241818,G__241819,G__241820,G__241821,G__241822,G__241823,G__241824,G__241825,G__241826));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241812,G__241813) : tailrecursion.hoplon.div.call(null,G__241812,G__241813));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241811) : tailrecursion.hoplon.div.call(null,G__241811));
})(),(function (){var G__241839 = cljs.core.PersistentArrayMap.EMPTY;
var G__241840 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we type these definitions to the interpreter, we can use sqrt just as we can use any procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241839,G__241840) : tailrecursion.hoplon.markdown.para_node.call(null,G__241839,G__241840));
})(),(function (){var G__241920 = (function (){var G__241921 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241922 = (function (){var G__241923 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241924 = "(";
var G__241925 = (function (){var G__241962 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241963 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241962,G__241963) : tailrecursion.hoplon.span.call(null,G__241962,G__241963));
})();
var G__241926 = " ";
var G__241927 = (function (){var G__241964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241965 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241964,G__241965) : tailrecursion.hoplon.span.call(null,G__241964,G__241965));
})();
var G__241928 = ")\n";
var G__241929 = (function (){var G__241966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241967 = "3.00009155413138";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241966,G__241967) : tailrecursion.hoplon.span.call(null,G__241966,G__241967));
})();
var G__241930 = "\n(";
var G__241931 = (function (){var G__241968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241969 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241968,G__241969) : tailrecursion.hoplon.span.call(null,G__241968,G__241969));
})();
var G__241932 = " (";
var G__241933 = (function (){var G__241970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241971 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241970,G__241971) : tailrecursion.hoplon.span.call(null,G__241970,G__241971));
})();
var G__241934 = (function (){var G__241972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241973 = "100";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241972,G__241973) : tailrecursion.hoplon.span.call(null,G__241972,G__241973));
})();
var G__241935 = " ";
var G__241936 = (function (){var G__241974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241975 = "37";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241974,G__241975) : tailrecursion.hoplon.span.call(null,G__241974,G__241975));
})();
var G__241937 = "))\n";
var G__241938 = (function (){var G__241976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241977 = "11.704699917758145";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241976,G__241977) : tailrecursion.hoplon.span.call(null,G__241976,G__241977));
})();
var G__241939 = "\n(";
var G__241940 = (function (){var G__241978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241979 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241978,G__241979) : tailrecursion.hoplon.span.call(null,G__241978,G__241979));
})();
var G__241941 = " (";
var G__241942 = (function (){var G__241980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241981 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241980,G__241981) : tailrecursion.hoplon.span.call(null,G__241980,G__241981));
})();
var G__241943 = "(";
var G__241944 = (function (){var G__241982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241983 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241982,G__241983) : tailrecursion.hoplon.span.call(null,G__241982,G__241983));
})();
var G__241945 = " ";
var G__241946 = (function (){var G__241984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241985 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241984,G__241985) : tailrecursion.hoplon.span.call(null,G__241984,G__241985));
})();
var G__241947 = ") (";
var G__241948 = (function (){var G__241986 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241987 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241986,G__241987) : tailrecursion.hoplon.span.call(null,G__241986,G__241987));
})();
var G__241949 = " ";
var G__241950 = (function (){var G__241988 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241989 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241988,G__241989) : tailrecursion.hoplon.span.call(null,G__241988,G__241989));
})();
var G__241951 = ")))\n";
var G__241952 = (function (){var G__241990 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241991 = "1.7739279023207892";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241990,G__241991) : tailrecursion.hoplon.span.call(null,G__241990,G__241991));
})();
var G__241953 = "\n(";
var G__241954 = (function (){var G__241992 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241993 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241992,G__241993) : tailrecursion.hoplon.span.call(null,G__241992,G__241993));
})();
var G__241955 = " (";
var G__241956 = (function (){var G__241994 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241995 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241994,G__241995) : tailrecursion.hoplon.span.call(null,G__241994,G__241995));
})();
var G__241957 = " ";
var G__241958 = (function (){var G__241996 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241997 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241996,G__241997) : tailrecursion.hoplon.span.call(null,G__241996,G__241997));
})();
var G__241959 = "))\n";
var G__241960 = (function (){var G__241998 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241999 = "1000.000369924366";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241998,G__241999) : tailrecursion.hoplon.span.call(null,G__241998,G__241999));
})();
var G__241961 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__241923,G__241924,G__241925,G__241926,G__241927,G__241928,G__241929,G__241930,G__241931,G__241932,G__241933,G__241934,G__241935,G__241936,G__241937,G__241938,G__241939,G__241940,G__241941,G__241942,G__241943,G__241944,G__241945,G__241946,G__241947,G__241948,G__241949,G__241950,G__241951,G__241952,G__241953,G__241954,G__241955,G__241956,G__241957,G__241958,G__241959,G__241960,G__241961) : tailrecursion.hoplon.pre.call(null,G__241923,G__241924,G__241925,G__241926,G__241927,G__241928,G__241929,G__241930,G__241931,G__241932,G__241933,G__241934,G__241935,G__241936,G__241937,G__241938,G__241939,G__241940,G__241941,G__241942,G__241943,G__241944,G__241945,G__241946,G__241947,G__241948,G__241949,G__241950,G__241951,G__241952,G__241953,G__241954,G__241955,G__241956,G__241957,G__241958,G__241959,G__241960,G__241961));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241921,G__241922) : tailrecursion.hoplon.div.call(null,G__241921,G__241922));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241920) : tailrecursion.hoplon.div.call(null,G__241920));
})(),(function (){var G__242000 = cljs.core.PersistentArrayMap.EMPTY;
var G__242001 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The sqrt program also illustrates that the simple procedural language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. Sqrt-iter, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a procedure.",(function (){var G__242002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__242003 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on ``tail recursion",(function (){var G__242004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242005 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242004,G__242005) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242004,G__242005));
})(),(function (){var G__242006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242007 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242006,G__242007) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242006,G__242007));
})()," in section 1.2.1."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__242002,G__242003) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__242002,G__242003));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242000,G__242001) : tailrecursion.hoplon.markdown.para_node.call(null,G__242000,G__242001));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241393;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241392;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241391;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241390;
}})()], 0));
var G__237048 = "";
var G__237049 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242008 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242009 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242010 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242011 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242012 = cljs.core.PersistentArrayMap.EMPTY;
var G__242013 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Alyssa P. Hacker doesn",(function (){var G__242014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242015 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242014,G__242015) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242014,G__242015));
})(),"t see why if needs to be provided as a special form. ",(function (){var G__242016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__242017 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Why can",(function (){var G__242018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242019 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242018,G__242019) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242018,G__242019));
})(),"t I just define it as an ordinary procedure in terms of cond?"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__242016,G__242017) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__242016,G__242017));
})()," she asks. Alyssa",(function (){var G__242020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242021 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242020,G__242021) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242020,G__242021));
})(),"s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242012,G__242013) : tailrecursion.hoplon.markdown.para_node.call(null,G__242012,G__242013));
})(),(function (){var G__242064 = (function (){var G__242065 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242066 = (function (){var G__242067 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242068 = "(";
var G__242069 = (function (){var G__242087 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242088 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242087,G__242088) : tailrecursion.hoplon.span.call(null,G__242087,G__242088));
})();
var G__242070 = (function (){var G__242089 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242090 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242089,G__242090) : tailrecursion.hoplon.span.call(null,G__242089,G__242090));
})();
var G__242071 = " [";
var G__242072 = (function (){var G__242091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242092 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242091,G__242092) : tailrecursion.hoplon.span.call(null,G__242091,G__242092));
})();
var G__242073 = " ";
var G__242074 = (function (){var G__242093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242094 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242093,G__242094) : tailrecursion.hoplon.span.call(null,G__242093,G__242094));
})();
var G__242075 = " ";
var G__242076 = (function (){var G__242095 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242096 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242095,G__242096) : tailrecursion.hoplon.span.call(null,G__242095,G__242096));
})();
var G__242077 = "]\n  (";
var G__242078 = (function (){var G__242097 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242098 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242097,G__242098) : tailrecursion.hoplon.span.call(null,G__242097,G__242098));
})();
var G__242079 = (function (){var G__242099 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242100 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242099,G__242100) : tailrecursion.hoplon.span.call(null,G__242099,G__242100));
})();
var G__242080 = " ";
var G__242081 = (function (){var G__242101 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242102 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242101,G__242102) : tailrecursion.hoplon.span.call(null,G__242101,G__242102));
})();
var G__242082 = "\n        ";
var G__242083 = (function (){var G__242103 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242104 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242103,G__242104) : tailrecursion.hoplon.span.call(null,G__242103,G__242104));
})();
var G__242084 = " ";
var G__242085 = (function (){var G__242105 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242106 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242105,G__242106) : tailrecursion.hoplon.span.call(null,G__242105,G__242106));
})();
var G__242086 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__242067,G__242068,G__242069,G__242070,G__242071,G__242072,G__242073,G__242074,G__242075,G__242076,G__242077,G__242078,G__242079,G__242080,G__242081,G__242082,G__242083,G__242084,G__242085,G__242086) : tailrecursion.hoplon.pre.call(null,G__242067,G__242068,G__242069,G__242070,G__242071,G__242072,G__242073,G__242074,G__242075,G__242076,G__242077,G__242078,G__242079,G__242080,G__242081,G__242082,G__242083,G__242084,G__242085,G__242086));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242065,G__242066) : tailrecursion.hoplon.div.call(null,G__242065,G__242066));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242064) : tailrecursion.hoplon.div.call(null,G__242064));
})(),(function (){var G__242107 = cljs.core.PersistentArrayMap.EMPTY;
var G__242108 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Eva demonstrates the program for Alyssa:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242107,G__242108) : tailrecursion.hoplon.markdown.para_node.call(null,G__242107,G__242108));
})(),(function (){var G__242140 = (function (){var G__242141 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242142 = (function (){var G__242143 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242144 = "(";
var G__242145 = (function (){var G__242158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__242159 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242158,G__242159) : tailrecursion.hoplon.span.call(null,G__242158,G__242159));
})();
var G__242146 = " (";
var G__242147 = (function (){var G__242160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242161 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242160,G__242161) : tailrecursion.hoplon.span.call(null,G__242160,G__242161));
})();
var G__242148 = (function (){var G__242162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242163 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242162,G__242163) : tailrecursion.hoplon.span.call(null,G__242162,G__242163));
})();
var G__242149 = " ";
var G__242150 = (function (){var G__242164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242165 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242164,G__242165) : tailrecursion.hoplon.span.call(null,G__242164,G__242165));
})();
var G__242151 = ") ";
var G__242152 = (function (){var G__242166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242167 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242166,G__242167) : tailrecursion.hoplon.span.call(null,G__242166,G__242167));
})();
var G__242153 = " ";
var G__242154 = (function (){var G__242168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242169 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242168,G__242169) : tailrecursion.hoplon.span.call(null,G__242168,G__242169));
})();
var G__242155 = ")\n";
var G__242156 = (function (){var G__242170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242171 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242170,G__242171) : tailrecursion.hoplon.span.call(null,G__242170,G__242171));
})();
var G__242157 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__242143,G__242144,G__242145,G__242146,G__242147,G__242148,G__242149,G__242150,G__242151,G__242152,G__242153,G__242154,G__242155,G__242156,G__242157) : tailrecursion.hoplon.pre.call(null,G__242143,G__242144,G__242145,G__242146,G__242147,G__242148,G__242149,G__242150,G__242151,G__242152,G__242153,G__242154,G__242155,G__242156,G__242157));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242141,G__242142) : tailrecursion.hoplon.div.call(null,G__242141,G__242142));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242140) : tailrecursion.hoplon.div.call(null,G__242140));
})(),(function (){var G__242203 = (function (){var G__242204 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242205 = (function (){var G__242206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242207 = "(";
var G__242208 = (function (){var G__242221 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__242222 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242221,G__242222) : tailrecursion.hoplon.span.call(null,G__242221,G__242222));
})();
var G__242209 = " (";
var G__242210 = (function (){var G__242223 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242224 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242223,G__242224) : tailrecursion.hoplon.span.call(null,G__242223,G__242224));
})();
var G__242211 = (function (){var G__242225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242226 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242225,G__242226) : tailrecursion.hoplon.span.call(null,G__242225,G__242226));
})();
var G__242212 = " ";
var G__242213 = (function (){var G__242227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242228 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242227,G__242228) : tailrecursion.hoplon.span.call(null,G__242227,G__242228));
})();
var G__242214 = ") ";
var G__242215 = (function (){var G__242229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242230 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242229,G__242230) : tailrecursion.hoplon.span.call(null,G__242229,G__242230));
})();
var G__242216 = " ";
var G__242217 = (function (){var G__242231 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242232 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242231,G__242232) : tailrecursion.hoplon.span.call(null,G__242231,G__242232));
})();
var G__242218 = ")\n";
var G__242219 = (function (){var G__242233 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242234 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242233,G__242234) : tailrecursion.hoplon.span.call(null,G__242233,G__242234));
})();
var G__242220 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__242206,G__242207,G__242208,G__242209,G__242210,G__242211,G__242212,G__242213,G__242214,G__242215,G__242216,G__242217,G__242218,G__242219,G__242220) : tailrecursion.hoplon.pre.call(null,G__242206,G__242207,G__242208,G__242209,G__242210,G__242211,G__242212,G__242213,G__242214,G__242215,G__242216,G__242217,G__242218,G__242219,G__242220));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242204,G__242205) : tailrecursion.hoplon.div.call(null,G__242204,G__242205));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242203) : tailrecursion.hoplon.div.call(null,G__242203));
})(),(function (){var G__242235 = cljs.core.PersistentArrayMap.EMPTY;
var G__242236 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Delighted, Alyssa now uses ",(function (){var G__242237 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__242238 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242237,G__242238) : tailrecursion.hoplon.markdown.code_node.call(null,G__242237,G__242238));
})()," to rewrite the square-root program:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242235,G__242236) : tailrecursion.hoplon.markdown.para_node.call(null,G__242235,G__242236));
})(),(function (){var G__242298 = (function (){var G__242299 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242300 = (function (){var G__242301 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242302 = "(";
var G__242303 = (function (){var G__242330 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242331 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242330,G__242331) : tailrecursion.hoplon.span.call(null,G__242330,G__242331));
})();
var G__242304 = (function (){var G__242332 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242333 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242332,G__242333) : tailrecursion.hoplon.span.call(null,G__242332,G__242333));
})();
var G__242305 = " [";
var G__242306 = (function (){var G__242334 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242335 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242334,G__242335) : tailrecursion.hoplon.span.call(null,G__242334,G__242335));
})();
var G__242307 = " ";
var G__242308 = (function (){var G__242336 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242337 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242336,G__242337) : tailrecursion.hoplon.span.call(null,G__242336,G__242337));
})();
var G__242309 = "]\n  (";
var G__242310 = (function (){var G__242338 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__242339 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242338,G__242339) : tailrecursion.hoplon.span.call(null,G__242338,G__242339));
})();
var G__242311 = " (";
var G__242312 = (function (){var G__242340 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__242341 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242340,G__242341) : tailrecursion.hoplon.span.call(null,G__242340,G__242341));
})();
var G__242313 = " ";
var G__242314 = (function (){var G__242342 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242343 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242342,G__242343) : tailrecursion.hoplon.span.call(null,G__242342,G__242343));
})();
var G__242315 = " ";
var G__242316 = (function (){var G__242344 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242345 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242344,G__242345) : tailrecursion.hoplon.span.call(null,G__242344,G__242345));
})();
var G__242317 = ")\n          ";
var G__242318 = (function (){var G__242346 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242347 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242346,G__242347) : tailrecursion.hoplon.span.call(null,G__242346,G__242347));
})();
var G__242319 = "\n          (";
var G__242320 = (function (){var G__242348 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__242349 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242348,G__242349) : tailrecursion.hoplon.span.call(null,G__242348,G__242349));
})();
var G__242321 = " (";
var G__242322 = (function (){var G__242350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__242351 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242350,G__242351) : tailrecursion.hoplon.span.call(null,G__242350,G__242351));
})();
var G__242323 = " ";
var G__242324 = (function (){var G__242352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242353 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242352,G__242353) : tailrecursion.hoplon.span.call(null,G__242352,G__242353));
})();
var G__242325 = " ";
var G__242326 = (function (){var G__242354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242355 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242354,G__242355) : tailrecursion.hoplon.span.call(null,G__242354,G__242355));
})();
var G__242327 = ")\n                     ";
var G__242328 = (function (){var G__242356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242357 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242356,G__242357) : tailrecursion.hoplon.span.call(null,G__242356,G__242357));
})();
var G__242329 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__242301,G__242302,G__242303,G__242304,G__242305,G__242306,G__242307,G__242308,G__242309,G__242310,G__242311,G__242312,G__242313,G__242314,G__242315,G__242316,G__242317,G__242318,G__242319,G__242320,G__242321,G__242322,G__242323,G__242324,G__242325,G__242326,G__242327,G__242328,G__242329) : tailrecursion.hoplon.pre.call(null,G__242301,G__242302,G__242303,G__242304,G__242305,G__242306,G__242307,G__242308,G__242309,G__242310,G__242311,G__242312,G__242313,G__242314,G__242315,G__242316,G__242317,G__242318,G__242319,G__242320,G__242321,G__242322,G__242323,G__242324,G__242325,G__242326,G__242327,G__242328,G__242329));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242299,G__242300) : tailrecursion.hoplon.div.call(null,G__242299,G__242300));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242298) : tailrecursion.hoplon.div.call(null,G__242298));
})(),(function (){var G__242358 = cljs.core.PersistentArrayMap.EMPTY;
var G__242359 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What happens when Alyssa attempts to use this to compute square roots? Explain."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242358,G__242359) : tailrecursion.hoplon.markdown.para_node.call(null,G__242358,G__242359));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242011;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242010;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242009;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242008;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242360 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242361 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242362 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242363 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242364 = cljs.core.PersistentArrayMap.EMPTY;
var G__242365 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since ",(function (){var G__242366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__242367 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242366,G__242367) : tailrecursion.hoplon.markdown.code_node.call(null,G__242366,G__242367));
})()," is not a special form, it will be evaluated in applicative order. Hence, when ",(function (){var G__242368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(new-if a b c)"], null);
var G__242369 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242368,G__242369) : tailrecursion.hoplon.markdown.code_node.call(null,G__242368,G__242369));
})()," is called, a, b, and c are all evaluated before considering how they may or may not be used within the function ",(function (){var G__242370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__242371 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242370,G__242371) : tailrecursion.hoplon.markdown.code_node.call(null,G__242370,G__242371));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242364,G__242365) : tailrecursion.hoplon.markdown.para_node.call(null,G__242364,G__242365));
})(),(function (){var G__242372 = cljs.core.PersistentArrayMap.EMPTY;
var G__242373 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So, in this particular case, let us compute the square root of 4 with our first guess being 2 (Alyssa would probably think that this would terminate immediately, but let",(function (){var G__242374 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242375 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242374,G__242375) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242374,G__242375));
})(),"s see). ",(function (){var G__242376 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"clj\n(sqrt-iter 2 4) ==>\n(new-if (good-enough? 2 4) 2 (sqrt-iter (improve 2 4) 4))\n"], null);
var G__242377 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242376,G__242377) : tailrecursion.hoplon.markdown.code_node.call(null,G__242376,G__242377));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242372,G__242373) : tailrecursion.hoplon.markdown.para_node.call(null,G__242372,G__242373));
})(),(function (){var G__242378 = cljs.core.PersistentArrayMap.EMPTY;
var G__242379 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["You can see that in this example, since ",(function (){var G__242380 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(improve 2 4) = 2"], null);
var G__242381 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242380,G__242381) : tailrecursion.hoplon.markdown.code_node.call(null,G__242380,G__242381));
})(),", ",(function (){var G__242382 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__242383 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242382,G__242383) : tailrecursion.hoplon.markdown.code_node.call(null,G__242382,G__242383));
})()," is going to requre us to compute ",(function (){var G__242384 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(sqrt-iter 2 4)"], null);
var G__242385 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242384,G__242385) : tailrecursion.hoplon.markdown.code_node.call(null,G__242384,G__242385));
})()," again. Then we",(function (){var G__242386 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242387 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242386,G__242387) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242386,G__242387));
})(),"ll be computing the ",(function (){var G__242388 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__242389 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242388,G__242389) : tailrecursion.hoplon.markdown.code_node.call(null,G__242388,G__242389));
})()," again, and you can see the cycle that we",(function (){var G__242390 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242391 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242390,G__242391) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242390,G__242391));
})(),"ve gotten ourselves in."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242378,G__242379) : tailrecursion.hoplon.markdown.para_node.call(null,G__242378,G__242379));
})(),(function (){var G__242392 = cljs.core.PersistentArrayMap.EMPTY;
var G__242393 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Long story short, this would result in an infinite loop."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242392,G__242393) : tailrecursion.hoplon.markdown.para_node.call(null,G__242392,G__242393));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242363;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242362;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242361;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242360;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242394 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242395 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242396 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242397 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242398 = cljs.core.PersistentArrayMap.EMPTY;
var G__242399 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",(function (){var G__242400 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__242401 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242400,G__242401) : tailrecursion.hoplon.markdown.code_node.call(null,G__242400,G__242401));
})()," test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing ",(function (){var G__242402 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__242403 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242402,G__242403) : tailrecursion.hoplon.markdown.code_node.call(null,G__242402,G__242403));
})()," is to watch how ",(function (){var G__242404 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__242405 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242404,G__242405) : tailrecursion.hoplon.markdown.code_node.call(null,G__242404,G__242405));
})()," changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242398,G__242399) : tailrecursion.hoplon.markdown.para_node.call(null,G__242398,G__242399));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242397;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242396;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242395;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242394;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242406 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242407 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242408 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242409 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242410 = cljs.core.PersistentArrayMap.EMPTY;
var G__242411 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When finding the square root of a very small number (let",(function (){var G__242412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242413 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242412,G__242413) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242412,G__242413));
})(),"s use 0.0000001, whose square root is 0.0001), since the answer we",(function (){var G__242414 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242415 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242414,G__242415) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242414,G__242415));
})(),"re looking for is smaller than our tollerance, you might get a zero or even a negative number as our answer! And on the other end of the spectrum, if our number is too large it would require enough calculations to make the precision larger than our tolerance. In that having a set tolerance is meaningless because our answer will be outside of that range due to the limitations of the computer!"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242410,G__242411) : tailrecursion.hoplon.markdown.para_node.call(null,G__242410,G__242411));
})(),(function (){var G__242416 = cljs.core.PersistentArrayMap.EMPTY;
var G__242417 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To avoid this problem we can set a dynamic tolerance like the exercise suggests. Let",(function (){var G__242418 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242419 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242418,G__242419) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242418,G__242419));
})(),"s say our problem allows for a 10% fractional tolerance. Then our ",(function (){var G__242420 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__242421 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242420,G__242421) : tailrecursion.hoplon.markdown.code_node.call(null,G__242420,G__242421));
})()," procedure would look like, "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242416,G__242417) : tailrecursion.hoplon.markdown.para_node.call(null,G__242416,G__242417));
})(),(function (){var G__242472 = (function (){var G__242473 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242474 = (function (){var G__242475 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242476 = "(";
var G__242477 = (function (){var G__242499 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242500 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242499,G__242500) : tailrecursion.hoplon.span.call(null,G__242499,G__242500));
})();
var G__242478 = (function (){var G__242501 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242502 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242501,G__242502) : tailrecursion.hoplon.span.call(null,G__242501,G__242502));
})();
var G__242479 = " [";
var G__242480 = (function (){var G__242503 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242504 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242503,G__242504) : tailrecursion.hoplon.span.call(null,G__242503,G__242504));
})();
var G__242481 = " ";
var G__242482 = (function (){var G__242505 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242506 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242505,G__242506) : tailrecursion.hoplon.span.call(null,G__242505,G__242506));
})();
var G__242483 = "]\n  (";
var G__242484 = (function (){var G__242507 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242508 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242507,G__242508) : tailrecursion.hoplon.span.call(null,G__242507,G__242508));
})();
var G__242485 = "(";
var G__242486 = (function (){var G__242509 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__242510 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242509,G__242510) : tailrecursion.hoplon.span.call(null,G__242509,G__242510));
})();
var G__242487 = " (";
var G__242488 = (function (){var G__242511 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242512 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242511,G__242512) : tailrecursion.hoplon.span.call(null,G__242511,G__242512));
})();
var G__242489 = "(";
var G__242490 = (function (){var G__242513 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242514 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242513,G__242514) : tailrecursion.hoplon.span.call(null,G__242513,G__242514));
})();
var G__242491 = (function (){var G__242515 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242516 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242515,G__242516) : tailrecursion.hoplon.span.call(null,G__242515,G__242516));
})();
var G__242492 = " ";
var G__242493 = (function (){var G__242517 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242518 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242517,G__242518) : tailrecursion.hoplon.span.call(null,G__242517,G__242518));
})();
var G__242494 = ") ";
var G__242495 = (function (){var G__242519 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242520 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242519,G__242520) : tailrecursion.hoplon.span.call(null,G__242519,G__242520));
})();
var G__242496 = ")) ";
var G__242497 = (function (){var G__242521 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242522 = "0.1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242521,G__242522) : tailrecursion.hoplon.span.call(null,G__242521,G__242522));
})();
var G__242498 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24(G__242475,G__242476,G__242477,G__242478,G__242479,G__242480,G__242481,G__242482,G__242483,G__242484,G__242485,G__242486,G__242487,G__242488,G__242489,G__242490,G__242491,G__242492,G__242493,G__242494,G__242495,G__242496,G__242497,G__242498) : tailrecursion.hoplon.pre.call(null,G__242475,G__242476,G__242477,G__242478,G__242479,G__242480,G__242481,G__242482,G__242483,G__242484,G__242485,G__242486,G__242487,G__242488,G__242489,G__242490,G__242491,G__242492,G__242493,G__242494,G__242495,G__242496,G__242497,G__242498));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242473,G__242474) : tailrecursion.hoplon.div.call(null,G__242473,G__242474));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242472) : tailrecursion.hoplon.div.call(null,G__242472));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242409;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242408;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242407;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242406;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242523 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242524 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242525 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242526 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242527 = cljs.core.PersistentArrayMap.EMPTY;
var G__242528 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Newton",(function (){var G__242529 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242530 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242529,G__242530) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242529,G__242530));
})(),"s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242527,G__242528) : tailrecursion.hoplon.markdown.para_node.call(null,G__242527,G__242528));
})(),(function (){var G__242531 = cljs.core.PersistentArrayMap.EMPTY;
var G__242532 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\frac{x/y^2 +2y}{3} $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242531,G__242532) : tailrecursion.hoplon.markdown.para_node.call(null,G__242531,G__242532));
})(),(function (){var G__242533 = cljs.core.PersistentArrayMap.EMPTY;
var G__242534 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#!/sicp/ch/1/sect/3/sub/4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.3.4"], null)], 0))," we will see how to implement Newton",(function (){var G__242535 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242536 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242535,G__242536) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242535,G__242536));
})(),"s method in general as an abstraction of these square-root and cube-root procedures.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242533,G__242534) : tailrecursion.hoplon.markdown.para_node.call(null,G__242533,G__242534));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242526;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242525;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242524;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242523;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242537 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242538 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242539 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242540 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242598 = (function (){var G__242599 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242600 = (function (){var G__242601 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242602 = "(";
var G__242603 = (function (){var G__242628 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242629 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242628,G__242629) : tailrecursion.hoplon.span.call(null,G__242628,G__242629));
})();
var G__242604 = (function (){var G__242630 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242631 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242630,G__242631) : tailrecursion.hoplon.span.call(null,G__242630,G__242631));
})();
var G__242605 = " [";
var G__242606 = (function (){var G__242632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242633 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242632,G__242633) : tailrecursion.hoplon.span.call(null,G__242632,G__242633));
})();
var G__242607 = " ";
var G__242608 = (function (){var G__242634 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242635 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242634,G__242635) : tailrecursion.hoplon.span.call(null,G__242634,G__242635));
})();
var G__242609 = "]\n  (";
var G__242610 = (function (){var G__242636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242637 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242636,G__242637) : tailrecursion.hoplon.span.call(null,G__242636,G__242637));
})();
var G__242611 = "(";
var G__242612 = (function (){var G__242638 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242639 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242638,G__242639) : tailrecursion.hoplon.span.call(null,G__242638,G__242639));
})();
var G__242613 = "(";
var G__242614 = (function (){var G__242640 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242641 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242640,G__242641) : tailrecursion.hoplon.span.call(null,G__242640,G__242641));
})();
var G__242615 = (function (){var G__242642 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242643 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242642,G__242643) : tailrecursion.hoplon.span.call(null,G__242642,G__242643));
})();
var G__242616 = " (";
var G__242617 = (function (){var G__242644 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__242645 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242644,G__242645) : tailrecursion.hoplon.span.call(null,G__242644,G__242645));
})();
var G__242618 = " ";
var G__242619 = (function (){var G__242646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242647 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242646,G__242647) : tailrecursion.hoplon.span.call(null,G__242646,G__242647));
})();
var G__242620 = ")) (";
var G__242621 = (function (){var G__242648 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242649 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242648,G__242649) : tailrecursion.hoplon.span.call(null,G__242648,G__242649));
})();
var G__242622 = (function (){var G__242650 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242651 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242650,G__242651) : tailrecursion.hoplon.span.call(null,G__242650,G__242651));
})();
var G__242623 = " ";
var G__242624 = (function (){var G__242652 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242653 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242652,G__242653) : tailrecursion.hoplon.span.call(null,G__242652,G__242653));
})();
var G__242625 = ")) ";
var G__242626 = (function (){var G__242654 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242655 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242654,G__242655) : tailrecursion.hoplon.span.call(null,G__242654,G__242655));
})();
var G__242627 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__242601,G__242602,G__242603,G__242604,G__242605,G__242606,G__242607,G__242608,G__242609,G__242610,G__242611,G__242612,G__242613,G__242614,G__242615,G__242616,G__242617,G__242618,G__242619,G__242620,G__242621,G__242622,G__242623,G__242624,G__242625,G__242626,G__242627) : tailrecursion.hoplon.pre.call(null,G__242601,G__242602,G__242603,G__242604,G__242605,G__242606,G__242607,G__242608,G__242609,G__242610,G__242611,G__242612,G__242613,G__242614,G__242615,G__242616,G__242617,G__242618,G__242619,G__242620,G__242621,G__242622,G__242623,G__242624,G__242625,G__242626,G__242627));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242599,G__242600) : tailrecursion.hoplon.div.call(null,G__242599,G__242600));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242598) : tailrecursion.hoplon.div.call(null,G__242598));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242540;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242539;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242538;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242537;
}})()], 0))], 0))], 0));
var G__237050 = "";
var G__237051 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Procedures as Black-Box Abstractions"], null),(function (){var _STAR_references_STAR_242656 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242657 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242658 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242659 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242660 = cljs.core.PersistentArrayMap.EMPTY;
var G__242661 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242662 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Sqrt"], null);
var G__242663 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242662,G__242663) : tailrecursion.hoplon.markdown.code_node.call(null,G__242662,G__242663));
})()," is our first example of a process defined by a set of mutually defined procedures. Notice that the definition of ",(function (){var G__242664 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__242665 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242664,G__242665) : tailrecursion.hoplon.markdown.code_node.call(null,G__242664,G__242665));
})()," is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0)),"; that is, the procedure is defined in terms of itself. The idea of being able to define a procedure in terms of itself may be disturbing; it may seem unclear how such a ",(function (){var G__242666 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__242667 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["circular"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__242666,G__242667) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__242666,G__242667));
})()," definition could make sense at all, much less specify a well-defined process to be carried out by a computer. This will be addressed more carefully in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"\"#/sicp/ch/1/sect/2/\"",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.2"], null)], 0)),". But first let",(function (){var G__242668 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242669 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242668,G__242669) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242668,G__242669));
})(),"s consider some other important points illustrated by the ",(function (){var G__242670 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__242671 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242670,G__242671) : tailrecursion.hoplon.markdown.code_node.call(null,G__242670,G__242671));
})()," example."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242660,G__242661) : tailrecursion.hoplon.markdown.para_node.call(null,G__242660,G__242661));
})(),(function (){var G__242672 = cljs.core.PersistentArrayMap.EMPTY;
var G__242673 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that the problem of computing square roots breaks up naturally into a number of subproblems: how to tell whether a guess is good enough, how to improve a guess, and so on. Each of these tasks is accomplished by a separate procedure. The entire ",(function (){var G__242674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__242675 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242674,G__242675) : tailrecursion.hoplon.markdown.code_node.call(null,G__242674,G__242675));
})()," program can be viewed as a cluster of procedures (shown in figure 1.2) that mirrors the decomposition of the problem into subproblems."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242672,G__242673) : tailrecursion.hoplon.markdown.para_node.call(null,G__242672,G__242673));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242659;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242658;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242657;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242656;
}})(),book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Procedural decomposition of the sqrt program."], null)], 0)),"",(function (){var _STAR_references_STAR_242676 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242677 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242678 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242679 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242680 = cljs.core.PersistentArrayMap.EMPTY;
var G__242681 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The importance of this decomposition strategy is not simply that one is dividing the program into parts. After all, we could take any large program and divide it into parts ",(function (){var G__242682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__242683 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242682,G__242683) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242682,G__242683));
})()," the first ten lines, the next ten lines, the next ten lines, and so on. Rather, it is crucial that each procedure accomplishes an identifiable task that can be used as a module in defining other procedures. For example, when we define the ",(function (){var G__242684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__242685 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242684,G__242685) : tailrecursion.hoplon.markdown.code_node.call(null,G__242684,G__242685));
})()," procedure in terms of ",(function (){var G__242686 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__242687 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242686,G__242687) : tailrecursion.hoplon.markdown.code_node.call(null,G__242686,G__242687));
})(),", we are able to regard the ",(function (){var G__242688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__242689 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242688,G__242689) : tailrecursion.hoplon.markdown.code_node.call(null,G__242688,G__242689));
})()," procedure as a ",(function (){var G__242690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__242691 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["black box."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__242690,G__242691) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__242690,G__242691));
})()," We are not at that moment concerned with ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how"], null)], 0))," the procedure computes its result, only with the fact that it computes the square. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as the ",(function (){var G__242692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__242693 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242692,G__242693) : tailrecursion.hoplon.markdown.code_node.call(null,G__242692,G__242693));
})()," procedure is concerned, ",(function (){var G__242694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__242695 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242694,G__242695) : tailrecursion.hoplon.markdown.code_node.call(null,G__242694,G__242695));
})()," is not quite a procedure but rather an abstraction of a procedure, a so-called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedural abstraction"], null)], 0)),". At this level of abstraction, any procedure that computes the square is equally good."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242680,G__242681) : tailrecursion.hoplon.markdown.para_node.call(null,G__242680,G__242681));
})(),(function (){var G__242696 = cljs.core.PersistentArrayMap.EMPTY;
var G__242697 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus, considering only the values they return, the following two procedures for squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.",(function (){var G__242698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__242699 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is not even clear which of these procedures is a more efficient implementation. This depends upon the hardware available. There are machines for which the ",(function (){var G__242700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__242701 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["obvious"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__242700,G__242701) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__242700,G__242701));
})()," implementation is the less efficient one. Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__242698,G__242699) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__242698,G__242699));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242696,G__242697) : tailrecursion.hoplon.markdown.para_node.call(null,G__242696,G__242697));
})(),(function (){var G__242728 = (function (){var G__242729 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242730 = (function (){var G__242731 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242732 = "(";
var G__242733 = (function (){var G__242743 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242744 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242743,G__242744) : tailrecursion.hoplon.span.call(null,G__242743,G__242744));
})();
var G__242734 = (function (){var G__242745 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242746 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242745,G__242746) : tailrecursion.hoplon.span.call(null,G__242745,G__242746));
})();
var G__242735 = " [";
var G__242736 = (function (){var G__242747 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242748 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242747,G__242748) : tailrecursion.hoplon.span.call(null,G__242747,G__242748));
})();
var G__242737 = "] (";
var G__242738 = (function (){var G__242749 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242750 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242749,G__242750) : tailrecursion.hoplon.span.call(null,G__242749,G__242750));
})();
var G__242739 = (function (){var G__242751 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242752 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242751,G__242752) : tailrecursion.hoplon.span.call(null,G__242751,G__242752));
})();
var G__242740 = " ";
var G__242741 = (function (){var G__242753 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242754 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242753,G__242754) : tailrecursion.hoplon.span.call(null,G__242753,G__242754));
})();
var G__242742 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__242731,G__242732,G__242733,G__242734,G__242735,G__242736,G__242737,G__242738,G__242739,G__242740,G__242741,G__242742) : tailrecursion.hoplon.pre.call(null,G__242731,G__242732,G__242733,G__242734,G__242735,G__242736,G__242737,G__242738,G__242739,G__242740,G__242741,G__242742));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242729,G__242730) : tailrecursion.hoplon.div.call(null,G__242729,G__242730));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242728) : tailrecursion.hoplon.div.call(null,G__242728));
})(),(function (){var G__242755 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn square [x] \n  (exp (double (log x))))\n") : tailrecursion.hoplon.code.call(null,"(defn square [x] \n  (exp (double (log x))))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242755) : tailrecursion.hoplon.pre.call(null,G__242755));
})(),(function (){var G__242782 = (function (){var G__242783 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242784 = (function (){var G__242785 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242786 = "(";
var G__242787 = (function (){var G__242797 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242798 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242797,G__242798) : tailrecursion.hoplon.span.call(null,G__242797,G__242798));
})();
var G__242788 = (function (){var G__242799 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242800 = "double ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242799,G__242800) : tailrecursion.hoplon.span.call(null,G__242799,G__242800));
})();
var G__242789 = "[";
var G__242790 = (function (){var G__242801 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242802 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242801,G__242802) : tailrecursion.hoplon.span.call(null,G__242801,G__242802));
})();
var G__242791 = "] (";
var G__242792 = (function (){var G__242803 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242804 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242803,G__242804) : tailrecursion.hoplon.span.call(null,G__242803,G__242804));
})();
var G__242793 = (function (){var G__242805 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242806 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242805,G__242806) : tailrecursion.hoplon.span.call(null,G__242805,G__242806));
})();
var G__242794 = " ";
var G__242795 = (function (){var G__242807 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242808 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242807,G__242808) : tailrecursion.hoplon.span.call(null,G__242807,G__242808));
})();
var G__242796 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__242785,G__242786,G__242787,G__242788,G__242789,G__242790,G__242791,G__242792,G__242793,G__242794,G__242795,G__242796) : tailrecursion.hoplon.pre.call(null,G__242785,G__242786,G__242787,G__242788,G__242789,G__242790,G__242791,G__242792,G__242793,G__242794,G__242795,G__242796));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242783,G__242784) : tailrecursion.hoplon.div.call(null,G__242783,G__242784));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242782) : tailrecursion.hoplon.div.call(null,G__242782));
})(),(function (){var G__242809 = cljs.core.PersistentArrayMap.EMPTY;
var G__242810 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So a procedure definition should be able to suppress detail. The users of the procedure may not have written the procedure themselves, but may have obtained it from another programmer as a black box. A user should not need to know how the procedure is implemented in order to use it."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242809,G__242810) : tailrecursion.hoplon.markdown.para_node.call(null,G__242809,G__242810));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242679;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242678;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242677;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242676;
}})()], 0));
var G__237052 = "";
var G__237053 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Local Names"], null),(function (){var _STAR_references_STAR_242811 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242812 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242813 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242814 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242815 = cljs.core.PersistentArrayMap.EMPTY;
var G__242816 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One detail of a procedure",(function (){var G__242817 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242818 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242817,G__242818) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242817,G__242818));
})(),"s implementation that should not matter to the user of the procedure is the implementer",(function (){var G__242819 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242820 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242819,G__242820) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242819,G__242820));
})(),"s choice of names for the procedure",(function (){var G__242821 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242822 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242821,G__242822) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242821,G__242822));
})(),"s formal parameters. Thus, the following procedures should not be distinguishable:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242815,G__242816) : tailrecursion.hoplon.markdown.para_node.call(null,G__242815,G__242816));
})(),(function (){var G__242849 = (function (){var G__242850 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242851 = (function (){var G__242852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242853 = "(";
var G__242854 = (function (){var G__242864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242865 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242864,G__242865) : tailrecursion.hoplon.span.call(null,G__242864,G__242865));
})();
var G__242855 = (function (){var G__242866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242867 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242866,G__242867) : tailrecursion.hoplon.span.call(null,G__242866,G__242867));
})();
var G__242856 = " [";
var G__242857 = (function (){var G__242868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242869 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242868,G__242869) : tailrecursion.hoplon.span.call(null,G__242868,G__242869));
})();
var G__242858 = "] (";
var G__242859 = (function (){var G__242870 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242871 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242870,G__242871) : tailrecursion.hoplon.span.call(null,G__242870,G__242871));
})();
var G__242860 = (function (){var G__242872 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242873 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242872,G__242873) : tailrecursion.hoplon.span.call(null,G__242872,G__242873));
})();
var G__242861 = " ";
var G__242862 = (function (){var G__242874 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242875 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242874,G__242875) : tailrecursion.hoplon.span.call(null,G__242874,G__242875));
})();
var G__242863 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__242852,G__242853,G__242854,G__242855,G__242856,G__242857,G__242858,G__242859,G__242860,G__242861,G__242862,G__242863) : tailrecursion.hoplon.pre.call(null,G__242852,G__242853,G__242854,G__242855,G__242856,G__242857,G__242858,G__242859,G__242860,G__242861,G__242862,G__242863));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242850,G__242851) : tailrecursion.hoplon.div.call(null,G__242850,G__242851));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242849) : tailrecursion.hoplon.div.call(null,G__242849));
})(),(function (){var G__242902 = (function (){var G__242903 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242904 = (function (){var G__242905 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242906 = "(";
var G__242907 = (function (){var G__242917 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242918 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242917,G__242918) : tailrecursion.hoplon.span.call(null,G__242917,G__242918));
})();
var G__242908 = (function (){var G__242919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242920 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242919,G__242920) : tailrecursion.hoplon.span.call(null,G__242919,G__242920));
})();
var G__242909 = " [";
var G__242910 = (function (){var G__242921 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242922 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242921,G__242922) : tailrecursion.hoplon.span.call(null,G__242921,G__242922));
})();
var G__242911 = "] (";
var G__242912 = (function (){var G__242923 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242924 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242923,G__242924) : tailrecursion.hoplon.span.call(null,G__242923,G__242924));
})();
var G__242913 = (function (){var G__242925 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242926 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242925,G__242926) : tailrecursion.hoplon.span.call(null,G__242925,G__242926));
})();
var G__242914 = " ";
var G__242915 = (function (){var G__242927 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242928 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242927,G__242928) : tailrecursion.hoplon.span.call(null,G__242927,G__242928));
})();
var G__242916 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__242905,G__242906,G__242907,G__242908,G__242909,G__242910,G__242911,G__242912,G__242913,G__242914,G__242915,G__242916) : tailrecursion.hoplon.pre.call(null,G__242905,G__242906,G__242907,G__242908,G__242909,G__242910,G__242911,G__242912,G__242913,G__242914,G__242915,G__242916));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242903,G__242904) : tailrecursion.hoplon.div.call(null,G__242903,G__242904));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242902) : tailrecursion.hoplon.div.call(null,G__242902));
})(),(function (){var G__242929 = cljs.core.PersistentArrayMap.EMPTY;
var G__242930 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This principle ",(function (){var G__242931 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__242932 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242931,G__242932) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242931,G__242932));
})()," that the meaning of a procedure should be independent of the parameter names used by its author ",(function (){var G__242933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__242934 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242933,G__242934) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242933,G__242934));
})()," seems on the surface to be self-evident, but its consequences are profound. The simplest consequence is that the parameter names of a procedure must be local to the body of the procedure. For example, we used ",(function (){var G__242935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__242936 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242935,G__242936) : tailrecursion.hoplon.markdown.code_node.call(null,G__242935,G__242936));
})()," in the definition of ",(function (){var G__242937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__242938 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242937,G__242938) : tailrecursion.hoplon.markdown.code_node.call(null,G__242937,G__242938));
})()," in our square-root procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242929,G__242930) : tailrecursion.hoplon.markdown.para_node.call(null,G__242929,G__242930));
})(),(function (){var G__242986 = (function (){var G__242987 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242988 = (function (){var G__242989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242990 = "(";
var G__242991 = (function (){var G__243012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243013 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243012,G__243013) : tailrecursion.hoplon.span.call(null,G__243012,G__243013));
})();
var G__242992 = (function (){var G__243014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243015 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243014,G__243015) : tailrecursion.hoplon.span.call(null,G__243014,G__243015));
})();
var G__242993 = " [";
var G__242994 = (function (){var G__243016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243017 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243016,G__243017) : tailrecursion.hoplon.span.call(null,G__243016,G__243017));
})();
var G__242995 = " ";
var G__242996 = (function (){var G__243018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243019 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243018,G__243019) : tailrecursion.hoplon.span.call(null,G__243018,G__243019));
})();
var G__242997 = "]\n  (";
var G__242998 = (function (){var G__243020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243021 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243020,G__243021) : tailrecursion.hoplon.span.call(null,G__243020,G__243021));
})();
var G__242999 = "(";
var G__243000 = (function (){var G__243022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243023 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243022,G__243023) : tailrecursion.hoplon.span.call(null,G__243022,G__243023));
})();
var G__243001 = " (";
var G__243002 = (function (){var G__243024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243025 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243024,G__243025) : tailrecursion.hoplon.span.call(null,G__243024,G__243025));
})();
var G__243003 = "(";
var G__243004 = (function (){var G__243026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243027 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243026,G__243027) : tailrecursion.hoplon.span.call(null,G__243026,G__243027));
})();
var G__243005 = " ";
var G__243006 = (function (){var G__243028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243029 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243028,G__243029) : tailrecursion.hoplon.span.call(null,G__243028,G__243029));
})();
var G__243007 = ") ";
var G__243008 = (function (){var G__243030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243031 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243030,G__243031) : tailrecursion.hoplon.span.call(null,G__243030,G__243031));
})();
var G__243009 = ")) ";
var G__243010 = (function (){var G__243032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243033 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243032,G__243033) : tailrecursion.hoplon.span.call(null,G__243032,G__243033));
})();
var G__243011 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__242989,G__242990,G__242991,G__242992,G__242993,G__242994,G__242995,G__242996,G__242997,G__242998,G__242999,G__243000,G__243001,G__243002,G__243003,G__243004,G__243005,G__243006,G__243007,G__243008,G__243009,G__243010,G__243011) : tailrecursion.hoplon.pre.call(null,G__242989,G__242990,G__242991,G__242992,G__242993,G__242994,G__242995,G__242996,G__242997,G__242998,G__242999,G__243000,G__243001,G__243002,G__243003,G__243004,G__243005,G__243006,G__243007,G__243008,G__243009,G__243010,G__243011));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242987,G__242988) : tailrecursion.hoplon.div.call(null,G__242987,G__242988));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242986) : tailrecursion.hoplon.div.call(null,G__242986));
})(),(function (){var G__243034 = cljs.core.PersistentArrayMap.EMPTY;
var G__243035 = cljs.core.PersistentVector.fromArray(["The intention of the author of ",(function (){var G__243036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243037 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243036,G__243037) : tailrecursion.hoplon.markdown.code_node.call(null,G__243036,G__243037));
})()," is to determine if the square of the first argument is within a given tolerance of the second argument. We see that the author of ",(function (){var G__243038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243039 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243038,G__243039) : tailrecursion.hoplon.markdown.code_node.call(null,G__243038,G__243039));
})()," used the name ",(function (){var G__243040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__243041 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243040,G__243041) : tailrecursion.hoplon.markdown.code_node.call(null,G__243040,G__243041));
})()," to refer to the first argument and ",(function (){var G__243042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243043 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243042,G__243043) : tailrecursion.hoplon.markdown.code_node.call(null,G__243042,G__243043));
})()," to refer to the second argument. The argument of ",(function (){var G__243044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243045 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243044,G__243045) : tailrecursion.hoplon.markdown.code_node.call(null,G__243044,G__243045));
})()," is ",(function (){var G__243046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__243047 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243046,G__243047) : tailrecursion.hoplon.markdown.code_node.call(null,G__243046,G__243047));
})(),". If the author of ",(function (){var G__243048 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243049 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243048,G__243049) : tailrecursion.hoplon.markdown.code_node.call(null,G__243048,G__243049));
})()," used ",(function (){var G__243050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243051 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243050,G__243051) : tailrecursion.hoplon.markdown.code_node.call(null,G__243050,G__243051));
})()," (as above) to refer to that argument, we see that the ",(function (){var G__243052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243053 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243052,G__243053) : tailrecursion.hoplon.markdown.code_node.call(null,G__243052,G__243053));
})()," in ",(function (){var G__243054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243055 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243054,G__243055) : tailrecursion.hoplon.markdown.code_node.call(null,G__243054,G__243055));
})()," must be a different ",(function (){var G__243056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243057 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243056,G__243057) : tailrecursion.hoplon.markdown.code_node.call(null,G__243056,G__243057));
})()," than the one in ",(function (){var G__243058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243059 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243058,G__243059) : tailrecursion.hoplon.markdown.code_node.call(null,G__243058,G__243059));
})(),". Running the procedure ",(function (){var G__243060 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243061 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243060,G__243061) : tailrecursion.hoplon.markdown.code_node.call(null,G__243060,G__243061));
})()," must not affect the value of ",(function (){var G__243062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243063 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243062,G__243063) : tailrecursion.hoplon.markdown.code_node.call(null,G__243062,G__243063));
})()," that is used by ",(function (){var G__243064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243065 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243064,G__243065) : tailrecursion.hoplon.markdown.code_node.call(null,G__243064,G__243065));
})(),", because that value of ",(function (){var G__243066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243067 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243066,G__243067) : tailrecursion.hoplon.markdown.code_node.call(null,G__243066,G__243067));
})()," may be needed by ",(function (){var G__243068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243069 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243068,G__243069) : tailrecursion.hoplon.markdown.code_node.call(null,G__243068,G__243069));
})()," after ",(function (){var G__243070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243071 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243070,G__243071) : tailrecursion.hoplon.markdown.code_node.call(null,G__243070,G__243071));
})()," is done computing."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243034,G__243035) : tailrecursion.hoplon.markdown.para_node.call(null,G__243034,G__243035));
})(),(function (){var G__243072 = cljs.core.PersistentArrayMap.EMPTY;
var G__243073 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If the parameters were not local to the bodies of their respective procedures, then the parameter ",(function (){var G__243074 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243075 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243074,G__243075) : tailrecursion.hoplon.markdown.code_node.call(null,G__243074,G__243075));
})()," in ",(function (){var G__243076 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243077 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243076,G__243077) : tailrecursion.hoplon.markdown.code_node.call(null,G__243076,G__243077));
})()," could be confused with the parameter ",(function (){var G__243078 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243079 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243078,G__243079) : tailrecursion.hoplon.markdown.code_node.call(null,G__243078,G__243079));
})()," in ",(function (){var G__243080 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243081 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243080,G__243081) : tailrecursion.hoplon.markdown.code_node.call(null,G__243080,G__243081));
})(),", and the behavior of ",(function (){var G__243082 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243083 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243082,G__243083) : tailrecursion.hoplon.markdown.code_node.call(null,G__243082,G__243083));
})()," would depend upon which version of ",(function (){var G__243084 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243085 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243084,G__243085) : tailrecursion.hoplon.markdown.code_node.call(null,G__243084,G__243085));
})()," we used. Thus, ",(function (){var G__243086 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243087 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243086,G__243087) : tailrecursion.hoplon.markdown.code_node.call(null,G__243086,G__243087));
})()," would not be the black box we desired."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243072,G__243073) : tailrecursion.hoplon.markdown.para_node.call(null,G__243072,G__243073));
})(),(function (){var G__243088 = cljs.core.PersistentArrayMap.EMPTY;
var G__243089 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A formal parameter of a procedure has a very special role in the procedure definition, in that it doesn",(function (){var G__243090 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__243091 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__243090,G__243091) : tailrecursion.hoplon.markdown.simple_node.call(null,G__243090,G__243091));
})(),"t matter what name the formal parameter has. Such a name is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["bound variable"], null)], 0)),", and we say that the procedure definition ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["binds"], null)], 0))," its formal parameters. The meaning of a procedure definition is unchanged if a bound variable is consistently renamed throughout the definition.",(function (){var G__243092 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__243093 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The concept of consistent renaming is actually subtle and difficult to define formally. Famous logicians have made embarrassing errors here."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__243092,G__243093) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__243092,G__243093));
})()," If a variable is not bound, we say that it is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["free"], null)], 0)),". The set of expressions for which a binding defines a name is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["scope"], null)], 0))," of that name. In a procedure definition, the bound variables declared as the formal parameters of the procedure have the body of the procedure as their scope."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243088,G__243089) : tailrecursion.hoplon.markdown.para_node.call(null,G__243088,G__243089));
})(),(function (){var G__243094 = cljs.core.PersistentArrayMap.EMPTY;
var G__243095 = cljs.core.PersistentVector.fromArray(["In the definition of ",(function (){var G__243096 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243097 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243096,G__243097) : tailrecursion.hoplon.markdown.code_node.call(null,G__243096,G__243097));
})()," above, ",(function (){var G__243098 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__243099 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243098,G__243099) : tailrecursion.hoplon.markdown.code_node.call(null,G__243098,G__243099));
})()," and ",(function (){var G__243100 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243101 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243100,G__243101) : tailrecursion.hoplon.markdown.code_node.call(null,G__243100,G__243101));
})()," are bound variables but ",(function (){var G__243102 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__243103 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243102,G__243103) : tailrecursion.hoplon.markdown.code_node.call(null,G__243102,G__243103));
})(),", ",(function (){var G__243104 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__243105 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243104,G__243105) : tailrecursion.hoplon.markdown.code_node.call(null,G__243104,G__243105));
})(),", ",(function (){var G__243106 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__243107 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243106,G__243107) : tailrecursion.hoplon.markdown.code_node.call(null,G__243106,G__243107));
})(),", and ",(function (){var G__243108 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243109 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243108,G__243109) : tailrecursion.hoplon.markdown.code_node.call(null,G__243108,G__243109));
})()," are free. The meaning of ",(function (){var G__243110 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243111 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243110,G__243111) : tailrecursion.hoplon.markdown.code_node.call(null,G__243110,G__243111));
})()," should be independent of the names we choose for ",(function (){var G__243112 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__243113 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243112,G__243113) : tailrecursion.hoplon.markdown.code_node.call(null,G__243112,G__243113));
})()," and ",(function (){var G__243114 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__243115 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243114,G__243115) : tailrecursion.hoplon.markdown.code_node.call(null,G__243114,G__243115));
})()," so long as they are distinct and different from ",(function (){var G__243116 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__243117 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243116,G__243117) : tailrecursion.hoplon.markdown.code_node.call(null,G__243116,G__243117));
})(),", ",(function (){var G__243118 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__243119 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243118,G__243119) : tailrecursion.hoplon.markdown.code_node.call(null,G__243118,G__243119));
})(),", ",(function (){var G__243120 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__243121 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243120,G__243121) : tailrecursion.hoplon.markdown.code_node.call(null,G__243120,G__243121));
})(),", and ",(function (){var G__243122 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__243123 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243122,G__243123) : tailrecursion.hoplon.markdown.code_node.call(null,G__243122,G__243123));
})(),". (If we renamed ",(function (){var G__243124 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__243125 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243124,G__243125) : tailrecursion.hoplon.markdown.code_node.call(null,G__243124,G__243125));
})()," to ",(function (){var G__243126 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__243127 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243126,G__243127) : tailrecursion.hoplon.markdown.code_node.call(null,G__243126,G__243127));
})()," we would have introduced a bug by ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["capturing"], null)], 0))," the variable ",(function (){var G__243128 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__243129 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243128,G__243129) : tailrecursion.hoplon.markdown.code_node.call(null,G__243128,G__243129));
})(),". It would have changed from free to bound.) The meaning of ",(function (){var G__243130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243131 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243130,G__243131) : tailrecursion.hoplon.markdown.code_node.call(null,G__243130,G__243131));
})()," is not independent of the names of its free variables, however. It surely depends upon the fact (external to this definition) that the symbol ",(function (){var G__243132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__243133 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243132,G__243133) : tailrecursion.hoplon.markdown.code_node.call(null,G__243132,G__243133));
})()," names a procedure for computing the absolute value of a number. ",(function (){var G__243134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Good-enough?"], null);
var G__243135 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243134,G__243135) : tailrecursion.hoplon.markdown.code_node.call(null,G__243134,G__243135));
})()," will compute a different function if we substitute ",(function (){var G__243136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cos"], null);
var G__243137 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243136,G__243137) : tailrecursion.hoplon.markdown.code_node.call(null,G__243136,G__243137));
})()," for ",(function (){var G__243138 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__243139 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243138,G__243139) : tailrecursion.hoplon.markdown.code_node.call(null,G__243138,G__243139));
})()," in its definition."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243094,G__243095) : tailrecursion.hoplon.markdown.para_node.call(null,G__243094,G__243095));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242814;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242813;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242812;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242811;
}})()], 0));
var G__237054 = "";
var G__237055 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Internal Definitions and Block Structures"], null),(function (){var _STAR_references_STAR_243140 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243141 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243142 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243143 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243144 = cljs.core.PersistentArrayMap.EMPTY;
var G__243145 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is instructive to note that the rest of this section does not work as well in Clojure. The reason is that ",(function (){var G__243146 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__243147 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243146,G__243147) : tailrecursion.hoplon.markdown.code_node.call(null,G__243146,G__243147));
})(),", ",(function (){var G__243148 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__243149 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243148,G__243149) : tailrecursion.hoplon.markdown.code_node.call(null,G__243148,G__243149));
})()," and all other defining forms define things in the global environment directly (no matter where they are called). If this does not make sense to you just yet, don",(function (){var G__243150 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__243151 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__243150,G__243151) : tailrecursion.hoplon.markdown.simple_node.call(null,G__243150,G__243151));
})(),"t worry: it should by the end of this section."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243144,G__243145) : tailrecursion.hoplon.markdown.para_node.call(null,G__243144,G__243145));
})(),(function (){var G__243152 = cljs.core.PersistentArrayMap.EMPTY;
var G__243153 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have one kind of name isolation available to us so far: The formal parameters of a procedure are local to the body of the procedure. The square-root program illustrates another way in which we would like to control the use of names. The existing program consists of separate procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243152,G__243153) : tailrecursion.hoplon.markdown.para_node.call(null,G__243152,G__243153));
})(),(function (){var G__243313 = (function (){var G__243314 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243315 = (function (){var G__243316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243317 = "(";
var G__243318 = (function (){var G__243393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243394 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243393,G__243394) : tailrecursion.hoplon.span.call(null,G__243393,G__243394));
})();
var G__243319 = (function (){var G__243395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243396 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243395,G__243396) : tailrecursion.hoplon.span.call(null,G__243395,G__243396));
})();
var G__243320 = " [";
var G__243321 = (function (){var G__243397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243398 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243397,G__243398) : tailrecursion.hoplon.span.call(null,G__243397,G__243398));
})();
var G__243322 = "]\n  (";
var G__243323 = (function (){var G__243399 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243400 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243399,G__243400) : tailrecursion.hoplon.span.call(null,G__243399,G__243400));
})();
var G__243324 = " ";
var G__243325 = (function (){var G__243401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243402 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243401,G__243402) : tailrecursion.hoplon.span.call(null,G__243401,G__243402));
})();
var G__243326 = " ";
var G__243327 = (function (){var G__243403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243404 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243403,G__243404) : tailrecursion.hoplon.span.call(null,G__243403,G__243404));
})();
var G__243328 = "))\n(";
var G__243329 = (function (){var G__243405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243406 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243405,G__243406) : tailrecursion.hoplon.span.call(null,G__243405,G__243406));
})();
var G__243330 = (function (){var G__243407 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243408 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243407,G__243408) : tailrecursion.hoplon.span.call(null,G__243407,G__243408));
})();
var G__243331 = " [";
var G__243332 = (function (){var G__243409 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243410 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243409,G__243410) : tailrecursion.hoplon.span.call(null,G__243409,G__243410));
})();
var G__243333 = " ";
var G__243334 = (function (){var G__243411 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243412 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243411,G__243412) : tailrecursion.hoplon.span.call(null,G__243411,G__243412));
})();
var G__243335 = "]\n  (";
var G__243336 = (function (){var G__243413 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243414 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243413,G__243414) : tailrecursion.hoplon.span.call(null,G__243413,G__243414));
})();
var G__243337 = "(";
var G__243338 = (function (){var G__243415 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243416 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243415,G__243416) : tailrecursion.hoplon.span.call(null,G__243415,G__243416));
})();
var G__243339 = " ";
var G__243340 = (function (){var G__243417 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243418 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243417,G__243418) : tailrecursion.hoplon.span.call(null,G__243417,G__243418));
})();
var G__243341 = " ";
var G__243342 = (function (){var G__243419 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243420 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243419,G__243420) : tailrecursion.hoplon.span.call(null,G__243419,G__243420));
})();
var G__243343 = ")\n      ";
var G__243344 = (function (){var G__243421 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243422 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243421,G__243422) : tailrecursion.hoplon.span.call(null,G__243421,G__243422));
})();
var G__243345 = "\n      (";
var G__243346 = (function (){var G__243423 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243424 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243423,G__243424) : tailrecursion.hoplon.span.call(null,G__243423,G__243424));
})();
var G__243347 = " (";
var G__243348 = (function (){var G__243425 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243426 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243425,G__243426) : tailrecursion.hoplon.span.call(null,G__243425,G__243426));
})();
var G__243349 = " ";
var G__243350 = (function (){var G__243427 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243428 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243427,G__243428) : tailrecursion.hoplon.span.call(null,G__243427,G__243428));
})();
var G__243351 = " ";
var G__243352 = (function (){var G__243429 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243430 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243429,G__243430) : tailrecursion.hoplon.span.call(null,G__243429,G__243430));
})();
var G__243353 = ") ";
var G__243354 = (function (){var G__243431 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243432 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243431,G__243432) : tailrecursion.hoplon.span.call(null,G__243431,G__243432));
})();
var G__243355 = ")))\n(";
var G__243356 = (function (){var G__243433 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243434 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243433,G__243434) : tailrecursion.hoplon.span.call(null,G__243433,G__243434));
})();
var G__243357 = (function (){var G__243435 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243436 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243435,G__243436) : tailrecursion.hoplon.span.call(null,G__243435,G__243436));
})();
var G__243358 = " [";
var G__243359 = (function (){var G__243437 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243438 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243437,G__243438) : tailrecursion.hoplon.span.call(null,G__243437,G__243438));
})();
var G__243360 = " ";
var G__243361 = (function (){var G__243439 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243440 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243439,G__243440) : tailrecursion.hoplon.span.call(null,G__243439,G__243440));
})();
var G__243362 = "]\n  (";
var G__243363 = (function (){var G__243441 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243442 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243441,G__243442) : tailrecursion.hoplon.span.call(null,G__243441,G__243442));
})();
var G__243364 = "(";
var G__243365 = (function (){var G__243443 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243444 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243443,G__243444) : tailrecursion.hoplon.span.call(null,G__243443,G__243444));
})();
var G__243366 = " (";
var G__243367 = (function (){var G__243445 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243446 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243445,G__243446) : tailrecursion.hoplon.span.call(null,G__243445,G__243446));
})();
var G__243368 = "(";
var G__243369 = (function (){var G__243447 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243448 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243447,G__243448) : tailrecursion.hoplon.span.call(null,G__243447,G__243448));
})();
var G__243370 = " ";
var G__243371 = (function (){var G__243449 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243450 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243449,G__243450) : tailrecursion.hoplon.span.call(null,G__243449,G__243450));
})();
var G__243372 = ") ";
var G__243373 = (function (){var G__243451 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243452 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243451,G__243452) : tailrecursion.hoplon.span.call(null,G__243451,G__243452));
})();
var G__243374 = ")) ";
var G__243375 = (function (){var G__243453 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243454 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243453,G__243454) : tailrecursion.hoplon.span.call(null,G__243453,G__243454));
})();
var G__243376 = "))\n(";
var G__243377 = (function (){var G__243455 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243456 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243455,G__243456) : tailrecursion.hoplon.span.call(null,G__243455,G__243456));
})();
var G__243378 = (function (){var G__243457 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243458 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243457,G__243458) : tailrecursion.hoplon.span.call(null,G__243457,G__243458));
})();
var G__243379 = " [";
var G__243380 = (function (){var G__243459 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243460 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243459,G__243460) : tailrecursion.hoplon.span.call(null,G__243459,G__243460));
})();
var G__243381 = " ";
var G__243382 = (function (){var G__243461 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243462 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243461,G__243462) : tailrecursion.hoplon.span.call(null,G__243461,G__243462));
})();
var G__243383 = "]\n  (";
var G__243384 = (function (){var G__243463 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243464 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243463,G__243464) : tailrecursion.hoplon.span.call(null,G__243463,G__243464));
})();
var G__243385 = " ";
var G__243386 = (function (){var G__243465 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243466 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243465,G__243466) : tailrecursion.hoplon.span.call(null,G__243465,G__243466));
})();
var G__243387 = " (";
var G__243388 = (function (){var G__243467 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243468 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243467,G__243468) : tailrecursion.hoplon.span.call(null,G__243467,G__243468));
})();
var G__243389 = (function (){var G__243469 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243470 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243469,G__243470) : tailrecursion.hoplon.span.call(null,G__243469,G__243470));
})();
var G__243390 = " ";
var G__243391 = (function (){var G__243471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243472 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243471,G__243472) : tailrecursion.hoplon.span.call(null,G__243471,G__243472));
})();
var G__243392 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77(G__243316,G__243317,G__243318,G__243319,G__243320,G__243321,G__243322,G__243323,G__243324,G__243325,G__243326,G__243327,G__243328,G__243329,G__243330,G__243331,G__243332,G__243333,G__243334,G__243335,G__243336,G__243337,G__243338,G__243339,G__243340,G__243341,G__243342,G__243343,G__243344,G__243345,G__243346,G__243347,G__243348,G__243349,G__243350,G__243351,G__243352,G__243353,G__243354,G__243355,G__243356,G__243357,G__243358,G__243359,G__243360,G__243361,G__243362,G__243363,G__243364,G__243365,G__243366,G__243367,G__243368,G__243369,G__243370,G__243371,G__243372,G__243373,G__243374,G__243375,G__243376,G__243377,G__243378,G__243379,G__243380,G__243381,G__243382,G__243383,G__243384,G__243385,G__243386,G__243387,G__243388,G__243389,G__243390,G__243391,G__243392) : tailrecursion.hoplon.pre.call(null,G__243316,G__243317,G__243318,G__243319,G__243320,G__243321,G__243322,G__243323,G__243324,G__243325,G__243326,G__243327,G__243328,G__243329,G__243330,G__243331,G__243332,G__243333,G__243334,G__243335,G__243336,G__243337,G__243338,G__243339,G__243340,G__243341,G__243342,G__243343,G__243344,G__243345,G__243346,G__243347,G__243348,G__243349,G__243350,G__243351,G__243352,G__243353,G__243354,G__243355,G__243356,G__243357,G__243358,G__243359,G__243360,G__243361,G__243362,G__243363,G__243364,G__243365,G__243366,G__243367,G__243368,G__243369,G__243370,G__243371,G__243372,G__243373,G__243374,G__243375,G__243376,G__243377,G__243378,G__243379,G__243380,G__243381,G__243382,G__243383,G__243384,G__243385,G__243386,G__243387,G__243388,G__243389,G__243390,G__243391,G__243392));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243314,G__243315) : tailrecursion.hoplon.div.call(null,G__243314,G__243315));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243313) : tailrecursion.hoplon.div.call(null,G__243313));
})(),(function (){var G__243473 = cljs.core.PersistentArrayMap.EMPTY;
var G__243474 = new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The problem with this program is that the only procedure that is important to users of ",(function (){var G__243475 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__243476 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243475,G__243476) : tailrecursion.hoplon.markdown.code_node.call(null,G__243475,G__243476));
})()," is ",(function (){var G__243477 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__243478 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243477,G__243478) : tailrecursion.hoplon.markdown.code_node.call(null,G__243477,G__243478));
})(),". The other procedures (",(function (){var G__243479 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__243480 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243479,G__243480) : tailrecursion.hoplon.markdown.code_node.call(null,G__243479,G__243480));
})(),", ",(function (){var G__243481 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243482 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243481,G__243482) : tailrecursion.hoplon.markdown.code_node.call(null,G__243481,G__243482));
})(),", and ",(function (){var G__243483 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__243484 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243483,G__243484) : tailrecursion.hoplon.markdown.code_node.call(null,G__243483,G__243484));
})(),") only clutter up their minds. They may not define any other procedure called ",(function (){var G__243485 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243486 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243485,G__243486) : tailrecursion.hoplon.markdown.code_node.call(null,G__243485,G__243486));
})()," as part of another program to work together with the square-root program, because ",(function (){var G__243487 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__243488 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243487,G__243488) : tailrecursion.hoplon.markdown.code_node.call(null,G__243487,G__243488));
})()," needs it. The problem is especially severe in the construction of large systems by many separate programmers. For example, in the construction of a large library of numerical procedures, many numerical functions are computed as successive approximations and thus might have procedures named ",(function (){var G__243489 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243490 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243489,G__243490) : tailrecursion.hoplon.markdown.code_node.call(null,G__243489,G__243490));
})()," and ",(function (){var G__243491 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__243492 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243491,G__243492) : tailrecursion.hoplon.markdown.code_node.call(null,G__243491,G__243492));
})()," as auxiliary procedures. We would like to localize the subprocedures, hiding them inside ",(function (){var G__243493 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__243494 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243493,G__243494) : tailrecursion.hoplon.markdown.code_node.call(null,G__243493,G__243494));
})()," so that ",(function (){var G__243495 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__243496 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243495,G__243496) : tailrecursion.hoplon.markdown.code_node.call(null,G__243495,G__243496));
})()," could coexist with other successive approximations, each having its own private ",(function (){var G__243497 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243498 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243497,G__243498) : tailrecursion.hoplon.markdown.code_node.call(null,G__243497,G__243498));
})()," procedure. To make this possible, we allow a procedure to have internal definitions that are local to that procedure. For example, in the ",(function (){var G__243499 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square-root"], null);
var G__243500 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243499,G__243500) : tailrecursion.hoplon.markdown.code_node.call(null,G__243499,G__243500));
})()," problem we can write"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243473,G__243474) : tailrecursion.hoplon.markdown.para_node.call(null,G__243473,G__243474));
})(),(function (){var G__243663 = (function (){var G__243664 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243665 = (function (){var G__243666 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243667 = "(";
var G__243668 = (function (){var G__243746 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243747 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243746,G__243747) : tailrecursion.hoplon.span.call(null,G__243746,G__243747));
})();
var G__243669 = "(";
var G__243670 = (function (){var G__243748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243749 = "sqrt ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243748,G__243749) : tailrecursion.hoplon.span.call(null,G__243748,G__243749));
})();
var G__243671 = (function (){var G__243750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243751 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243750,G__243751) : tailrecursion.hoplon.span.call(null,G__243750,G__243751));
})();
var G__243672 = ")\n  (";
var G__243673 = (function (){var G__243752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243753 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243752,G__243753) : tailrecursion.hoplon.span.call(null,G__243752,G__243753));
})();
var G__243674 = "(";
var G__243675 = (function (){var G__243754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243755 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243754,G__243755) : tailrecursion.hoplon.span.call(null,G__243754,G__243755));
})();
var G__243676 = " ";
var G__243677 = (function (){var G__243756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243757 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243756,G__243757) : tailrecursion.hoplon.span.call(null,G__243756,G__243757));
})();
var G__243678 = " ";
var G__243679 = (function (){var G__243758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243759 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243758,G__243759) : tailrecursion.hoplon.span.call(null,G__243758,G__243759));
})();
var G__243680 = ")\n    (";
var G__243681 = (function (){var G__243760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243761 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243760,G__243761) : tailrecursion.hoplon.span.call(null,G__243760,G__243761));
})();
var G__243682 = "(";
var G__243683 = (function (){var G__243762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243763 = "abs ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243762,G__243763) : tailrecursion.hoplon.span.call(null,G__243762,G__243763));
})();
var G__243684 = "(";
var G__243685 = (function (){var G__243764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243765 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243764,G__243765) : tailrecursion.hoplon.span.call(null,G__243764,G__243765));
})();
var G__243686 = "(";
var G__243687 = (function (){var G__243766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243767 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243766,G__243767) : tailrecursion.hoplon.span.call(null,G__243766,G__243767));
})();
var G__243688 = " ";
var G__243689 = (function (){var G__243768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243769 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243768,G__243769) : tailrecursion.hoplon.span.call(null,G__243768,G__243769));
})();
var G__243690 = ") ";
var G__243691 = (function (){var G__243770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243771 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243770,G__243771) : tailrecursion.hoplon.span.call(null,G__243770,G__243771));
})();
var G__243692 = ")) ";
var G__243693 = (function (){var G__243772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243773 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243772,G__243773) : tailrecursion.hoplon.span.call(null,G__243772,G__243773));
})();
var G__243694 = "))\n  (";
var G__243695 = (function (){var G__243774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243775 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243774,G__243775) : tailrecursion.hoplon.span.call(null,G__243774,G__243775));
})();
var G__243696 = "(";
var G__243697 = (function (){var G__243776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243777 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243776,G__243777) : tailrecursion.hoplon.span.call(null,G__243776,G__243777));
})();
var G__243698 = " ";
var G__243699 = (function (){var G__243778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243779 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243778,G__243779) : tailrecursion.hoplon.span.call(null,G__243778,G__243779));
})();
var G__243700 = " ";
var G__243701 = (function (){var G__243780 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243781 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243780,G__243781) : tailrecursion.hoplon.span.call(null,G__243780,G__243781));
})();
var G__243702 = ")\n    (";
var G__243703 = (function (){var G__243782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243783 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243782,G__243783) : tailrecursion.hoplon.span.call(null,G__243782,G__243783));
})();
var G__243704 = " ";
var G__243705 = (function (){var G__243784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243785 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243784,G__243785) : tailrecursion.hoplon.span.call(null,G__243784,G__243785));
})();
var G__243706 = " (";
var G__243707 = (function (){var G__243786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243787 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243786,G__243787) : tailrecursion.hoplon.span.call(null,G__243786,G__243787));
})();
var G__243708 = (function (){var G__243788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243789 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243788,G__243789) : tailrecursion.hoplon.span.call(null,G__243788,G__243789));
})();
var G__243709 = " ";
var G__243710 = (function (){var G__243790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243791 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243790,G__243791) : tailrecursion.hoplon.span.call(null,G__243790,G__243791));
})();
var G__243711 = ")))\n  (";
var G__243712 = (function (){var G__243792 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243793 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243792,G__243793) : tailrecursion.hoplon.span.call(null,G__243792,G__243793));
})();
var G__243713 = "(";
var G__243714 = (function (){var G__243794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243795 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243794,G__243795) : tailrecursion.hoplon.span.call(null,G__243794,G__243795));
})();
var G__243715 = " ";
var G__243716 = (function (){var G__243796 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243797 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243796,G__243797) : tailrecursion.hoplon.span.call(null,G__243796,G__243797));
})();
var G__243717 = " ";
var G__243718 = (function (){var G__243798 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243799 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243798,G__243799) : tailrecursion.hoplon.span.call(null,G__243798,G__243799));
})();
var G__243719 = ")\n    (";
var G__243720 = (function (){var G__243800 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243801 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243800,G__243801) : tailrecursion.hoplon.span.call(null,G__243800,G__243801));
})();
var G__243721 = "(";
var G__243722 = (function (){var G__243802 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243803 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243802,G__243803) : tailrecursion.hoplon.span.call(null,G__243802,G__243803));
})();
var G__243723 = " ";
var G__243724 = (function (){var G__243804 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243805 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243804,G__243805) : tailrecursion.hoplon.span.call(null,G__243804,G__243805));
})();
var G__243725 = " ";
var G__243726 = (function (){var G__243806 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243807 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243806,G__243807) : tailrecursion.hoplon.span.call(null,G__243806,G__243807));
})();
var G__243727 = ")\n        ";
var G__243728 = (function (){var G__243808 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243809 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243808,G__243809) : tailrecursion.hoplon.span.call(null,G__243808,G__243809));
})();
var G__243729 = "\n        (";
var G__243730 = (function (){var G__243810 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243811 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243810,G__243811) : tailrecursion.hoplon.span.call(null,G__243810,G__243811));
})();
var G__243731 = " (";
var G__243732 = (function (){var G__243812 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243813 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243812,G__243813) : tailrecursion.hoplon.span.call(null,G__243812,G__243813));
})();
var G__243733 = " ";
var G__243734 = (function (){var G__243814 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243815 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243814,G__243815) : tailrecursion.hoplon.span.call(null,G__243814,G__243815));
})();
var G__243735 = " ";
var G__243736 = (function (){var G__243816 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243817 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243816,G__243817) : tailrecursion.hoplon.span.call(null,G__243816,G__243817));
})();
var G__243737 = ") ";
var G__243738 = (function (){var G__243818 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243819 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243818,G__243819) : tailrecursion.hoplon.span.call(null,G__243818,G__243819));
})();
var G__243739 = ")))\n  (";
var G__243740 = (function (){var G__243820 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243821 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243820,G__243821) : tailrecursion.hoplon.span.call(null,G__243820,G__243821));
})();
var G__243741 = " ";
var G__243742 = (function (){var G__243822 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243823 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243822,G__243823) : tailrecursion.hoplon.span.call(null,G__243822,G__243823));
})();
var G__243743 = " ";
var G__243744 = (function (){var G__243824 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243825 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243824,G__243825) : tailrecursion.hoplon.span.call(null,G__243824,G__243825));
})();
var G__243745 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80(G__243666,G__243667,G__243668,G__243669,G__243670,G__243671,G__243672,G__243673,G__243674,G__243675,G__243676,G__243677,G__243678,G__243679,G__243680,G__243681,G__243682,G__243683,G__243684,G__243685,G__243686,G__243687,G__243688,G__243689,G__243690,G__243691,G__243692,G__243693,G__243694,G__243695,G__243696,G__243697,G__243698,G__243699,G__243700,G__243701,G__243702,G__243703,G__243704,G__243705,G__243706,G__243707,G__243708,G__243709,G__243710,G__243711,G__243712,G__243713,G__243714,G__243715,G__243716,G__243717,G__243718,G__243719,G__243720,G__243721,G__243722,G__243723,G__243724,G__243725,G__243726,G__243727,G__243728,G__243729,G__243730,G__243731,G__243732,G__243733,G__243734,G__243735,G__243736,G__243737,G__243738,G__243739,G__243740,G__243741,G__243742,G__243743,G__243744,G__243745) : tailrecursion.hoplon.pre.call(null,G__243666,G__243667,G__243668,G__243669,G__243670,G__243671,G__243672,G__243673,G__243674,G__243675,G__243676,G__243677,G__243678,G__243679,G__243680,G__243681,G__243682,G__243683,G__243684,G__243685,G__243686,G__243687,G__243688,G__243689,G__243690,G__243691,G__243692,G__243693,G__243694,G__243695,G__243696,G__243697,G__243698,G__243699,G__243700,G__243701,G__243702,G__243703,G__243704,G__243705,G__243706,G__243707,G__243708,G__243709,G__243710,G__243711,G__243712,G__243713,G__243714,G__243715,G__243716,G__243717,G__243718,G__243719,G__243720,G__243721,G__243722,G__243723,G__243724,G__243725,G__243726,G__243727,G__243728,G__243729,G__243730,G__243731,G__243732,G__243733,G__243734,G__243735,G__243736,G__243737,G__243738,G__243739,G__243740,G__243741,G__243742,G__243743,G__243744,G__243745));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243664,G__243665) : tailrecursion.hoplon.div.call(null,G__243664,G__243665));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243663) : tailrecursion.hoplon.div.call(null,G__243663));
})(),(function (){var G__243826 = cljs.core.PersistentArrayMap.EMPTY;
var G__243827 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note: This approach does not solve our problem in Clojure. In Clojure, whenever ",(function (){var G__243828 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__243829 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243828,G__243829) : tailrecursion.hoplon.markdown.code_node.call(null,G__243828,G__243829));
})()," or ",(function (){var G__243830 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__243831 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243830,G__243831) : tailrecursion.hoplon.markdown.code_node.call(null,G__243830,G__243831));
})()," are used, they add the definitions to the global environment. What that means is, every time you run the ",(function (){var G__243832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__243833 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243832,G__243833) : tailrecursion.hoplon.markdown.code_node.call(null,G__243832,G__243833));
})()," procedure, you would end up redefining ",(function (){var G__243834 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243835 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243834,G__243835) : tailrecursion.hoplon.markdown.code_node.call(null,G__243834,G__243835));
})()," for every program that uses it. Now, if every program that uses ",(function (){var G__243836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243837 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243836,G__243837) : tailrecursion.hoplon.markdown.code_node.call(null,G__243836,G__243837));
})()," redefines ",(function (){var G__243838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__243839 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243838,G__243839) : tailrecursion.hoplon.markdown.code_node.call(null,G__243838,G__243839));
})(),", then you might not run into any problems; but either way, there is a better alternative: we could use what",(function (){var G__243840 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__243841 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__243840,G__243841) : tailrecursion.hoplon.markdown.simple_node.call(null,G__243840,G__243841));
})(),"s called a ",(function (){var G__243842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"let"], null);
var G__243843 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243842,G__243843) : tailrecursion.hoplon.markdown.code_node.call(null,G__243842,G__243843));
})()," binding, but we",(function (){var G__243844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__243845 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__243844,G__243845) : tailrecursion.hoplon.markdown.simple_node.call(null,G__243844,G__243845));
})(),"ll learn about those a little later."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243826,G__243827) : tailrecursion.hoplon.markdown.para_node.call(null,G__243826,G__243827));
})(),(function (){var G__243846 = cljs.core.PersistentArrayMap.EMPTY;
var G__243847 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The thing to remember is the evaluation model. When the compiler is given a symbol, it has a set procedure for determining what this symbol means: first it looks to see if the symbol is a special form (like ",(function (){var G__243848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__243849 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243848,G__243849) : tailrecursion.hoplon.markdown.code_node.call(null,G__243848,G__243849));
})(),"), if it",(function (){var G__243850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__243851 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__243850,G__243851) : tailrecursion.hoplon.markdown.simple_node.call(null,G__243850,G__243851));
})(),"s not, then it checks each successive nested local environment until it reaches the global environment. The point is, in Scheme, ",(function (){var G__243852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__243853 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243852,G__243853) : tailrecursion.hoplon.markdown.code_node.call(null,G__243852,G__243853));
})()," only mutates the local environment, whatever that may be; the same is not true in Clojure. Defining forms mutate the global environment directly, so using ",(function (){var G__243854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__243855 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243854,G__243855) : tailrecursion.hoplon.markdown.code_node.call(null,G__243854,G__243855));
})()," to change the definition of a function in one place changes it in all places."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243846,G__243847) : tailrecursion.hoplon.markdown.para_node.call(null,G__243846,G__243847));
})(),(function (){var G__243856 = cljs.core.PersistentArrayMap.EMPTY;
var G__243857 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Luckily, Cloure has a built in pair of functions ",(function (){var G__243858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__243859 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243858,G__243859) : tailrecursion.hoplon.markdown.code_node.call(null,G__243858,G__243859));
})()," and ",(function (){var G__243860 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__243861 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243860,G__243861) : tailrecursion.hoplon.markdown.code_node.call(null,G__243860,G__243861));
})()," that do help us a bit. We can replace the ",(function (){var G__243862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"iter"], null);
var G__243863 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243862,G__243863) : tailrecursion.hoplon.markdown.code_node.call(null,G__243862,G__243863));
})()," definition with this ",(function (){var G__243864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__243865 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243864,G__243865) : tailrecursion.hoplon.markdown.code_node.call(null,G__243864,G__243865));
})()," ",(function (){var G__243866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__243867 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243866,G__243867) : tailrecursion.hoplon.markdown.code_node.call(null,G__243866,G__243867));
})()," business thusly (assuming ",(function (){var G__243868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough"], null);
var G__243869 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243868,G__243869) : tailrecursion.hoplon.markdown.code_node.call(null,G__243868,G__243869));
})()," and ",(function (){var G__243870 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__243871 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243870,G__243871) : tailrecursion.hoplon.markdown.code_node.call(null,G__243870,G__243871));
})()," were already defined):"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243856,G__243857) : tailrecursion.hoplon.markdown.para_node.call(null,G__243856,G__243857));
})(),(function (){var G__243935 = (function (){var G__243936 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243937 = (function (){var G__243938 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243939 = "(";
var G__243940 = (function (){var G__243969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243970 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243969,G__243970) : tailrecursion.hoplon.span.call(null,G__243969,G__243970));
})();
var G__243941 = (function (){var G__243971 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243972 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243971,G__243972) : tailrecursion.hoplon.span.call(null,G__243971,G__243972));
})();
var G__243942 = " [";
var G__243943 = (function (){var G__243973 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243974 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243973,G__243974) : tailrecursion.hoplon.span.call(null,G__243973,G__243974));
})();
var G__243944 = "]\n  (";
var G__243945 = (function (){var G__243975 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243976 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243975,G__243976) : tailrecursion.hoplon.span.call(null,G__243975,G__243976));
})();
var G__243946 = "[";
var G__243947 = (function (){var G__243977 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243978 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243977,G__243978) : tailrecursion.hoplon.span.call(null,G__243977,G__243978));
})();
var G__243948 = " ";
var G__243949 = (function (){var G__243979 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243980 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243979,G__243980) : tailrecursion.hoplon.span.call(null,G__243979,G__243980));
})();
var G__243950 = "]\n    (";
var G__243951 = (function (){var G__243981 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243982 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243981,G__243982) : tailrecursion.hoplon.span.call(null,G__243981,G__243982));
})();
var G__243952 = "(";
var G__243953 = (function (){var G__243983 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243984 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243983,G__243984) : tailrecursion.hoplon.span.call(null,G__243983,G__243984));
})();
var G__243954 = " ";
var G__243955 = (function (){var G__243985 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243986 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243985,G__243986) : tailrecursion.hoplon.span.call(null,G__243985,G__243986));
})();
var G__243956 = " ";
var G__243957 = (function (){var G__243987 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243988 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243987,G__243988) : tailrecursion.hoplon.span.call(null,G__243987,G__243988));
})();
var G__243958 = ")\n        ";
var G__243959 = (function (){var G__243989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243990 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243989,G__243990) : tailrecursion.hoplon.span.call(null,G__243989,G__243990));
})();
var G__243960 = "\n        (";
var G__243961 = (function (){var G__243991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243992 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243991,G__243992) : tailrecursion.hoplon.span.call(null,G__243991,G__243992));
})();
var G__243962 = " (";
var G__243963 = (function (){var G__243993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243994 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243993,G__243994) : tailrecursion.hoplon.span.call(null,G__243993,G__243994));
})();
var G__243964 = " ";
var G__243965 = (function (){var G__243995 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243996 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243995,G__243996) : tailrecursion.hoplon.span.call(null,G__243995,G__243996));
})();
var G__243966 = " ";
var G__243967 = (function (){var G__243997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243998 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243997,G__243998) : tailrecursion.hoplon.span.call(null,G__243997,G__243998));
})();
var G__243968 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31(G__243938,G__243939,G__243940,G__243941,G__243942,G__243943,G__243944,G__243945,G__243946,G__243947,G__243948,G__243949,G__243950,G__243951,G__243952,G__243953,G__243954,G__243955,G__243956,G__243957,G__243958,G__243959,G__243960,G__243961,G__243962,G__243963,G__243964,G__243965,G__243966,G__243967,G__243968) : tailrecursion.hoplon.pre.call(null,G__243938,G__243939,G__243940,G__243941,G__243942,G__243943,G__243944,G__243945,G__243946,G__243947,G__243948,G__243949,G__243950,G__243951,G__243952,G__243953,G__243954,G__243955,G__243956,G__243957,G__243958,G__243959,G__243960,G__243961,G__243962,G__243963,G__243964,G__243965,G__243966,G__243967,G__243968));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243936,G__243937) : tailrecursion.hoplon.div.call(null,G__243936,G__243937));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243935) : tailrecursion.hoplon.div.call(null,G__243935));
})(),(function (){var G__243999 = cljs.core.PersistentArrayMap.EMPTY;
var G__244000 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The genearl format for these will be,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243999,G__244000) : tailrecursion.hoplon.markdown.para_node.call(null,G__243999,G__244000));
})(),(function (){var G__244096 = (function (){var G__244097 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244098 = (function (){var G__244099 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244100 = "(";
var G__244101 = (function (){var G__244144 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244145 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244144,G__244145) : tailrecursion.hoplon.span.call(null,G__244144,G__244145));
})();
var G__244102 = (function (){var G__244146 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244147 = "function";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244146,G__244147) : tailrecursion.hoplon.span.call(null,G__244146,G__244147));
})();
var G__244103 = " [";
var G__244104 = (function (){var G__244148 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244149 = "arguments";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244148,G__244149) : tailrecursion.hoplon.span.call(null,G__244148,G__244149));
})();
var G__244105 = "]\n  (";
var G__244106 = (function (){var G__244150 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244151 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244150,G__244151) : tailrecursion.hoplon.span.call(null,G__244150,G__244151));
})();
var G__244107 = "[";
var G__244108 = (function (){var G__244152 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244153 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244152,G__244153) : tailrecursion.hoplon.span.call(null,G__244152,G__244153));
})();
var G__244109 = " ";
var G__244110 = (function (){var G__244154 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244155 = "initial-value1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244154,G__244155) : tailrecursion.hoplon.span.call(null,G__244154,G__244155));
})();
var G__244111 = "\n         ";
var G__244112 = (function (){var G__244156 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244157 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244156,G__244157) : tailrecursion.hoplon.span.call(null,G__244156,G__244157));
})();
var G__244113 = " ";
var G__244114 = (function (){var G__244158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244159 = "initial-value2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244158,G__244159) : tailrecursion.hoplon.span.call(null,G__244158,G__244159));
})();
var G__244115 = "\n         ";
var G__244116 = (function (){var G__244160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244161 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244160,G__244161) : tailrecursion.hoplon.span.call(null,G__244160,G__244161));
})();
var G__244117 = "\n         ";
var G__244118 = (function (){var G__244162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244163 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244162,G__244163) : tailrecursion.hoplon.span.call(null,G__244162,G__244163));
})();
var G__244119 = " ";
var G__244120 = (function (){var G__244164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244165 = "initial-valuen";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244164,G__244165) : tailrecursion.hoplon.span.call(null,G__244164,G__244165));
})();
var G__244121 = "]\n    (";
var G__244122 = (function (){var G__244166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244167 = "<if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244166,G__244167) : tailrecursion.hoplon.span.call(null,G__244166,G__244167));
})();
var G__244123 = " ";
var G__244124 = (function (){var G__244168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244169 = "or cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244168,G__244169) : tailrecursion.hoplon.span.call(null,G__244168,G__244169));
})();
var G__244125 = (function (){var G__244170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244171 = "can";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244170,G__244171) : tailrecursion.hoplon.span.call(null,G__244170,G__244171));
})();
var G__244126 = " ";
var G__244127 = (function (){var G__244172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244173 = "go";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244172,G__244173) : tailrecursion.hoplon.span.call(null,G__244172,G__244173));
})();
var G__244128 = " ";
var G__244129 = (function (){var G__244174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244175 = "here>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244174,G__244175) : tailrecursion.hoplon.span.call(null,G__244174,G__244175));
})();
var G__244130 = " (";
var G__244131 = (function (){var G__244176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244177 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244176,G__244177) : tailrecursion.hoplon.span.call(null,G__244176,G__244177));
})();
var G__244132 = " (";
var G__244133 = (function (){var G__244178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244179 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244178,G__244179) : tailrecursion.hoplon.span.call(null,G__244178,G__244179));
})();
var G__244134 = (function (){var G__244180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244181 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244180,G__244181) : tailrecursion.hoplon.span.call(null,G__244180,G__244181));
})();
var G__244135 = ") (";
var G__244136 = (function (){var G__244182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244183 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244182,G__244183) : tailrecursion.hoplon.span.call(null,G__244182,G__244183));
})();
var G__244137 = (function (){var G__244184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244185 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244184,G__244185) : tailrecursion.hoplon.span.call(null,G__244184,G__244185));
})();
var G__244138 = ")";
var G__244139 = (function (){var G__244186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244187 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244186,G__244187) : tailrecursion.hoplon.span.call(null,G__244186,G__244187));
})();
var G__244140 = "(";
var G__244141 = (function (){var G__244188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244189 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244188,G__244189) : tailrecursion.hoplon.span.call(null,G__244188,G__244189));
})();
var G__244142 = (function (){var G__244190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244191 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244190,G__244191) : tailrecursion.hoplon.span.call(null,G__244190,G__244191));
})();
var G__244143 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45(G__244099,G__244100,G__244101,G__244102,G__244103,G__244104,G__244105,G__244106,G__244107,G__244108,G__244109,G__244110,G__244111,G__244112,G__244113,G__244114,G__244115,G__244116,G__244117,G__244118,G__244119,G__244120,G__244121,G__244122,G__244123,G__244124,G__244125,G__244126,G__244127,G__244128,G__244129,G__244130,G__244131,G__244132,G__244133,G__244134,G__244135,G__244136,G__244137,G__244138,G__244139,G__244140,G__244141,G__244142,G__244143) : tailrecursion.hoplon.pre.call(null,G__244099,G__244100,G__244101,G__244102,G__244103,G__244104,G__244105,G__244106,G__244107,G__244108,G__244109,G__244110,G__244111,G__244112,G__244113,G__244114,G__244115,G__244116,G__244117,G__244118,G__244119,G__244120,G__244121,G__244122,G__244123,G__244124,G__244125,G__244126,G__244127,G__244128,G__244129,G__244130,G__244131,G__244132,G__244133,G__244134,G__244135,G__244136,G__244137,G__244138,G__244139,G__244140,G__244141,G__244142,G__244143));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244097,G__244098) : tailrecursion.hoplon.div.call(null,G__244097,G__244098));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244096) : tailrecursion.hoplon.div.call(null,G__244096));
})(),(function (){var G__244192 = cljs.core.PersistentArrayMap.EMPTY;
var G__244193 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This ",(function (){var G__244194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[thing1 intial-value1]"], null);
var G__244195 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244194,G__244195) : tailrecursion.hoplon.markdown.code_node.call(null,G__244194,G__244195));
})()," defines ",(function (){var G__244196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"thing1"], null);
var G__244197 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244196,G__244197) : tailrecursion.hoplon.markdown.code_node.call(null,G__244196,G__244197));
})()," to be ",(function (){var G__244198 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"value1"], null);
var G__244199 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244198,G__244199) : tailrecursion.hoplon.markdown.code_node.call(null,G__244198,G__244199));
})()," for the first iteration, then when you call ",(function (){var G__244200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__244201 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244200,G__244201) : tailrecursion.hoplon.markdown.code_node.call(null,G__244200,G__244201));
})(),", it goes back to loop with the new values given (in the same order they appear in the ",(function (){var G__244202 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__244203 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244202,G__244203) : tailrecursion.hoplon.markdown.code_node.call(null,G__244202,G__244203));
})()," bindings)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244192,G__244193) : tailrecursion.hoplon.markdown.para_node.call(null,G__244192,G__244193));
})(),(function (){var G__244204 = cljs.core.PersistentArrayMap.EMPTY;
var G__244205 = new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such nesting of definitions, called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["block structure"], null)], 0)),", is basically the right solution to the simplest name-packaging problem. But there is a better idea lurking here. In addition to internalizing the definitions of the auxiliary procedures, we can simplify them. Since ",(function (){var G__244206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__244207 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244206,G__244207) : tailrecursion.hoplon.markdown.code_node.call(null,G__244206,G__244207));
})()," is bound in the definition of ",(function (){var G__244208 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__244209 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244208,G__244209) : tailrecursion.hoplon.markdown.code_node.call(null,G__244208,G__244209));
})(),", the procedures ",(function (){var G__244210 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__244211 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244210,G__244211) : tailrecursion.hoplon.markdown.code_node.call(null,G__244210,G__244211));
})(),", ",(function (){var G__244212 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__244213 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244212,G__244213) : tailrecursion.hoplon.markdown.code_node.call(null,G__244212,G__244213));
})(),", and ",(function (){var G__244214 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__244215 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244214,G__244215) : tailrecursion.hoplon.markdown.code_node.call(null,G__244214,G__244215));
})(),", which are defined internally to ",(function (){var G__244216 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__244217 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244216,G__244217) : tailrecursion.hoplon.markdown.code_node.call(null,G__244216,G__244217));
})(),", are in the scope of ",(function (){var G__244218 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__244219 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244218,G__244219) : tailrecursion.hoplon.markdown.code_node.call(null,G__244218,G__244219));
})(),". Thus, it is not necessary to pass ",(function (){var G__244220 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__244221 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244220,G__244221) : tailrecursion.hoplon.markdown.code_node.call(null,G__244220,G__244221));
})()," explicitly to each of these procedures. Instead, we allow ",(function (){var G__244222 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__244223 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244222,G__244223) : tailrecursion.hoplon.markdown.code_node.call(null,G__244222,G__244223));
})()," to be a free variable in the internal definitions, as shown below. Then ",(function (){var G__244224 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__244225 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244224,G__244225) : tailrecursion.hoplon.markdown.code_node.call(null,G__244224,G__244225));
})()," gets its value from the argument with which the enclosing procedure ",(function (){var G__244226 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__244227 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244226,G__244227) : tailrecursion.hoplon.markdown.code_node.call(null,G__244226,G__244227));
})()," is called. This discipline is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["lexical scoping"], null)], 0)),".",(function (){var G__244228 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__244229 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lexical scoping dictates that free variables in a procedure are taken to refer to bindings made by enclosing procedure definitions; that is, they are looked up in the environment in which the procedure was defined. We will see how this works in detail in chapter 3 when we study environments and the detailed behavior of the interpreter."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244228,G__244229) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244228,G__244229));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244204,G__244205) : tailrecursion.hoplon.markdown.para_node.call(null,G__244204,G__244205));
})(),(function (){var G__244230 = cljs.core.PersistentArrayMap.EMPTY;
var G__244231 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__244232 = cljs.core.PersistentArrayMap.EMPTY;
var G__244233 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This would still work in Clojure, if one were so inclined, it would just define all of these functions globally (as is explained above)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244232,G__244233) : tailrecursion.hoplon.markdown.para_node.call(null,G__244232,G__244233));
})()], null);
return (tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2(G__244230,G__244231) : tailrecursion.hoplon.markdown.block_quote_node.call(null,G__244230,G__244231));
})(),(function (){var G__244365 = (function (){var G__244366 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244367 = (function (){var G__244368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244369 = "(";
var G__244370 = (function (){var G__244431 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244432 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244431,G__244432) : tailrecursion.hoplon.span.call(null,G__244431,G__244432));
})();
var G__244371 = (function (){var G__244433 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244434 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244433,G__244434) : tailrecursion.hoplon.span.call(null,G__244433,G__244434));
})();
var G__244372 = " [";
var G__244373 = (function (){var G__244435 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244436 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244435,G__244436) : tailrecursion.hoplon.span.call(null,G__244435,G__244436));
})();
var G__244374 = "]\n  (";
var G__244375 = (function (){var G__244437 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244438 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244437,G__244438) : tailrecursion.hoplon.span.call(null,G__244437,G__244438));
})();
var G__244376 = (function (){var G__244439 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244440 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244439,G__244440) : tailrecursion.hoplon.span.call(null,G__244439,G__244440));
})();
var G__244377 = " [";
var G__244378 = (function (){var G__244441 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244442 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244441,G__244442) : tailrecursion.hoplon.span.call(null,G__244441,G__244442));
})();
var G__244379 = "]\n    (";
var G__244380 = (function (){var G__244443 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244444 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244443,G__244444) : tailrecursion.hoplon.span.call(null,G__244443,G__244444));
})();
var G__244381 = "(";
var G__244382 = (function (){var G__244445 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244446 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244445,G__244446) : tailrecursion.hoplon.span.call(null,G__244445,G__244446));
})();
var G__244383 = " (";
var G__244384 = (function (){var G__244447 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244448 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244447,G__244448) : tailrecursion.hoplon.span.call(null,G__244447,G__244448));
})();
var G__244385 = "(";
var G__244386 = (function (){var G__244449 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244450 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244449,G__244450) : tailrecursion.hoplon.span.call(null,G__244449,G__244450));
})();
var G__244387 = " ";
var G__244388 = (function (){var G__244451 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244452 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244451,G__244452) : tailrecursion.hoplon.span.call(null,G__244451,G__244452));
})();
var G__244389 = ") ";
var G__244390 = (function (){var G__244453 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244454 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244453,G__244454) : tailrecursion.hoplon.span.call(null,G__244453,G__244454));
})();
var G__244391 = ")) ";
var G__244392 = (function (){var G__244455 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244456 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244455,G__244456) : tailrecursion.hoplon.span.call(null,G__244455,G__244456));
})();
var G__244393 = "))\n  (";
var G__244394 = (function (){var G__244457 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244458 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244457,G__244458) : tailrecursion.hoplon.span.call(null,G__244457,G__244458));
})();
var G__244395 = (function (){var G__244459 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244460 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244459,G__244460) : tailrecursion.hoplon.span.call(null,G__244459,G__244460));
})();
var G__244396 = " [";
var G__244397 = (function (){var G__244461 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244462 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244461,G__244462) : tailrecursion.hoplon.span.call(null,G__244461,G__244462));
})();
var G__244398 = "]\n    (";
var G__244399 = (function (){var G__244463 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244464 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244463,G__244464) : tailrecursion.hoplon.span.call(null,G__244463,G__244464));
})();
var G__244400 = " ";
var G__244401 = (function (){var G__244465 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244466 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244465,G__244466) : tailrecursion.hoplon.span.call(null,G__244465,G__244466));
})();
var G__244402 = " (";
var G__244403 = (function (){var G__244467 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244468 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244467,G__244468) : tailrecursion.hoplon.span.call(null,G__244467,G__244468));
})();
var G__244404 = (function (){var G__244469 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244470 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244469,G__244470) : tailrecursion.hoplon.span.call(null,G__244469,G__244470));
})();
var G__244405 = " ";
var G__244406 = (function (){var G__244471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244472 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244471,G__244472) : tailrecursion.hoplon.span.call(null,G__244471,G__244472));
})();
var G__244407 = ")))\n  (";
var G__244408 = (function (){var G__244473 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244474 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244473,G__244474) : tailrecursion.hoplon.span.call(null,G__244473,G__244474));
})();
var G__244409 = (function (){var G__244475 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244476 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244475,G__244476) : tailrecursion.hoplon.span.call(null,G__244475,G__244476));
})();
var G__244410 = " [";
var G__244411 = (function (){var G__244477 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244478 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244477,G__244478) : tailrecursion.hoplon.span.call(null,G__244477,G__244478));
})();
var G__244412 = "]\n    (";
var G__244413 = (function (){var G__244479 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244480 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244479,G__244480) : tailrecursion.hoplon.span.call(null,G__244479,G__244480));
})();
var G__244414 = "(";
var G__244415 = (function (){var G__244481 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244482 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244481,G__244482) : tailrecursion.hoplon.span.call(null,G__244481,G__244482));
})();
var G__244416 = " ";
var G__244417 = (function (){var G__244483 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244484 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244483,G__244484) : tailrecursion.hoplon.span.call(null,G__244483,G__244484));
})();
var G__244418 = ")\n        ";
var G__244419 = (function (){var G__244485 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244486 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244485,G__244486) : tailrecursion.hoplon.span.call(null,G__244485,G__244486));
})();
var G__244420 = "\n        (";
var G__244421 = (function (){var G__244487 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244488 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244487,G__244488) : tailrecursion.hoplon.span.call(null,G__244487,G__244488));
})();
var G__244422 = " (";
var G__244423 = (function (){var G__244489 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244490 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244489,G__244490) : tailrecursion.hoplon.span.call(null,G__244489,G__244490));
})();
var G__244424 = " ";
var G__244425 = (function (){var G__244491 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244492 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244491,G__244492) : tailrecursion.hoplon.span.call(null,G__244491,G__244492));
})();
var G__244426 = "))))\n  (";
var G__244427 = (function (){var G__244493 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244494 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244493,G__244494) : tailrecursion.hoplon.span.call(null,G__244493,G__244494));
})();
var G__244428 = " ";
var G__244429 = (function (){var G__244495 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244496 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244495,G__244496) : tailrecursion.hoplon.span.call(null,G__244495,G__244496));
})();
var G__244430 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63(G__244368,G__244369,G__244370,G__244371,G__244372,G__244373,G__244374,G__244375,G__244376,G__244377,G__244378,G__244379,G__244380,G__244381,G__244382,G__244383,G__244384,G__244385,G__244386,G__244387,G__244388,G__244389,G__244390,G__244391,G__244392,G__244393,G__244394,G__244395,G__244396,G__244397,G__244398,G__244399,G__244400,G__244401,G__244402,G__244403,G__244404,G__244405,G__244406,G__244407,G__244408,G__244409,G__244410,G__244411,G__244412,G__244413,G__244414,G__244415,G__244416,G__244417,G__244418,G__244419,G__244420,G__244421,G__244422,G__244423,G__244424,G__244425,G__244426,G__244427,G__244428,G__244429,G__244430) : tailrecursion.hoplon.pre.call(null,G__244368,G__244369,G__244370,G__244371,G__244372,G__244373,G__244374,G__244375,G__244376,G__244377,G__244378,G__244379,G__244380,G__244381,G__244382,G__244383,G__244384,G__244385,G__244386,G__244387,G__244388,G__244389,G__244390,G__244391,G__244392,G__244393,G__244394,G__244395,G__244396,G__244397,G__244398,G__244399,G__244400,G__244401,G__244402,G__244403,G__244404,G__244405,G__244406,G__244407,G__244408,G__244409,G__244410,G__244411,G__244412,G__244413,G__244414,G__244415,G__244416,G__244417,G__244418,G__244419,G__244420,G__244421,G__244422,G__244423,G__244424,G__244425,G__244426,G__244427,G__244428,G__244429,G__244430));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244366,G__244367) : tailrecursion.hoplon.div.call(null,G__244366,G__244367));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244365) : tailrecursion.hoplon.div.call(null,G__244365));
})(),(function (){var G__244497 = cljs.core.PersistentArrayMap.EMPTY;
var G__244498 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will use block structure extensively to help us break up large programs into tractable pieces.",(function (){var G__244499 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__244500 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Embedded definitions must come first in a procedure body. The management is not responsible for the consequences of running programs that intertwine definition and use."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244499,G__244500) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244499,G__244500));
})()," The idea of block structure originated with the programming language Algol 60. It appears in most advanced programming languages and is an important tool for helping to organize the construction of large programs."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244497,G__244498) : tailrecursion.hoplon.markdown.para_node.call(null,G__244497,G__244498));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243143;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243142;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243141;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243140;
}})()], 0));
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27(G__237029,G__237030,G__237031,G__237032,G__237033,G__237034,G__237035,G__237036,G__237037,G__237038,G__237039,G__237040,G__237041,G__237042,G__237043,G__237044,G__237045,G__237046,G__237047,G__237048,G__237049,G__237050,G__237051,G__237052,G__237053,G__237054,G__237055) : tailrecursion.hoplon.div.call(null,G__237029,G__237030,G__237031,G__237032,G__237033,G__237034,G__237035,G__237036,G__237037,G__237038,G__237039,G__237040,G__237041,G__237042,G__237043,G__237044,G__237045,G__237046,G__237047,G__237048,G__237049,G__237050,G__237051,G__237052,G__237053,G__237054,G__237055));
};
var book$sicp$texts$ch1sect1$content = function (var_args){
var args__8262__auto__ = null;
if (arguments.length > 0) {
var G__244501__i = 0, G__244501__a = new Array(arguments.length -  0);
while (G__244501__i < G__244501__a.length) {G__244501__a[G__244501__i] = arguments[G__244501__i + 0]; ++G__244501__i;}
  args__8262__auto__ = new cljs.core.IndexedSeq(G__244501__a,0);
} 
return book$sicp$texts$ch1sect1$content__delegate.call(this,args__8262__auto__);};
book$sicp$texts$ch1sect1$content.cljs$lang$maxFixedArity = 0;
book$sicp$texts$ch1sect1$content.cljs$lang$applyTo = (function (arglist__244502){
var args__8262__auto__ = cljs.core.seq(arglist__244502);
return book$sicp$texts$ch1sect1$content__delegate(args__8262__auto__);
});
book$sicp$texts$ch1sect1$content.cljs$core$IFn$_invoke$arity$variadic = book$sicp$texts$ch1sect1$content__delegate;
return book$sicp$texts$ch1sect1$content;
})()
;
