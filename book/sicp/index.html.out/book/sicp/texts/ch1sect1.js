// Compiled by ClojureScript 1.7.48 {:static-fns true, :optimize-constants true}
goog.provide('book.sicp.texts.ch1sect1');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('book.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
book.sicp.texts.ch1sect1.content = (function() { 
var book$sicp$texts$ch1sect1$content__delegate = function (args__8082__auto__){
var vec__258232 = tailrecursion.hoplon.parse_args(args__8082__auto__);
var attr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__258232,(0),null);
var kids = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__258232,(1),null);
var G__258233 = cljs.core.PersistentArrayMap.EMPTY;
var G__258234 = book.sicp.book_data.sect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Elements of Programming"], null),(function (){var _STAR_references_STAR_258260 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258261 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_258262 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258263 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258264 = cljs.core.PersistentArrayMap.EMPTY;
var G__258265 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes. Thus, when we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three mechanisms for accomplishing this:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258264,G__258265) : tailrecursion.hoplon.markdown.para_node.call(null,G__258264,G__258265));
})(),(function (){var G__258266 = cljs.core.PersistentArrayMap.EMPTY;
var G__258267 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258268 = cljs.core.PersistentArrayMap.EMPTY;
var G__258269 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258270 = cljs.core.PersistentArrayMap.EMPTY;
var G__258271 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["primitive expressions"], null)], 0)),", which represent the simplest entities the language is concerned with,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258270,G__258271) : tailrecursion.hoplon.markdown.para_node.call(null,G__258270,G__258271));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__258268,G__258269) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__258268,G__258269));
})(),(function (){var G__258272 = cljs.core.PersistentArrayMap.EMPTY;
var G__258273 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_258274 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258275 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258276 = cljs.core.PersistentArrayMap.EMPTY;
var G__258277 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of combination"], null)], 0)),", by which compound elements are built from simpler ones, and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258276,G__258277) : tailrecursion.hoplon.markdown.para_node.call(null,G__258276,G__258277));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258275;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258274;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__258272,G__258273) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__258272,G__258273));
})(),(function (){var G__258278 = cljs.core.PersistentArrayMap.EMPTY;
var G__258279 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_258280 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258281 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258282 = cljs.core.PersistentArrayMap.EMPTY;
var G__258283 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of abstraction"], null)], 0)),", by which compound elements can be named and manipulated as units."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258282,G__258283) : tailrecursion.hoplon.markdown.para_node.call(null,G__258282,G__258283));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258281;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258280;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__258278,G__258279) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__258278,G__258279));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__258266,G__258267) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__258266,G__258267));
})(),(function (){var G__258284 = cljs.core.PersistentArrayMap.EMPTY;
var G__258285 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In programming, we deal with two kinds of elements: procedures and data. (Later we will discover that they are really not so distinct.) Informally, data is ``stuff",(function (){var G__258286 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__258287 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__258286,G__258287) : tailrecursion.hoplon.markdown.simple_node.call(null,G__258286,G__258287));
})(),(function (){var G__258288 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__258289 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__258288,G__258289) : tailrecursion.hoplon.markdown.simple_node.call(null,G__258288,G__258289));
})()," that we want to manipulate, and procedures are descriptions of the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive procedures and should have methods for combining and abstracting procedures and data."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258284,G__258285) : tailrecursion.hoplon.markdown.para_node.call(null,G__258284,G__258285));
})(),(function (){var G__258290 = cljs.core.PersistentArrayMap.EMPTY;
var G__258291 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this chapter we will deal only with simple numerical data so that we can focus on the rules for building procedures.",(function (){var G__258292 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__258293 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The characterization of numbers as ",(function (){var G__258294 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__258295 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["simple data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258294,G__258295) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258294,G__258295));
})()," is a barefaced bluff. In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language. Some typical issues involved are these: Some computer systems distinguish ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["integers"], null)], 0)),", such as 2, from ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["real numbers"], null)], 0)),", such as 2.71. Is the real number 2.00 different from the integer 2? Are the arithmetic operations used for integers the same as the operations used for real numbers? Does 6 divided by 2 produce 3, or 3.0? How large a number can we represent? How many decimal places of accuracy can we represent? Is the range of integers the same as the range of real numbers? Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors ",(function (){var G__258296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__258297 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__258296,G__258297) : tailrecursion.hoplon.markdown.simple_node.call(null,G__258296,G__258297));
})()," the entire science of numerical analysis. Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems. The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258292,G__258293) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258292,G__258293));
})()," In later chapters we will see that these same rules allow us to build procedures to manipulate compound data as well."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258290,G__258291) : tailrecursion.hoplon.markdown.para_node.call(null,G__258290,G__258291));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258263;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258262;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258261;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258260;
}})()], 0));
var G__258235 = "";
var G__258236 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Expressions"], null),(function (){var _STAR_references_STAR_258298 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258299 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_258300 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258301 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 24, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258302 = cljs.core.PersistentArrayMap.EMPTY;
var G__258303 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One easy way to get started at programming is to examine some typical interactions with an interpreter for the Scheme dialect of Lisp. Imagine that you are sitting at a computer terminal. You type an ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["expression"], null)], 0)),", and the interpreter responds by displaying the result of its evaluating that expression."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258302,G__258303) : tailrecursion.hoplon.markdown.para_node.call(null,G__258302,G__258303));
})(),(function (){var G__258304 = cljs.core.PersistentArrayMap.EMPTY;
var G__258305 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One kind of primitive expression you might type is a number. (More precisely, the expression that you type consists of the numerals that represent the number in base 10.) If you present Lisp with a number"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258304,G__258305) : tailrecursion.hoplon.markdown.para_node.call(null,G__258304,G__258305));
})(),(function (){var G__258306 = cljs.core.PersistentArrayMap.EMPTY;
var G__258307 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258306,G__258307) : tailrecursion.hoplon.markdown.para_node.call(null,G__258306,G__258307));
})(),(function (){var G__258308 = cljs.core.PersistentArrayMap.EMPTY;
var G__258309 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the interpreter will respond by printing",(function (){var G__258310 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__258311 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, when we wish to emphasize the distinction between the input typed by the user and the response printed by the interpreter, we will show the latter in slanted characters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258310,G__258311) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258310,G__258311));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258308,G__258309) : tailrecursion.hoplon.markdown.para_node.call(null,G__258308,G__258309));
})(),(function (){var G__258312 = cljs.core.PersistentArrayMap.EMPTY;
var G__258313 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258312,G__258313) : tailrecursion.hoplon.markdown.para_node.call(null,G__258312,G__258313));
})(),(function (){var G__258314 = cljs.core.PersistentArrayMap.EMPTY;
var G__258315 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions representing numbers may be combined with an expression representing a primitive procedure (such as + or ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,false,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [") to form a compound expression that represents the application of the procedure to those numbers. For example:"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258314,G__258315) : tailrecursion.hoplon.markdown.para_node.call(null,G__258314,G__258315));
})(),(function (){var G__258335 = (function (){var G__258336 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258337 = (function (){var G__258338 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258339 = "(";
var G__258340 = (function (){var G__258347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258348 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258347,G__258348) : tailrecursion.hoplon.span.call(null,G__258347,G__258348));
})();
var G__258341 = (function (){var G__258349 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258350 = "137";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258349,G__258350) : tailrecursion.hoplon.span.call(null,G__258349,G__258350));
})();
var G__258342 = " ";
var G__258343 = (function (){var G__258351 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258352 = "349";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258351,G__258352) : tailrecursion.hoplon.span.call(null,G__258351,G__258352));
})();
var G__258344 = ")\n";
var G__258345 = (function (){var G__258353 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258354 = "486";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258353,G__258354) : tailrecursion.hoplon.span.call(null,G__258353,G__258354));
})();
var G__258346 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258338,G__258339,G__258340,G__258341,G__258342,G__258343,G__258344,G__258345,G__258346) : tailrecursion.hoplon.pre.call(null,G__258338,G__258339,G__258340,G__258341,G__258342,G__258343,G__258344,G__258345,G__258346));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258336,G__258337) : tailrecursion.hoplon.div.call(null,G__258336,G__258337));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258335) : tailrecursion.hoplon.div.call(null,G__258335));
})(),(function (){var G__258374 = (function (){var G__258375 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258376 = (function (){var G__258377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258378 = "(";
var G__258379 = (function (){var G__258386 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258387 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258386,G__258387) : tailrecursion.hoplon.span.call(null,G__258386,G__258387));
})();
var G__258380 = (function (){var G__258388 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258389 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258388,G__258389) : tailrecursion.hoplon.span.call(null,G__258388,G__258389));
})();
var G__258381 = " ";
var G__258382 = (function (){var G__258390 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258391 = "334";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258390,G__258391) : tailrecursion.hoplon.span.call(null,G__258390,G__258391));
})();
var G__258383 = ")\n";
var G__258384 = (function (){var G__258392 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258393 = "666";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258392,G__258393) : tailrecursion.hoplon.span.call(null,G__258392,G__258393));
})();
var G__258385 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258377,G__258378,G__258379,G__258380,G__258381,G__258382,G__258383,G__258384,G__258385) : tailrecursion.hoplon.pre.call(null,G__258377,G__258378,G__258379,G__258380,G__258381,G__258382,G__258383,G__258384,G__258385));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258375,G__258376) : tailrecursion.hoplon.div.call(null,G__258375,G__258376));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258374) : tailrecursion.hoplon.div.call(null,G__258374));
})(),(function (){var G__258413 = (function (){var G__258414 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258415 = (function (){var G__258416 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258417 = "(";
var G__258418 = (function (){var G__258425 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258426 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258425,G__258426) : tailrecursion.hoplon.span.call(null,G__258425,G__258426));
})();
var G__258419 = (function (){var G__258427 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258428 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258427,G__258428) : tailrecursion.hoplon.span.call(null,G__258427,G__258428));
})();
var G__258420 = " ";
var G__258421 = (function (){var G__258429 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258430 = "99";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258429,G__258430) : tailrecursion.hoplon.span.call(null,G__258429,G__258430));
})();
var G__258422 = ")\n";
var G__258423 = (function (){var G__258431 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258432 = "495";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258431,G__258432) : tailrecursion.hoplon.span.call(null,G__258431,G__258432));
})();
var G__258424 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258416,G__258417,G__258418,G__258419,G__258420,G__258421,G__258422,G__258423,G__258424) : tailrecursion.hoplon.pre.call(null,G__258416,G__258417,G__258418,G__258419,G__258420,G__258421,G__258422,G__258423,G__258424));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258414,G__258415) : tailrecursion.hoplon.div.call(null,G__258414,G__258415));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258413) : tailrecursion.hoplon.div.call(null,G__258413));
})(),(function (){var G__258452 = (function (){var G__258453 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258454 = (function (){var G__258455 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258456 = "(";
var G__258457 = (function (){var G__258464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258465 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258464,G__258465) : tailrecursion.hoplon.span.call(null,G__258464,G__258465));
})();
var G__258458 = (function (){var G__258466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258467 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258466,G__258467) : tailrecursion.hoplon.span.call(null,G__258466,G__258467));
})();
var G__258459 = " ";
var G__258460 = (function (){var G__258468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258469 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258468,G__258469) : tailrecursion.hoplon.span.call(null,G__258468,G__258469));
})();
var G__258461 = ")\n";
var G__258462 = (function (){var G__258470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258471 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258470,G__258471) : tailrecursion.hoplon.span.call(null,G__258470,G__258471));
})();
var G__258463 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258455,G__258456,G__258457,G__258458,G__258459,G__258460,G__258461,G__258462,G__258463) : tailrecursion.hoplon.pre.call(null,G__258455,G__258456,G__258457,G__258458,G__258459,G__258460,G__258461,G__258462,G__258463));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258453,G__258454) : tailrecursion.hoplon.div.call(null,G__258453,G__258454));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258452) : tailrecursion.hoplon.div.call(null,G__258452));
})(),(function (){var G__258491 = (function (){var G__258492 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258493 = (function (){var G__258494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258495 = "(";
var G__258496 = (function (){var G__258503 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258504 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258503,G__258504) : tailrecursion.hoplon.span.call(null,G__258503,G__258504));
})();
var G__258497 = (function (){var G__258505 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258506 = "2.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258505,G__258506) : tailrecursion.hoplon.span.call(null,G__258505,G__258506));
})();
var G__258498 = " ";
var G__258499 = (function (){var G__258507 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258508 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258507,G__258508) : tailrecursion.hoplon.span.call(null,G__258507,G__258508));
})();
var G__258500 = ")\n";
var G__258501 = (function (){var G__258509 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258510 = "12.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258509,G__258510) : tailrecursion.hoplon.span.call(null,G__258509,G__258510));
})();
var G__258502 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__258494,G__258495,G__258496,G__258497,G__258498,G__258499,G__258500,G__258501,G__258502) : tailrecursion.hoplon.pre.call(null,G__258494,G__258495,G__258496,G__258497,G__258498,G__258499,G__258500,G__258501,G__258502));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258492,G__258493) : tailrecursion.hoplon.div.call(null,G__258492,G__258493));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258491) : tailrecursion.hoplon.div.call(null,G__258491));
})(),(function (){var G__258511 = cljs.core.PersistentArrayMap.EMPTY;
var G__258512 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions such as these, formed by delimiting a list of expressions within parentheses in order to denote procedure application, are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["combinations"], null)], 0)),". The leftmost element in the list is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operator"], null)], 0)),", and the other elements are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operands"], null)], 0)),". The value of a combination is obtained by applying the procedure specified by the operator to the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["arguments"], null)], 0))," that are the values of the operands."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258511,G__258512) : tailrecursion.hoplon.markdown.para_node.call(null,G__258511,G__258512));
})(),(function (){var G__258513 = cljs.core.PersistentArrayMap.EMPTY;
var G__258514 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The convention of placing the operator to the left of the operands is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["prefix notation"], null)], 0)),", and it may be somewhat confusing at first because it departs significantly from the customary mathematical convention. Prefix notation has several advantages, however. One of them is that it can accommodate procedures that may take an arbitrary number of arguments, as in the following examples:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258513,G__258514) : tailrecursion.hoplon.markdown.para_node.call(null,G__258513,G__258514));
})(),(function (){var G__258542 = (function (){var G__258543 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258544 = (function (){var G__258545 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258546 = "(";
var G__258547 = (function (){var G__258558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258559 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258558,G__258559) : tailrecursion.hoplon.span.call(null,G__258558,G__258559));
})();
var G__258548 = (function (){var G__258560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258561 = "21";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258560,G__258561) : tailrecursion.hoplon.span.call(null,G__258560,G__258561));
})();
var G__258549 = " ";
var G__258550 = (function (){var G__258562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258563 = "35";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258562,G__258563) : tailrecursion.hoplon.span.call(null,G__258562,G__258563));
})();
var G__258551 = " ";
var G__258552 = (function (){var G__258564 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258565 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258564,G__258565) : tailrecursion.hoplon.span.call(null,G__258564,G__258565));
})();
var G__258553 = " ";
var G__258554 = (function (){var G__258566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258567 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258566,G__258567) : tailrecursion.hoplon.span.call(null,G__258566,G__258567));
})();
var G__258555 = ")\n";
var G__258556 = (function (){var G__258568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258569 = "75";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258568,G__258569) : tailrecursion.hoplon.span.call(null,G__258568,G__258569));
})();
var G__258557 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__258545,G__258546,G__258547,G__258548,G__258549,G__258550,G__258551,G__258552,G__258553,G__258554,G__258555,G__258556,G__258557) : tailrecursion.hoplon.pre.call(null,G__258545,G__258546,G__258547,G__258548,G__258549,G__258550,G__258551,G__258552,G__258553,G__258554,G__258555,G__258556,G__258557));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258543,G__258544) : tailrecursion.hoplon.div.call(null,G__258543,G__258544));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258542) : tailrecursion.hoplon.div.call(null,G__258542));
})(),(function (){var G__258593 = (function (){var G__258594 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258595 = (function (){var G__258596 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258597 = "(";
var G__258598 = (function (){var G__258607 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258608 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258607,G__258608) : tailrecursion.hoplon.span.call(null,G__258607,G__258608));
})();
var G__258599 = (function (){var G__258609 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258610 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258609,G__258610) : tailrecursion.hoplon.span.call(null,G__258609,G__258610));
})();
var G__258600 = " ";
var G__258601 = (function (){var G__258611 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258612 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258611,G__258612) : tailrecursion.hoplon.span.call(null,G__258611,G__258612));
})();
var G__258602 = " ";
var G__258603 = (function (){var G__258613 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258614 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258613,G__258614) : tailrecursion.hoplon.span.call(null,G__258613,G__258614));
})();
var G__258604 = ")\n";
var G__258605 = (function (){var G__258615 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258616 = "1200";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258615,G__258616) : tailrecursion.hoplon.span.call(null,G__258615,G__258616));
})();
var G__258606 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__258596,G__258597,G__258598,G__258599,G__258600,G__258601,G__258602,G__258603,G__258604,G__258605,G__258606) : tailrecursion.hoplon.pre.call(null,G__258596,G__258597,G__258598,G__258599,G__258600,G__258601,G__258602,G__258603,G__258604,G__258605,G__258606));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258594,G__258595) : tailrecursion.hoplon.div.call(null,G__258594,G__258595));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258593) : tailrecursion.hoplon.div.call(null,G__258593));
})(),(function (){var G__258617 = cljs.core.PersistentArrayMap.EMPTY;
var G__258618 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["No ambiguity can arise, because the operator is always the leftmost element and the entire combination is delimited by the parentheses."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258617,G__258618) : tailrecursion.hoplon.markdown.para_node.call(null,G__258617,G__258618));
})(),(function (){var G__258619 = cljs.core.PersistentArrayMap.EMPTY;
var G__258620 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A second advantage of prefix notation is that it extends in a straightforward way to allow combinations to be ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["nested"], null)], 0)),", that is, to have combinations whose elements are themselves combinations:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258619,G__258620) : tailrecursion.hoplon.markdown.para_node.call(null,G__258619,G__258620));
})(),(function (){var G__258655 = (function (){var G__258656 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258657 = (function (){var G__258658 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258659 = "(";
var G__258660 = (function (){var G__258674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258675 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258674,G__258675) : tailrecursion.hoplon.span.call(null,G__258674,G__258675));
})();
var G__258661 = "(";
var G__258662 = (function (){var G__258676 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258677 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258676,G__258677) : tailrecursion.hoplon.span.call(null,G__258676,G__258677));
})();
var G__258663 = (function (){var G__258678 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258679 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258678,G__258679) : tailrecursion.hoplon.span.call(null,G__258678,G__258679));
})();
var G__258664 = " ";
var G__258665 = (function (){var G__258680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258681 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258680,G__258681) : tailrecursion.hoplon.span.call(null,G__258680,G__258681));
})();
var G__258666 = ") (";
var G__258667 = (function (){var G__258682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258683 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258682,G__258683) : tailrecursion.hoplon.span.call(null,G__258682,G__258683));
})();
var G__258668 = (function (){var G__258684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258685 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258684,G__258685) : tailrecursion.hoplon.span.call(null,G__258684,G__258685));
})();
var G__258669 = " ";
var G__258670 = (function (){var G__258686 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258687 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258686,G__258687) : tailrecursion.hoplon.span.call(null,G__258686,G__258687));
})();
var G__258671 = "))\n";
var G__258672 = (function (){var G__258688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258689 = "19";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258688,G__258689) : tailrecursion.hoplon.span.call(null,G__258688,G__258689));
})();
var G__258673 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__258658,G__258659,G__258660,G__258661,G__258662,G__258663,G__258664,G__258665,G__258666,G__258667,G__258668,G__258669,G__258670,G__258671,G__258672,G__258673) : tailrecursion.hoplon.pre.call(null,G__258658,G__258659,G__258660,G__258661,G__258662,G__258663,G__258664,G__258665,G__258666,G__258667,G__258668,G__258669,G__258670,G__258671,G__258672,G__258673));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258656,G__258657) : tailrecursion.hoplon.div.call(null,G__258656,G__258657));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258655) : tailrecursion.hoplon.div.call(null,G__258655));
})(),(function (){var G__258690 = cljs.core.PersistentArrayMap.EMPTY;
var G__258691 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the Lisp interpreter can evaluate. It is we humans who get confused by still relatively simple expressions such as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258690,G__258691) : tailrecursion.hoplon.markdown.para_node.call(null,G__258690,G__258691));
})(),(function (){var G__258752 = (function (){var G__258753 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258754 = (function (){var G__258755 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258756 = "(";
var G__258757 = (function (){var G__258783 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258784 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258783,G__258784) : tailrecursion.hoplon.span.call(null,G__258783,G__258784));
})();
var G__258758 = "(";
var G__258759 = (function (){var G__258785 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258786 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258785,G__258786) : tailrecursion.hoplon.span.call(null,G__258785,G__258786));
})();
var G__258760 = (function (){var G__258787 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258788 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258787,G__258788) : tailrecursion.hoplon.span.call(null,G__258787,G__258788));
})();
var G__258761 = " (";
var G__258762 = (function (){var G__258789 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258790 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258789,G__258790) : tailrecursion.hoplon.span.call(null,G__258789,G__258790));
})();
var G__258763 = "(";
var G__258764 = (function (){var G__258791 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258792 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258791,G__258792) : tailrecursion.hoplon.span.call(null,G__258791,G__258792));
})();
var G__258765 = (function (){var G__258793 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258794 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258793,G__258794) : tailrecursion.hoplon.span.call(null,G__258793,G__258794));
})();
var G__258766 = " ";
var G__258767 = (function (){var G__258795 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258796 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258795,G__258796) : tailrecursion.hoplon.span.call(null,G__258795,G__258796));
})();
var G__258768 = ") (";
var G__258769 = (function (){var G__258797 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258798 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258797,G__258798) : tailrecursion.hoplon.span.call(null,G__258797,G__258798));
})();
var G__258770 = (function (){var G__258799 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258800 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258799,G__258800) : tailrecursion.hoplon.span.call(null,G__258799,G__258800));
})();
var G__258771 = " ";
var G__258772 = (function (){var G__258801 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258802 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258801,G__258802) : tailrecursion.hoplon.span.call(null,G__258801,G__258802));
})();
var G__258773 = "))) (";
var G__258774 = (function (){var G__258803 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258804 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258803,G__258804) : tailrecursion.hoplon.span.call(null,G__258803,G__258804));
})();
var G__258775 = "(";
var G__258776 = (function (){var G__258805 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258806 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258805,G__258806) : tailrecursion.hoplon.span.call(null,G__258805,G__258806));
})();
var G__258777 = (function (){var G__258807 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258808 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258807,G__258808) : tailrecursion.hoplon.span.call(null,G__258807,G__258808));
})();
var G__258778 = " ";
var G__258779 = (function (){var G__258809 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258810 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258809,G__258810) : tailrecursion.hoplon.span.call(null,G__258809,G__258810));
})();
var G__258780 = ") ";
var G__258781 = (function (){var G__258811 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258812 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258811,G__258812) : tailrecursion.hoplon.span.call(null,G__258811,G__258812));
})();
var G__258782 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__258755,G__258756,G__258757,G__258758,G__258759,G__258760,G__258761,G__258762,G__258763,G__258764,G__258765,G__258766,G__258767,G__258768,G__258769,G__258770,G__258771,G__258772,G__258773,G__258774,G__258775,G__258776,G__258777,G__258778,G__258779,G__258780,G__258781,G__258782) : tailrecursion.hoplon.pre.call(null,G__258755,G__258756,G__258757,G__258758,G__258759,G__258760,G__258761,G__258762,G__258763,G__258764,G__258765,G__258766,G__258767,G__258768,G__258769,G__258770,G__258771,G__258772,G__258773,G__258774,G__258775,G__258776,G__258777,G__258778,G__258779,G__258780,G__258781,G__258782));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258753,G__258754) : tailrecursion.hoplon.div.call(null,G__258753,G__258754));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258752) : tailrecursion.hoplon.div.call(null,G__258752));
})(),(function (){var G__258813 = cljs.core.PersistentArrayMap.EMPTY;
var G__258814 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which the interpreter would readily evaluate to be 57. We can help ourselves by writing such an expression in the form"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258813,G__258814) : tailrecursion.hoplon.markdown.para_node.call(null,G__258813,G__258814));
})(),(function (){var G__258875 = (function (){var G__258876 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258877 = (function (){var G__258878 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258879 = "(";
var G__258880 = (function (){var G__258906 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258907 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258906,G__258907) : tailrecursion.hoplon.span.call(null,G__258906,G__258907));
})();
var G__258881 = "(";
var G__258882 = (function (){var G__258908 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258909 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258908,G__258909) : tailrecursion.hoplon.span.call(null,G__258908,G__258909));
})();
var G__258883 = (function (){var G__258910 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258911 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258910,G__258911) : tailrecursion.hoplon.span.call(null,G__258910,G__258911));
})();
var G__258884 = "\n      (";
var G__258885 = (function (){var G__258912 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258913 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258912,G__258913) : tailrecursion.hoplon.span.call(null,G__258912,G__258913));
})();
var G__258886 = "(";
var G__258887 = (function (){var G__258914 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258915 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258914,G__258915) : tailrecursion.hoplon.span.call(null,G__258914,G__258915));
})();
var G__258888 = (function (){var G__258916 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258917 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258916,G__258917) : tailrecursion.hoplon.span.call(null,G__258916,G__258917));
})();
var G__258889 = " ";
var G__258890 = (function (){var G__258918 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258919 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258918,G__258919) : tailrecursion.hoplon.span.call(null,G__258918,G__258919));
})();
var G__258891 = ")\n         (";
var G__258892 = (function (){var G__258920 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258921 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258920,G__258921) : tailrecursion.hoplon.span.call(null,G__258920,G__258921));
})();
var G__258893 = (function (){var G__258922 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258923 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258922,G__258923) : tailrecursion.hoplon.span.call(null,G__258922,G__258923));
})();
var G__258894 = " ";
var G__258895 = (function (){var G__258924 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258925 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258924,G__258925) : tailrecursion.hoplon.span.call(null,G__258924,G__258925));
})();
var G__258896 = ")))\n   (";
var G__258897 = (function (){var G__258926 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258927 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258926,G__258927) : tailrecursion.hoplon.span.call(null,G__258926,G__258927));
})();
var G__258898 = "(";
var G__258899 = (function (){var G__258928 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__258929 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258928,G__258929) : tailrecursion.hoplon.span.call(null,G__258928,G__258929));
})();
var G__258900 = (function (){var G__258930 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258931 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258930,G__258931) : tailrecursion.hoplon.span.call(null,G__258930,G__258931));
})();
var G__258901 = " ";
var G__258902 = (function (){var G__258932 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258933 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258932,G__258933) : tailrecursion.hoplon.span.call(null,G__258932,G__258933));
})();
var G__258903 = ")\n      ";
var G__258904 = (function (){var G__258934 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258935 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258934,G__258935) : tailrecursion.hoplon.span.call(null,G__258934,G__258935));
})();
var G__258905 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__258878,G__258879,G__258880,G__258881,G__258882,G__258883,G__258884,G__258885,G__258886,G__258887,G__258888,G__258889,G__258890,G__258891,G__258892,G__258893,G__258894,G__258895,G__258896,G__258897,G__258898,G__258899,G__258900,G__258901,G__258902,G__258903,G__258904,G__258905) : tailrecursion.hoplon.pre.call(null,G__258878,G__258879,G__258880,G__258881,G__258882,G__258883,G__258884,G__258885,G__258886,G__258887,G__258888,G__258889,G__258890,G__258891,G__258892,G__258893,G__258894,G__258895,G__258896,G__258897,G__258898,G__258899,G__258900,G__258901,G__258902,G__258903,G__258904,G__258905));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258876,G__258877) : tailrecursion.hoplon.div.call(null,G__258876,G__258877));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258875) : tailrecursion.hoplon.div.call(null,G__258875));
})(),(function (){var G__258936 = cljs.core.PersistentArrayMap.EMPTY;
var G__258937 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["following a formatting convention known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["pretty-printing"], null)], 0)),", in which each long combination is written so that the operands are aligned vertically. The resulting indentations display clearly the structure of the expression.",(function (){var G__258938 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__258939 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp systems typically provide features to aid the user in formatting expressions. Two especially useful features are one that automatically indents to the proper pretty-print position whenever a new line is started and one that highlights the matching left parenthesis whenever a right parenthesis is typed."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258938,G__258939) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258938,G__258939));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258936,G__258937) : tailrecursion.hoplon.markdown.para_node.call(null,G__258936,G__258937));
})(),(function (){var G__258940 = cljs.core.PersistentArrayMap.EMPTY;
var G__258941 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even with complex expressions, the interpreter always operates in the same basic cycle: It reads an expression from the terminal, evaluates the expression, and prints the result. This mode of operation is often expressed by saying that the interpreter runs in a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["read-eval-print loop"], null)], 0)),". Observe in particular that it is not necessary to explicitly instruct the interpreter to print the value of the expression.",(function (){var G__258942 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__258943 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp obeys the convention that every expression has a value. This convention, together with the old reputation of Lisp as an inefficient language, is the source of the quip by Alan Perlis (paraphrasing Oscar Wilde) that ",(function (){var G__258944 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__258945 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp programmers know the value of everything but the cost of nothing."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258944,G__258945) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258944,G__258945));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258942,G__258943) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258942,G__258943));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258940,G__258941) : tailrecursion.hoplon.markdown.para_node.call(null,G__258940,G__258941));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258301;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258300;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258299;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258298;
}})()], 0));
var G__258237 = "";
var G__258238 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Naming and the Environment"], null),(function (){var _STAR_references_STAR_258946 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258947 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_258948 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_258949 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__258950 = cljs.core.PersistentArrayMap.EMPTY;
var G__258951 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A critical aspect of a programming language is the means it provides for using names to refer to computational objects. We say that the name identifies a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["variable"], null)], 0))," whose ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["value"], null)], 0))," is the object."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258950,G__258951) : tailrecursion.hoplon.markdown.para_node.call(null,G__258950,G__258951));
})(),(function (){var G__258952 = cljs.core.PersistentArrayMap.EMPTY;
var G__258953 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In the Scheme dialect of Lisp, we name things with ",(function (){var G__258954 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__258955 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__258954,G__258955) : tailrecursion.hoplon.markdown.code_node.call(null,G__258954,G__258955));
})(),". Typing"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258952,G__258953) : tailrecursion.hoplon.markdown.para_node.call(null,G__258952,G__258953));
})(),(function (){var G__258971 = (function (){var G__258972 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__258973 = (function (){var G__258974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__258975 = "(";
var G__258976 = (function (){var G__258981 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__258982 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258981,G__258982) : tailrecursion.hoplon.span.call(null,G__258981,G__258982));
})();
var G__258977 = (function (){var G__258983 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__258984 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258983,G__258984) : tailrecursion.hoplon.span.call(null,G__258983,G__258984));
})();
var G__258978 = " ";
var G__258979 = (function (){var G__258985 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__258986 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__258985,G__258986) : tailrecursion.hoplon.span.call(null,G__258985,G__258986));
})();
var G__258980 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__258974,G__258975,G__258976,G__258977,G__258978,G__258979,G__258980) : tailrecursion.hoplon.pre.call(null,G__258974,G__258975,G__258976,G__258977,G__258978,G__258979,G__258980));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__258972,G__258973) : tailrecursion.hoplon.div.call(null,G__258972,G__258973));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__258971) : tailrecursion.hoplon.div.call(null,G__258971));
})(),(function (){var G__258987 = cljs.core.PersistentArrayMap.EMPTY;
var G__258988 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["causes the interpreter to associate the value 2 with the name size.",(function (){var G__258989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__258990 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this book, we do not show the interpreter",(function (){var G__258991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__258992 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__258991,G__258992) : tailrecursion.hoplon.markdown.simple_node.call(null,G__258991,G__258992));
})(),"s response to evaluating definitions, since this is highly implementation-dependent."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__258989,G__258990) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__258989,G__258990));
})()," In Clojure we would use ",(function (){var G__258993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__258994 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__258993,G__258994) : tailrecursion.hoplon.markdown.code_node.call(null,G__258993,G__258994));
})()," to accomplish the same goal. i.e."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__258987,G__258988) : tailrecursion.hoplon.markdown.para_node.call(null,G__258987,G__258988));
})(),(function (){var G__259010 = (function (){var G__259011 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259012 = (function (){var G__259013 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259014 = "(";
var G__259015 = (function (){var G__259020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259021 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259020,G__259021) : tailrecursion.hoplon.span.call(null,G__259020,G__259021));
})();
var G__259016 = (function (){var G__259022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259023 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259022,G__259023) : tailrecursion.hoplon.span.call(null,G__259022,G__259023));
})();
var G__259017 = " ";
var G__259018 = (function (){var G__259024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259025 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259024,G__259025) : tailrecursion.hoplon.span.call(null,G__259024,G__259025));
})();
var G__259019 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__259013,G__259014,G__259015,G__259016,G__259017,G__259018,G__259019) : tailrecursion.hoplon.pre.call(null,G__259013,G__259014,G__259015,G__259016,G__259017,G__259018,G__259019));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259011,G__259012) : tailrecursion.hoplon.div.call(null,G__259011,G__259012));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259010) : tailrecursion.hoplon.div.call(null,G__259010));
})(),(function (){var G__259026 = cljs.core.PersistentArrayMap.EMPTY;
var G__259027 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and the interpreter will now associate the value 2 with the name size. Once the name size has been associated with the number 2, we can refer to the value 2 by name:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259026,G__259027) : tailrecursion.hoplon.markdown.para_node.call(null,G__259026,G__259027));
})(),(function (){var G__259039 = (function (){var G__259040 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259041 = (function (){var G__259042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259043 = (function (){var G__259047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259048 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259047,G__259048) : tailrecursion.hoplon.span.call(null,G__259047,G__259048));
})();
var G__259044 = "\n";
var G__259045 = (function (){var G__259049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259050 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259049,G__259050) : tailrecursion.hoplon.span.call(null,G__259049,G__259050));
})();
var G__259046 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5(G__259042,G__259043,G__259044,G__259045,G__259046) : tailrecursion.hoplon.pre.call(null,G__259042,G__259043,G__259044,G__259045,G__259046));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259040,G__259041) : tailrecursion.hoplon.div.call(null,G__259040,G__259041));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259039) : tailrecursion.hoplon.div.call(null,G__259039));
})(),(function (){var G__259070 = (function (){var G__259071 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259072 = (function (){var G__259073 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259074 = "(";
var G__259075 = (function (){var G__259082 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259083 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259082,G__259083) : tailrecursion.hoplon.span.call(null,G__259082,G__259083));
})();
var G__259076 = (function (){var G__259084 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259085 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259084,G__259085) : tailrecursion.hoplon.span.call(null,G__259084,G__259085));
})();
var G__259077 = " ";
var G__259078 = (function (){var G__259086 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259087 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259086,G__259087) : tailrecursion.hoplon.span.call(null,G__259086,G__259087));
})();
var G__259079 = ")\n";
var G__259080 = (function (){var G__259088 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259089 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259088,G__259089) : tailrecursion.hoplon.span.call(null,G__259088,G__259089));
})();
var G__259081 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__259073,G__259074,G__259075,G__259076,G__259077,G__259078,G__259079,G__259080,G__259081) : tailrecursion.hoplon.pre.call(null,G__259073,G__259074,G__259075,G__259076,G__259077,G__259078,G__259079,G__259080,G__259081));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259071,G__259072) : tailrecursion.hoplon.div.call(null,G__259071,G__259072));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259070) : tailrecursion.hoplon.div.call(null,G__259070));
})(),(function (){var G__259090 = cljs.core.PersistentArrayMap.EMPTY;
var G__259091 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here are further examples of the use of ",(function (){var G__259092 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__259093 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259092,G__259093) : tailrecursion.hoplon.markdown.code_node.call(null,G__259092,G__259093));
})(),":"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259090,G__259091) : tailrecursion.hoplon.markdown.para_node.call(null,G__259090,G__259091));
})(),(function (){var G__259172 = (function (){var G__259173 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259174 = (function (){var G__259175 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259176 = "(";
var G__259177 = (function (){var G__259211 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259212 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259211,G__259212) : tailrecursion.hoplon.span.call(null,G__259211,G__259212));
})();
var G__259178 = (function (){var G__259213 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259214 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259213,G__259214) : tailrecursion.hoplon.span.call(null,G__259213,G__259214));
})();
var G__259179 = " ";
var G__259180 = (function (){var G__259215 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259216 = "3.14159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259215,G__259216) : tailrecursion.hoplon.span.call(null,G__259215,G__259216));
})();
var G__259181 = ")\n(";
var G__259182 = (function (){var G__259217 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259218 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259217,G__259218) : tailrecursion.hoplon.span.call(null,G__259217,G__259218));
})();
var G__259183 = (function (){var G__259219 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259220 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259219,G__259220) : tailrecursion.hoplon.span.call(null,G__259219,G__259220));
})();
var G__259184 = " ";
var G__259185 = (function (){var G__259221 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259222 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259221,G__259222) : tailrecursion.hoplon.span.call(null,G__259221,G__259222));
})();
var G__259186 = ")\n(";
var G__259187 = (function (){var G__259223 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259224 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259223,G__259224) : tailrecursion.hoplon.span.call(null,G__259223,G__259224));
})();
var G__259188 = (function (){var G__259225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259226 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259225,G__259226) : tailrecursion.hoplon.span.call(null,G__259225,G__259226));
})();
var G__259189 = " (";
var G__259190 = (function (){var G__259227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259228 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259227,G__259228) : tailrecursion.hoplon.span.call(null,G__259227,G__259228));
})();
var G__259191 = (function (){var G__259229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259230 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259229,G__259230) : tailrecursion.hoplon.span.call(null,G__259229,G__259230));
})();
var G__259192 = " ";
var G__259193 = (function (){var G__259231 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259232 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259231,G__259232) : tailrecursion.hoplon.span.call(null,G__259231,G__259232));
})();
var G__259194 = "))\n";
var G__259195 = (function (){var G__259233 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259234 = "314.159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259233,G__259234) : tailrecursion.hoplon.span.call(null,G__259233,G__259234));
})();
var G__259196 = "\n(";
var G__259197 = (function (){var G__259235 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259236 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259235,G__259236) : tailrecursion.hoplon.span.call(null,G__259235,G__259236));
})();
var G__259198 = (function (){var G__259237 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259238 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259237,G__259238) : tailrecursion.hoplon.span.call(null,G__259237,G__259238));
})();
var G__259199 = " (";
var G__259200 = (function (){var G__259239 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259240 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259239,G__259240) : tailrecursion.hoplon.span.call(null,G__259239,G__259240));
})();
var G__259201 = (function (){var G__259241 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259242 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259241,G__259242) : tailrecursion.hoplon.span.call(null,G__259241,G__259242));
})();
var G__259202 = " ";
var G__259203 = (function (){var G__259243 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259244 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259243,G__259244) : tailrecursion.hoplon.span.call(null,G__259243,G__259244));
})();
var G__259204 = " ";
var G__259205 = (function (){var G__259245 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259246 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259245,G__259246) : tailrecursion.hoplon.span.call(null,G__259245,G__259246));
})();
var G__259206 = "))\n";
var G__259207 = (function (){var G__259247 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259248 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259247,G__259248) : tailrecursion.hoplon.span.call(null,G__259247,G__259248));
})();
var G__259208 = "\n";
var G__259209 = (function (){var G__259249 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259250 = "62.8318";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259249,G__259250) : tailrecursion.hoplon.span.call(null,G__259249,G__259250));
})();
var G__259210 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__259175,G__259176,G__259177,G__259178,G__259179,G__259180,G__259181,G__259182,G__259183,G__259184,G__259185,G__259186,G__259187,G__259188,G__259189,G__259190,G__259191,G__259192,G__259193,G__259194,G__259195,G__259196,G__259197,G__259198,G__259199,G__259200,G__259201,G__259202,G__259203,G__259204,G__259205,G__259206,G__259207,G__259208,G__259209,G__259210) : tailrecursion.hoplon.pre.call(null,G__259175,G__259176,G__259177,G__259178,G__259179,G__259180,G__259181,G__259182,G__259183,G__259184,G__259185,G__259186,G__259187,G__259188,G__259189,G__259190,G__259191,G__259192,G__259193,G__259194,G__259195,G__259196,G__259197,G__259198,G__259199,G__259200,G__259201,G__259202,G__259203,G__259204,G__259205,G__259206,G__259207,G__259208,G__259209,G__259210));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259173,G__259174) : tailrecursion.hoplon.div.call(null,G__259173,G__259174));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259172) : tailrecursion.hoplon.div.call(null,G__259172));
})(),(function (){var G__259251 = cljs.core.PersistentArrayMap.EMPTY;
var G__259252 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259253 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__259254 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259253,G__259254) : tailrecursion.hoplon.markdown.code_node.call(null,G__259253,G__259254));
})()," is our language",(function (){var G__259255 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259256 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259255,G__259256) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259255,G__259256));
})(),"s simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the ",(function (){var G__259257 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"circumference"], null);
var G__259258 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259257,G__259258) : tailrecursion.hoplon.markdown.code_node.call(null,G__259257,G__259258));
})()," computed above. In general, computational objects may have very complex structures, and it would be extremely inconvenient to have to remember and repeat their details each time we want to use them. Indeed, complex programs are constructed by building, step by step, computational objects of increasing complexity. The interpreter makes this step-by-step program construction particularly convenient because name-object associations can be created incrementally in successive interactions. This feature encourages the incremental development and testing of programs and is largely responsible for the fact that a Lisp program usually consists of a large number of relatively simple procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259251,G__259252) : tailrecursion.hoplon.markdown.para_node.call(null,G__259251,G__259252));
})(),(function (){var G__259259 = cljs.core.PersistentArrayMap.EMPTY;
var G__259260 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It should be clear that the possibility of associating values with symbols and later retrieving them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. This memory is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["environment"], null)], 0))," (more precisely the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["global environment"], null)], 0)),", since we will see later that a computation may involve a number of different environments).",(function (){var G__259261 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259262 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Chapter 3 will show that this notion of environment is crucial, both for understanding how the interpreter works and for implementing interpreters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259261,G__259262) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259261,G__259262));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259259,G__259260) : tailrecursion.hoplon.markdown.para_node.call(null,G__259259,G__259260));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258949;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258948;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_258947;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_258946;
}})()], 0));
var G__258239 = " ";
var G__258240 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Evaluating Combinations"], null),(function (){var _STAR_references_STAR_259263 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259264 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_259265 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259266 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259267 = cljs.core.PersistentArrayMap.EMPTY;
var G__259268 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating combinations, the interpreter is itself following a procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259267,G__259268) : tailrecursion.hoplon.markdown.para_node.call(null,G__259267,G__259268));
})(),(function (){var G__259269 = cljs.core.PersistentArrayMap.EMPTY;
var G__259270 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259271 = cljs.core.PersistentArrayMap.EMPTY;
var G__259272 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259273 = cljs.core.PersistentArrayMap.EMPTY;
var G__259274 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination, do the following:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259273,G__259274) : tailrecursion.hoplon.markdown.para_node.call(null,G__259273,G__259274));
})(),(function (){var _STAR_references_STAR_259275 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259276 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259277 = cljs.core.PersistentArrayMap.EMPTY;
var G__259278 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259279 = cljs.core.PersistentArrayMap.EMPTY;
var G__259280 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259281 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259282 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Evaluate the subexpressions of the combination."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259282;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259281;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259279,G__259280) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259279,G__259280));
})(),(function (){var G__259283 = cljs.core.PersistentArrayMap.EMPTY;
var G__259284 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259285 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259286 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands)."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259286;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259285;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259283,G__259284) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259283,G__259284));
})()], null);
return (tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2(G__259277,G__259278) : tailrecursion.hoplon.markdown.ordered_list_node.call(null,G__259277,G__259278));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259276;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259275;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259271,G__259272) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259271,G__259272));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__259269,G__259270) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__259269,G__259270));
})(),(function (){var G__259287 = cljs.core.PersistentArrayMap.EMPTY;
var G__259288 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even this simple rule illustrates some important points about processes in general. First, observe that the first step dictates that in order to accomplish the evaluation process for a combination we must first perform the evaluation process on each element of the combination. Thus, the evaluation rule is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0))," in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.",(function (){var G__259289 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259290 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It may seem strange that the evaluation rule says, as part of the first step, that we should evaluate the leftmost element of a combination, since at this point that can only be an operator such as ",(function (){var G__259291 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__259292 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259291,G__259292) : tailrecursion.hoplon.markdown.code_node.call(null,G__259291,G__259292));
})()," or ",(function (){var G__259293 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__259294 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259293,G__259294) : tailrecursion.hoplon.markdown.code_node.call(null,G__259293,G__259294));
})()," representing a built-in primitive procedure such as addition or multiplication. We will see later that it is useful to be able to work with combinations whose operators are themselves compound expressions."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259289,G__259290) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259289,G__259290));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259287,G__259288) : tailrecursion.hoplon.markdown.para_node.call(null,G__259287,G__259288));
})(),(function (){var G__259295 = cljs.core.PersistentArrayMap.EMPTY;
var G__259296 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice how succinctly the idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process. For example, evaluating"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259295,G__259296) : tailrecursion.hoplon.markdown.para_node.call(null,G__259295,G__259296));
})(),(function (){var G__259338 = (function (){var G__259339 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259340 = (function (){var G__259341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259342 = "(";
var G__259343 = (function (){var G__259360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259361 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259360,G__259361) : tailrecursion.hoplon.span.call(null,G__259360,G__259361));
})();
var G__259344 = "(";
var G__259345 = (function (){var G__259362 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259363 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259362,G__259363) : tailrecursion.hoplon.span.call(null,G__259362,G__259363));
})();
var G__259346 = (function (){var G__259364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259365 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259364,G__259365) : tailrecursion.hoplon.span.call(null,G__259364,G__259365));
})();
var G__259347 = " (";
var G__259348 = (function (){var G__259366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259367 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259366,G__259367) : tailrecursion.hoplon.span.call(null,G__259366,G__259367));
})();
var G__259349 = (function (){var G__259368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259369 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259368,G__259369) : tailrecursion.hoplon.span.call(null,G__259368,G__259369));
})();
var G__259350 = " ";
var G__259351 = (function (){var G__259370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259371 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259370,G__259371) : tailrecursion.hoplon.span.call(null,G__259370,G__259371));
})();
var G__259352 = "))\n   (";
var G__259353 = (function (){var G__259372 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259373 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259372,G__259373) : tailrecursion.hoplon.span.call(null,G__259372,G__259373));
})();
var G__259354 = (function (){var G__259374 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259375 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259374,G__259375) : tailrecursion.hoplon.span.call(null,G__259374,G__259375));
})();
var G__259355 = " ";
var G__259356 = (function (){var G__259376 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259377 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259376,G__259377) : tailrecursion.hoplon.span.call(null,G__259376,G__259377));
})();
var G__259357 = " ";
var G__259358 = (function (){var G__259378 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__259379 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259378,G__259379) : tailrecursion.hoplon.span.call(null,G__259378,G__259379));
})();
var G__259359 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__259341,G__259342,G__259343,G__259344,G__259345,G__259346,G__259347,G__259348,G__259349,G__259350,G__259351,G__259352,G__259353,G__259354,G__259355,G__259356,G__259357,G__259358,G__259359) : tailrecursion.hoplon.pre.call(null,G__259341,G__259342,G__259343,G__259344,G__259345,G__259346,G__259347,G__259348,G__259349,G__259350,G__259351,G__259352,G__259353,G__259354,G__259355,G__259356,G__259357,G__259358,G__259359));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259339,G__259340) : tailrecursion.hoplon.div.call(null,G__259339,G__259340));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259338) : tailrecursion.hoplon.div.call(null,G__259338));
})(),(function (){var G__259380 = cljs.core.PersistentArrayMap.EMPTY;
var G__259381 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["requires that the evaluation rule be applied to four different combinations. We can obtain a picture of this process by representing the combination in the form of a tree, as shown in figure 1.1. Each combination is represented by a node with branches corresponding to the operator and the operands of the combination stemming from it. The terminal nodes (that is, nodes with no branches stemming from them) represent either operators or numbers. Viewing evaluation in terms of the tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels. In general, we shall see that recursion is a very powerful technique for dealing with hierarchical, treelike objects. In fact, the ``percolate values upward",(function (){var G__259382 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259383 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259382,G__259383) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259382,G__259383));
})(),(function (){var G__259384 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259385 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259384,G__259385) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259384,G__259385));
})()," form of the evaluation rule is an example of a general kind of process known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["tree accumulation"], null)], 0)),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259380,G__259381) : tailrecursion.hoplon.markdown.para_node.call(null,G__259380,G__259381));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259266;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259265;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259264;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259263;
}})(),"",book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Tree representation, showing the value of each subcombination."], null)], 0)),(function (){var _STAR_references_STAR_259386 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259387 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_259388 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259389 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259390 = cljs.core.PersistentArrayMap.EMPTY;
var G__259391 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not combinations, but primitive expressions such as numerals, built-in operators, or other names. We take care of the primitive cases by stipulating that"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259390,G__259391) : tailrecursion.hoplon.markdown.para_node.call(null,G__259390,G__259391));
})(),(function (){var G__259392 = cljs.core.PersistentArrayMap.EMPTY;
var G__259393 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259394 = cljs.core.PersistentArrayMap.EMPTY;
var G__259395 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259396 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259397 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of numerals are the numbers that they name,"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259397;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259396;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259394,G__259395) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259394,G__259395));
})(),(function (){var G__259398 = cljs.core.PersistentArrayMap.EMPTY;
var G__259399 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259400 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259401 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of built-in operators are the machine  instruction sequences that carry out the corresponding operations, and"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259401;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259400;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259398,G__259399) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259398,G__259399));
})(),(function (){var G__259402 = cljs.core.PersistentArrayMap.EMPTY;
var G__259403 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259404 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259405 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of other names are the objects associated with  those names in the environment."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259405;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259404;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259402,G__259403) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259402,G__259403));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__259392,G__259393) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__259392,G__259393));
})(),(function (){var G__259406 = cljs.core.PersistentArrayMap.EMPTY;
var G__259407 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We may regard the second rule as a special case of the third one by stipulating that symbols such as + and * are also included in the global environment, and are associated with the sequences of machine instructions that are their ",(function (){var G__259408 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259409 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["values."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259408,G__259409) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259408,G__259409));
})()," The key point to notice is the role of the environment in determining the meaning of the symbols in expressions. In an interactive language such as Lisp, it is meaningless to speak of the value of an expression such as ",(function (){var G__259410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+\nx 1)"], null);
var G__259411 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259410,G__259411) : tailrecursion.hoplon.markdown.code_node.call(null,G__259410,G__259411));
})()," without specifying any information about the environment that would provide a meaning for the symbol ",(function (){var G__259412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__259413 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259412,G__259413) : tailrecursion.hoplon.markdown.code_node.call(null,G__259412,G__259413));
})()," (or even for the symbol ",(function (){var G__259414 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__259415 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259414,G__259415) : tailrecursion.hoplon.markdown.code_node.call(null,G__259414,G__259415));
})(),"). As we shall see in chapter 3, the general notion of the environment as providing a context in which evaluation takes place will play an important role in our understanding of program execution."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259406,G__259407) : tailrecursion.hoplon.markdown.para_node.call(null,G__259406,G__259407));
})(),(function (){var G__259416 = cljs.core.PersistentArrayMap.EMPTY;
var G__259417 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that the evaluation rule given above does not handle definitions. For instance, evaluating ",(function (){var G__259418 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x 3)"], null);
var G__259419 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259418,G__259419) : tailrecursion.hoplon.markdown.code_node.call(null,G__259418,G__259419));
})()," does not apply ",(function (){var G__259420 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__259421 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259420,G__259421) : tailrecursion.hoplon.markdown.code_node.call(null,G__259420,G__259421));
})()," to two arguments, one of which is the value of the symbol ",(function (){var G__259422 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__259423 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259422,G__259423) : tailrecursion.hoplon.markdown.code_node.call(null,G__259422,G__259423));
})()," and the other of which is 3, since the purpose of the define is precisely to associate ",(function (){var G__259424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__259425 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259424,G__259425) : tailrecursion.hoplon.markdown.code_node.call(null,G__259424,G__259425));
})()," with a value. (That is, ",(function (){var G__259426 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x\n3)"], null);
var G__259427 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259426,G__259427) : tailrecursion.hoplon.markdown.code_node.call(null,G__259426,G__259427));
})()," is not a combination.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259416,G__259417) : tailrecursion.hoplon.markdown.para_node.call(null,G__259416,G__259417));
})(),(function (){var G__259428 = cljs.core.PersistentArrayMap.EMPTY;
var G__259429 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such exceptions to the general evaluation rule are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["special forms"], null)], 0)),". ",(function (){var G__259430 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__259431 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259430,G__259431) : tailrecursion.hoplon.markdown.code_node.call(null,G__259430,G__259431));
})()," is the only example of a special form that we have seen so far, but we will meet others shortly. Each special form has its own evaluation rule. The various kinds of expressions (each with its associated evaluation rule) constitute the syntax of the programming language. In comparison with most other programming languages, Lisp has a very simple syntax; that is, the evaluation rule for expressions can be described by a simple general rule together with specialized rules for a small number of special forms.",(function (){var G__259432 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259433 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Special syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["syntactic sugar"], null)], 0)),", to use a phrase coined by Peter Landin. In comparison with users of other languages, Lisp programmers, as a rule, are less concerned with matters of syntax. (By contrast, examine any Pascal manual and notice how much of it is devoted to descriptions of syntax.) This disdain for syntax is due partly to the flexibility of Lisp, which makes it easy to change surface syntax, and partly to the observation that many ",(function (){var G__259434 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259435 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["convenient"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259434,G__259435) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259434,G__259435));
})()," syntactic constructs, which make the language less uniform, end up causing more trouble than they are worth when programs become large and complex. In the words of Alan Perlis, ",(function (){var G__259436 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259437 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Syntactic sugar causes cancer of the semicolon."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259436,G__259437) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259436,G__259437));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259432,G__259433) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259432,G__259433));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259428,G__259429) : tailrecursion.hoplon.markdown.para_node.call(null,G__259428,G__259429));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259389;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259388;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259387;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259386;
}})()], 0));
var G__258241 = "";
var G__258242 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Compound Procedures"], null),(function (){var _STAR_references_STAR_259438 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259439 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_259440 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259441 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259442 = cljs.core.PersistentArrayMap.EMPTY;
var G__259443 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have identified in Lisp some of the elements that must appear in any powerful programming language:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259442,G__259443) : tailrecursion.hoplon.markdown.para_node.call(null,G__259442,G__259443));
})(),(function (){var G__259444 = cljs.core.PersistentArrayMap.EMPTY;
var G__259445 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259446 = cljs.core.PersistentArrayMap.EMPTY;
var G__259447 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259448 = cljs.core.PersistentArrayMap.EMPTY;
var G__259449 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Numbers and arithmetic operations are primitive data and procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259448,G__259449) : tailrecursion.hoplon.markdown.para_node.call(null,G__259448,G__259449));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259446,G__259447) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259446,G__259447));
})(),(function (){var G__259450 = cljs.core.PersistentArrayMap.EMPTY;
var G__259451 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259452 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259453 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259454 = cljs.core.PersistentArrayMap.EMPTY;
var G__259455 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Nesting of combinations provides a means of combining operations."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259454,G__259455) : tailrecursion.hoplon.markdown.para_node.call(null,G__259454,G__259455));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259453;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259452;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259450,G__259451) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259450,G__259451));
})(),(function (){var G__259456 = cljs.core.PersistentArrayMap.EMPTY;
var G__259457 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_259458 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_259459 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259460 = cljs.core.PersistentArrayMap.EMPTY;
var G__259461 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Definitions that associate names with values provide a  limited means of abstraction."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259460,G__259461) : tailrecursion.hoplon.markdown.para_node.call(null,G__259460,G__259461));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259459;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259458;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__259456,G__259457) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__259456,G__259457));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__259444,G__259445) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__259444,G__259445));
})(),(function (){var G__259462 = cljs.core.PersistentArrayMap.EMPTY;
var G__259463 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we will learn about ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedure definitions"], null)], 0)),", a much more powerful abstraction technique by which a compound operation can be given a name and then referred to as a unit."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259462,G__259463) : tailrecursion.hoplon.markdown.para_node.call(null,G__259462,G__259463));
})(),(function (){var G__259464 = cljs.core.PersistentArrayMap.EMPTY;
var G__259465 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We begin by examining how to express the idea of ",(function (){var G__259466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259467 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["squaring."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259466,G__259467) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259466,G__259467));
})()," We might say, ",(function (){var G__259468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259469 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To square something, multiply it by itself."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259468,G__259469) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259468,G__259469));
})()," This is expressed in scheme as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259464,G__259465) : tailrecursion.hoplon.markdown.para_node.call(null,G__259464,G__259465));
})(),(function (){var G__259497 = (function (){var G__259498 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259499 = (function (){var G__259500 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259501 = "(";
var G__259502 = (function (){var G__259513 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259514 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259513,G__259514) : tailrecursion.hoplon.span.call(null,G__259513,G__259514));
})();
var G__259503 = "(";
var G__259504 = (function (){var G__259515 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__259516 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259515,G__259516) : tailrecursion.hoplon.span.call(null,G__259515,G__259516));
})();
var G__259505 = " ";
var G__259506 = (function (){var G__259517 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259518 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259517,G__259518) : tailrecursion.hoplon.span.call(null,G__259517,G__259518));
})();
var G__259507 = ") (";
var G__259508 = (function (){var G__259519 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259520 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259519,G__259520) : tailrecursion.hoplon.span.call(null,G__259519,G__259520));
})();
var G__259509 = (function (){var G__259521 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259522 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259521,G__259522) : tailrecursion.hoplon.span.call(null,G__259521,G__259522));
})();
var G__259510 = " ";
var G__259511 = (function (){var G__259523 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259524 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259523,G__259524) : tailrecursion.hoplon.span.call(null,G__259523,G__259524));
})();
var G__259512 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__259500,G__259501,G__259502,G__259503,G__259504,G__259505,G__259506,G__259507,G__259508,G__259509,G__259510,G__259511,G__259512) : tailrecursion.hoplon.pre.call(null,G__259500,G__259501,G__259502,G__259503,G__259504,G__259505,G__259506,G__259507,G__259508,G__259509,G__259510,G__259511,G__259512));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259498,G__259499) : tailrecursion.hoplon.div.call(null,G__259498,G__259499));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259497) : tailrecursion.hoplon.div.call(null,G__259497));
})(),(function (){var G__259525 = cljs.core.PersistentArrayMap.EMPTY;
var G__259526 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["but in Clojure, we would write that as,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259525,G__259526) : tailrecursion.hoplon.markdown.para_node.call(null,G__259525,G__259526));
})(),(function (){var G__259553 = (function (){var G__259554 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259555 = (function (){var G__259556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259557 = "(";
var G__259558 = (function (){var G__259568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259569 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259568,G__259569) : tailrecursion.hoplon.span.call(null,G__259568,G__259569));
})();
var G__259559 = (function (){var G__259570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259571 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259570,G__259571) : tailrecursion.hoplon.span.call(null,G__259570,G__259571));
})();
var G__259560 = " [";
var G__259561 = (function (){var G__259572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259573 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259572,G__259573) : tailrecursion.hoplon.span.call(null,G__259572,G__259573));
})();
var G__259562 = "] (";
var G__259563 = (function (){var G__259574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259575 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259574,G__259575) : tailrecursion.hoplon.span.call(null,G__259574,G__259575));
})();
var G__259564 = (function (){var G__259576 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259577 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259576,G__259577) : tailrecursion.hoplon.span.call(null,G__259576,G__259577));
})();
var G__259565 = " ";
var G__259566 = (function (){var G__259578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259579 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259578,G__259579) : tailrecursion.hoplon.span.call(null,G__259578,G__259579));
})();
var G__259567 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__259556,G__259557,G__259558,G__259559,G__259560,G__259561,G__259562,G__259563,G__259564,G__259565,G__259566,G__259567) : tailrecursion.hoplon.pre.call(null,G__259556,G__259557,G__259558,G__259559,G__259560,G__259561,G__259562,G__259563,G__259564,G__259565,G__259566,G__259567));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259554,G__259555) : tailrecursion.hoplon.div.call(null,G__259554,G__259555));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259553) : tailrecursion.hoplon.div.call(null,G__259553));
})(),(function (){var G__259580 = cljs.core.PersistentArrayMap.EMPTY;
var G__259581 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note that Clojure differentiates between definining an atom and defining a procedure! We can understand this in the following way:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259580,G__259581) : tailrecursion.hoplon.markdown.para_node.call(null,G__259580,G__259581));
})(),(function (){var G__259661 = (function (){var G__259662 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259663 = (function (){var G__259664 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259665 = "(";
var G__259666 = (function (){var G__259703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259704 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259703,G__259704) : tailrecursion.hoplon.span.call(null,G__259703,G__259704));
})();
var G__259667 = (function (){var G__259705 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259706 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259705,G__259706) : tailrecursion.hoplon.span.call(null,G__259705,G__259706));
})();
var G__259668 = "      [";
var G__259669 = (function (){var G__259707 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259708 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259707,G__259708) : tailrecursion.hoplon.span.call(null,G__259707,G__259708));
})();
var G__259670 = "]      (";
var G__259671 = (function (){var G__259709 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259710 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259709,G__259710) : tailrecursion.hoplon.span.call(null,G__259709,G__259710));
})();
var G__259672 = "     ";
var G__259673 = (function (){var G__259711 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259712 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259711,G__259712) : tailrecursion.hoplon.span.call(null,G__259711,G__259712));
})();
var G__259674 = "      ";
var G__259675 = (function (){var G__259713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259714 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259713,G__259714) : tailrecursion.hoplon.span.call(null,G__259713,G__259714));
})();
var G__259676 = "))\n  ";
var G__259677 = (function (){var G__259715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259716 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259715,G__259716) : tailrecursion.hoplon.span.call(null,G__259715,G__259716));
})();
var G__259678 = "    ";
var G__259679 = (function (){var G__259717 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259718 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259717,G__259718) : tailrecursion.hoplon.span.call(null,G__259717,G__259718));
})();
var G__259680 = "          ";
var G__259681 = (function (){var G__259719 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259720 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259719,G__259720) : tailrecursion.hoplon.span.call(null,G__259719,G__259720));
})();
var G__259682 = "        ";
var G__259683 = (function (){var G__259721 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259722 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259721,G__259722) : tailrecursion.hoplon.span.call(null,G__259721,G__259722));
})();
var G__259684 = "     ";
var G__259685 = (function (){var G__259723 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259724 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259723,G__259724) : tailrecursion.hoplon.span.call(null,G__259723,G__259724));
})();
var G__259686 = "      ";
var G__259687 = (function (){var G__259725 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__259726 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259725,G__259726) : tailrecursion.hoplon.span.call(null,G__259725,G__259726));
})();
var G__259688 = "\n ";
var G__259689 = (function (){var G__259727 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259728 = "to";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259727,G__259728) : tailrecursion.hoplon.span.call(null,G__259727,G__259728));
})();
var G__259690 = "  ";
var G__259691 = (function (){var G__259729 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #BA2121"], null);
var G__259730 = "\"square\"";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259729,G__259730) : tailrecursion.hoplon.span.call(null,G__259729,G__259730));
})();
var G__259692 = " ";
var G__259693 = (function (){var G__259731 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259732 = "something";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259731,G__259732) : tailrecursion.hoplon.span.call(null,G__259731,G__259732));
})();
var G__259694 = ", ";
var G__259695 = (function (){var G__259733 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259734 = "multiply";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259733,G__259734) : tailrecursion.hoplon.span.call(null,G__259733,G__259734));
})();
var G__259696 = " ";
var G__259697 = (function (){var G__259735 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259736 = "it";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259735,G__259736) : tailrecursion.hoplon.span.call(null,G__259735,G__259736));
})();
var G__259698 = " ";
var G__259699 = (function (){var G__259737 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259738 = "by";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259737,G__259738) : tailrecursion.hoplon.span.call(null,G__259737,G__259738));
})();
var G__259700 = " ";
var G__259701 = (function (){var G__259739 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259740 = "itself.";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259739,G__259740) : tailrecursion.hoplon.span.call(null,G__259739,G__259740));
})();
var G__259702 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__259664,G__259665,G__259666,G__259667,G__259668,G__259669,G__259670,G__259671,G__259672,G__259673,G__259674,G__259675,G__259676,G__259677,G__259678,G__259679,G__259680,G__259681,G__259682,G__259683,G__259684,G__259685,G__259686,G__259687,G__259688,G__259689,G__259690,G__259691,G__259692,G__259693,G__259694,G__259695,G__259696,G__259697,G__259698,G__259699,G__259700,G__259701,G__259702) : tailrecursion.hoplon.pre.call(null,G__259664,G__259665,G__259666,G__259667,G__259668,G__259669,G__259670,G__259671,G__259672,G__259673,G__259674,G__259675,G__259676,G__259677,G__259678,G__259679,G__259680,G__259681,G__259682,G__259683,G__259684,G__259685,G__259686,G__259687,G__259688,G__259689,G__259690,G__259691,G__259692,G__259693,G__259694,G__259695,G__259696,G__259697,G__259698,G__259699,G__259700,G__259701,G__259702));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259662,G__259663) : tailrecursion.hoplon.div.call(null,G__259662,G__259663));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259661) : tailrecursion.hoplon.div.call(null,G__259661));
})(),(function (){var G__259741 = cljs.core.PersistentArrayMap.EMPTY;
var G__259742 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have here a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["compound procedure"], null)], 0)),", which has been given the name ",(function (){var G__259743 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__259744 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259743,G__259744) : tailrecursion.hoplon.markdown.code_node.call(null,G__259743,G__259744));
})(),". The procedure represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, x, which plays the same role that a pronoun plays in natural language. Evaluating the definition creates this compound procedure and associates it with the name square.",(function (){var G__259745 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259746 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that there are two different operations being combined here: we are creating the procedure, and we are giving it the name ",(function (){var G__259747 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__259748 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259747,G__259748) : tailrecursion.hoplon.markdown.code_node.call(null,G__259747,G__259748));
})(),". It is possible, indeed important, to be able to separate these two notions ",(function (){var G__259749 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__259750 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259749,G__259750) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259749,G__259750));
})()," to create procedures without naming them, and to give names to procedures that have already been created. We will see how to do this in section 1.3.2."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259745,G__259746) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259745,G__259746));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259741,G__259742) : tailrecursion.hoplon.markdown.para_node.call(null,G__259741,G__259742));
})(),(function (){var G__259751 = cljs.core.PersistentArrayMap.EMPTY;
var G__259752 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a procedure definition is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259751,G__259752) : tailrecursion.hoplon.markdown.para_node.call(null,G__259751,G__259752));
})(),(function (){var G__259776 = (function (){var G__259777 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259778 = (function (){var G__259779 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259780 = "(";
var G__259781 = (function (){var G__259790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259791 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259790,G__259791) : tailrecursion.hoplon.span.call(null,G__259790,G__259791));
})();
var G__259782 = (function (){var G__259792 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259793 = "<name>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259792,G__259793) : tailrecursion.hoplon.span.call(null,G__259792,G__259793));
})();
var G__259783 = " [";
var G__259784 = (function (){var G__259794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259795 = "<formal";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259794,G__259795) : tailrecursion.hoplon.span.call(null,G__259794,G__259795));
})();
var G__259785 = " ";
var G__259786 = (function (){var G__259796 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259797 = "parameters>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259796,G__259797) : tailrecursion.hoplon.span.call(null,G__259796,G__259797));
})();
var G__259787 = "] ";
var G__259788 = (function (){var G__259798 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259799 = "<body>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259798,G__259799) : tailrecursion.hoplon.span.call(null,G__259798,G__259799));
})();
var G__259789 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__259779,G__259780,G__259781,G__259782,G__259783,G__259784,G__259785,G__259786,G__259787,G__259788,G__259789) : tailrecursion.hoplon.pre.call(null,G__259779,G__259780,G__259781,G__259782,G__259783,G__259784,G__259785,G__259786,G__259787,G__259788,G__259789));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259777,G__259778) : tailrecursion.hoplon.div.call(null,G__259777,G__259778));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259776) : tailrecursion.hoplon.div.call(null,G__259776));
})(),(function (){var G__259800 = cljs.core.PersistentArrayMap.EMPTY;
var G__259801 = new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Just in case you end up reading from the original SICP, let",(function (){var G__259802 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259803 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259802,G__259803) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259802,G__259803));
})(),"s take a moment to note the differences between the Scheme method of defining compound procedures, and the Clojure method. The Scheme method ",(function (){var G__259804 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(define\n(<name> <formal parameters>) <body>)"], null);
var G__259805 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259804,G__259805) : tailrecursion.hoplon.markdown.code_node.call(null,G__259804,G__259805));
})()," is very straight forward: it defines the first form to be the second. In this way, we can see ",(function (){var G__259806 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__259807 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259806,G__259807) : tailrecursion.hoplon.markdown.code_node.call(null,G__259806,G__259807));
})()," to be a procedure that takes two arguments. The procedure ",(function (){var G__259808 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__259809 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259808,G__259809) : tailrecursion.hoplon.markdown.code_node.call(null,G__259808,G__259809));
})()," in Clojure takes three arguments: the first being the name of the intended procedure (in our example ",(function (){var G__259810 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259811 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__259812 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__259813 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259812,G__259813) : tailrecursion.hoplon.markdown.code_node.call(null,G__259812,G__259813));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259810,G__259811) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259810,G__259811));
})(),"), the second is a list of all the arguments (we",(function (){var G__259814 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__259815 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259814,G__259815) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259814,G__259815));
})(),"ll cover lists later, but in our example it was ",(function (){var G__259816 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[x]"], null);
var G__259817 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259816,G__259817) : tailrecursion.hoplon.markdown.code_node.call(null,G__259816,G__259817));
})(),"), and the third is the intended procedure or the body (in our example it was ",(function (){var G__259818 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* x x)"], null);
var G__259819 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259818,G__259819) : tailrecursion.hoplon.markdown.code_node.call(null,G__259818,G__259819));
})(),")."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259800,G__259801) : tailrecursion.hoplon.markdown.para_node.call(null,G__259800,G__259801));
})(),(function (){var G__259820 = cljs.core.PersistentArrayMap.EMPTY;
var G__259821 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The <name> is a symbol to be associated with the procedure definition in the environment.",(function (){var G__259822 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259823 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, we will describe the general syntax of expressions by using italic symbols delimited by angle brackets ",(function (){var G__259824 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__259825 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259824,G__259825) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259824,G__259825));
})()," e.g., ",(function (){var G__259826 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<name>"], null);
var G__259827 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__259826,G__259827) : tailrecursion.hoplon.markdown.code_node.call(null,G__259826,G__259827));
})()," ",(function (){var G__259828 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__259829 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__259828,G__259829) : tailrecursion.hoplon.markdown.simple_node.call(null,G__259828,G__259829));
})()," to denote the ",(function (){var G__259830 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__259831 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["slots"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259830,G__259831) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259830,G__259831));
})()," in the expression to be filled in when such an expression is actually used."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259822,G__259823) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259822,G__259823));
})()," The <formal\nparameters> are the names used within the body of the procedure to refer to the corresponding arguments of the procedure. The <body> is an expression that will yield the value of the procedure application when the formal parameters are replaced by the actual arguments to which the procedure is applied.",(function (){var G__259832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__259833 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["More generally, the body of the procedure can be a sequence of expressions. In this case, the interpreter evaluates each expression in the sequence in turn and returns the value of the final expression as the value of the procedure application."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__259832,G__259833) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__259832,G__259833));
})()," In Scheme, the <name> and the <formal parameters> are grouped within parentheses, just as they would be in an actual call to the procedure being defined, but in Clojure they are not."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259820,G__259821) : tailrecursion.hoplon.markdown.para_node.call(null,G__259820,G__259821));
})(),(function (){var G__259834 = cljs.core.PersistentArrayMap.EMPTY;
var G__259835 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Having defined square, we can now use it:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259834,G__259835) : tailrecursion.hoplon.markdown.para_node.call(null,G__259834,G__259835));
})(),(function (){var G__259836 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square 21)\n441\n") : tailrecursion.hoplon.code.call(null,"(square 21)\n441\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__259836) : tailrecursion.hoplon.pre.call(null,G__259836));
})(),(function (){var G__259837 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (+ 2 5))\n49\n") : tailrecursion.hoplon.code.call(null,"(square (+ 2 5))\n49\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__259837) : tailrecursion.hoplon.pre.call(null,G__259837));
})(),(function (){var G__259838 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (square 3))\n81\n") : tailrecursion.hoplon.code.call(null,"(square (square 3))\n81\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__259838) : tailrecursion.hoplon.pre.call(null,G__259838));
})(),(function (){var G__259839 = cljs.core.PersistentArrayMap.EMPTY;
var G__259840 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can also use square as a building block in defining other procedures. For example, \\(x^2 + y^2\\) can be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259839,G__259840) : tailrecursion.hoplon.markdown.para_node.call(null,G__259839,G__259840));
})(),(function (){var G__259841 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square x) (square y))\n") : tailrecursion.hoplon.code.call(null,"(+ (square x) (square y))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__259841) : tailrecursion.hoplon.pre.call(null,G__259841));
})(),(function (){var G__259842 = cljs.core.PersistentArrayMap.EMPTY;
var G__259843 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can easily define a procedure sum-of-squares that, given any two numbers as arguments, produces the sum of their squares:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259842,G__259843) : tailrecursion.hoplon.markdown.para_node.call(null,G__259842,G__259843));
})(),(function (){var G__259883 = (function (){var G__259884 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259885 = (function (){var G__259886 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259887 = "(";
var G__259888 = (function (){var G__259905 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259906 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259905,G__259906) : tailrecursion.hoplon.span.call(null,G__259905,G__259906));
})();
var G__259889 = (function (){var G__259907 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259908 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259907,G__259908) : tailrecursion.hoplon.span.call(null,G__259907,G__259908));
})();
var G__259890 = " [";
var G__259891 = (function (){var G__259909 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259910 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259909,G__259910) : tailrecursion.hoplon.span.call(null,G__259909,G__259910));
})();
var G__259892 = " ";
var G__259893 = (function (){var G__259911 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259912 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259911,G__259912) : tailrecursion.hoplon.span.call(null,G__259911,G__259912));
})();
var G__259894 = "]\n  (";
var G__259895 = (function (){var G__259913 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259914 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259913,G__259914) : tailrecursion.hoplon.span.call(null,G__259913,G__259914));
})();
var G__259896 = "(";
var G__259897 = (function (){var G__259915 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__259916 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259915,G__259916) : tailrecursion.hoplon.span.call(null,G__259915,G__259916));
})();
var G__259898 = " ";
var G__259899 = (function (){var G__259917 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259918 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259917,G__259918) : tailrecursion.hoplon.span.call(null,G__259917,G__259918));
})();
var G__259900 = ") (";
var G__259901 = (function (){var G__259919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__259920 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259919,G__259920) : tailrecursion.hoplon.span.call(null,G__259919,G__259920));
})();
var G__259902 = " ";
var G__259903 = (function (){var G__259921 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259922 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259921,G__259922) : tailrecursion.hoplon.span.call(null,G__259921,G__259922));
})();
var G__259904 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__259886,G__259887,G__259888,G__259889,G__259890,G__259891,G__259892,G__259893,G__259894,G__259895,G__259896,G__259897,G__259898,G__259899,G__259900,G__259901,G__259902,G__259903,G__259904) : tailrecursion.hoplon.pre.call(null,G__259886,G__259887,G__259888,G__259889,G__259890,G__259891,G__259892,G__259893,G__259894,G__259895,G__259896,G__259897,G__259898,G__259899,G__259900,G__259901,G__259902,G__259903,G__259904));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259884,G__259885) : tailrecursion.hoplon.div.call(null,G__259884,G__259885));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259883) : tailrecursion.hoplon.div.call(null,G__259883));
})(),(function (){var G__259923 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares 3 4)\n25\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares 3 4)\n25\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__259923) : tailrecursion.hoplon.pre.call(null,G__259923));
})(),(function (){var G__259924 = cljs.core.PersistentArrayMap.EMPTY;
var G__259925 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we can use sum-of-squares as a building block in constructing further procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__259924,G__259925) : tailrecursion.hoplon.markdown.para_node.call(null,G__259924,G__259925));
})(),(function (){var G__259967 = (function (){var G__259968 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__259969 = (function (){var G__259970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__259971 = "(";
var G__259972 = (function (){var G__259989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__259990 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259989,G__259990) : tailrecursion.hoplon.span.call(null,G__259989,G__259990));
})();
var G__259973 = (function (){var G__259991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259992 = "f";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259991,G__259992) : tailrecursion.hoplon.span.call(null,G__259991,G__259992));
})();
var G__259974 = " [";
var G__259975 = (function (){var G__259993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__259994 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259993,G__259994) : tailrecursion.hoplon.span.call(null,G__259993,G__259994));
})();
var G__259976 = "]\n  (";
var G__259977 = (function (){var G__259995 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__259996 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259995,G__259996) : tailrecursion.hoplon.span.call(null,G__259995,G__259996));
})();
var G__259978 = " (";
var G__259979 = (function (){var G__259997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__259998 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259997,G__259998) : tailrecursion.hoplon.span.call(null,G__259997,G__259998));
})();
var G__259980 = (function (){var G__259999 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260000 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__259999,G__260000) : tailrecursion.hoplon.span.call(null,G__259999,G__260000));
})();
var G__259981 = " ";
var G__259982 = (function (){var G__260001 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260002 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260001,G__260002) : tailrecursion.hoplon.span.call(null,G__260001,G__260002));
})();
var G__259983 = ") (";
var G__259984 = (function (){var G__260003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260004 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260003,G__260004) : tailrecursion.hoplon.span.call(null,G__260003,G__260004));
})();
var G__259985 = (function (){var G__260005 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260006 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260005,G__260006) : tailrecursion.hoplon.span.call(null,G__260005,G__260006));
})();
var G__259986 = " ";
var G__259987 = (function (){var G__260007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260008 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260007,G__260008) : tailrecursion.hoplon.span.call(null,G__260007,G__260008));
})();
var G__259988 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__259970,G__259971,G__259972,G__259973,G__259974,G__259975,G__259976,G__259977,G__259978,G__259979,G__259980,G__259981,G__259982,G__259983,G__259984,G__259985,G__259986,G__259987,G__259988) : tailrecursion.hoplon.pre.call(null,G__259970,G__259971,G__259972,G__259973,G__259974,G__259975,G__259976,G__259977,G__259978,G__259979,G__259980,G__259981,G__259982,G__259983,G__259984,G__259985,G__259986,G__259987,G__259988));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__259968,G__259969) : tailrecursion.hoplon.div.call(null,G__259968,G__259969));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__259967) : tailrecursion.hoplon.div.call(null,G__259967));
})(),(function (){var G__260009 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n136\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260009) : tailrecursion.hoplon.pre.call(null,G__260009));
})(),(function (){var G__260010 = cljs.core.PersistentArrayMap.EMPTY;
var G__260011 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Compound procedures are used in exactly the same way as primitive procedures. Indeed, one could not tell by looking at the definition of ",(function (){var G__260012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__260013 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260012,G__260013) : tailrecursion.hoplon.markdown.code_node.call(null,G__260012,G__260013));
})()," given above whether ",(function (){var G__260014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__260015 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260014,G__260015) : tailrecursion.hoplon.markdown.code_node.call(null,G__260014,G__260015));
})()," was built into the interpreter, like ",(function (){var G__260016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__260017 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260016,G__260017) : tailrecursion.hoplon.markdown.code_node.call(null,G__260016,G__260017));
})()," and ",(function (){var G__260018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__260019 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260018,G__260019) : tailrecursion.hoplon.markdown.code_node.call(null,G__260018,G__260019));
})(),", or defined as a compound procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260010,G__260011) : tailrecursion.hoplon.markdown.para_node.call(null,G__260010,G__260011));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259441;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259440;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_259439;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_259438;
}})()], 0));
var G__258243 = "";
var G__258244 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Substitution Model for Procedure Application"], null),(function (){var _STAR_references_STAR_260020 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260021 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260022 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260023 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260024 = cljs.core.PersistentArrayMap.EMPTY;
var G__260025 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination whose operator names a compound procedure, the interpreter follows much the same process as for combinations whose operators name primitive procedures, which we described in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),". That is, the interpreter evaluates the elements of the combination and applies the procedure (which is the value of the operator of the combination) to the arguments (which are the values of the operands of the combination)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260024,G__260025) : tailrecursion.hoplon.markdown.para_node.call(null,G__260024,G__260025));
})(),(function (){var G__260026 = cljs.core.PersistentArrayMap.EMPTY;
var G__260027 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can assume that the mechanism for applying primitive procedures to arguments is built into the interpreter. For compound procedures, the application process is as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260026,G__260027) : tailrecursion.hoplon.markdown.para_node.call(null,G__260026,G__260027));
})(),(function (){var G__260028 = cljs.core.PersistentArrayMap.EMPTY;
var G__260029 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260030 = cljs.core.PersistentArrayMap.EMPTY;
var G__260031 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260032 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260033 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260033;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260032;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260030,G__260031) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260030,G__260031));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260028,G__260029) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260028,G__260029));
})(),(function (){var G__260034 = cljs.core.PersistentArrayMap.EMPTY;
var G__260035 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To illustrate this process, let",(function (){var G__260036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260037 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260036,G__260037) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260036,G__260037));
})(),"s evaluate the combination"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260034,G__260035) : tailrecursion.hoplon.markdown.para_node.call(null,G__260034,G__260035));
})(),(function (){var G__260038 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260038) : tailrecursion.hoplon.pre.call(null,G__260038));
})(),(function (){var G__260039 = cljs.core.PersistentArrayMap.EMPTY;
var G__260040 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where f is the procedure defined in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.4"], null)], 0)),". We begin by retrieving the body of f:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260039,G__260040) : tailrecursion.hoplon.markdown.para_node.call(null,G__260039,G__260040));
})(),(function (){var G__260041 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ a 1) (* a 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ a 1) (* a 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260041) : tailrecursion.hoplon.pre.call(null,G__260041));
})(),(function (){var G__260042 = cljs.core.PersistentArrayMap.EMPTY;
var G__260043 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then we replace the formal parameter a by the argument 5:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260042,G__260043) : tailrecursion.hoplon.markdown.para_node.call(null,G__260042,G__260043));
})(),(function (){var G__260044 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260044) : tailrecursion.hoplon.pre.call(null,G__260044));
})(),(function (){var G__260045 = cljs.core.PersistentArrayMap.EMPTY;
var G__260046 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus the problem reduces to the evaluation of a combination with two operands and an operator ",(function (){var G__260047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__260048 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260047,G__260048) : tailrecursion.hoplon.markdown.code_node.call(null,G__260047,G__260048));
})(),". Evaluating this combination involves three subproblems. We must evaluate the operator to get the procedure to be applied, and we must evaluate the operands to get the arguments. Now ",(function (){var G__260049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__260050 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260049,G__260050) : tailrecursion.hoplon.markdown.code_node.call(null,G__260049,G__260050));
})()," produces 6 and ",(function (){var G__260051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__260052 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260051,G__260052) : tailrecursion.hoplon.markdown.code_node.call(null,G__260051,G__260052));
})()," produces 10, so we must apply the ",(function (){var G__260053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__260054 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260053,G__260054) : tailrecursion.hoplon.markdown.code_node.call(null,G__260053,G__260054));
})()," procedure to 6 and 10. These values are substituted for the formal parameters ",(function (){var G__260055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__260056 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260055,G__260056) : tailrecursion.hoplon.markdown.code_node.call(null,G__260055,G__260056));
})()," and ",(function (){var G__260057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"y"], null);
var G__260058 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260057,G__260058) : tailrecursion.hoplon.markdown.code_node.call(null,G__260057,G__260058));
})()," in the body of ",(function (){var G__260059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__260060 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260059,G__260060) : tailrecursion.hoplon.markdown.code_node.call(null,G__260059,G__260060));
})(),", reducing the expression to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260045,G__260046) : tailrecursion.hoplon.markdown.para_node.call(null,G__260045,G__260046));
})(),(function (){var G__260061 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square 6) (square 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (square 6) (square 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260061) : tailrecursion.hoplon.pre.call(null,G__260061));
})(),(function (){var G__260062 = cljs.core.PersistentArrayMap.EMPTY;
var G__260063 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we use the definition of ",(function (){var G__260064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__260065 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260064,G__260065) : tailrecursion.hoplon.markdown.code_node.call(null,G__260064,G__260065));
})(),", this reduces to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260062,G__260063) : tailrecursion.hoplon.markdown.para_node.call(null,G__260062,G__260063));
})(),(function (){var G__260066 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260066) : tailrecursion.hoplon.pre.call(null,G__260066));
})(),(function (){var G__260067 = cljs.core.PersistentArrayMap.EMPTY;
var G__260068 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which reduces by multiplication to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260067,G__260068) : tailrecursion.hoplon.markdown.para_node.call(null,G__260067,G__260068));
})(),(function (){var G__260069 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ 36 100)\n") : tailrecursion.hoplon.code.call(null,"(+ 36 100)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260069) : tailrecursion.hoplon.pre.call(null,G__260069));
})(),(function (){var G__260070 = cljs.core.PersistentArrayMap.EMPTY;
var G__260071 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and finally to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260070,G__260071) : tailrecursion.hoplon.markdown.para_node.call(null,G__260070,G__260071));
})(),(function (){var G__260072 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("136\n") : tailrecursion.hoplon.code.call(null,"136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260072) : tailrecursion.hoplon.pre.call(null,G__260072));
})(),(function (){var G__260073 = cljs.core.PersistentArrayMap.EMPTY;
var G__260074 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The process we have just described is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution model"], null)], 0))," for procedure application. It can be taken as a model that determines the ",(function (){var G__260075 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260076 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["meaning"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260075,G__260076) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260075,G__260076));
})()," of procedure application, insofar as the procedures in this chapter are concerned. However, there are two points that should be stressed:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260073,G__260074) : tailrecursion.hoplon.markdown.para_node.call(null,G__260073,G__260074));
})(),(function (){var G__260077 = cljs.core.PersistentArrayMap.EMPTY;
var G__260078 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260079 = cljs.core.PersistentArrayMap.EMPTY;
var G__260080 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260081 = cljs.core.PersistentArrayMap.EMPTY;
var G__260082 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The purpose of the substitution is to help us think about procedure application, not to provide a description of how the interpreter really works. Typical interpreters do not evaluate procedure applications by manipulating the text of a procedure to substitute values for the formal parameters. In practice, the ",(function (){var G__260083 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260084 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260083,G__260084) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260083,G__260084));
})()," is accomplished by using a local environment for the formal parameters. We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260081,G__260082) : tailrecursion.hoplon.markdown.para_node.call(null,G__260081,G__260082));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260079,G__260080) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260079,G__260080));
})(),(function (){var G__260085 = cljs.core.PersistentArrayMap.EMPTY;
var G__260086 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260087 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260088 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260089 = cljs.core.PersistentArrayMap.EMPTY;
var G__260090 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Over the course of this book, we will present a sequence of increasingly elaborate models of how interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. The substitution model is only the first of these models ",(function (){var G__260091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__260092 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260091,G__260092) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260091,G__260092));
})()," a way to get started thinking formally about the evaluation process. In general, when modeling phenomena in science and engineering, we begin with simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate and must be replaced by more refined models. The substitution model is no exception. In particular, when we address in chapter 3 the use of procedures with ",(function (){var G__260093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260094 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mutable data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260093,G__260094) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260093,G__260094));
})(),", we will see that the substitution model breaks down and must be replaced by a more complicated model of procedure application.",(function (){var G__260095 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260096 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process. The problem arises from the possibility of confusion between the names used for the formal parameters of a procedure and the (possibly identical) names used in the expressions to which the procedure may be applied. Indeed, there is a long history of erroneous definitions of substitution in the literature of logic and programming semantics. See Stoy 1977 for a careful discussion of substitution."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260095,G__260096) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260095,G__260096));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260089,G__260090) : tailrecursion.hoplon.markdown.para_node.call(null,G__260089,G__260090));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260088;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260087;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260085,G__260086) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260085,G__260086));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260077,G__260078) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260077,G__260078));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260023;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260022;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260021;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260020;
}})()], 0));
var G__258245 = "";
var G__258246 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Applicative Order vs Normal Order"], null),(function (){var _STAR_references_STAR_260097 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260098 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260099 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260100 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260101 = cljs.core.PersistentArrayMap.EMPTY;
var G__260102 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["According to the description of evaluation given in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),", the interpreter first evaluates the operator and operands and then applies the resulting procedure to the resulting arguments. This is not the only way to perform evaluation. An alternative evaluation model would not evaluate the operands until their values were needed. Instead it would first substitute operand expressions for parameters until it obtained an expression involving only primitive operators, and would then perform the evaluation. If we used this method, the evaluation of"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260101,G__260102) : tailrecursion.hoplon.markdown.para_node.call(null,G__260101,G__260102));
})(),(function (){var G__260103 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260103) : tailrecursion.hoplon.pre.call(null,G__260103));
})(),(function (){var G__260104 = cljs.core.PersistentArrayMap.EMPTY;
var G__260105 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["would proceed according to the sequence of expansions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260104,G__260105) : tailrecursion.hoplon.markdown.para_node.call(null,G__260104,G__260105));
})(),(function (){var G__260106 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260106) : tailrecursion.hoplon.pre.call(null,G__260106));
})(),(function (){var G__260107 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (square (+ 5 1))      (square (* 5 2))  )\n") : tailrecursion.hoplon.code.call(null,"(+    (square (+ 5 1))      (square (* 5 2))  )\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260107) : tailrecursion.hoplon.pre.call(null,G__260107));
})(),(function (){var G__260108 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n") : tailrecursion.hoplon.code.call(null,"(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260108) : tailrecursion.hoplon.pre.call(null,G__260108));
})(),(function (){var G__260109 = cljs.core.PersistentArrayMap.EMPTY;
var G__260110 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["followed by the reductions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260109,G__260110) : tailrecursion.hoplon.markdown.para_node.call(null,G__260109,G__260110));
})(),(function (){var G__260111 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260111) : tailrecursion.hoplon.pre.call(null,G__260111));
})(),(function (){var G__260112 = cljs.core.PersistentArrayMap.EMPTY;
var G__260113 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This gives the same answer as our previous evaluation model, but the process is different. In particular, the evaluations of ",(function (){var G__260114 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__260115 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260114,G__260115) : tailrecursion.hoplon.markdown.code_node.call(null,G__260114,G__260115));
})()," and ",(function (){var G__260116 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__260117 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260116,G__260117) : tailrecursion.hoplon.markdown.code_node.call(null,G__260116,G__260117));
})()," are each performed twice here, corresponding to the reduction of the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260112,G__260113) : tailrecursion.hoplon.markdown.para_node.call(null,G__260112,G__260113));
})(),(function (){var G__260118 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(* x x)\n") : tailrecursion.hoplon.code.call(null,"(* x x)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260118) : tailrecursion.hoplon.pre.call(null,G__260118));
})(),(function (){var G__260119 = cljs.core.PersistentArrayMap.EMPTY;
var G__260120 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["with ",(function (){var G__260121 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__260122 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260121,G__260122) : tailrecursion.hoplon.markdown.code_node.call(null,G__260121,G__260122));
})()," replaced respectively by ",(function (){var G__260123 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__260124 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260123,G__260124) : tailrecursion.hoplon.markdown.code_node.call(null,G__260123,G__260124));
})()," and ",(function (){var G__260125 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__260126 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260125,G__260126) : tailrecursion.hoplon.markdown.code_node.call(null,G__260125,G__260126));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260119,G__260120) : tailrecursion.hoplon.markdown.para_node.call(null,G__260119,G__260120));
})(),(function (){var G__260127 = cljs.core.PersistentArrayMap.EMPTY;
var G__260128 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This alternative ",(function (){var G__260129 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260130 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["fully expand and then reduce"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260129,G__260130) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260129,G__260130));
})()," evaluation method is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["normal-order evaluation"], null)], 0)),", in contrast to the ",(function (){var G__260131 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260132 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["evaluate the arguments and then apply"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260131,G__260132) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260131,G__260132));
})()," method that the interpreter actually uses, which is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["applicative-order evaluation"], null)], 0)),". It can be shown that, for procedure applications that can be modeled using substitution (including all the procedures in the first two chapters of this book) and that yield legitimate values, normal-order and applicative-order evaluation produce the same value. (See ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#q1.5",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.5"], null)], 0))," for an instance of an ",(function (){var G__260133 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260134 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["illegitimate"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260133,G__260134) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260133,G__260134));
})()," value where normal-order and applicative-order evaluation do not give the same result.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260127,G__260128) : tailrecursion.hoplon.markdown.para_node.call(null,G__260127,G__260128));
})(),(function (){var G__260135 = cljs.core.PersistentArrayMap.EMPTY;
var G__260136 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp uses applicative-order evaluation, partly because of the additional efficiency obtained from avoiding multiple evaluations of expressions such as those illustrated with ",(function (){var G__260137 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__260138 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260137,G__260138) : tailrecursion.hoplon.markdown.code_node.call(null,G__260137,G__260138));
})()," and ",(function (){var G__260139 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__260140 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260139,G__260140) : tailrecursion.hoplon.markdown.code_node.call(null,G__260139,G__260140));
})()," above and, more significantly, because normal-order evaluation becomes much more complicated to deal with when we leave the realm of procedures that can be modeled by substitution. On the other hand, normal-order evaluation can be an extremely valuable tool, and we will investigate some of its implications in chapters 3 and 4.",(function (){var G__260141 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260142 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In chapter 3 we will introduce ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["stream processing"], null)], 0)),", which is a way of handling apparently ",(function (){var G__260143 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260144 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["infinite"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260143,G__260144) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260143,G__260144));
})()," data structures by incorporating a limited form of normal-order evaluation. In section 4.2 we will modify the Scheme interpreter to produce a normal-order variant of Scheme."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260141,G__260142) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260141,G__260142));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260135,G__260136) : tailrecursion.hoplon.markdown.para_node.call(null,G__260135,G__260136));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260100;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260099;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260098;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260097;
}})()], 0));
var G__258247 = "";
var G__258248 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Conditional Expressions and Predicates"], null),(function (){var _STAR_references_STAR_260145 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260146 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260147 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260148 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 31, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260149 = cljs.core.PersistentArrayMap.EMPTY;
var G__260150 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The expressive power of the class of procedures that we can define at this point is very limited, because we have no way to make tests and to perform different operations depending on the result of a test. For instance, we cannot define a procedure that computes the absolute value of a number by testing whether the number is positive, negative, or zero and taking different actions in the different cases according to the rule"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260149,G__260150) : tailrecursion.hoplon.markdown.para_node.call(null,G__260149,G__260150));
})(),(function (){var G__260151 = cljs.core.PersistentArrayMap.EMPTY;
var G__260152 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$| x |= \\begin{cases} x &\\mbox{if } x > 0 \\cr 0 &\\mbox{if } x = 0 \\cr -x &\\mbox{if } x < 0 \\end{cases}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260151,G__260152) : tailrecursion.hoplon.markdown.para_node.call(null,G__260151,G__260152));
})(),(function (){var G__260153 = cljs.core.PersistentArrayMap.EMPTY;
var G__260154 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This construct is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["case analysis"], null)], 0)),", and there is a special form in Lisp for notating such a case analysis. It is called ",(function (){var G__260155 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260156 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260155,G__260156) : tailrecursion.hoplon.markdown.code_node.call(null,G__260155,G__260156));
})()," (which stands for ",(function (){var G__260157 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260158 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["conditional"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260157,G__260158) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260157,G__260158));
})(),"), and it is used as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260153,G__260154) : tailrecursion.hoplon.markdown.para_node.call(null,G__260153,G__260154));
})(),(function (){var G__260159 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n") : tailrecursion.hoplon.code.call(null,"(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260159) : tailrecursion.hoplon.pre.call(null,G__260159));
})(),(function (){var G__260160 = cljs.core.PersistentArrayMap.EMPTY;
var G__260161 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a conditional expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260160,G__260161) : tailrecursion.hoplon.markdown.para_node.call(null,G__260160,G__260161));
})(),(function (){var G__260162 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n") : tailrecursion.hoplon.code.call(null,"(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260162) : tailrecursion.hoplon.pre.call(null,G__260162));
})(),(function (){var G__260163 = cljs.core.PersistentArrayMap.EMPTY;
var G__260164 = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consisting of the symbol cond followed by pairs of expressions <p> <e> called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clauses"], null)], 0)),". The first expression in each pair is a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," ",(function (){var G__260165 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__260166 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260165,G__260166) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260165,G__260166));
})()," that is, an expression whose value is interpreted as either ",(function (){var G__260167 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260168 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260167,G__260168) : tailrecursion.hoplon.markdown.code_node.call(null,G__260167,G__260168));
})()," or ",(function (){var G__260169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260170 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260169,G__260170) : tailrecursion.hoplon.markdown.code_node.call(null,G__260169,G__260170));
})(),".",(function (){var G__260171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260172 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260174 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Interpreted as either true or false"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260173,G__260174) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260173,G__260174));
})()," means this: In Scheme, there are two distinguished values that are denoted by the constants ",(function (){var G__260175 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260176 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260175,G__260176) : tailrecursion.hoplon.markdown.code_node.call(null,G__260175,G__260176));
})()," and ",(function (){var G__260177 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260178 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260177,G__260178) : tailrecursion.hoplon.markdown.code_node.call(null,G__260177,G__260178));
})(),". When the interpreter checks a predicate",(function (){var G__260179 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260180 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260179,G__260180) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260179,G__260180));
})(),"s value, it interprets",(function (){var G__260181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260182 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260181,G__260182) : tailrecursion.hoplon.markdown.code_node.call(null,G__260181,G__260182));
})()," and ",(function (){var G__260183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"nil"], null);
var G__260184 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260183,G__260184) : tailrecursion.hoplon.markdown.code_node.call(null,G__260183,G__260184));
})()," as false. Any other value is treated as true. (Thus, providing ",(function (){var G__260185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260186 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260185,G__260186) : tailrecursion.hoplon.markdown.code_node.call(null,G__260185,G__260186));
})()," is logically unnecessary, but it is convenient.)"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260171,G__260172) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260171,G__260172));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260163,G__260164) : tailrecursion.hoplon.markdown.para_node.call(null,G__260163,G__260164));
})(),(function (){var G__260187 = cljs.core.PersistentArrayMap.EMPTY;
var G__260188 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Conditional expressions are evaluated as follows. The predicate <p1> is evaluated first. If its value is false, then <p2> is evaluated. If <p2>",(function (){var G__260189 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260190 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260189,G__260190) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260189,G__260190));
})(),"s value is also false, then <p3> is evaluated. This process continues until a predicate is found whose value is true, in which case the interpreter returns the value of the corresponding ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consequent expression"], null)], 0))," <e> of the clause as the value of the conditional expression. If none of the <p>",(function (){var G__260191 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260192 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260191,G__260192) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260191,G__260192));
})(),"s is found to be true, the value of the ",(function (){var G__260193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260194 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260193,G__260194) : tailrecursion.hoplon.markdown.code_node.call(null,G__260193,G__260194));
})()," is undefined."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260187,G__260188) : tailrecursion.hoplon.markdown.para_node.call(null,G__260187,G__260188));
})(),(function (){var G__260195 = cljs.core.PersistentArrayMap.EMPTY;
var G__260196 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The word ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," is used for procedures that return ",(function (){var G__260197 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260198 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260197,G__260198) : tailrecursion.hoplon.markdown.code_node.call(null,G__260197,G__260198));
})()," or ",(function (){var G__260199 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260200 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260199,G__260200) : tailrecursion.hoplon.markdown.code_node.call(null,G__260199,G__260200));
})(),", as well as for expressions that evaluate to ",(function (){var G__260201 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__260202 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260201,G__260202) : tailrecursion.hoplon.markdown.code_node.call(null,G__260201,G__260202));
})()," or ",(function (){var G__260203 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__260204 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260203,G__260204) : tailrecursion.hoplon.markdown.code_node.call(null,G__260203,G__260204));
})(),". The absolute-value procedure ",(function (){var G__260205 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__260206 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260205,G__260206) : tailrecursion.hoplon.markdown.code_node.call(null,G__260205,G__260206));
})()," makes use of the primitive predicates >, <, and =.",(function (){var G__260207 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260208 = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260209 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Abs"], null);
var G__260210 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260209,G__260210) : tailrecursion.hoplon.markdown.code_node.call(null,G__260209,G__260210));
})()," also uses the ",(function (){var G__260211 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260212 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["minus"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260211,G__260212) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260211,G__260212));
})()," operator ",(function (){var G__260213 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__260214 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260213,G__260214) : tailrecursion.hoplon.markdown.code_node.call(null,G__260213,G__260214));
})(),", which, when used with a single operand, as in ",(function (){var G__260215 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- x)"], null);
var G__260216 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260215,G__260216) : tailrecursion.hoplon.markdown.code_node.call(null,G__260215,G__260216));
})(),", indicates negation."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260207,G__260208) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260207,G__260208));
})()," These take two numbers as arguments and test whether the first number is, respectively, greater than, less than, or equal to the second number, returning true or false accordingly."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260195,G__260196) : tailrecursion.hoplon.markdown.para_node.call(null,G__260195,G__260196));
})(),(function (){var G__260217 = cljs.core.PersistentArrayMap.EMPTY;
var G__260218 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Another way to write the absolute-value procedure is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260217,G__260218) : tailrecursion.hoplon.markdown.para_node.call(null,G__260217,G__260218));
})(),(function (){var G__260264 = (function (){var G__260265 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260266 = (function (){var G__260267 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260268 = "(";
var G__260269 = (function (){var G__260288 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260289 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260288,G__260289) : tailrecursion.hoplon.span.call(null,G__260288,G__260289));
})();
var G__260270 = (function (){var G__260290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260291 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260290,G__260291) : tailrecursion.hoplon.span.call(null,G__260290,G__260291));
})();
var G__260271 = " [";
var G__260272 = (function (){var G__260292 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260293 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260292,G__260293) : tailrecursion.hoplon.span.call(null,G__260292,G__260293));
})();
var G__260273 = "]\n  (";
var G__260274 = (function (){var G__260294 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260295 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260294,G__260295) : tailrecursion.hoplon.span.call(null,G__260294,G__260295));
})();
var G__260275 = "(";
var G__260276 = (function (){var G__260296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260297 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260296,G__260297) : tailrecursion.hoplon.span.call(null,G__260296,G__260297));
})();
var G__260277 = (function (){var G__260298 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260299 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260298,G__260299) : tailrecursion.hoplon.span.call(null,G__260298,G__260299));
})();
var G__260278 = " ";
var G__260279 = (function (){var G__260300 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260301 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260300,G__260301) : tailrecursion.hoplon.span.call(null,G__260300,G__260301));
})();
var G__260280 = ") (";
var G__260281 = (function (){var G__260302 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260303 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260302,G__260303) : tailrecursion.hoplon.span.call(null,G__260302,G__260303));
})();
var G__260282 = (function (){var G__260304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260305 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260304,G__260305) : tailrecursion.hoplon.span.call(null,G__260304,G__260305));
})();
var G__260283 = ")\n        ";
var G__260284 = (function (){var G__260306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260307 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260306,G__260307) : tailrecursion.hoplon.span.call(null,G__260306,G__260307));
})();
var G__260285 = " ";
var G__260286 = (function (){var G__260308 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260309 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260308,G__260309) : tailrecursion.hoplon.span.call(null,G__260308,G__260309));
})();
var G__260287 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__260267,G__260268,G__260269,G__260270,G__260271,G__260272,G__260273,G__260274,G__260275,G__260276,G__260277,G__260278,G__260279,G__260280,G__260281,G__260282,G__260283,G__260284,G__260285,G__260286,G__260287) : tailrecursion.hoplon.pre.call(null,G__260267,G__260268,G__260269,G__260270,G__260271,G__260272,G__260273,G__260274,G__260275,G__260276,G__260277,G__260278,G__260279,G__260280,G__260281,G__260282,G__260283,G__260284,G__260285,G__260286,G__260287));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260265,G__260266) : tailrecursion.hoplon.div.call(null,G__260265,G__260266));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260264) : tailrecursion.hoplon.div.call(null,G__260264));
})(),(function (){var G__260310 = cljs.core.PersistentArrayMap.EMPTY;
var G__260311 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which could be expressed in English as ",(function (){var G__260312 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__260313 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If x is less than zero return - x; otherwise return x."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260312,G__260313) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260312,G__260313));
})()," ",(function (){var G__260314 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,":else"], null);
var G__260315 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260314,G__260315) : tailrecursion.hoplon.markdown.code_node.call(null,G__260314,G__260315));
})()," is a special symbol that can be used in place of the <p> in the final clause of a ",(function (){var G__260316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260317 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260316,G__260317) : tailrecursion.hoplon.markdown.code_node.call(null,G__260316,G__260317));
})(),". This causes the ",(function (){var G__260318 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260319 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260318,G__260319) : tailrecursion.hoplon.markdown.code_node.call(null,G__260318,G__260319));
})()," to return as its value the value of the corresponding <e> whenever all previous clauses have been bypassed. In fact, any expression that always evaluates to a true value could be used as the <p> here."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260310,G__260311) : tailrecursion.hoplon.markdown.para_node.call(null,G__260310,G__260311));
})(),(function (){var G__260320 = cljs.core.PersistentArrayMap.EMPTY;
var G__260321 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here is yet another way to write the absolute-value procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260320,G__260321) : tailrecursion.hoplon.markdown.para_node.call(null,G__260320,G__260321));
})(),(function (){var G__260363 = (function (){var G__260364 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260365 = (function (){var G__260366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260367 = "(";
var G__260368 = (function (){var G__260385 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260386 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260385,G__260386) : tailrecursion.hoplon.span.call(null,G__260385,G__260386));
})();
var G__260369 = (function (){var G__260387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260388 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260387,G__260388) : tailrecursion.hoplon.span.call(null,G__260387,G__260388));
})();
var G__260370 = " [";
var G__260371 = (function (){var G__260389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260390 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260389,G__260390) : tailrecursion.hoplon.span.call(null,G__260389,G__260390));
})();
var G__260372 = "]\n  (";
var G__260373 = (function (){var G__260391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260392 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260391,G__260392) : tailrecursion.hoplon.span.call(null,G__260391,G__260392));
})();
var G__260374 = "(";
var G__260375 = (function (){var G__260393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260394 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260393,G__260394) : tailrecursion.hoplon.span.call(null,G__260393,G__260394));
})();
var G__260376 = (function (){var G__260395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260396 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260395,G__260396) : tailrecursion.hoplon.span.call(null,G__260395,G__260396));
})();
var G__260377 = " ";
var G__260378 = (function (){var G__260397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260398 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260397,G__260398) : tailrecursion.hoplon.span.call(null,G__260397,G__260398));
})();
var G__260379 = ")\n      (";
var G__260380 = (function (){var G__260399 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260400 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260399,G__260400) : tailrecursion.hoplon.span.call(null,G__260399,G__260400));
})();
var G__260381 = (function (){var G__260401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260402 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260401,G__260402) : tailrecursion.hoplon.span.call(null,G__260401,G__260402));
})();
var G__260382 = ")\n      ";
var G__260383 = (function (){var G__260403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260404 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260403,G__260404) : tailrecursion.hoplon.span.call(null,G__260403,G__260404));
})();
var G__260384 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__260366,G__260367,G__260368,G__260369,G__260370,G__260371,G__260372,G__260373,G__260374,G__260375,G__260376,G__260377,G__260378,G__260379,G__260380,G__260381,G__260382,G__260383,G__260384) : tailrecursion.hoplon.pre.call(null,G__260366,G__260367,G__260368,G__260369,G__260370,G__260371,G__260372,G__260373,G__260374,G__260375,G__260376,G__260377,G__260378,G__260379,G__260380,G__260381,G__260382,G__260383,G__260384));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260364,G__260365) : tailrecursion.hoplon.div.call(null,G__260364,G__260365));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260363) : tailrecursion.hoplon.div.call(null,G__260363));
})(),(function (){var G__260405 = cljs.core.PersistentArrayMap.EMPTY;
var G__260406 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This uses the special form ",(function (){var G__260407 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260408 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260407,G__260408) : tailrecursion.hoplon.markdown.code_node.call(null,G__260407,G__260408));
})(),", a restricted type of conditional that can be used when there are precisely two cases in the case analysis. The general form of an ",(function (){var G__260409 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260410 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260409,G__260410) : tailrecursion.hoplon.markdown.code_node.call(null,G__260409,G__260410));
})()," expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260405,G__260406) : tailrecursion.hoplon.markdown.para_node.call(null,G__260405,G__260406));
})(),(function (){var G__260430 = (function (){var G__260431 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260432 = (function (){var G__260433 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260434 = "(";
var G__260435 = (function (){var G__260442 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260443 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260442,G__260443) : tailrecursion.hoplon.span.call(null,G__260442,G__260443));
})();
var G__260436 = (function (){var G__260444 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260445 = "<predicate>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260444,G__260445) : tailrecursion.hoplon.span.call(null,G__260444,G__260445));
})();
var G__260437 = " ";
var G__260438 = (function (){var G__260446 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260447 = "<consequent>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260446,G__260447) : tailrecursion.hoplon.span.call(null,G__260446,G__260447));
})();
var G__260439 = " ";
var G__260440 = (function (){var G__260448 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260449 = "<alternative>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260448,G__260449) : tailrecursion.hoplon.span.call(null,G__260448,G__260449));
})();
var G__260441 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__260433,G__260434,G__260435,G__260436,G__260437,G__260438,G__260439,G__260440,G__260441) : tailrecursion.hoplon.pre.call(null,G__260433,G__260434,G__260435,G__260436,G__260437,G__260438,G__260439,G__260440,G__260441));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260431,G__260432) : tailrecursion.hoplon.div.call(null,G__260431,G__260432));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260430) : tailrecursion.hoplon.div.call(null,G__260430));
})(),(function (){var G__260450 = cljs.core.PersistentArrayMap.EMPTY;
var G__260451 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate an ",(function (){var G__260452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260453 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260452,G__260453) : tailrecursion.hoplon.markdown.code_node.call(null,G__260452,G__260453));
})()," expression, the interpreter starts by evaluating the <predicate> part of the expression. If the <predicate> evaluates to a true value, the interpreter then evaluates the <consequent> and returns its value. Otherwise it evaluates the <alternative> and returns its value.",(function (){var G__260454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__260455 = new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In Scheme, a minor difference between ",(function (){var G__260456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260457 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260456,G__260457) : tailrecursion.hoplon.markdown.code_node.call(null,G__260456,G__260457));
})()," and ",(function (){var G__260458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260459 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260458,G__260459) : tailrecursion.hoplon.markdown.code_node.call(null,G__260458,G__260459));
})()," is that the ",(function (){var G__260460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__260461 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260460,G__260461) : tailrecursion.hoplon.markdown.code_node.call(null,G__260460,G__260461));
})()," part of each ",(function (){var G__260462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260463 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260462,G__260463) : tailrecursion.hoplon.markdown.code_node.call(null,G__260462,G__260463));
})()," clause may be a sequence of expressions. If the corresponding ",(function (){var G__260464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<p>"], null);
var G__260465 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260464,G__260465) : tailrecursion.hoplon.markdown.code_node.call(null,G__260464,G__260465));
})()," is found to be true, the expressions ",(function (){var G__260466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__260467 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260466,G__260467) : tailrecursion.hoplon.markdown.code_node.call(null,G__260466,G__260467));
})()," are evaluated in sequence and the value of the final expression in the sequence is returned as the value of the ",(function (){var G__260468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__260469 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260468,G__260469) : tailrecursion.hoplon.markdown.code_node.call(null,G__260468,G__260469));
})(),". In an ",(function (){var G__260470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__260471 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260470,G__260471) : tailrecursion.hoplon.markdown.code_node.call(null,G__260470,G__260471));
})()," expression, however, the ",(function (){var G__260472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<consequent>"], null);
var G__260473 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260472,G__260473) : tailrecursion.hoplon.markdown.code_node.call(null,G__260472,G__260473));
})()," and ",(function (){var G__260474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<alternative>"], null);
var G__260475 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260474,G__260475) : tailrecursion.hoplon.markdown.code_node.call(null,G__260474,G__260475));
})()," must be single expressions. In Clojure, however, these must all be single expressioins. To get a similar functionality one could use ",(function (){var G__260476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"do"], null);
var G__260477 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260476,G__260477) : tailrecursion.hoplon.markdown.code_node.call(null,G__260476,G__260477));
})(),"."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__260454,G__260455) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__260454,G__260455));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260450,G__260451) : tailrecursion.hoplon.markdown.para_node.call(null,G__260450,G__260451));
})(),(function (){var G__260478 = cljs.core.PersistentArrayMap.EMPTY;
var G__260479 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In addition to primitive predicates such as <, =, and >, there are logical composition operations, which enable us to construct compound predicates. The three most frequently used are these:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260478,G__260479) : tailrecursion.hoplon.markdown.para_node.call(null,G__260478,G__260479));
})(),(function (){var G__260480 = cljs.core.PersistentArrayMap.EMPTY;
var G__260481 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260482 = cljs.core.PersistentArrayMap.EMPTY;
var G__260483 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260484 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260485 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__260486 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (and <e1> ... <en>)\n"], null);
var G__260487 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260486,G__260487) : tailrecursion.hoplon.markdown.code_node.call(null,G__260486,G__260487));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260485;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260484;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260482,G__260483) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260482,G__260483));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260480,G__260481) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260480,G__260481));
})(),(function (){var G__260488 = cljs.core.PersistentArrayMap.EMPTY;
var G__260489 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to false, the value of the  ",(function (){var G__260490 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__260491 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260490,G__260491) : tailrecursion.hoplon.markdown.code_node.call(null,G__260490,G__260491));
})()," expression is false, and the rest of the <e>",(function (){var G__260492 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260493 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260492,G__260493) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260492,G__260493));
})(),"s are not  evaluated. If all <e>",(function (){var G__260494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260495 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260494,G__260495) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260494,G__260495));
})(),"s evaluate to true values, the value of the and  expression is the value of the last one."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260488,G__260489) : tailrecursion.hoplon.markdown.para_node.call(null,G__260488,G__260489));
})(),(function (){var G__260496 = cljs.core.PersistentArrayMap.EMPTY;
var G__260497 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260498 = cljs.core.PersistentArrayMap.EMPTY;
var G__260499 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260500 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260501 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__260502 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (or <e1> ... <en>)\n"], null);
var G__260503 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260502,G__260503) : tailrecursion.hoplon.markdown.code_node.call(null,G__260502,G__260503));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260501;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260500;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260498,G__260499) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260498,G__260499));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260496,G__260497) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260496,G__260497));
})(),(function (){var G__260504 = cljs.core.PersistentArrayMap.EMPTY;
var G__260505 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to a true value, that value  is returned as the value of the or expression, and the rest of the  <e>",(function (){var G__260506 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260507 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260506,G__260507) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260506,G__260507));
})(),"s are not evaluated. If all <e>",(function (){var G__260508 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__260509 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__260508,G__260509) : tailrecursion.hoplon.markdown.simple_node.call(null,G__260508,G__260509));
})(),"s evaluate to false, the value of  the ",(function (){var G__260510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__260511 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260510,G__260511) : tailrecursion.hoplon.markdown.code_node.call(null,G__260510,G__260511));
})()," expression is false."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260504,G__260505) : tailrecursion.hoplon.markdown.para_node.call(null,G__260504,G__260505));
})(),(function (){var G__260512 = cljs.core.PersistentArrayMap.EMPTY;
var G__260513 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260514 = cljs.core.PersistentArrayMap.EMPTY;
var G__260515 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_260516 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260517 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__260518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (not <e>)\n"], null);
var G__260519 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260518,G__260519) : tailrecursion.hoplon.markdown.code_node.call(null,G__260518,G__260519));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260517;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260516;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__260514,G__260515) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__260514,G__260515));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__260512,G__260513) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__260512,G__260513));
})(),(function (){var G__260520 = cljs.core.PersistentArrayMap.EMPTY;
var G__260521 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The value of a ",(function (){var G__260522 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__260523 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260522,G__260523) : tailrecursion.hoplon.markdown.code_node.call(null,G__260522,G__260523));
})()," expression is true when the expression <e>  evaluates to false, and false otherwise."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260520,G__260521) : tailrecursion.hoplon.markdown.para_node.call(null,G__260520,G__260521));
})(),(function (){var G__260524 = cljs.core.PersistentArrayMap.EMPTY;
var G__260525 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that ",(function (){var G__260526 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__260527 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260526,G__260527) : tailrecursion.hoplon.markdown.code_node.call(null,G__260526,G__260527));
})()," and ",(function (){var G__260528 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__260529 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260528,G__260529) : tailrecursion.hoplon.markdown.code_node.call(null,G__260528,G__260529));
})()," are special forms, not procedures, because the subexpressions are not necessarily all evaluated. ",(function (){var G__260530 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__260531 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__260530,G__260531) : tailrecursion.hoplon.markdown.code_node.call(null,G__260530,G__260531));
})()," is an ordinary procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260524,G__260525) : tailrecursion.hoplon.markdown.para_node.call(null,G__260524,G__260525));
})(),(function (){var G__260532 = cljs.core.PersistentArrayMap.EMPTY;
var G__260533 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As an example of how these are used, the condition that a number x be in the range \\(5 \\lt x \\lt 10\\) may be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260532,G__260533) : tailrecursion.hoplon.markdown.para_node.call(null,G__260532,G__260533));
})(),(function (){var G__260564 = (function (){var G__260565 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260566 = (function (){var G__260567 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260568 = "(";
var G__260569 = (function (){var G__260581 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260582 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260581,G__260582) : tailrecursion.hoplon.span.call(null,G__260581,G__260582));
})();
var G__260570 = "(";
var G__260571 = (function (){var G__260583 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260584 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260583,G__260584) : tailrecursion.hoplon.span.call(null,G__260583,G__260584));
})();
var G__260572 = (function (){var G__260585 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260586 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260585,G__260586) : tailrecursion.hoplon.span.call(null,G__260585,G__260586));
})();
var G__260573 = " ";
var G__260574 = (function (){var G__260587 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260588 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260587,G__260588) : tailrecursion.hoplon.span.call(null,G__260587,G__260588));
})();
var G__260575 = ") (";
var G__260576 = (function (){var G__260589 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260590 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260589,G__260590) : tailrecursion.hoplon.span.call(null,G__260589,G__260590));
})();
var G__260577 = (function (){var G__260591 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260592 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260591,G__260592) : tailrecursion.hoplon.span.call(null,G__260591,G__260592));
})();
var G__260578 = " ";
var G__260579 = (function (){var G__260593 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260594 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260593,G__260594) : tailrecursion.hoplon.span.call(null,G__260593,G__260594));
})();
var G__260580 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__260567,G__260568,G__260569,G__260570,G__260571,G__260572,G__260573,G__260574,G__260575,G__260576,G__260577,G__260578,G__260579,G__260580) : tailrecursion.hoplon.pre.call(null,G__260567,G__260568,G__260569,G__260570,G__260571,G__260572,G__260573,G__260574,G__260575,G__260576,G__260577,G__260578,G__260579,G__260580));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260565,G__260566) : tailrecursion.hoplon.div.call(null,G__260565,G__260566));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260564) : tailrecursion.hoplon.div.call(null,G__260564));
})(),(function (){var G__260595 = cljs.core.PersistentArrayMap.EMPTY;
var G__260596 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As another example, we can define a predicate to test whether one number is greater than or equal to another as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260595,G__260596) : tailrecursion.hoplon.markdown.para_node.call(null,G__260595,G__260596));
})(),(function (){var G__260642 = (function (){var G__260643 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260644 = (function (){var G__260645 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260646 = "(";
var G__260647 = (function (){var G__260666 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260667 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260666,G__260667) : tailrecursion.hoplon.span.call(null,G__260666,G__260667));
})();
var G__260648 = (function (){var G__260668 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260669 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260668,G__260669) : tailrecursion.hoplon.span.call(null,G__260668,G__260669));
})();
var G__260649 = "[";
var G__260650 = (function (){var G__260670 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260671 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260670,G__260671) : tailrecursion.hoplon.span.call(null,G__260670,G__260671));
})();
var G__260651 = " ";
var G__260652 = (function (){var G__260672 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260673 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260672,G__260673) : tailrecursion.hoplon.span.call(null,G__260672,G__260673));
})();
var G__260653 = "] \n  (";
var G__260654 = (function (){var G__260674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260675 = "or ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260674,G__260675) : tailrecursion.hoplon.span.call(null,G__260674,G__260675));
})();
var G__260655 = "(";
var G__260656 = (function (){var G__260676 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260677 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260676,G__260677) : tailrecursion.hoplon.span.call(null,G__260676,G__260677));
})();
var G__260657 = (function (){var G__260678 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260679 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260678,G__260679) : tailrecursion.hoplon.span.call(null,G__260678,G__260679));
})();
var G__260658 = " ";
var G__260659 = (function (){var G__260680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260681 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260680,G__260681) : tailrecursion.hoplon.span.call(null,G__260680,G__260681));
})();
var G__260660 = ") (";
var G__260661 = (function (){var G__260682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260683 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260682,G__260683) : tailrecursion.hoplon.span.call(null,G__260682,G__260683));
})();
var G__260662 = (function (){var G__260684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260685 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260684,G__260685) : tailrecursion.hoplon.span.call(null,G__260684,G__260685));
})();
var G__260663 = " ";
var G__260664 = (function (){var G__260686 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260687 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260686,G__260687) : tailrecursion.hoplon.span.call(null,G__260686,G__260687));
})();
var G__260665 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__260645,G__260646,G__260647,G__260648,G__260649,G__260650,G__260651,G__260652,G__260653,G__260654,G__260655,G__260656,G__260657,G__260658,G__260659,G__260660,G__260661,G__260662,G__260663,G__260664,G__260665) : tailrecursion.hoplon.pre.call(null,G__260645,G__260646,G__260647,G__260648,G__260649,G__260650,G__260651,G__260652,G__260653,G__260654,G__260655,G__260656,G__260657,G__260658,G__260659,G__260660,G__260661,G__260662,G__260663,G__260664,G__260665));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260643,G__260644) : tailrecursion.hoplon.div.call(null,G__260643,G__260644));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260642) : tailrecursion.hoplon.div.call(null,G__260642));
})(),(function (){var G__260688 = cljs.core.PersistentArrayMap.EMPTY;
var G__260689 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["or alternatively as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260688,G__260689) : tailrecursion.hoplon.markdown.para_node.call(null,G__260688,G__260689));
})(),(function (){var G__260724 = (function (){var G__260725 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260726 = (function (){var G__260727 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260728 = "(";
var G__260729 = (function (){var G__260743 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__260744 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260743,G__260744) : tailrecursion.hoplon.span.call(null,G__260743,G__260744));
})();
var G__260730 = (function (){var G__260745 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260746 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260745,G__260746) : tailrecursion.hoplon.span.call(null,G__260745,G__260746));
})();
var G__260731 = "[";
var G__260732 = (function (){var G__260747 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260748 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260747,G__260748) : tailrecursion.hoplon.span.call(null,G__260747,G__260748));
})();
var G__260733 = " ";
var G__260734 = (function (){var G__260749 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260750 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260749,G__260750) : tailrecursion.hoplon.span.call(null,G__260749,G__260750));
})();
var G__260735 = "]\n  (";
var G__260736 = (function (){var G__260751 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260752 = "not ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260751,G__260752) : tailrecursion.hoplon.span.call(null,G__260751,G__260752));
})();
var G__260737 = "(";
var G__260738 = (function (){var G__260753 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260754 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260753,G__260754) : tailrecursion.hoplon.span.call(null,G__260753,G__260754));
})();
var G__260739 = (function (){var G__260755 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260756 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260755,G__260756) : tailrecursion.hoplon.span.call(null,G__260755,G__260756));
})();
var G__260740 = " ";
var G__260741 = (function (){var G__260757 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__260758 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260757,G__260758) : tailrecursion.hoplon.span.call(null,G__260757,G__260758));
})();
var G__260742 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__260727,G__260728,G__260729,G__260730,G__260731,G__260732,G__260733,G__260734,G__260735,G__260736,G__260737,G__260738,G__260739,G__260740,G__260741,G__260742) : tailrecursion.hoplon.pre.call(null,G__260727,G__260728,G__260729,G__260730,G__260731,G__260732,G__260733,G__260734,G__260735,G__260736,G__260737,G__260738,G__260739,G__260740,G__260741,G__260742));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260725,G__260726) : tailrecursion.hoplon.div.call(null,G__260725,G__260726));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260724) : tailrecursion.hoplon.div.call(null,G__260724));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260148;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260147;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260146;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260145;
}})()], 0));
var G__258249 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_260759 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260760 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260761 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260762 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260763 = cljs.core.PersistentArrayMap.EMPTY;
var G__260764 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__260763,G__260764) : tailrecursion.hoplon.markdown.para_node.call(null,G__260763,G__260764));
})(),(function (){var G__260772 = (function (){var G__260773 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260774 = (function (){var G__260775 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260776 = (function (){var G__260778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260779 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260778,G__260779) : tailrecursion.hoplon.span.call(null,G__260778,G__260779));
})();
var G__260777 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3(G__260775,G__260776,G__260777) : tailrecursion.hoplon.pre.call(null,G__260775,G__260776,G__260777));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260773,G__260774) : tailrecursion.hoplon.div.call(null,G__260773,G__260774));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260772) : tailrecursion.hoplon.div.call(null,G__260772));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260762;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260761;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260760;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260759;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_260780 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260781 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260782 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260783 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260784 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("10\n") : tailrecursion.hoplon.code.call(null,"10\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260784) : tailrecursion.hoplon.pre.call(null,G__260784));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260783;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260782;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260781;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260780;
}})()], 0)),"",(function (){var _STAR_references_STAR_260785 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260786 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260787 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260788 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260808 = (function (){var G__260809 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260810 = (function (){var G__260811 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260812 = "(";
var G__260813 = (function (){var G__260820 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260821 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260820,G__260821) : tailrecursion.hoplon.span.call(null,G__260820,G__260821));
})();
var G__260814 = (function (){var G__260822 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260823 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260822,G__260823) : tailrecursion.hoplon.span.call(null,G__260822,G__260823));
})();
var G__260815 = " ";
var G__260816 = (function (){var G__260824 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260825 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260824,G__260825) : tailrecursion.hoplon.span.call(null,G__260824,G__260825));
})();
var G__260817 = " ";
var G__260818 = (function (){var G__260826 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260827 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260826,G__260827) : tailrecursion.hoplon.span.call(null,G__260826,G__260827));
})();
var G__260819 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__260811,G__260812,G__260813,G__260814,G__260815,G__260816,G__260817,G__260818,G__260819) : tailrecursion.hoplon.pre.call(null,G__260811,G__260812,G__260813,G__260814,G__260815,G__260816,G__260817,G__260818,G__260819));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260809,G__260810) : tailrecursion.hoplon.div.call(null,G__260809,G__260810));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260808) : tailrecursion.hoplon.div.call(null,G__260808));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260788;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260787;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260786;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260785;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_260828 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260829 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260830 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260831 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260832 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("12\n") : tailrecursion.hoplon.code.call(null,"12\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260832) : tailrecursion.hoplon.pre.call(null,G__260832));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260831;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260830;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260829;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260828;
}})()], 0)),"",(function (){var _STAR_references_STAR_260833 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260834 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260835 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260836 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260852 = (function (){var G__260853 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260854 = (function (){var G__260855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260856 = "(";
var G__260857 = (function (){var G__260862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260863 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260862,G__260863) : tailrecursion.hoplon.span.call(null,G__260862,G__260863));
})();
var G__260858 = (function (){var G__260864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260865 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260864,G__260865) : tailrecursion.hoplon.span.call(null,G__260864,G__260865));
})();
var G__260859 = " ";
var G__260860 = (function (){var G__260866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260867 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260866,G__260867) : tailrecursion.hoplon.span.call(null,G__260866,G__260867));
})();
var G__260861 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__260855,G__260856,G__260857,G__260858,G__260859,G__260860,G__260861) : tailrecursion.hoplon.pre.call(null,G__260855,G__260856,G__260857,G__260858,G__260859,G__260860,G__260861));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260853,G__260854) : tailrecursion.hoplon.div.call(null,G__260853,G__260854));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260852) : tailrecursion.hoplon.div.call(null,G__260852));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260836;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260835;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260834;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260833;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_260868 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260869 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260870 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260871 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260872 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("8\n") : tailrecursion.hoplon.code.call(null,"8\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260872) : tailrecursion.hoplon.pre.call(null,G__260872));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260871;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260870;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260869;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260868;
}})()], 0)),"",(function (){var _STAR_references_STAR_260873 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260874 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260875 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260876 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260892 = (function (){var G__260893 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260894 = (function (){var G__260895 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260896 = "(";
var G__260897 = (function (){var G__260902 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260903 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260902,G__260903) : tailrecursion.hoplon.span.call(null,G__260902,G__260903));
})();
var G__260898 = (function (){var G__260904 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260905 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260904,G__260905) : tailrecursion.hoplon.span.call(null,G__260904,G__260905));
})();
var G__260899 = " ";
var G__260900 = (function (){var G__260906 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260907 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260906,G__260907) : tailrecursion.hoplon.span.call(null,G__260906,G__260907));
})();
var G__260901 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__260895,G__260896,G__260897,G__260898,G__260899,G__260900,G__260901) : tailrecursion.hoplon.pre.call(null,G__260895,G__260896,G__260897,G__260898,G__260899,G__260900,G__260901));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260893,G__260894) : tailrecursion.hoplon.div.call(null,G__260893,G__260894));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260892) : tailrecursion.hoplon.div.call(null,G__260892));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260876;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260875;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260874;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260873;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_260908 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260909 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260910 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260911 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260912 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("3\n") : tailrecursion.hoplon.code.call(null,"3\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260912) : tailrecursion.hoplon.pre.call(null,G__260912));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260911;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260910;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260909;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260908;
}})()], 0)),"",(function (){var _STAR_references_STAR_260913 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260914 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260915 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260916 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260947 = (function (){var G__260948 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__260949 = (function (){var G__260950 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__260951 = "(";
var G__260952 = (function (){var G__260964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260965 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260964,G__260965) : tailrecursion.hoplon.span.call(null,G__260964,G__260965));
})();
var G__260953 = "(";
var G__260954 = (function (){var G__260966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260967 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260966,G__260967) : tailrecursion.hoplon.span.call(null,G__260966,G__260967));
})();
var G__260955 = (function (){var G__260968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260969 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260968,G__260969) : tailrecursion.hoplon.span.call(null,G__260968,G__260969));
})();
var G__260956 = " ";
var G__260957 = (function (){var G__260970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260971 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260970,G__260971) : tailrecursion.hoplon.span.call(null,G__260970,G__260971));
})();
var G__260958 = ") (";
var G__260959 = (function (){var G__260972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__260973 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260972,G__260973) : tailrecursion.hoplon.span.call(null,G__260972,G__260973));
})();
var G__260960 = (function (){var G__260974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260975 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260974,G__260975) : tailrecursion.hoplon.span.call(null,G__260974,G__260975));
})();
var G__260961 = " ";
var G__260962 = (function (){var G__260976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__260977 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__260976,G__260977) : tailrecursion.hoplon.span.call(null,G__260976,G__260977));
})();
var G__260963 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__260950,G__260951,G__260952,G__260953,G__260954,G__260955,G__260956,G__260957,G__260958,G__260959,G__260960,G__260961,G__260962,G__260963) : tailrecursion.hoplon.pre.call(null,G__260950,G__260951,G__260952,G__260953,G__260954,G__260955,G__260956,G__260957,G__260958,G__260959,G__260960,G__260961,G__260962,G__260963));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__260948,G__260949) : tailrecursion.hoplon.div.call(null,G__260948,G__260949));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__260947) : tailrecursion.hoplon.div.call(null,G__260947));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260916;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260915;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260914;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260913;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_260978 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260979 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260980 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260981 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__260982 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("6\n") : tailrecursion.hoplon.code.call(null,"6\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__260982) : tailrecursion.hoplon.pre.call(null,G__260982));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260981;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260980;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260979;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260978;
}})()], 0)),"",(function (){var _STAR_references_STAR_260983 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260984 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_260985 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_260986 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261002 = (function (){var G__261003 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261004 = (function (){var G__261005 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261006 = "(";
var G__261007 = (function (){var G__261012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__261013 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261012,G__261013) : tailrecursion.hoplon.span.call(null,G__261012,G__261013));
})();
var G__261008 = (function (){var G__261014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261015 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261014,G__261015) : tailrecursion.hoplon.span.call(null,G__261014,G__261015));
})();
var G__261009 = " ";
var G__261010 = (function (){var G__261016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261017 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261016,G__261017) : tailrecursion.hoplon.span.call(null,G__261016,G__261017));
})();
var G__261011 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__261005,G__261006,G__261007,G__261008,G__261009,G__261010,G__261011) : tailrecursion.hoplon.pre.call(null,G__261005,G__261006,G__261007,G__261008,G__261009,G__261010,G__261011));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261003,G__261004) : tailrecursion.hoplon.div.call(null,G__261003,G__261004));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261002) : tailrecursion.hoplon.div.call(null,G__261002));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260986;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260985;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_260984;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_260983;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261018 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261019 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261020 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261021 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261022 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("a\n") : tailrecursion.hoplon.code.call(null,"a\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261022) : tailrecursion.hoplon.pre.call(null,G__261022));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261021;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261020;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261019;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261018;
}})()], 0)),"",(function (){var _STAR_references_STAR_261023 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261024 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261025 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261026 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261049 = (function (){var G__261050 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261051 = (function (){var G__261052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261053 = "(";
var G__261054 = (function (){var G__261062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__261063 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261062,G__261063) : tailrecursion.hoplon.span.call(null,G__261062,G__261063));
})();
var G__261055 = (function (){var G__261064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261065 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261064,G__261065) : tailrecursion.hoplon.span.call(null,G__261064,G__261065));
})();
var G__261056 = " (";
var G__261057 = (function (){var G__261066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261067 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261066,G__261067) : tailrecursion.hoplon.span.call(null,G__261066,G__261067));
})();
var G__261058 = (function (){var G__261068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261069 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261068,G__261069) : tailrecursion.hoplon.span.call(null,G__261068,G__261069));
})();
var G__261059 = " ";
var G__261060 = (function (){var G__261070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261071 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261070,G__261071) : tailrecursion.hoplon.span.call(null,G__261070,G__261071));
})();
var G__261061 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10(G__261052,G__261053,G__261054,G__261055,G__261056,G__261057,G__261058,G__261059,G__261060,G__261061) : tailrecursion.hoplon.pre.call(null,G__261052,G__261053,G__261054,G__261055,G__261056,G__261057,G__261058,G__261059,G__261060,G__261061));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261050,G__261051) : tailrecursion.hoplon.div.call(null,G__261050,G__261051));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261049) : tailrecursion.hoplon.div.call(null,G__261049));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261026;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261025;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261024;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261023;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261072 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261073 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261074 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261075 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261076 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("b\n") : tailrecursion.hoplon.code.call(null,"b\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261076) : tailrecursion.hoplon.pre.call(null,G__261076));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261075;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261074;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261073;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261072;
}})()], 0)),"",(function (){var _STAR_references_STAR_261077 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261078 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261079 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261080 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261107 = (function (){var G__261108 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261109 = (function (){var G__261110 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261111 = "(";
var G__261112 = (function (){var G__261122 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261123 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261122,G__261123) : tailrecursion.hoplon.span.call(null,G__261122,G__261123));
})();
var G__261113 = (function (){var G__261124 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261125 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261124,G__261125) : tailrecursion.hoplon.span.call(null,G__261124,G__261125));
})();
var G__261114 = " ";
var G__261115 = (function (){var G__261126 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261127 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261126,G__261127) : tailrecursion.hoplon.span.call(null,G__261126,G__261127));
})();
var G__261116 = " (";
var G__261117 = (function (){var G__261128 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261129 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261128,G__261129) : tailrecursion.hoplon.span.call(null,G__261128,G__261129));
})();
var G__261118 = (function (){var G__261130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261131 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261130,G__261131) : tailrecursion.hoplon.span.call(null,G__261130,G__261131));
})();
var G__261119 = " ";
var G__261120 = (function (){var G__261132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261133 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261132,G__261133) : tailrecursion.hoplon.span.call(null,G__261132,G__261133));
})();
var G__261121 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__261110,G__261111,G__261112,G__261113,G__261114,G__261115,G__261116,G__261117,G__261118,G__261119,G__261120,G__261121) : tailrecursion.hoplon.pre.call(null,G__261110,G__261111,G__261112,G__261113,G__261114,G__261115,G__261116,G__261117,G__261118,G__261119,G__261120,G__261121));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261108,G__261109) : tailrecursion.hoplon.div.call(null,G__261108,G__261109));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261107) : tailrecursion.hoplon.div.call(null,G__261107));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261080;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261079;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261078;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261077;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261134 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261135 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261136 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261137 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261138 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("19\n") : tailrecursion.hoplon.code.call(null,"19\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261138) : tailrecursion.hoplon.pre.call(null,G__261138));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261137;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261136;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261135;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261134;
}})()], 0)),"",(function (){var _STAR_references_STAR_261139 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261140 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261141 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261142 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261158 = (function (){var G__261159 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261160 = (function (){var G__261161 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261162 = "(";
var G__261163 = (function (){var G__261168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261169 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261168,G__261169) : tailrecursion.hoplon.span.call(null,G__261168,G__261169));
})();
var G__261164 = (function (){var G__261170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261171 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261170,G__261171) : tailrecursion.hoplon.span.call(null,G__261170,G__261171));
})();
var G__261165 = " ";
var G__261166 = (function (){var G__261172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261173 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261172,G__261173) : tailrecursion.hoplon.span.call(null,G__261172,G__261173));
})();
var G__261167 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__261161,G__261162,G__261163,G__261164,G__261165,G__261166,G__261167) : tailrecursion.hoplon.pre.call(null,G__261161,G__261162,G__261163,G__261164,G__261165,G__261166,G__261167));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261159,G__261160) : tailrecursion.hoplon.div.call(null,G__261159,G__261160));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261158) : tailrecursion.hoplon.div.call(null,G__261158));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261142;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261141;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261140;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261139;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261174 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261175 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261176 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261177 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261178 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("false\n") : tailrecursion.hoplon.code.call(null,"false\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261178) : tailrecursion.hoplon.pre.call(null,G__261178));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261177;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261176;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261175;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261174;
}})()], 0)),"",(function (){var _STAR_references_STAR_261179 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261180 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261181 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261182 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261232 = (function (){var G__261233 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261234 = (function (){var G__261235 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261236 = "(";
var G__261237 = (function (){var G__261258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__261259 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261258,G__261259) : tailrecursion.hoplon.span.call(null,G__261258,G__261259));
})();
var G__261238 = "(";
var G__261239 = (function (){var G__261260 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261261 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261260,G__261261) : tailrecursion.hoplon.span.call(null,G__261260,G__261261));
})();
var G__261240 = "(";
var G__261241 = (function (){var G__261262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261263 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261262,G__261263) : tailrecursion.hoplon.span.call(null,G__261262,G__261263));
})();
var G__261242 = (function (){var G__261264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261265 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261264,G__261265) : tailrecursion.hoplon.span.call(null,G__261264,G__261265));
})();
var G__261243 = " ";
var G__261244 = (function (){var G__261266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261267 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261266,G__261267) : tailrecursion.hoplon.span.call(null,G__261266,G__261267));
})();
var G__261245 = ") (";
var G__261246 = (function (){var G__261268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261269 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261268,G__261269) : tailrecursion.hoplon.span.call(null,G__261268,G__261269));
})();
var G__261247 = (function (){var G__261270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261271 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261270,G__261271) : tailrecursion.hoplon.span.call(null,G__261270,G__261271));
})();
var G__261248 = " (";
var G__261249 = (function (){var G__261272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261273 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261272,G__261273) : tailrecursion.hoplon.span.call(null,G__261272,G__261273));
})();
var G__261250 = (function (){var G__261274 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261275 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261274,G__261275) : tailrecursion.hoplon.span.call(null,G__261274,G__261275));
})();
var G__261251 = " ";
var G__261252 = (function (){var G__261276 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261277 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261276,G__261277) : tailrecursion.hoplon.span.call(null,G__261276,G__261277));
})();
var G__261253 = ")))\n    ";
var G__261254 = (function (){var G__261278 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261279 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261278,G__261279) : tailrecursion.hoplon.span.call(null,G__261278,G__261279));
})();
var G__261255 = "\n    ";
var G__261256 = (function (){var G__261280 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261281 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261280,G__261281) : tailrecursion.hoplon.span.call(null,G__261280,G__261281));
})();
var G__261257 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__261235,G__261236,G__261237,G__261238,G__261239,G__261240,G__261241,G__261242,G__261243,G__261244,G__261245,G__261246,G__261247,G__261248,G__261249,G__261250,G__261251,G__261252,G__261253,G__261254,G__261255,G__261256,G__261257) : tailrecursion.hoplon.pre.call(null,G__261235,G__261236,G__261237,G__261238,G__261239,G__261240,G__261241,G__261242,G__261243,G__261244,G__261245,G__261246,G__261247,G__261248,G__261249,G__261250,G__261251,G__261252,G__261253,G__261254,G__261255,G__261256,G__261257));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261233,G__261234) : tailrecursion.hoplon.div.call(null,G__261233,G__261234));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261232) : tailrecursion.hoplon.div.call(null,G__261232));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261182;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261181;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261180;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261179;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261282 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261283 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261284 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261285 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261286 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("4\n") : tailrecursion.hoplon.code.call(null,"4\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261286) : tailrecursion.hoplon.pre.call(null,G__261286));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261285;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261284;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261283;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261282;
}})()], 0)),"",(function (){var _STAR_references_STAR_261287 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261288 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261289 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261290 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261348 = (function (){var G__261349 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261350 = (function (){var G__261351 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261352 = "(";
var G__261353 = (function (){var G__261378 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261379 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261378,G__261379) : tailrecursion.hoplon.span.call(null,G__261378,G__261379));
})();
var G__261354 = "(";
var G__261355 = (function (){var G__261380 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261381 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261380,G__261381) : tailrecursion.hoplon.span.call(null,G__261380,G__261381));
})();
var G__261356 = (function (){var G__261382 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261383 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261382,G__261383) : tailrecursion.hoplon.span.call(null,G__261382,G__261383));
})();
var G__261357 = " ";
var G__261358 = (function (){var G__261384 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261385 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261384,G__261385) : tailrecursion.hoplon.span.call(null,G__261384,G__261385));
})();
var G__261359 = ") ";
var G__261360 = (function (){var G__261386 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261387 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261386,G__261387) : tailrecursion.hoplon.span.call(null,G__261386,G__261387));
})();
var G__261361 = "\n      (";
var G__261362 = (function (){var G__261388 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261389 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261388,G__261389) : tailrecursion.hoplon.span.call(null,G__261388,G__261389));
})();
var G__261363 = (function (){var G__261390 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261391 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261390,G__261391) : tailrecursion.hoplon.span.call(null,G__261390,G__261391));
})();
var G__261364 = " ";
var G__261365 = (function (){var G__261392 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261393 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261392,G__261393) : tailrecursion.hoplon.span.call(null,G__261392,G__261393));
})();
var G__261366 = ") (";
var G__261367 = (function (){var G__261394 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261395 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261394,G__261395) : tailrecursion.hoplon.span.call(null,G__261394,G__261395));
})();
var G__261368 = (function (){var G__261396 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261397 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261396,G__261397) : tailrecursion.hoplon.span.call(null,G__261396,G__261397));
})();
var G__261369 = " ";
var G__261370 = (function (){var G__261398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261399 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261398,G__261399) : tailrecursion.hoplon.span.call(null,G__261398,G__261399));
})();
var G__261371 = " ";
var G__261372 = (function (){var G__261400 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261401 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261400,G__261401) : tailrecursion.hoplon.span.call(null,G__261400,G__261401));
})();
var G__261373 = ")\n      ";
var G__261374 = (function (){var G__261402 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261403 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261402,G__261403) : tailrecursion.hoplon.span.call(null,G__261402,G__261403));
})();
var G__261375 = " ";
var G__261376 = (function (){var G__261404 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261405 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261404,G__261405) : tailrecursion.hoplon.span.call(null,G__261404,G__261405));
})();
var G__261377 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__261351,G__261352,G__261353,G__261354,G__261355,G__261356,G__261357,G__261358,G__261359,G__261360,G__261361,G__261362,G__261363,G__261364,G__261365,G__261366,G__261367,G__261368,G__261369,G__261370,G__261371,G__261372,G__261373,G__261374,G__261375,G__261376,G__261377) : tailrecursion.hoplon.pre.call(null,G__261351,G__261352,G__261353,G__261354,G__261355,G__261356,G__261357,G__261358,G__261359,G__261360,G__261361,G__261362,G__261363,G__261364,G__261365,G__261366,G__261367,G__261368,G__261369,G__261370,G__261371,G__261372,G__261373,G__261374,G__261375,G__261376,G__261377));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261349,G__261350) : tailrecursion.hoplon.div.call(null,G__261349,G__261350));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261348) : tailrecursion.hoplon.div.call(null,G__261348));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261290;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261289;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261288;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261287;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261406 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261407 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261408 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261409 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261410 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261410) : tailrecursion.hoplon.pre.call(null,G__261410));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261409;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261408;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261407;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261406;
}})()], 0)),"",(function (){var _STAR_references_STAR_261411 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261412 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261413 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261414 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261449 = (function (){var G__261450 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261451 = (function (){var G__261452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261453 = "(";
var G__261454 = (function (){var G__261468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261469 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261468,G__261469) : tailrecursion.hoplon.span.call(null,G__261468,G__261469));
})();
var G__261455 = (function (){var G__261470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261471 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261470,G__261471) : tailrecursion.hoplon.span.call(null,G__261470,G__261471));
})();
var G__261456 = " (";
var G__261457 = (function (){var G__261472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__261473 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261472,G__261473) : tailrecursion.hoplon.span.call(null,G__261472,G__261473));
})();
var G__261458 = "(";
var G__261459 = (function (){var G__261474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261475 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261474,G__261475) : tailrecursion.hoplon.span.call(null,G__261474,G__261475));
})();
var G__261460 = (function (){var G__261476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261477 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261476,G__261477) : tailrecursion.hoplon.span.call(null,G__261476,G__261477));
})();
var G__261461 = " ";
var G__261462 = (function (){var G__261478 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261479 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261478,G__261479) : tailrecursion.hoplon.span.call(null,G__261478,G__261479));
})();
var G__261463 = ") ";
var G__261464 = (function (){var G__261480 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261481 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261480,G__261481) : tailrecursion.hoplon.span.call(null,G__261480,G__261481));
})();
var G__261465 = " ";
var G__261466 = (function (){var G__261482 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261483 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261482,G__261483) : tailrecursion.hoplon.span.call(null,G__261482,G__261483));
})();
var G__261467 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__261452,G__261453,G__261454,G__261455,G__261456,G__261457,G__261458,G__261459,G__261460,G__261461,G__261462,G__261463,G__261464,G__261465,G__261466,G__261467) : tailrecursion.hoplon.pre.call(null,G__261452,G__261453,G__261454,G__261455,G__261456,G__261457,G__261458,G__261459,G__261460,G__261461,G__261462,G__261463,G__261464,G__261465,G__261466,G__261467));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261450,G__261451) : tailrecursion.hoplon.div.call(null,G__261450,G__261451));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261449) : tailrecursion.hoplon.div.call(null,G__261449));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261414;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261413;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261412;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261411;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261484 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261485 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261486 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261487 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261488 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("5\n") : tailrecursion.hoplon.code.call(null,"5\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261488) : tailrecursion.hoplon.pre.call(null,G__261488));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261487;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261486;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261485;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261484;
}})()], 0)),"",(function (){var _STAR_references_STAR_261489 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261490 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261491 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261492 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261554 = (function (){var G__261555 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261556 = (function (){var G__261557 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261558 = "(";
var G__261559 = (function (){var G__261586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261587 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261586,G__261587) : tailrecursion.hoplon.span.call(null,G__261586,G__261587));
})();
var G__261560 = "(";
var G__261561 = (function (){var G__261588 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261589 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261588,G__261589) : tailrecursion.hoplon.span.call(null,G__261588,G__261589));
})();
var G__261562 = "(";
var G__261563 = (function (){var G__261590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261591 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261590,G__261591) : tailrecursion.hoplon.span.call(null,G__261590,G__261591));
})();
var G__261564 = (function (){var G__261592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261593 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261592,G__261593) : tailrecursion.hoplon.span.call(null,G__261592,G__261593));
})();
var G__261565 = " ";
var G__261566 = (function (){var G__261594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261595 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261594,G__261595) : tailrecursion.hoplon.span.call(null,G__261594,G__261595));
})();
var G__261567 = ") ";
var G__261568 = (function (){var G__261596 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261597 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261596,G__261597) : tailrecursion.hoplon.span.call(null,G__261596,G__261597));
})();
var G__261569 = "\n         (";
var G__261570 = (function (){var G__261598 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261599 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261598,G__261599) : tailrecursion.hoplon.span.call(null,G__261598,G__261599));
})();
var G__261571 = (function (){var G__261600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261601 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261600,G__261601) : tailrecursion.hoplon.span.call(null,G__261600,G__261601));
})();
var G__261572 = " ";
var G__261573 = (function (){var G__261602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261603 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261602,G__261603) : tailrecursion.hoplon.span.call(null,G__261602,G__261603));
})();
var G__261574 = ") ";
var G__261575 = (function (){var G__261604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261605 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261604,G__261605) : tailrecursion.hoplon.span.call(null,G__261604,G__261605));
})();
var G__261576 = "\n         ";
var G__261577 = (function (){var G__261606 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261607 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261606,G__261607) : tailrecursion.hoplon.span.call(null,G__261606,G__261607));
})();
var G__261578 = " ";
var G__261579 = (function (){var G__261608 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261609 = "-1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261608,G__261609) : tailrecursion.hoplon.span.call(null,G__261608,G__261609));
})();
var G__261580 = ")\n   (";
var G__261581 = (function (){var G__261610 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261611 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261610,G__261611) : tailrecursion.hoplon.span.call(null,G__261610,G__261611));
})();
var G__261582 = (function (){var G__261612 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__261613 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261612,G__261613) : tailrecursion.hoplon.span.call(null,G__261612,G__261613));
})();
var G__261583 = " ";
var G__261584 = (function (){var G__261614 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261615 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261614,G__261615) : tailrecursion.hoplon.span.call(null,G__261614,G__261615));
})();
var G__261585 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__261557,G__261558,G__261559,G__261560,G__261561,G__261562,G__261563,G__261564,G__261565,G__261566,G__261567,G__261568,G__261569,G__261570,G__261571,G__261572,G__261573,G__261574,G__261575,G__261576,G__261577,G__261578,G__261579,G__261580,G__261581,G__261582,G__261583,G__261584,G__261585) : tailrecursion.hoplon.pre.call(null,G__261557,G__261558,G__261559,G__261560,G__261561,G__261562,G__261563,G__261564,G__261565,G__261566,G__261567,G__261568,G__261569,G__261570,G__261571,G__261572,G__261573,G__261574,G__261575,G__261576,G__261577,G__261578,G__261579,G__261580,G__261581,G__261582,G__261583,G__261584,G__261585));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261555,G__261556) : tailrecursion.hoplon.div.call(null,G__261555,G__261556));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261554) : tailrecursion.hoplon.div.call(null,G__261554));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261492;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261491;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261490;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261489;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261616 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261617 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261618 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261619 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261620 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__261620) : tailrecursion.hoplon.pre.call(null,G__261620));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261619;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261618;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261617;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261616;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261621 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261622 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261623 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261624 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261625 = cljs.core.PersistentArrayMap.EMPTY;
var G__261626 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Translate the following expression into prefix form $$\\frac{5+4+\\left(2-\\left(3-\\left(6+\\frac{4}{5}\\right)\\right)\\right)}{3(6-2)(2-7)}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__261625,G__261626) : tailrecursion.hoplon.markdown.para_node.call(null,G__261625,G__261626));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261624;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261623;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261622;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261621;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261627 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261628 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261629 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261630 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261711 = (function (){var G__261712 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261713 = (function (){var G__261714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261715 = "(";
var G__261716 = (function (){var G__261750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261751 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261750,G__261751) : tailrecursion.hoplon.span.call(null,G__261750,G__261751));
})();
var G__261717 = "(";
var G__261718 = (function (){var G__261752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261753 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261752,G__261753) : tailrecursion.hoplon.span.call(null,G__261752,G__261753));
})();
var G__261719 = (function (){var G__261754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261755 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261754,G__261755) : tailrecursion.hoplon.span.call(null,G__261754,G__261755));
})();
var G__261720 = " ";
var G__261721 = (function (){var G__261756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261757 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261756,G__261757) : tailrecursion.hoplon.span.call(null,G__261756,G__261757));
})();
var G__261722 = " (";
var G__261723 = (function (){var G__261758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261759 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261758,G__261759) : tailrecursion.hoplon.span.call(null,G__261758,G__261759));
})();
var G__261724 = (function (){var G__261760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261761 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261760,G__261761) : tailrecursion.hoplon.span.call(null,G__261760,G__261761));
})();
var G__261725 = " (";
var G__261726 = (function (){var G__261762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261763 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261762,G__261763) : tailrecursion.hoplon.span.call(null,G__261762,G__261763));
})();
var G__261727 = (function (){var G__261764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261765 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261764,G__261765) : tailrecursion.hoplon.span.call(null,G__261764,G__261765));
})();
var G__261728 = " (";
var G__261729 = (function (){var G__261766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261767 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261766,G__261767) : tailrecursion.hoplon.span.call(null,G__261766,G__261767));
})();
var G__261730 = (function (){var G__261768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261769 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261768,G__261769) : tailrecursion.hoplon.span.call(null,G__261768,G__261769));
})();
var G__261731 = " (";
var G__261732 = (function (){var G__261770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261771 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261770,G__261771) : tailrecursion.hoplon.span.call(null,G__261770,G__261771));
})();
var G__261733 = (function (){var G__261772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261773 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261772,G__261773) : tailrecursion.hoplon.span.call(null,G__261772,G__261773));
})();
var G__261734 = " ";
var G__261735 = (function (){var G__261774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261775 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261774,G__261775) : tailrecursion.hoplon.span.call(null,G__261774,G__261775));
})();
var G__261736 = "))))) \n   (";
var G__261737 = (function (){var G__261776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261777 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261776,G__261777) : tailrecursion.hoplon.span.call(null,G__261776,G__261777));
})();
var G__261738 = (function (){var G__261778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261779 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261778,G__261779) : tailrecursion.hoplon.span.call(null,G__261778,G__261779));
})();
var G__261739 = " (";
var G__261740 = (function (){var G__261780 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261781 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261780,G__261781) : tailrecursion.hoplon.span.call(null,G__261780,G__261781));
})();
var G__261741 = (function (){var G__261782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261783 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261782,G__261783) : tailrecursion.hoplon.span.call(null,G__261782,G__261783));
})();
var G__261742 = " ";
var G__261743 = (function (){var G__261784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261785 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261784,G__261785) : tailrecursion.hoplon.span.call(null,G__261784,G__261785));
})();
var G__261744 = ") (";
var G__261745 = (function (){var G__261786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__261787 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261786,G__261787) : tailrecursion.hoplon.span.call(null,G__261786,G__261787));
})();
var G__261746 = (function (){var G__261788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261789 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261788,G__261789) : tailrecursion.hoplon.span.call(null,G__261788,G__261789));
})();
var G__261747 = " ";
var G__261748 = (function (){var G__261790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__261791 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__261790,G__261791) : tailrecursion.hoplon.span.call(null,G__261790,G__261791));
})();
var G__261749 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__261714,G__261715,G__261716,G__261717,G__261718,G__261719,G__261720,G__261721,G__261722,G__261723,G__261724,G__261725,G__261726,G__261727,G__261728,G__261729,G__261730,G__261731,G__261732,G__261733,G__261734,G__261735,G__261736,G__261737,G__261738,G__261739,G__261740,G__261741,G__261742,G__261743,G__261744,G__261745,G__261746,G__261747,G__261748,G__261749) : tailrecursion.hoplon.pre.call(null,G__261714,G__261715,G__261716,G__261717,G__261718,G__261719,G__261720,G__261721,G__261722,G__261723,G__261724,G__261725,G__261726,G__261727,G__261728,G__261729,G__261730,G__261731,G__261732,G__261733,G__261734,G__261735,G__261736,G__261737,G__261738,G__261739,G__261740,G__261741,G__261742,G__261743,G__261744,G__261745,G__261746,G__261747,G__261748,G__261749));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261712,G__261713) : tailrecursion.hoplon.div.call(null,G__261712,G__261713));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261711) : tailrecursion.hoplon.div.call(null,G__261711));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261630;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261629;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261628;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261627;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261792 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261793 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261794 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261795 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261796 = cljs.core.PersistentArrayMap.EMPTY;
var G__261797 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__261796,G__261797) : tailrecursion.hoplon.markdown.para_node.call(null,G__261796,G__261797));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261795;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261794;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261793;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261792;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_261798 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261799 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_261800 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_261801 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__261945 = (function (){var G__261946 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__261947 = (function (){var G__261948 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__261949 = "(";
var G__261950 = (function (){var G__262017 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262018 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262017,G__262018) : tailrecursion.hoplon.span.call(null,G__262017,G__262018));
})();
var G__261951 = (function (){var G__262019 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262020 = "sum-of-largest-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262019,G__262020) : tailrecursion.hoplon.span.call(null,G__262019,G__262020));
})();
var G__261952 = " [";
var G__261953 = (function (){var G__262021 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262022 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262021,G__262022) : tailrecursion.hoplon.span.call(null,G__262021,G__262022));
})();
var G__261954 = " ";
var G__261955 = (function (){var G__262023 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262024 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262023,G__262024) : tailrecursion.hoplon.span.call(null,G__262023,G__262024));
})();
var G__261956 = " ";
var G__261957 = (function (){var G__262025 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262026 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262025,G__262026) : tailrecursion.hoplon.span.call(null,G__262025,G__262026));
})();
var G__261958 = "]\n  (";
var G__261959 = (function (){var G__262027 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262028 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262027,G__262028) : tailrecursion.hoplon.span.call(null,G__262027,G__262028));
})();
var G__261960 = "(";
var G__261961 = (function (){var G__262029 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262030 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262029,G__262030) : tailrecursion.hoplon.span.call(null,G__262029,G__262030));
})();
var G__261962 = "(";
var G__261963 = (function (){var G__262031 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262032 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262031,G__262032) : tailrecursion.hoplon.span.call(null,G__262031,G__262032));
})();
var G__261964 = (function (){var G__262033 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262034 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262033,G__262034) : tailrecursion.hoplon.span.call(null,G__262033,G__262034));
})();
var G__261965 = " ";
var G__261966 = (function (){var G__262035 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262036 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262035,G__262036) : tailrecursion.hoplon.span.call(null,G__262035,G__262036));
})();
var G__261967 = ") (";
var G__261968 = (function (){var G__262037 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262038 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262037,G__262038) : tailrecursion.hoplon.span.call(null,G__262037,G__262038));
})();
var G__261969 = (function (){var G__262039 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262040 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262039,G__262040) : tailrecursion.hoplon.span.call(null,G__262039,G__262040));
})();
var G__261970 = " ";
var G__261971 = (function (){var G__262041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262042 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262041,G__262042) : tailrecursion.hoplon.span.call(null,G__262041,G__262042));
})();
var G__261972 = ")) (";
var G__261973 = (function (){var G__262043 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262044 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262043,G__262044) : tailrecursion.hoplon.span.call(null,G__262043,G__262044));
})();
var G__261974 = "(";
var G__261975 = (function (){var G__262045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262046 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262045,G__262046) : tailrecursion.hoplon.span.call(null,G__262045,G__262046));
})();
var G__261976 = " ";
var G__261977 = (function (){var G__262047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262048 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262047,G__262048) : tailrecursion.hoplon.span.call(null,G__262047,G__262048));
})();
var G__261978 = ") (";
var G__261979 = (function (){var G__262049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262050 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262049,G__262050) : tailrecursion.hoplon.span.call(null,G__262049,G__262050));
})();
var G__261980 = " ";
var G__261981 = (function (){var G__262051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262052 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262051,G__262052) : tailrecursion.hoplon.span.call(null,G__262051,G__262052));
})();
var G__261982 = "))\n        (";
var G__261983 = (function (){var G__262053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262054 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262053,G__262054) : tailrecursion.hoplon.span.call(null,G__262053,G__262054));
})();
var G__261984 = "(";
var G__261985 = (function (){var G__262055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262056 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262055,G__262056) : tailrecursion.hoplon.span.call(null,G__262055,G__262056));
})();
var G__261986 = (function (){var G__262057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262058 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262057,G__262058) : tailrecursion.hoplon.span.call(null,G__262057,G__262058));
})();
var G__261987 = " ";
var G__261988 = (function (){var G__262059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262060 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262059,G__262060) : tailrecursion.hoplon.span.call(null,G__262059,G__262060));
})();
var G__261989 = ") (";
var G__261990 = (function (){var G__262061 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262062 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262061,G__262062) : tailrecursion.hoplon.span.call(null,G__262061,G__262062));
})();
var G__261991 = (function (){var G__262063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262064 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262063,G__262064) : tailrecursion.hoplon.span.call(null,G__262063,G__262064));
})();
var G__261992 = " ";
var G__261993 = (function (){var G__262065 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262066 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262065,G__262066) : tailrecursion.hoplon.span.call(null,G__262065,G__262066));
})();
var G__261994 = ")) (";
var G__261995 = (function (){var G__262067 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262068 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262067,G__262068) : tailrecursion.hoplon.span.call(null,G__262067,G__262068));
})();
var G__261996 = "(";
var G__261997 = (function (){var G__262069 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262070 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262069,G__262070) : tailrecursion.hoplon.span.call(null,G__262069,G__262070));
})();
var G__261998 = " ";
var G__261999 = (function (){var G__262071 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262072 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262071,G__262072) : tailrecursion.hoplon.span.call(null,G__262071,G__262072));
})();
var G__262000 = ") (";
var G__262001 = (function (){var G__262073 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262074 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262073,G__262074) : tailrecursion.hoplon.span.call(null,G__262073,G__262074));
})();
var G__262002 = " ";
var G__262003 = (function (){var G__262075 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262076 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262075,G__262076) : tailrecursion.hoplon.span.call(null,G__262075,G__262076));
})();
var G__262004 = "))\n        ";
var G__262005 = (function (){var G__262077 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262078 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262077,G__262078) : tailrecursion.hoplon.span.call(null,G__262077,G__262078));
})();
var G__262006 = " (";
var G__262007 = (function (){var G__262079 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262080 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262079,G__262080) : tailrecursion.hoplon.span.call(null,G__262079,G__262080));
})();
var G__262008 = "(";
var G__262009 = (function (){var G__262081 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262082 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262081,G__262082) : tailrecursion.hoplon.span.call(null,G__262081,G__262082));
})();
var G__262010 = " ";
var G__262011 = (function (){var G__262083 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262084 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262083,G__262084) : tailrecursion.hoplon.span.call(null,G__262083,G__262084));
})();
var G__262012 = ") (";
var G__262013 = (function (){var G__262085 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262086 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262085,G__262086) : tailrecursion.hoplon.span.call(null,G__262085,G__262086));
})();
var G__262014 = " ";
var G__262015 = (function (){var G__262087 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262088 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262087,G__262088) : tailrecursion.hoplon.span.call(null,G__262087,G__262088));
})();
var G__262016 = "))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69(G__261948,G__261949,G__261950,G__261951,G__261952,G__261953,G__261954,G__261955,G__261956,G__261957,G__261958,G__261959,G__261960,G__261961,G__261962,G__261963,G__261964,G__261965,G__261966,G__261967,G__261968,G__261969,G__261970,G__261971,G__261972,G__261973,G__261974,G__261975,G__261976,G__261977,G__261978,G__261979,G__261980,G__261981,G__261982,G__261983,G__261984,G__261985,G__261986,G__261987,G__261988,G__261989,G__261990,G__261991,G__261992,G__261993,G__261994,G__261995,G__261996,G__261997,G__261998,G__261999,G__262000,G__262001,G__262002,G__262003,G__262004,G__262005,G__262006,G__262007,G__262008,G__262009,G__262010,G__262011,G__262012,G__262013,G__262014,G__262015,G__262016) : tailrecursion.hoplon.pre.call(null,G__261948,G__261949,G__261950,G__261951,G__261952,G__261953,G__261954,G__261955,G__261956,G__261957,G__261958,G__261959,G__261960,G__261961,G__261962,G__261963,G__261964,G__261965,G__261966,G__261967,G__261968,G__261969,G__261970,G__261971,G__261972,G__261973,G__261974,G__261975,G__261976,G__261977,G__261978,G__261979,G__261980,G__261981,G__261982,G__261983,G__261984,G__261985,G__261986,G__261987,G__261988,G__261989,G__261990,G__261991,G__261992,G__261993,G__261994,G__261995,G__261996,G__261997,G__261998,G__261999,G__262000,G__262001,G__262002,G__262003,G__262004,G__262005,G__262006,G__262007,G__262008,G__262009,G__262010,G__262011,G__262012,G__262013,G__262014,G__262015,G__262016));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__261946,G__261947) : tailrecursion.hoplon.div.call(null,G__261946,G__261947));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__261945) : tailrecursion.hoplon.div.call(null,G__261945));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261801;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261800;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_261799;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_261798;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_262089 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262090 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262091 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262092 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262093 = cljs.core.PersistentArrayMap.EMPTY;
var G__262094 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262093,G__262094) : tailrecursion.hoplon.markdown.para_node.call(null,G__262093,G__262094));
})(),(function (){var G__262144 = (function (){var G__262145 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262146 = (function (){var G__262147 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262148 = "(";
var G__262149 = (function (){var G__262170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262171 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262170,G__262171) : tailrecursion.hoplon.span.call(null,G__262170,G__262171));
})();
var G__262150 = (function (){var G__262172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262173 = "a-plus-abs-b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262172,G__262173) : tailrecursion.hoplon.span.call(null,G__262172,G__262173));
})();
var G__262151 = " [";
var G__262152 = (function (){var G__262174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262175 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262174,G__262175) : tailrecursion.hoplon.span.call(null,G__262174,G__262175));
})();
var G__262153 = " ";
var G__262154 = (function (){var G__262176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262177 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262176,G__262177) : tailrecursion.hoplon.span.call(null,G__262176,G__262177));
})();
var G__262155 = "]\n  ((";
var G__262156 = (function (){var G__262178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262179 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262178,G__262179) : tailrecursion.hoplon.span.call(null,G__262178,G__262179));
})();
var G__262157 = "(";
var G__262158 = (function (){var G__262180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262181 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262180,G__262181) : tailrecursion.hoplon.span.call(null,G__262180,G__262181));
})();
var G__262159 = (function (){var G__262182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262183 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262182,G__262183) : tailrecursion.hoplon.span.call(null,G__262182,G__262183));
})();
var G__262160 = " ";
var G__262161 = (function (){var G__262184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262185 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262184,G__262185) : tailrecursion.hoplon.span.call(null,G__262184,G__262185));
})();
var G__262162 = ") ";
var G__262163 = (function (){var G__262186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262187 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262186,G__262187) : tailrecursion.hoplon.span.call(null,G__262186,G__262187));
})();
var G__262164 = (function (){var G__262188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262189 = "-";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262188,G__262189) : tailrecursion.hoplon.span.call(null,G__262188,G__262189));
})();
var G__262165 = ") ";
var G__262166 = (function (){var G__262190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262191 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262190,G__262191) : tailrecursion.hoplon.span.call(null,G__262190,G__262191));
})();
var G__262167 = " ";
var G__262168 = (function (){var G__262192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262193 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262192,G__262193) : tailrecursion.hoplon.span.call(null,G__262192,G__262193));
})();
var G__262169 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__262147,G__262148,G__262149,G__262150,G__262151,G__262152,G__262153,G__262154,G__262155,G__262156,G__262157,G__262158,G__262159,G__262160,G__262161,G__262162,G__262163,G__262164,G__262165,G__262166,G__262167,G__262168,G__262169) : tailrecursion.hoplon.pre.call(null,G__262147,G__262148,G__262149,G__262150,G__262151,G__262152,G__262153,G__262154,G__262155,G__262156,G__262157,G__262158,G__262159,G__262160,G__262161,G__262162,G__262163,G__262164,G__262165,G__262166,G__262167,G__262168,G__262169));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262145,G__262146) : tailrecursion.hoplon.div.call(null,G__262145,G__262146));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262144) : tailrecursion.hoplon.div.call(null,G__262144));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262092;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262091;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262090;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262089;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_262194 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262195 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262196 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262197 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262198 = cljs.core.PersistentArrayMap.EMPTY;
var G__262199 = new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It returns ",(function (){var G__262200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__262201 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262200,G__262201) : tailrecursion.hoplon.markdown.code_node.call(null,G__262200,G__262201));
})(),". Note: if ",(function (){var G__262202 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(> b 0)"], null);
var G__262203 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262202,G__262203) : tailrecursion.hoplon.markdown.code_node.call(null,G__262202,G__262203));
})(),", then ",(function (){var G__262204 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) b)"], null);
var G__262205 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262204,G__262205) : tailrecursion.hoplon.markdown.code_node.call(null,G__262204,G__262205));
})(),", so ",(function (){var G__262206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__262207 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262206,G__262207) : tailrecursion.hoplon.markdown.code_node.call(null,G__262206,G__262207));
})()," would be ",(function (){var G__262208 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a b)"], null);
var G__262209 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262208,G__262209) : tailrecursion.hoplon.markdown.code_node.call(null,G__262208,G__262209));
})(),", just as this function gives us. Alternatively, if ",(function (){var G__262210 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(not (> b 0))"], null);
var G__262211 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262210,G__262211) : tailrecursion.hoplon.markdown.code_node.call(null,G__262210,G__262211));
})(),", then b is negative and ",(function (){var G__262212 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) (- b))"], null);
var G__262213 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262212,G__262213) : tailrecursion.hoplon.markdown.code_node.call(null,G__262212,G__262213));
})()," which means, ",(function (){var G__262214 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__262215 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262214,G__262215) : tailrecursion.hoplon.markdown.code_node.call(null,G__262214,G__262215));
})()," is ",(function (){var G__262216 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (- b))"], null);
var G__262217 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262216,G__262217) : tailrecursion.hoplon.markdown.code_node.call(null,G__262216,G__262217));
})()," which is really just ",(function (){var G__262218 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- a b)"], null);
var G__262219 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262218,G__262219) : tailrecursion.hoplon.markdown.code_node.call(null,G__262218,G__262219));
})()," as our function above gives us."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262198,G__262199) : tailrecursion.hoplon.markdown.para_node.call(null,G__262198,G__262199));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262197;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262196;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262195;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262194;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_262220 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262221 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262222 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262223 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262224 = cljs.core.PersistentArrayMap.EMPTY;
var G__262225 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262224,G__262225) : tailrecursion.hoplon.markdown.para_node.call(null,G__262224,G__262225));
})(),(function (){var G__262241 = (function (){var G__262242 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262243 = (function (){var G__262244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262245 = "(";
var G__262246 = (function (){var G__262251 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262252 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262251,G__262252) : tailrecursion.hoplon.span.call(null,G__262251,G__262252));
})();
var G__262247 = (function (){var G__262253 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262254 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262253,G__262254) : tailrecursion.hoplon.span.call(null,G__262253,G__262254));
})();
var G__262248 = " [] (";
var G__262249 = (function (){var G__262255 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262256 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262255,G__262256) : tailrecursion.hoplon.span.call(null,G__262255,G__262256));
})();
var G__262250 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__262244,G__262245,G__262246,G__262247,G__262248,G__262249,G__262250) : tailrecursion.hoplon.pre.call(null,G__262244,G__262245,G__262246,G__262247,G__262248,G__262249,G__262250));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262242,G__262243) : tailrecursion.hoplon.div.call(null,G__262242,G__262243));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262241) : tailrecursion.hoplon.div.call(null,G__262241));
})(),(function (){var G__262257 = cljs.core.PersistentArrayMap.EMPTY;
var G__262258 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262257,G__262258) : tailrecursion.hoplon.markdown.para_node.call(null,G__262257,G__262258));
})(),(function (){var G__262301 = (function (){var G__262302 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262303 = (function (){var G__262304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262305 = "(";
var G__262306 = (function (){var G__262324 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262325 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262324,G__262325) : tailrecursion.hoplon.span.call(null,G__262324,G__262325));
})();
var G__262307 = (function (){var G__262326 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262327 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262326,G__262327) : tailrecursion.hoplon.span.call(null,G__262326,G__262327));
})();
var G__262308 = "[";
var G__262309 = (function (){var G__262328 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262329 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262328,G__262329) : tailrecursion.hoplon.span.call(null,G__262328,G__262329));
})();
var G__262310 = " ";
var G__262311 = (function (){var G__262330 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262331 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262330,G__262331) : tailrecursion.hoplon.span.call(null,G__262330,G__262331));
})();
var G__262312 = "]\n   (";
var G__262313 = (function (){var G__262332 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262333 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262332,G__262333) : tailrecursion.hoplon.span.call(null,G__262332,G__262333));
})();
var G__262314 = "(";
var G__262315 = (function (){var G__262334 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262335 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262334,G__262335) : tailrecursion.hoplon.span.call(null,G__262334,G__262335));
})();
var G__262316 = (function (){var G__262336 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262337 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262336,G__262337) : tailrecursion.hoplon.span.call(null,G__262336,G__262337));
})();
var G__262317 = " ";
var G__262318 = (function (){var G__262338 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262339 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262338,G__262339) : tailrecursion.hoplon.span.call(null,G__262338,G__262339));
})();
var G__262319 = ")\n   ";
var G__262320 = (function (){var G__262340 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262341 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262340,G__262341) : tailrecursion.hoplon.span.call(null,G__262340,G__262341));
})();
var G__262321 = "\n   ";
var G__262322 = (function (){var G__262342 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262343 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262342,G__262343) : tailrecursion.hoplon.span.call(null,G__262342,G__262343));
})();
var G__262323 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__262304,G__262305,G__262306,G__262307,G__262308,G__262309,G__262310,G__262311,G__262312,G__262313,G__262314,G__262315,G__262316,G__262317,G__262318,G__262319,G__262320,G__262321,G__262322,G__262323) : tailrecursion.hoplon.pre.call(null,G__262304,G__262305,G__262306,G__262307,G__262308,G__262309,G__262310,G__262311,G__262312,G__262313,G__262314,G__262315,G__262316,G__262317,G__262318,G__262319,G__262320,G__262321,G__262322,G__262323));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262302,G__262303) : tailrecursion.hoplon.div.call(null,G__262302,G__262303));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262301) : tailrecursion.hoplon.div.call(null,G__262301));
})(),(function (){var G__262344 = cljs.core.PersistentArrayMap.EMPTY;
var G__262345 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then he evaluates the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262344,G__262345) : tailrecursion.hoplon.markdown.para_node.call(null,G__262344,G__262345));
})(),(function (){var G__262361 = (function (){var G__262362 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262363 = (function (){var G__262364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262365 = "(";
var G__262366 = (function (){var G__262371 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262372 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262371,G__262372) : tailrecursion.hoplon.span.call(null,G__262371,G__262372));
})();
var G__262367 = (function (){var G__262373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262374 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262373,G__262374) : tailrecursion.hoplon.span.call(null,G__262373,G__262374));
})();
var G__262368 = " (";
var G__262369 = (function (){var G__262375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262376 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262375,G__262376) : tailrecursion.hoplon.span.call(null,G__262375,G__262376));
})();
var G__262370 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__262364,G__262365,G__262366,G__262367,G__262368,G__262369,G__262370) : tailrecursion.hoplon.pre.call(null,G__262364,G__262365,G__262366,G__262367,G__262368,G__262369,G__262370));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262362,G__262363) : tailrecursion.hoplon.div.call(null,G__262362,G__262363));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262361) : tailrecursion.hoplon.div.call(null,G__262361));
})(),(function (){var G__262377 = cljs.core.PersistentArrayMap.EMPTY;
var G__262378 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262377,G__262378) : tailrecursion.hoplon.markdown.para_node.call(null,G__262377,G__262378));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262223;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262222;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262221;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262220;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_262379 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262380 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262381 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262382 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262383 = cljs.core.PersistentArrayMap.EMPTY;
var G__262384 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262385 = cljs.core.PersistentArrayMap.EMPTY;
var G__262386 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262387 = cljs.core.PersistentArrayMap.EMPTY;
var G__262388 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With normal order evaluation it compiles just as one  might expect: first the function itself is unraveled,  finding that it is an ",(function (){var G__262389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__262390 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262389,G__262390) : tailrecursion.hoplon.markdown.code_node.call(null,G__262389,G__262390));
})()," statement, then the ",(function (){var G__262391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__262392 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__262391,G__262392) : tailrecursion.hoplon.markdown.code_node.call(null,G__262391,G__262392));
})(),"  statement is evaluated according to its own rules.  Finding that the first argument is 0, it returns 0."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262387,G__262388) : tailrecursion.hoplon.markdown.para_node.call(null,G__262387,G__262388));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__262385,G__262386) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__262385,G__262386));
})(),(function (){var G__262393 = cljs.core.PersistentArrayMap.EMPTY;
var G__262394 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_262395 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262396 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262397 = cljs.core.PersistentArrayMap.EMPTY;
var G__262398 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With applicative order evaluation the story is a bit more  interesting. Since the arguments to a function are always  evaluated first in applicative order evaluation, the  compiler would attempt to evaluate both the first and  second arguments and hence fall into an infinite loop  in the attempt to evaluate the second argument."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262397,G__262398) : tailrecursion.hoplon.markdown.para_node.call(null,G__262397,G__262398));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262396;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262395;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__262393,G__262394) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__262393,G__262394));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__262383,G__262384) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__262383,G__262384));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262382;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262381;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262380;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262379;
}})()], 0))], 0))], 0));
var G__258250 = "";
var G__258251 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Example: Square Roots by Newton's Method"], null),(function (){var _STAR_references_STAR_262399 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262400 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262401 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262402 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262403 = cljs.core.PersistentArrayMap.EMPTY;
var G__262404 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Procedures, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer procedures. Procedures must be effective. As a case in point, consider the problem of computing square roots. We can define the square-root function as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262403,G__262404) : tailrecursion.hoplon.markdown.para_node.call(null,G__262403,G__262404));
})(),(function (){var G__262405 = cljs.core.PersistentArrayMap.EMPTY;
var G__262406 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\sqrt x = \\text{ the } y \\text{ such that } y\\geq 0 \\text{ and } y^2 = x $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262405,G__262406) : tailrecursion.hoplon.markdown.para_node.call(null,G__262405,G__262406));
})(),(function (){var G__262407 = cljs.core.PersistentArrayMap.EMPTY;
var G__262408 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a procedure. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-Lisp: "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262407,G__262408) : tailrecursion.hoplon.markdown.para_node.call(null,G__262407,G__262408));
})(),(function (){var G__262463 = (function (){var G__262464 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262465 = (function (){var G__262466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262467 = "(";
var G__262468 = (function (){var G__262492 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262493 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262492,G__262493) : tailrecursion.hoplon.span.call(null,G__262492,G__262493));
})();
var G__262469 = (function (){var G__262494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262495 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262494,G__262495) : tailrecursion.hoplon.span.call(null,G__262494,G__262495));
})();
var G__262470 = " [";
var G__262471 = (function (){var G__262496 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262497 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262496,G__262497) : tailrecursion.hoplon.span.call(null,G__262496,G__262497));
})();
var G__262472 = "] \n  (";
var G__262473 = (function (){var G__262498 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262499 = "the";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262498,G__262499) : tailrecursion.hoplon.span.call(null,G__262498,G__262499));
})();
var G__262474 = " ";
var G__262475 = (function (){var G__262500 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262501 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262500,G__262501) : tailrecursion.hoplon.span.call(null,G__262500,G__262501));
})();
var G__262476 = " (";
var G__262477 = (function (){var G__262502 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262503 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262502,G__262503) : tailrecursion.hoplon.span.call(null,G__262502,G__262503));
})();
var G__262478 = "(";
var G__262479 = (function (){var G__262504 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262505 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262504,G__262505) : tailrecursion.hoplon.span.call(null,G__262504,G__262505));
})();
var G__262480 = (function (){var G__262506 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262507 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262506,G__262507) : tailrecursion.hoplon.span.call(null,G__262506,G__262507));
})();
var G__262481 = " ";
var G__262482 = (function (){var G__262508 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262509 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262508,G__262509) : tailrecursion.hoplon.span.call(null,G__262508,G__262509));
})();
var G__262483 = ") \n              (";
var G__262484 = (function (){var G__262510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262511 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262510,G__262511) : tailrecursion.hoplon.span.call(null,G__262510,G__262511));
})();
var G__262485 = "(";
var G__262486 = (function (){var G__262512 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262513 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262512,G__262513) : tailrecursion.hoplon.span.call(null,G__262512,G__262513));
})();
var G__262487 = " ";
var G__262488 = (function (){var G__262514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262515 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262514,G__262515) : tailrecursion.hoplon.span.call(null,G__262514,G__262515));
})();
var G__262489 = ") ";
var G__262490 = (function (){var G__262516 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262517 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262516,G__262517) : tailrecursion.hoplon.span.call(null,G__262516,G__262517));
})();
var G__262491 = ")))) \n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26(G__262466,G__262467,G__262468,G__262469,G__262470,G__262471,G__262472,G__262473,G__262474,G__262475,G__262476,G__262477,G__262478,G__262479,G__262480,G__262481,G__262482,G__262483,G__262484,G__262485,G__262486,G__262487,G__262488,G__262489,G__262490,G__262491) : tailrecursion.hoplon.pre.call(null,G__262466,G__262467,G__262468,G__262469,G__262470,G__262471,G__262472,G__262473,G__262474,G__262475,G__262476,G__262477,G__262478,G__262479,G__262480,G__262481,G__262482,G__262483,G__262484,G__262485,G__262486,G__262487,G__262488,G__262489,G__262490,G__262491));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262464,G__262465) : tailrecursion.hoplon.div.call(null,G__262464,G__262465));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262463) : tailrecursion.hoplon.div.call(null,G__262463));
})(),(function (){var G__262518 = cljs.core.PersistentArrayMap.EMPTY;
var G__262519 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This only begs the question. The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.",(function (){var G__262520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__262521 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is ",(function (){var G__262522 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__262523 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["correct"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262522,G__262523) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262522,G__262523));
})()," is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given ",(function (){var G__262524 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__262525 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["what is"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262524,G__262525) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262524,G__262525));
})()," knowledge specified by the programmer, they can generate ",(function (){var G__262526 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__262527 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how to"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262526,G__262527) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262526,G__262527));
})()," knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in chapter 4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262520,G__262521) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262520,G__262521));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262518,G__262519) : tailrecursion.hoplon.markdown.para_node.call(null,G__262518,G__262519));
})(),(function (){var G__262528 = cljs.core.PersistentArrayMap.EMPTY;
var G__262529 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How does one compute square roots? The most common way is to use Newton",(function (){var G__262530 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262531 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262530,G__262531) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262530,G__262531));
})(),"s method of successive approximations, which says that whenever we have a guess y for the value of the square root of a number x, we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging y with x/y.",(function (){var G__262532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__262533 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This square-root algorithm is actually a special case of Newton",(function (){var G__262534 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262535 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262534,G__262535) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262534,G__262535));
})(),"s method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century A.D. We will see how to express the general Newton",(function (){var G__262536 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262537 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262536,G__262537) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262536,G__262537));
})(),"s method as a Lisp procedure in section 1.3.4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262532,G__262533) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262532,G__262533));
})()," For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262528,G__262529) : tailrecursion.hoplon.markdown.para_node.call(null,G__262528,G__262529));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262402;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262401;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262400;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262399;
}})(),"",(function (){var G__262538 = cljs.core.PersistentArrayMap.EMPTY;
var G__262539 = (function (){var G__262544 = cljs.core.PersistentArrayMap.EMPTY;
var G__262545 = (function (){var G__262548 = cljs.core.PersistentArrayMap.EMPTY;
var G__262549 = "Guess ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262548,G__262549) : tailrecursion.hoplon.td.call(null,G__262548,G__262549));
})();
var G__262546 = (function (){var G__262550 = cljs.core.PersistentArrayMap.EMPTY;
var G__262551 = "Quotient ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262550,G__262551) : tailrecursion.hoplon.td.call(null,G__262550,G__262551));
})();
var G__262547 = (function (){var G__262552 = cljs.core.PersistentArrayMap.EMPTY;
var G__262553 = "Average ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262552,G__262553) : tailrecursion.hoplon.td.call(null,G__262552,G__262553));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262544,G__262545,G__262546,G__262547) : tailrecursion.hoplon.tr.call(null,G__262544,G__262545,G__262546,G__262547));
})();
var G__262540 = (function (){var G__262554 = cljs.core.PersistentArrayMap.EMPTY;
var G__262555 = (function (){var G__262558 = cljs.core.PersistentArrayMap.EMPTY;
var G__262559 = "1 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262558,G__262559) : tailrecursion.hoplon.td.call(null,G__262558,G__262559));
})();
var G__262556 = (function (){var G__262560 = cljs.core.PersistentArrayMap.EMPTY;
var G__262561 = "(2/1) = 2 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262560,G__262561) : tailrecursion.hoplon.td.call(null,G__262560,G__262561));
})();
var G__262557 = (function (){var G__262562 = cljs.core.PersistentArrayMap.EMPTY;
var G__262563 = "((2+1)/2) = 1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262562,G__262563) : tailrecursion.hoplon.td.call(null,G__262562,G__262563));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262554,G__262555,G__262556,G__262557) : tailrecursion.hoplon.tr.call(null,G__262554,G__262555,G__262556,G__262557));
})();
var G__262541 = (function (){var G__262564 = cljs.core.PersistentArrayMap.EMPTY;
var G__262565 = (function (){var G__262568 = cljs.core.PersistentArrayMap.EMPTY;
var G__262569 = "1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262568,G__262569) : tailrecursion.hoplon.td.call(null,G__262568,G__262569));
})();
var G__262566 = (function (){var G__262570 = cljs.core.PersistentArrayMap.EMPTY;
var G__262571 = "(2/1.5) = 1.333...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262570,G__262571) : tailrecursion.hoplon.td.call(null,G__262570,G__262571));
})();
var G__262567 = (function (){var G__262572 = cljs.core.PersistentArrayMap.EMPTY;
var G__262573 = "((1.333... + 1.5)/2) = 1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262572,G__262573) : tailrecursion.hoplon.td.call(null,G__262572,G__262573));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262564,G__262565,G__262566,G__262567) : tailrecursion.hoplon.tr.call(null,G__262564,G__262565,G__262566,G__262567));
})();
var G__262542 = (function (){var G__262574 = cljs.core.PersistentArrayMap.EMPTY;
var G__262575 = (function (){var G__262578 = cljs.core.PersistentArrayMap.EMPTY;
var G__262579 = "1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262578,G__262579) : tailrecursion.hoplon.td.call(null,G__262578,G__262579));
})();
var G__262576 = (function (){var G__262580 = cljs.core.PersistentArrayMap.EMPTY;
var G__262581 = "(2/1.4167) = 1.4118 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262580,G__262581) : tailrecursion.hoplon.td.call(null,G__262580,G__262581));
})();
var G__262577 = (function (){var G__262582 = cljs.core.PersistentArrayMap.EMPTY;
var G__262583 = "((1.4167 + 1.4118)/2) = 1.4142 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262582,G__262583) : tailrecursion.hoplon.td.call(null,G__262582,G__262583));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262574,G__262575,G__262576,G__262577) : tailrecursion.hoplon.tr.call(null,G__262574,G__262575,G__262576,G__262577));
})();
var G__262543 = (function (){var G__262584 = cljs.core.PersistentArrayMap.EMPTY;
var G__262585 = (function (){var G__262588 = cljs.core.PersistentArrayMap.EMPTY;
var G__262589 = "1.4142...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262588,G__262589) : tailrecursion.hoplon.td.call(null,G__262588,G__262589));
})();
var G__262586 = (function (){var G__262590 = cljs.core.PersistentArrayMap.EMPTY;
var G__262591 = "...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262590,G__262591) : tailrecursion.hoplon.td.call(null,G__262590,G__262591));
})();
var G__262587 = (function (){var G__262592 = cljs.core.PersistentArrayMap.EMPTY;
var G__262593 = "...";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__262592,G__262593) : tailrecursion.hoplon.td.call(null,G__262592,G__262593));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__262584,G__262585,G__262586,G__262587) : tailrecursion.hoplon.tr.call(null,G__262584,G__262585,G__262586,G__262587));
})();
return (tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6 ? tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6(G__262538,G__262539,G__262540,G__262541,G__262542,G__262543) : tailrecursion.hoplon.table.call(null,G__262538,G__262539,G__262540,G__262541,G__262542,G__262543));
})(),(function (){var _STAR_references_STAR_262594 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262595 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_262596 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_262597 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__262598 = cljs.core.PersistentArrayMap.EMPTY;
var G__262599 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Continuing this process, we obtain better and better approximations to the square root. "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262598,G__262599) : tailrecursion.hoplon.markdown.para_node.call(null,G__262598,G__262599));
})(),(function (){var G__262600 = cljs.core.PersistentArrayMap.EMPTY;
var G__262601 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now let",(function (){var G__262602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262603 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262602,G__262603) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262602,G__262603));
})(),"s formalize the process in terms of procedures. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262600,G__262601) : tailrecursion.hoplon.markdown.para_node.call(null,G__262600,G__262601));
})(),(function (){var G__262663 = (function (){var G__262664 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262665 = (function (){var G__262666 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262667 = "(";
var G__262668 = (function (){var G__262695 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262696 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262695,G__262696) : tailrecursion.hoplon.span.call(null,G__262695,G__262696));
})();
var G__262669 = (function (){var G__262697 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262698 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262697,G__262698) : tailrecursion.hoplon.span.call(null,G__262697,G__262698));
})();
var G__262670 = " [";
var G__262671 = (function (){var G__262699 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262700 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262699,G__262700) : tailrecursion.hoplon.span.call(null,G__262699,G__262700));
})();
var G__262672 = " ";
var G__262673 = (function (){var G__262701 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262702 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262701,G__262702) : tailrecursion.hoplon.span.call(null,G__262701,G__262702));
})();
var G__262674 = "]\n  (";
var G__262675 = (function (){var G__262703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262704 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262703,G__262704) : tailrecursion.hoplon.span.call(null,G__262703,G__262704));
})();
var G__262676 = "(";
var G__262677 = (function (){var G__262705 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262706 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262705,G__262706) : tailrecursion.hoplon.span.call(null,G__262705,G__262706));
})();
var G__262678 = " ";
var G__262679 = (function (){var G__262707 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262708 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262707,G__262708) : tailrecursion.hoplon.span.call(null,G__262707,G__262708));
})();
var G__262680 = " ";
var G__262681 = (function (){var G__262709 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262710 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262709,G__262710) : tailrecursion.hoplon.span.call(null,G__262709,G__262710));
})();
var G__262682 = ")\n      ";
var G__262683 = (function (){var G__262711 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262712 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262711,G__262712) : tailrecursion.hoplon.span.call(null,G__262711,G__262712));
})();
var G__262684 = "\n      (";
var G__262685 = (function (){var G__262713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262714 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262713,G__262714) : tailrecursion.hoplon.span.call(null,G__262713,G__262714));
})();
var G__262686 = " (";
var G__262687 = (function (){var G__262715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262716 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262715,G__262716) : tailrecursion.hoplon.span.call(null,G__262715,G__262716));
})();
var G__262688 = " ";
var G__262689 = (function (){var G__262717 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262718 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262717,G__262718) : tailrecursion.hoplon.span.call(null,G__262717,G__262718));
})();
var G__262690 = " ";
var G__262691 = (function (){var G__262719 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262720 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262719,G__262720) : tailrecursion.hoplon.span.call(null,G__262719,G__262720));
})();
var G__262692 = ")\n                 ";
var G__262693 = (function (){var G__262721 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262722 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262721,G__262722) : tailrecursion.hoplon.span.call(null,G__262721,G__262722));
})();
var G__262694 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__262666,G__262667,G__262668,G__262669,G__262670,G__262671,G__262672,G__262673,G__262674,G__262675,G__262676,G__262677,G__262678,G__262679,G__262680,G__262681,G__262682,G__262683,G__262684,G__262685,G__262686,G__262687,G__262688,G__262689,G__262690,G__262691,G__262692,G__262693,G__262694) : tailrecursion.hoplon.pre.call(null,G__262666,G__262667,G__262668,G__262669,G__262670,G__262671,G__262672,G__262673,G__262674,G__262675,G__262676,G__262677,G__262678,G__262679,G__262680,G__262681,G__262682,G__262683,G__262684,G__262685,G__262686,G__262687,G__262688,G__262689,G__262690,G__262691,G__262692,G__262693,G__262694));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262664,G__262665) : tailrecursion.hoplon.div.call(null,G__262664,G__262665));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262663) : tailrecursion.hoplon.div.call(null,G__262663));
})(),(function (){var G__262723 = cljs.core.PersistentArrayMap.EMPTY;
var G__262724 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A guess is improved by averaging it with the quotient of the radicand and the old guess:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262723,G__262724) : tailrecursion.hoplon.markdown.para_node.call(null,G__262723,G__262724));
})(),(function (){var G__262763 = (function (){var G__262764 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262765 = (function (){var G__262766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262767 = "(";
var G__262768 = (function (){var G__262784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262785 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262784,G__262785) : tailrecursion.hoplon.span.call(null,G__262784,G__262785));
})();
var G__262769 = (function (){var G__262786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262787 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262786,G__262787) : tailrecursion.hoplon.span.call(null,G__262786,G__262787));
})();
var G__262770 = " [";
var G__262771 = (function (){var G__262788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262789 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262788,G__262789) : tailrecursion.hoplon.span.call(null,G__262788,G__262789));
})();
var G__262772 = " ";
var G__262773 = (function (){var G__262790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262791 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262790,G__262791) : tailrecursion.hoplon.span.call(null,G__262790,G__262791));
})();
var G__262774 = "]\n  (";
var G__262775 = (function (){var G__262792 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262793 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262792,G__262793) : tailrecursion.hoplon.span.call(null,G__262792,G__262793));
})();
var G__262776 = " ";
var G__262777 = (function (){var G__262794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262795 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262794,G__262795) : tailrecursion.hoplon.span.call(null,G__262794,G__262795));
})();
var G__262778 = " (";
var G__262779 = (function (){var G__262796 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262797 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262796,G__262797) : tailrecursion.hoplon.span.call(null,G__262796,G__262797));
})();
var G__262780 = (function (){var G__262798 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262799 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262798,G__262799) : tailrecursion.hoplon.span.call(null,G__262798,G__262799));
})();
var G__262781 = " ";
var G__262782 = (function (){var G__262800 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262801 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262800,G__262801) : tailrecursion.hoplon.span.call(null,G__262800,G__262801));
})();
var G__262783 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__262766,G__262767,G__262768,G__262769,G__262770,G__262771,G__262772,G__262773,G__262774,G__262775,G__262776,G__262777,G__262778,G__262779,G__262780,G__262781,G__262782,G__262783) : tailrecursion.hoplon.pre.call(null,G__262766,G__262767,G__262768,G__262769,G__262770,G__262771,G__262772,G__262773,G__262774,G__262775,G__262776,G__262777,G__262778,G__262779,G__262780,G__262781,G__262782,G__262783));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262764,G__262765) : tailrecursion.hoplon.div.call(null,G__262764,G__262765));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262763) : tailrecursion.hoplon.div.call(null,G__262763));
})(),(function (){var G__262802 = cljs.core.PersistentArrayMap.EMPTY;
var G__262803 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262802,G__262803) : tailrecursion.hoplon.markdown.para_node.call(null,G__262802,G__262803));
})(),(function (){var G__262842 = (function (){var G__262843 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262844 = (function (){var G__262845 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262846 = "(";
var G__262847 = (function (){var G__262863 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262864 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262863,G__262864) : tailrecursion.hoplon.span.call(null,G__262863,G__262864));
})();
var G__262848 = (function (){var G__262865 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262866 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262865,G__262866) : tailrecursion.hoplon.span.call(null,G__262865,G__262866));
})();
var G__262849 = " [";
var G__262850 = (function (){var G__262867 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262868 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262867,G__262868) : tailrecursion.hoplon.span.call(null,G__262867,G__262868));
})();
var G__262851 = " ";
var G__262852 = (function (){var G__262869 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262870 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262869,G__262870) : tailrecursion.hoplon.span.call(null,G__262869,G__262870));
})();
var G__262853 = "]\n  (";
var G__262854 = (function (){var G__262871 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262872 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262871,G__262872) : tailrecursion.hoplon.span.call(null,G__262871,G__262872));
})();
var G__262855 = "(";
var G__262856 = (function (){var G__262873 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262874 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262873,G__262874) : tailrecursion.hoplon.span.call(null,G__262873,G__262874));
})();
var G__262857 = (function (){var G__262875 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262876 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262875,G__262876) : tailrecursion.hoplon.span.call(null,G__262875,G__262876));
})();
var G__262858 = " ";
var G__262859 = (function (){var G__262877 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262878 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262877,G__262878) : tailrecursion.hoplon.span.call(null,G__262877,G__262878));
})();
var G__262860 = ") ";
var G__262861 = (function (){var G__262879 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262880 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262879,G__262880) : tailrecursion.hoplon.span.call(null,G__262879,G__262880));
})();
var G__262862 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__262845,G__262846,G__262847,G__262848,G__262849,G__262850,G__262851,G__262852,G__262853,G__262854,G__262855,G__262856,G__262857,G__262858,G__262859,G__262860,G__262861,G__262862) : tailrecursion.hoplon.pre.call(null,G__262845,G__262846,G__262847,G__262848,G__262849,G__262850,G__262851,G__262852,G__262853,G__262854,G__262855,G__262856,G__262857,G__262858,G__262859,G__262860,G__262861,G__262862));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262843,G__262844) : tailrecursion.hoplon.div.call(null,G__262843,G__262844));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262842) : tailrecursion.hoplon.div.call(null,G__262842));
})(),(function (){var G__262881 = cljs.core.PersistentArrayMap.EMPTY;
var G__262882 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We also have to say what we mean by ``good enough.",(function (){var G__262883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262884 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262883,G__262884) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262883,G__262884));
})(),(function (){var G__262885 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__262886 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__262885,G__262886) : tailrecursion.hoplon.markdown.simple_node.call(null,G__262885,G__262886));
})()," The following will do for illustration, but it is not really a very good test. (See exercise 1.7.) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001):",(function (){var G__262887 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__262888 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention. As far as the interpreter is concerned, the question mark is just an ordinary character."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262887,G__262888) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262887,G__262888));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262881,G__262882) : tailrecursion.hoplon.markdown.para_node.call(null,G__262881,G__262882));
})(),(function (){var G__262936 = (function (){var G__262937 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__262938 = (function (){var G__262939 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__262940 = "(";
var G__262941 = (function (){var G__262962 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__262963 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262962,G__262963) : tailrecursion.hoplon.span.call(null,G__262962,G__262963));
})();
var G__262942 = (function (){var G__262964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262965 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262964,G__262965) : tailrecursion.hoplon.span.call(null,G__262964,G__262965));
})();
var G__262943 = " [";
var G__262944 = (function (){var G__262966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262967 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262966,G__262967) : tailrecursion.hoplon.span.call(null,G__262966,G__262967));
})();
var G__262945 = " ";
var G__262946 = (function (){var G__262968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262969 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262968,G__262969) : tailrecursion.hoplon.span.call(null,G__262968,G__262969));
})();
var G__262947 = "]\n  (";
var G__262948 = (function (){var G__262970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262971 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262970,G__262971) : tailrecursion.hoplon.span.call(null,G__262970,G__262971));
})();
var G__262949 = "(";
var G__262950 = (function (){var G__262972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262973 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262972,G__262973) : tailrecursion.hoplon.span.call(null,G__262972,G__262973));
})();
var G__262951 = " (";
var G__262952 = (function (){var G__262974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__262975 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262974,G__262975) : tailrecursion.hoplon.span.call(null,G__262974,G__262975));
})();
var G__262953 = "(";
var G__262954 = (function (){var G__262976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__262977 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262976,G__262977) : tailrecursion.hoplon.span.call(null,G__262976,G__262977));
})();
var G__262955 = " ";
var G__262956 = (function (){var G__262978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262979 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262978,G__262979) : tailrecursion.hoplon.span.call(null,G__262978,G__262979));
})();
var G__262957 = ") ";
var G__262958 = (function (){var G__262980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__262981 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262980,G__262981) : tailrecursion.hoplon.span.call(null,G__262980,G__262981));
})();
var G__262959 = ")) ";
var G__262960 = (function (){var G__262982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__262983 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__262982,G__262983) : tailrecursion.hoplon.span.call(null,G__262982,G__262983));
})();
var G__262961 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__262939,G__262940,G__262941,G__262942,G__262943,G__262944,G__262945,G__262946,G__262947,G__262948,G__262949,G__262950,G__262951,G__262952,G__262953,G__262954,G__262955,G__262956,G__262957,G__262958,G__262959,G__262960,G__262961) : tailrecursion.hoplon.pre.call(null,G__262939,G__262940,G__262941,G__262942,G__262943,G__262944,G__262945,G__262946,G__262947,G__262948,G__262949,G__262950,G__262951,G__262952,G__262953,G__262954,G__262955,G__262956,G__262957,G__262958,G__262959,G__262960,G__262961));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__262937,G__262938) : tailrecursion.hoplon.div.call(null,G__262937,G__262938));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__262936) : tailrecursion.hoplon.div.call(null,G__262936));
})(),(function (){var G__262984 = cljs.core.PersistentArrayMap.EMPTY;
var G__262985 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:",(function (){var G__262986 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__262987 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that we express our initial guess as 1.0 rather than 1. This would not make any difference in many Lisp implementations. MIT Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal. For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667. (We will learn how to implement arithmetic on rational numbers in section 2.1.1.) If we start with an initial guess of 1 in our square-root program, and \\(x\\) is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals. Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__262986,G__262987) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__262986,G__262987));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__262984,G__262985) : tailrecursion.hoplon.markdown.para_node.call(null,G__262984,G__262985));
})(),(function (){var G__263015 = (function (){var G__263016 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263017 = (function (){var G__263018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263019 = "(";
var G__263020 = (function (){var G__263031 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263032 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263031,G__263032) : tailrecursion.hoplon.span.call(null,G__263031,G__263032));
})();
var G__263021 = (function (){var G__263033 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263034 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263033,G__263034) : tailrecursion.hoplon.span.call(null,G__263033,G__263034));
})();
var G__263022 = " [";
var G__263023 = (function (){var G__263035 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263036 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263035,G__263036) : tailrecursion.hoplon.span.call(null,G__263035,G__263036));
})();
var G__263024 = "]\n  (";
var G__263025 = (function (){var G__263037 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263038 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263037,G__263038) : tailrecursion.hoplon.span.call(null,G__263037,G__263038));
})();
var G__263026 = " ";
var G__263027 = (function (){var G__263039 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263040 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263039,G__263040) : tailrecursion.hoplon.span.call(null,G__263039,G__263040));
})();
var G__263028 = " ";
var G__263029 = (function (){var G__263041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263042 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263041,G__263042) : tailrecursion.hoplon.span.call(null,G__263041,G__263042));
})();
var G__263030 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__263018,G__263019,G__263020,G__263021,G__263022,G__263023,G__263024,G__263025,G__263026,G__263027,G__263028,G__263029,G__263030) : tailrecursion.hoplon.pre.call(null,G__263018,G__263019,G__263020,G__263021,G__263022,G__263023,G__263024,G__263025,G__263026,G__263027,G__263028,G__263029,G__263030));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263016,G__263017) : tailrecursion.hoplon.div.call(null,G__263016,G__263017));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263015) : tailrecursion.hoplon.div.call(null,G__263015));
})(),(function (){var G__263043 = cljs.core.PersistentArrayMap.EMPTY;
var G__263044 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we type these definitions to the interpreter, we can use sqrt just as we can use any procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263043,G__263044) : tailrecursion.hoplon.markdown.para_node.call(null,G__263043,G__263044));
})(),(function (){var G__263124 = (function (){var G__263125 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263126 = (function (){var G__263127 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263128 = "(";
var G__263129 = (function (){var G__263166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263167 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263166,G__263167) : tailrecursion.hoplon.span.call(null,G__263166,G__263167));
})();
var G__263130 = " ";
var G__263131 = (function (){var G__263168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263169 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263168,G__263169) : tailrecursion.hoplon.span.call(null,G__263168,G__263169));
})();
var G__263132 = ")\n";
var G__263133 = (function (){var G__263170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263171 = "3.00009155413138";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263170,G__263171) : tailrecursion.hoplon.span.call(null,G__263170,G__263171));
})();
var G__263134 = "\n(";
var G__263135 = (function (){var G__263172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263173 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263172,G__263173) : tailrecursion.hoplon.span.call(null,G__263172,G__263173));
})();
var G__263136 = " (";
var G__263137 = (function (){var G__263174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263175 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263174,G__263175) : tailrecursion.hoplon.span.call(null,G__263174,G__263175));
})();
var G__263138 = (function (){var G__263176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263177 = "100";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263176,G__263177) : tailrecursion.hoplon.span.call(null,G__263176,G__263177));
})();
var G__263139 = " ";
var G__263140 = (function (){var G__263178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263179 = "37";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263178,G__263179) : tailrecursion.hoplon.span.call(null,G__263178,G__263179));
})();
var G__263141 = "))\n";
var G__263142 = (function (){var G__263180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263181 = "11.704699917758145";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263180,G__263181) : tailrecursion.hoplon.span.call(null,G__263180,G__263181));
})();
var G__263143 = "\n(";
var G__263144 = (function (){var G__263182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263183 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263182,G__263183) : tailrecursion.hoplon.span.call(null,G__263182,G__263183));
})();
var G__263145 = " (";
var G__263146 = (function (){var G__263184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263185 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263184,G__263185) : tailrecursion.hoplon.span.call(null,G__263184,G__263185));
})();
var G__263147 = "(";
var G__263148 = (function (){var G__263186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263187 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263186,G__263187) : tailrecursion.hoplon.span.call(null,G__263186,G__263187));
})();
var G__263149 = " ";
var G__263150 = (function (){var G__263188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263189 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263188,G__263189) : tailrecursion.hoplon.span.call(null,G__263188,G__263189));
})();
var G__263151 = ") (";
var G__263152 = (function (){var G__263190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263191 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263190,G__263191) : tailrecursion.hoplon.span.call(null,G__263190,G__263191));
})();
var G__263153 = " ";
var G__263154 = (function (){var G__263192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263193 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263192,G__263193) : tailrecursion.hoplon.span.call(null,G__263192,G__263193));
})();
var G__263155 = ")))\n";
var G__263156 = (function (){var G__263194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263195 = "1.7739279023207892";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263194,G__263195) : tailrecursion.hoplon.span.call(null,G__263194,G__263195));
})();
var G__263157 = "\n(";
var G__263158 = (function (){var G__263196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263197 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263196,G__263197) : tailrecursion.hoplon.span.call(null,G__263196,G__263197));
})();
var G__263159 = " (";
var G__263160 = (function (){var G__263198 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263199 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263198,G__263199) : tailrecursion.hoplon.span.call(null,G__263198,G__263199));
})();
var G__263161 = " ";
var G__263162 = (function (){var G__263200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263201 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263200,G__263201) : tailrecursion.hoplon.span.call(null,G__263200,G__263201));
})();
var G__263163 = "))\n";
var G__263164 = (function (){var G__263202 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263203 = "1000.000369924366";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263202,G__263203) : tailrecursion.hoplon.span.call(null,G__263202,G__263203));
})();
var G__263165 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__263127,G__263128,G__263129,G__263130,G__263131,G__263132,G__263133,G__263134,G__263135,G__263136,G__263137,G__263138,G__263139,G__263140,G__263141,G__263142,G__263143,G__263144,G__263145,G__263146,G__263147,G__263148,G__263149,G__263150,G__263151,G__263152,G__263153,G__263154,G__263155,G__263156,G__263157,G__263158,G__263159,G__263160,G__263161,G__263162,G__263163,G__263164,G__263165) : tailrecursion.hoplon.pre.call(null,G__263127,G__263128,G__263129,G__263130,G__263131,G__263132,G__263133,G__263134,G__263135,G__263136,G__263137,G__263138,G__263139,G__263140,G__263141,G__263142,G__263143,G__263144,G__263145,G__263146,G__263147,G__263148,G__263149,G__263150,G__263151,G__263152,G__263153,G__263154,G__263155,G__263156,G__263157,G__263158,G__263159,G__263160,G__263161,G__263162,G__263163,G__263164,G__263165));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263125,G__263126) : tailrecursion.hoplon.div.call(null,G__263125,G__263126));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263124) : tailrecursion.hoplon.div.call(null,G__263124));
})(),(function (){var G__263204 = cljs.core.PersistentArrayMap.EMPTY;
var G__263205 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The sqrt program also illustrates that the simple procedural language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. Sqrt-iter, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a procedure.",(function (){var G__263206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__263207 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on ``tail recursion",(function (){var G__263208 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263209 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263208,G__263209) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263208,G__263209));
})(),(function (){var G__263210 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263211 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263210,G__263211) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263210,G__263211));
})()," in section 1.2.1."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263206,G__263207) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263206,G__263207));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263204,G__263205) : tailrecursion.hoplon.markdown.para_node.call(null,G__263204,G__263205));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262597;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262596;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_262595;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_262594;
}})()], 0));
var G__258252 = "";
var G__258253 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263212 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263213 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263214 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263215 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263216 = cljs.core.PersistentArrayMap.EMPTY;
var G__263217 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Alyssa P. Hacker doesn",(function (){var G__263218 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263219 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263218,G__263219) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263218,G__263219));
})(),"t see why if needs to be provided as a special form. ",(function (){var G__263220 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__263221 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Why can",(function (){var G__263222 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263223 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263222,G__263223) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263222,G__263223));
})(),"t I just define it as an ordinary procedure in terms of cond?"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263220,G__263221) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263220,G__263221));
})()," she asks. Alyssa",(function (){var G__263224 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263225 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263224,G__263225) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263224,G__263225));
})(),"s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263216,G__263217) : tailrecursion.hoplon.markdown.para_node.call(null,G__263216,G__263217));
})(),(function (){var G__263268 = (function (){var G__263269 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263270 = (function (){var G__263271 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263272 = "(";
var G__263273 = (function (){var G__263291 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263292 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263291,G__263292) : tailrecursion.hoplon.span.call(null,G__263291,G__263292));
})();
var G__263274 = (function (){var G__263293 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263294 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263293,G__263294) : tailrecursion.hoplon.span.call(null,G__263293,G__263294));
})();
var G__263275 = " [";
var G__263276 = (function (){var G__263295 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263296 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263295,G__263296) : tailrecursion.hoplon.span.call(null,G__263295,G__263296));
})();
var G__263277 = " ";
var G__263278 = (function (){var G__263297 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263298 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263297,G__263298) : tailrecursion.hoplon.span.call(null,G__263297,G__263298));
})();
var G__263279 = " ";
var G__263280 = (function (){var G__263299 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263300 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263299,G__263300) : tailrecursion.hoplon.span.call(null,G__263299,G__263300));
})();
var G__263281 = "]\n  (";
var G__263282 = (function (){var G__263301 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263302 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263301,G__263302) : tailrecursion.hoplon.span.call(null,G__263301,G__263302));
})();
var G__263283 = (function (){var G__263303 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263304 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263303,G__263304) : tailrecursion.hoplon.span.call(null,G__263303,G__263304));
})();
var G__263284 = " ";
var G__263285 = (function (){var G__263305 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263306 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263305,G__263306) : tailrecursion.hoplon.span.call(null,G__263305,G__263306));
})();
var G__263286 = "\n        ";
var G__263287 = (function (){var G__263307 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263308 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263307,G__263308) : tailrecursion.hoplon.span.call(null,G__263307,G__263308));
})();
var G__263288 = " ";
var G__263289 = (function (){var G__263309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263310 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263309,G__263310) : tailrecursion.hoplon.span.call(null,G__263309,G__263310));
})();
var G__263290 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__263271,G__263272,G__263273,G__263274,G__263275,G__263276,G__263277,G__263278,G__263279,G__263280,G__263281,G__263282,G__263283,G__263284,G__263285,G__263286,G__263287,G__263288,G__263289,G__263290) : tailrecursion.hoplon.pre.call(null,G__263271,G__263272,G__263273,G__263274,G__263275,G__263276,G__263277,G__263278,G__263279,G__263280,G__263281,G__263282,G__263283,G__263284,G__263285,G__263286,G__263287,G__263288,G__263289,G__263290));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263269,G__263270) : tailrecursion.hoplon.div.call(null,G__263269,G__263270));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263268) : tailrecursion.hoplon.div.call(null,G__263268));
})(),(function (){var G__263311 = cljs.core.PersistentArrayMap.EMPTY;
var G__263312 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Eva demonstrates the program for Alyssa:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263311,G__263312) : tailrecursion.hoplon.markdown.para_node.call(null,G__263311,G__263312));
})(),(function (){var G__263344 = (function (){var G__263345 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263346 = (function (){var G__263347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263348 = "(";
var G__263349 = (function (){var G__263362 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263363 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263362,G__263363) : tailrecursion.hoplon.span.call(null,G__263362,G__263363));
})();
var G__263350 = " (";
var G__263351 = (function (){var G__263364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263365 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263364,G__263365) : tailrecursion.hoplon.span.call(null,G__263364,G__263365));
})();
var G__263352 = (function (){var G__263366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263367 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263366,G__263367) : tailrecursion.hoplon.span.call(null,G__263366,G__263367));
})();
var G__263353 = " ";
var G__263354 = (function (){var G__263368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263369 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263368,G__263369) : tailrecursion.hoplon.span.call(null,G__263368,G__263369));
})();
var G__263355 = ") ";
var G__263356 = (function (){var G__263370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263371 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263370,G__263371) : tailrecursion.hoplon.span.call(null,G__263370,G__263371));
})();
var G__263357 = " ";
var G__263358 = (function (){var G__263372 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263373 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263372,G__263373) : tailrecursion.hoplon.span.call(null,G__263372,G__263373));
})();
var G__263359 = ")\n";
var G__263360 = (function (){var G__263374 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263375 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263374,G__263375) : tailrecursion.hoplon.span.call(null,G__263374,G__263375));
})();
var G__263361 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__263347,G__263348,G__263349,G__263350,G__263351,G__263352,G__263353,G__263354,G__263355,G__263356,G__263357,G__263358,G__263359,G__263360,G__263361) : tailrecursion.hoplon.pre.call(null,G__263347,G__263348,G__263349,G__263350,G__263351,G__263352,G__263353,G__263354,G__263355,G__263356,G__263357,G__263358,G__263359,G__263360,G__263361));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263345,G__263346) : tailrecursion.hoplon.div.call(null,G__263345,G__263346));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263344) : tailrecursion.hoplon.div.call(null,G__263344));
})(),(function (){var G__263407 = (function (){var G__263408 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263409 = (function (){var G__263410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263411 = "(";
var G__263412 = (function (){var G__263425 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263426 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263425,G__263426) : tailrecursion.hoplon.span.call(null,G__263425,G__263426));
})();
var G__263413 = " (";
var G__263414 = (function (){var G__263427 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263428 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263427,G__263428) : tailrecursion.hoplon.span.call(null,G__263427,G__263428));
})();
var G__263415 = (function (){var G__263429 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263430 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263429,G__263430) : tailrecursion.hoplon.span.call(null,G__263429,G__263430));
})();
var G__263416 = " ";
var G__263417 = (function (){var G__263431 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263432 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263431,G__263432) : tailrecursion.hoplon.span.call(null,G__263431,G__263432));
})();
var G__263418 = ") ";
var G__263419 = (function (){var G__263433 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263434 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263433,G__263434) : tailrecursion.hoplon.span.call(null,G__263433,G__263434));
})();
var G__263420 = " ";
var G__263421 = (function (){var G__263435 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263436 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263435,G__263436) : tailrecursion.hoplon.span.call(null,G__263435,G__263436));
})();
var G__263422 = ")\n";
var G__263423 = (function (){var G__263437 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263438 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263437,G__263438) : tailrecursion.hoplon.span.call(null,G__263437,G__263438));
})();
var G__263424 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__263410,G__263411,G__263412,G__263413,G__263414,G__263415,G__263416,G__263417,G__263418,G__263419,G__263420,G__263421,G__263422,G__263423,G__263424) : tailrecursion.hoplon.pre.call(null,G__263410,G__263411,G__263412,G__263413,G__263414,G__263415,G__263416,G__263417,G__263418,G__263419,G__263420,G__263421,G__263422,G__263423,G__263424));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263408,G__263409) : tailrecursion.hoplon.div.call(null,G__263408,G__263409));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263407) : tailrecursion.hoplon.div.call(null,G__263407));
})(),(function (){var G__263439 = cljs.core.PersistentArrayMap.EMPTY;
var G__263440 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Delighted, Alyssa now uses ",(function (){var G__263441 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263442 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263441,G__263442) : tailrecursion.hoplon.markdown.code_node.call(null,G__263441,G__263442));
})()," to rewrite the square-root program:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263439,G__263440) : tailrecursion.hoplon.markdown.para_node.call(null,G__263439,G__263440));
})(),(function (){var G__263502 = (function (){var G__263503 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263504 = (function (){var G__263505 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263506 = "(";
var G__263507 = (function (){var G__263534 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263535 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263534,G__263535) : tailrecursion.hoplon.span.call(null,G__263534,G__263535));
})();
var G__263508 = (function (){var G__263536 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263537 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263536,G__263537) : tailrecursion.hoplon.span.call(null,G__263536,G__263537));
})();
var G__263509 = " [";
var G__263510 = (function (){var G__263538 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263539 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263538,G__263539) : tailrecursion.hoplon.span.call(null,G__263538,G__263539));
})();
var G__263511 = " ";
var G__263512 = (function (){var G__263540 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263541 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263540,G__263541) : tailrecursion.hoplon.span.call(null,G__263540,G__263541));
})();
var G__263513 = "]\n  (";
var G__263514 = (function (){var G__263542 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263543 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263542,G__263543) : tailrecursion.hoplon.span.call(null,G__263542,G__263543));
})();
var G__263515 = " (";
var G__263516 = (function (){var G__263544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263545 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263544,G__263545) : tailrecursion.hoplon.span.call(null,G__263544,G__263545));
})();
var G__263517 = " ";
var G__263518 = (function (){var G__263546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263547 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263546,G__263547) : tailrecursion.hoplon.span.call(null,G__263546,G__263547));
})();
var G__263519 = " ";
var G__263520 = (function (){var G__263548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263549 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263548,G__263549) : tailrecursion.hoplon.span.call(null,G__263548,G__263549));
})();
var G__263521 = ")\n          ";
var G__263522 = (function (){var G__263550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263551 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263550,G__263551) : tailrecursion.hoplon.span.call(null,G__263550,G__263551));
})();
var G__263523 = "\n          (";
var G__263524 = (function (){var G__263552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263553 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263552,G__263553) : tailrecursion.hoplon.span.call(null,G__263552,G__263553));
})();
var G__263525 = " (";
var G__263526 = (function (){var G__263554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263555 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263554,G__263555) : tailrecursion.hoplon.span.call(null,G__263554,G__263555));
})();
var G__263527 = " ";
var G__263528 = (function (){var G__263556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263557 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263556,G__263557) : tailrecursion.hoplon.span.call(null,G__263556,G__263557));
})();
var G__263529 = " ";
var G__263530 = (function (){var G__263558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263559 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263558,G__263559) : tailrecursion.hoplon.span.call(null,G__263558,G__263559));
})();
var G__263531 = ")\n                     ";
var G__263532 = (function (){var G__263560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263561 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263560,G__263561) : tailrecursion.hoplon.span.call(null,G__263560,G__263561));
})();
var G__263533 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__263505,G__263506,G__263507,G__263508,G__263509,G__263510,G__263511,G__263512,G__263513,G__263514,G__263515,G__263516,G__263517,G__263518,G__263519,G__263520,G__263521,G__263522,G__263523,G__263524,G__263525,G__263526,G__263527,G__263528,G__263529,G__263530,G__263531,G__263532,G__263533) : tailrecursion.hoplon.pre.call(null,G__263505,G__263506,G__263507,G__263508,G__263509,G__263510,G__263511,G__263512,G__263513,G__263514,G__263515,G__263516,G__263517,G__263518,G__263519,G__263520,G__263521,G__263522,G__263523,G__263524,G__263525,G__263526,G__263527,G__263528,G__263529,G__263530,G__263531,G__263532,G__263533));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263503,G__263504) : tailrecursion.hoplon.div.call(null,G__263503,G__263504));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263502) : tailrecursion.hoplon.div.call(null,G__263502));
})(),(function (){var G__263562 = cljs.core.PersistentArrayMap.EMPTY;
var G__263563 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What happens when Alyssa attempts to use this to compute square roots? Explain."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263562,G__263563) : tailrecursion.hoplon.markdown.para_node.call(null,G__263562,G__263563));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263215;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263214;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263213;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263212;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263564 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263565 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263566 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263567 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263568 = cljs.core.PersistentArrayMap.EMPTY;
var G__263569 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since ",(function (){var G__263570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263571 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263570,G__263571) : tailrecursion.hoplon.markdown.code_node.call(null,G__263570,G__263571));
})()," is not a special form, it will be evaluated in applicative order. Hence, when ",(function (){var G__263572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(new-if a b c)"], null);
var G__263573 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263572,G__263573) : tailrecursion.hoplon.markdown.code_node.call(null,G__263572,G__263573));
})()," is called, a, b, and c are all evaluated before considering how they may or may not be used within the function ",(function (){var G__263574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263575 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263574,G__263575) : tailrecursion.hoplon.markdown.code_node.call(null,G__263574,G__263575));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263568,G__263569) : tailrecursion.hoplon.markdown.para_node.call(null,G__263568,G__263569));
})(),(function (){var G__263576 = cljs.core.PersistentArrayMap.EMPTY;
var G__263577 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So, in this particular case, let us compute the square root of 4 with our first guess being 2 (Alyssa would probably think that this would terminate immediately, but let",(function (){var G__263578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263579 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263578,G__263579) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263578,G__263579));
})(),"s see). ",(function (){var G__263580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"clj\n(sqrt-iter 2 4) ==>\n(new-if (good-enough? 2 4) 2 (sqrt-iter (improve 2 4) 4))\n"], null);
var G__263581 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263580,G__263581) : tailrecursion.hoplon.markdown.code_node.call(null,G__263580,G__263581));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263576,G__263577) : tailrecursion.hoplon.markdown.para_node.call(null,G__263576,G__263577));
})(),(function (){var G__263582 = cljs.core.PersistentArrayMap.EMPTY;
var G__263583 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["You can see that in this example, since ",(function (){var G__263584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(improve 2 4) = 2"], null);
var G__263585 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263584,G__263585) : tailrecursion.hoplon.markdown.code_node.call(null,G__263584,G__263585));
})(),", ",(function (){var G__263586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263587 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263586,G__263587) : tailrecursion.hoplon.markdown.code_node.call(null,G__263586,G__263587));
})()," is going to requre us to compute ",(function (){var G__263588 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(sqrt-iter 2 4)"], null);
var G__263589 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263588,G__263589) : tailrecursion.hoplon.markdown.code_node.call(null,G__263588,G__263589));
})()," again. Then we",(function (){var G__263590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263591 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263590,G__263591) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263590,G__263591));
})(),"ll be computing the ",(function (){var G__263592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__263593 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263592,G__263593) : tailrecursion.hoplon.markdown.code_node.call(null,G__263592,G__263593));
})()," again, and you can see the cycle that we",(function (){var G__263594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263595 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263594,G__263595) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263594,G__263595));
})(),"ve gotten ourselves in."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263582,G__263583) : tailrecursion.hoplon.markdown.para_node.call(null,G__263582,G__263583));
})(),(function (){var G__263596 = cljs.core.PersistentArrayMap.EMPTY;
var G__263597 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Long story short, this would result in an infinite loop."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263596,G__263597) : tailrecursion.hoplon.markdown.para_node.call(null,G__263596,G__263597));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263567;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263566;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263565;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263564;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263598 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263599 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263600 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263601 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263602 = cljs.core.PersistentArrayMap.EMPTY;
var G__263603 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",(function (){var G__263604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__263605 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263604,G__263605) : tailrecursion.hoplon.markdown.code_node.call(null,G__263604,G__263605));
})()," test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing ",(function (){var G__263606 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__263607 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263606,G__263607) : tailrecursion.hoplon.markdown.code_node.call(null,G__263606,G__263607));
})()," is to watch how ",(function (){var G__263608 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__263609 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263608,G__263609) : tailrecursion.hoplon.markdown.code_node.call(null,G__263608,G__263609));
})()," changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263602,G__263603) : tailrecursion.hoplon.markdown.para_node.call(null,G__263602,G__263603));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263601;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263600;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263599;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263598;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263610 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263611 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263612 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263613 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263614 = cljs.core.PersistentArrayMap.EMPTY;
var G__263615 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When finding the square root of a very small number (let",(function (){var G__263616 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263617 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263616,G__263617) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263616,G__263617));
})(),"s use 0.0000001, whose square root is 0.0001), since the answer we",(function (){var G__263618 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263619 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263618,G__263619) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263618,G__263619));
})(),"re looking for is smaller than our tollerance, you might get a zero or even a negative number as our answer! And on the other end of the spectrum, if our number is too large it would require enough calculations to make the precision larger than our tolerance. In that having a set tolerance is meaningless because our answer will be outside of that range due to the limitations of the computer!"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263614,G__263615) : tailrecursion.hoplon.markdown.para_node.call(null,G__263614,G__263615));
})(),(function (){var G__263620 = cljs.core.PersistentArrayMap.EMPTY;
var G__263621 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To avoid this problem we can set a dynamic tolerance like the exercise suggests. Let",(function (){var G__263622 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263623 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263622,G__263623) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263622,G__263623));
})(),"s say our problem allows for a 10% fractional tolerance. Then our ",(function (){var G__263624 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__263625 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263624,G__263625) : tailrecursion.hoplon.markdown.code_node.call(null,G__263624,G__263625));
})()," procedure would look like, "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263620,G__263621) : tailrecursion.hoplon.markdown.para_node.call(null,G__263620,G__263621));
})(),(function (){var G__263676 = (function (){var G__263677 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263678 = (function (){var G__263679 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263680 = "(";
var G__263681 = (function (){var G__263703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263704 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263703,G__263704) : tailrecursion.hoplon.span.call(null,G__263703,G__263704));
})();
var G__263682 = (function (){var G__263705 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263706 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263705,G__263706) : tailrecursion.hoplon.span.call(null,G__263705,G__263706));
})();
var G__263683 = " [";
var G__263684 = (function (){var G__263707 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263708 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263707,G__263708) : tailrecursion.hoplon.span.call(null,G__263707,G__263708));
})();
var G__263685 = " ";
var G__263686 = (function (){var G__263709 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263710 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263709,G__263710) : tailrecursion.hoplon.span.call(null,G__263709,G__263710));
})();
var G__263687 = "]\n  (";
var G__263688 = (function (){var G__263711 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263712 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263711,G__263712) : tailrecursion.hoplon.span.call(null,G__263711,G__263712));
})();
var G__263689 = "(";
var G__263690 = (function (){var G__263713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263714 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263713,G__263714) : tailrecursion.hoplon.span.call(null,G__263713,G__263714));
})();
var G__263691 = " (";
var G__263692 = (function (){var G__263715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263716 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263715,G__263716) : tailrecursion.hoplon.span.call(null,G__263715,G__263716));
})();
var G__263693 = "(";
var G__263694 = (function (){var G__263717 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263718 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263717,G__263718) : tailrecursion.hoplon.span.call(null,G__263717,G__263718));
})();
var G__263695 = (function (){var G__263719 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263720 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263719,G__263720) : tailrecursion.hoplon.span.call(null,G__263719,G__263720));
})();
var G__263696 = " ";
var G__263697 = (function (){var G__263721 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263722 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263721,G__263722) : tailrecursion.hoplon.span.call(null,G__263721,G__263722));
})();
var G__263698 = ") ";
var G__263699 = (function (){var G__263723 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263724 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263723,G__263724) : tailrecursion.hoplon.span.call(null,G__263723,G__263724));
})();
var G__263700 = ")) ";
var G__263701 = (function (){var G__263725 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263726 = "0.1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263725,G__263726) : tailrecursion.hoplon.span.call(null,G__263725,G__263726));
})();
var G__263702 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24(G__263679,G__263680,G__263681,G__263682,G__263683,G__263684,G__263685,G__263686,G__263687,G__263688,G__263689,G__263690,G__263691,G__263692,G__263693,G__263694,G__263695,G__263696,G__263697,G__263698,G__263699,G__263700,G__263701,G__263702) : tailrecursion.hoplon.pre.call(null,G__263679,G__263680,G__263681,G__263682,G__263683,G__263684,G__263685,G__263686,G__263687,G__263688,G__263689,G__263690,G__263691,G__263692,G__263693,G__263694,G__263695,G__263696,G__263697,G__263698,G__263699,G__263700,G__263701,G__263702));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263677,G__263678) : tailrecursion.hoplon.div.call(null,G__263677,G__263678));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263676) : tailrecursion.hoplon.div.call(null,G__263676));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263613;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263612;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263611;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263610;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263727 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263728 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263729 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263730 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263731 = cljs.core.PersistentArrayMap.EMPTY;
var G__263732 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Newton",(function (){var G__263733 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263734 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263733,G__263734) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263733,G__263734));
})(),"s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263731,G__263732) : tailrecursion.hoplon.markdown.para_node.call(null,G__263731,G__263732));
})(),(function (){var G__263735 = cljs.core.PersistentArrayMap.EMPTY;
var G__263736 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\frac{x/y^2 +2y}{3} $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263735,G__263736) : tailrecursion.hoplon.markdown.para_node.call(null,G__263735,G__263736));
})(),(function (){var G__263737 = cljs.core.PersistentArrayMap.EMPTY;
var G__263738 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#!/sicp/ch/1/sect/3/sub/4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.3.4"], null)], 0))," we will see how to implement Newton",(function (){var G__263739 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263740 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263739,G__263740) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263739,G__263740));
})(),"s method in general as an abstraction of these square-root and cube-root procedures.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263737,G__263738) : tailrecursion.hoplon.markdown.para_node.call(null,G__263737,G__263738));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263730;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263729;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263728;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263727;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_263741 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263742 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263743 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263744 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263802 = (function (){var G__263803 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263804 = (function (){var G__263805 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263806 = "(";
var G__263807 = (function (){var G__263832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263833 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263832,G__263833) : tailrecursion.hoplon.span.call(null,G__263832,G__263833));
})();
var G__263808 = (function (){var G__263834 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263835 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263834,G__263835) : tailrecursion.hoplon.span.call(null,G__263834,G__263835));
})();
var G__263809 = " [";
var G__263810 = (function (){var G__263836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263837 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263836,G__263837) : tailrecursion.hoplon.span.call(null,G__263836,G__263837));
})();
var G__263811 = " ";
var G__263812 = (function (){var G__263838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263839 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263838,G__263839) : tailrecursion.hoplon.span.call(null,G__263838,G__263839));
})();
var G__263813 = "]\n  (";
var G__263814 = (function (){var G__263840 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263841 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263840,G__263841) : tailrecursion.hoplon.span.call(null,G__263840,G__263841));
})();
var G__263815 = "(";
var G__263816 = (function (){var G__263842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263843 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263842,G__263843) : tailrecursion.hoplon.span.call(null,G__263842,G__263843));
})();
var G__263817 = "(";
var G__263818 = (function (){var G__263844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263845 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263844,G__263845) : tailrecursion.hoplon.span.call(null,G__263844,G__263845));
})();
var G__263819 = (function (){var G__263846 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263847 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263846,G__263847) : tailrecursion.hoplon.span.call(null,G__263846,G__263847));
})();
var G__263820 = " (";
var G__263821 = (function (){var G__263848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__263849 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263848,G__263849) : tailrecursion.hoplon.span.call(null,G__263848,G__263849));
})();
var G__263822 = " ";
var G__263823 = (function (){var G__263850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263851 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263850,G__263851) : tailrecursion.hoplon.span.call(null,G__263850,G__263851));
})();
var G__263824 = ")) (";
var G__263825 = (function (){var G__263852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263853 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263852,G__263853) : tailrecursion.hoplon.span.call(null,G__263852,G__263853));
})();
var G__263826 = (function (){var G__263854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263855 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263854,G__263855) : tailrecursion.hoplon.span.call(null,G__263854,G__263855));
})();
var G__263827 = " ";
var G__263828 = (function (){var G__263856 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263857 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263856,G__263857) : tailrecursion.hoplon.span.call(null,G__263856,G__263857));
})();
var G__263829 = ")) ";
var G__263830 = (function (){var G__263858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__263859 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263858,G__263859) : tailrecursion.hoplon.span.call(null,G__263858,G__263859));
})();
var G__263831 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__263805,G__263806,G__263807,G__263808,G__263809,G__263810,G__263811,G__263812,G__263813,G__263814,G__263815,G__263816,G__263817,G__263818,G__263819,G__263820,G__263821,G__263822,G__263823,G__263824,G__263825,G__263826,G__263827,G__263828,G__263829,G__263830,G__263831) : tailrecursion.hoplon.pre.call(null,G__263805,G__263806,G__263807,G__263808,G__263809,G__263810,G__263811,G__263812,G__263813,G__263814,G__263815,G__263816,G__263817,G__263818,G__263819,G__263820,G__263821,G__263822,G__263823,G__263824,G__263825,G__263826,G__263827,G__263828,G__263829,G__263830,G__263831));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263803,G__263804) : tailrecursion.hoplon.div.call(null,G__263803,G__263804));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263802) : tailrecursion.hoplon.div.call(null,G__263802));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263744;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263743;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263742;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263741;
}})()], 0))], 0))], 0));
var G__258254 = "";
var G__258255 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Procedures as Black-Box Abstractions"], null),(function (){var _STAR_references_STAR_263860 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263861 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263862 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263863 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263864 = cljs.core.PersistentArrayMap.EMPTY;
var G__263865 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Sqrt"], null);
var G__263867 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263866,G__263867) : tailrecursion.hoplon.markdown.code_node.call(null,G__263866,G__263867));
})()," is our first example of a process defined by a set of mutually defined procedures. Notice that the definition of ",(function (){var G__263868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__263869 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263868,G__263869) : tailrecursion.hoplon.markdown.code_node.call(null,G__263868,G__263869));
})()," is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0)),"; that is, the procedure is defined in terms of itself. The idea of being able to define a procedure in terms of itself may be disturbing; it may seem unclear how such a ",(function (){var G__263870 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__263871 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["circular"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263870,G__263871) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263870,G__263871));
})()," definition could make sense at all, much less specify a well-defined process to be carried out by a computer. This will be addressed more carefully in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"\"#/sicp/ch/1/sect/2/\"",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.2"], null)], 0)),". But first let",(function (){var G__263872 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__263873 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263872,G__263873) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263872,G__263873));
})(),"s consider some other important points illustrated by the ",(function (){var G__263874 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__263875 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263874,G__263875) : tailrecursion.hoplon.markdown.code_node.call(null,G__263874,G__263875));
})()," example."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263864,G__263865) : tailrecursion.hoplon.markdown.para_node.call(null,G__263864,G__263865));
})(),(function (){var G__263876 = cljs.core.PersistentArrayMap.EMPTY;
var G__263877 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that the problem of computing square roots breaks up naturally into a number of subproblems: how to tell whether a guess is good enough, how to improve a guess, and so on. Each of these tasks is accomplished by a separate procedure. The entire ",(function (){var G__263878 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__263879 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263878,G__263879) : tailrecursion.hoplon.markdown.code_node.call(null,G__263878,G__263879));
})()," program can be viewed as a cluster of procedures (shown in figure 1.2) that mirrors the decomposition of the problem into subproblems."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263876,G__263877) : tailrecursion.hoplon.markdown.para_node.call(null,G__263876,G__263877));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263863;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263862;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263861;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263860;
}})(),book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Procedural decomposition of the sqrt program."], null)], 0)),"",(function (){var _STAR_references_STAR_263880 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263881 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_263882 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_263883 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__263884 = cljs.core.PersistentArrayMap.EMPTY;
var G__263885 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The importance of this decomposition strategy is not simply that one is dividing the program into parts. After all, we could take any large program and divide it into parts ",(function (){var G__263886 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__263887 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__263886,G__263887) : tailrecursion.hoplon.markdown.simple_node.call(null,G__263886,G__263887));
})()," the first ten lines, the next ten lines, the next ten lines, and so on. Rather, it is crucial that each procedure accomplishes an identifiable task that can be used as a module in defining other procedures. For example, when we define the ",(function (){var G__263888 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__263889 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263888,G__263889) : tailrecursion.hoplon.markdown.code_node.call(null,G__263888,G__263889));
})()," procedure in terms of ",(function (){var G__263890 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__263891 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263890,G__263891) : tailrecursion.hoplon.markdown.code_node.call(null,G__263890,G__263891));
})(),", we are able to regard the ",(function (){var G__263892 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__263893 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263892,G__263893) : tailrecursion.hoplon.markdown.code_node.call(null,G__263892,G__263893));
})()," procedure as a ",(function (){var G__263894 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__263895 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["black box."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263894,G__263895) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263894,G__263895));
})()," We are not at that moment concerned with ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how"], null)], 0))," the procedure computes its result, only with the fact that it computes the square. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as the ",(function (){var G__263896 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__263897 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263896,G__263897) : tailrecursion.hoplon.markdown.code_node.call(null,G__263896,G__263897));
})()," procedure is concerned, ",(function (){var G__263898 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__263899 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__263898,G__263899) : tailrecursion.hoplon.markdown.code_node.call(null,G__263898,G__263899));
})()," is not quite a procedure but rather an abstraction of a procedure, a so-called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedural abstraction"], null)], 0)),". At this level of abstraction, any procedure that computes the square is equally good."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263884,G__263885) : tailrecursion.hoplon.markdown.para_node.call(null,G__263884,G__263885));
})(),(function (){var G__263900 = cljs.core.PersistentArrayMap.EMPTY;
var G__263901 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus, considering only the values they return, the following two procedures for squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.",(function (){var G__263902 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__263903 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is not even clear which of these procedures is a more efficient implementation. This depends upon the hardware available. There are machines for which the ",(function (){var G__263904 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__263905 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["obvious"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263904,G__263905) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263904,G__263905));
})()," implementation is the less efficient one. Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__263902,G__263903) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__263902,G__263903));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__263900,G__263901) : tailrecursion.hoplon.markdown.para_node.call(null,G__263900,G__263901));
})(),(function (){var G__263932 = (function (){var G__263933 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263934 = (function (){var G__263935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263936 = "(";
var G__263937 = (function (){var G__263947 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__263948 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263947,G__263948) : tailrecursion.hoplon.span.call(null,G__263947,G__263948));
})();
var G__263938 = (function (){var G__263949 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263950 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263949,G__263950) : tailrecursion.hoplon.span.call(null,G__263949,G__263950));
})();
var G__263939 = " [";
var G__263940 = (function (){var G__263951 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263952 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263951,G__263952) : tailrecursion.hoplon.span.call(null,G__263951,G__263952));
})();
var G__263941 = "] (";
var G__263942 = (function (){var G__263953 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__263954 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263953,G__263954) : tailrecursion.hoplon.span.call(null,G__263953,G__263954));
})();
var G__263943 = (function (){var G__263955 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263956 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263955,G__263956) : tailrecursion.hoplon.span.call(null,G__263955,G__263956));
})();
var G__263944 = " ";
var G__263945 = (function (){var G__263957 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__263958 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__263957,G__263958) : tailrecursion.hoplon.span.call(null,G__263957,G__263958));
})();
var G__263946 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__263935,G__263936,G__263937,G__263938,G__263939,G__263940,G__263941,G__263942,G__263943,G__263944,G__263945,G__263946) : tailrecursion.hoplon.pre.call(null,G__263935,G__263936,G__263937,G__263938,G__263939,G__263940,G__263941,G__263942,G__263943,G__263944,G__263945,G__263946));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263933,G__263934) : tailrecursion.hoplon.div.call(null,G__263933,G__263934));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263932) : tailrecursion.hoplon.div.call(null,G__263932));
})(),(function (){var G__263959 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn square [x] \n  (exp (double (log x))))\n") : tailrecursion.hoplon.code.call(null,"(defn square [x] \n  (exp (double (log x))))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__263959) : tailrecursion.hoplon.pre.call(null,G__263959));
})(),(function (){var G__263986 = (function (){var G__263987 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__263988 = (function (){var G__263989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__263990 = "(";
var G__263991 = (function (){var G__264001 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264002 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264001,G__264002) : tailrecursion.hoplon.span.call(null,G__264001,G__264002));
})();
var G__263992 = (function (){var G__264003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264004 = "double ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264003,G__264004) : tailrecursion.hoplon.span.call(null,G__264003,G__264004));
})();
var G__263993 = "[";
var G__263994 = (function (){var G__264005 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264006 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264005,G__264006) : tailrecursion.hoplon.span.call(null,G__264005,G__264006));
})();
var G__263995 = "] (";
var G__263996 = (function (){var G__264007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264008 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264007,G__264008) : tailrecursion.hoplon.span.call(null,G__264007,G__264008));
})();
var G__263997 = (function (){var G__264009 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264010 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264009,G__264010) : tailrecursion.hoplon.span.call(null,G__264009,G__264010));
})();
var G__263998 = " ";
var G__263999 = (function (){var G__264011 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264012 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264011,G__264012) : tailrecursion.hoplon.span.call(null,G__264011,G__264012));
})();
var G__264000 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__263989,G__263990,G__263991,G__263992,G__263993,G__263994,G__263995,G__263996,G__263997,G__263998,G__263999,G__264000) : tailrecursion.hoplon.pre.call(null,G__263989,G__263990,G__263991,G__263992,G__263993,G__263994,G__263995,G__263996,G__263997,G__263998,G__263999,G__264000));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__263987,G__263988) : tailrecursion.hoplon.div.call(null,G__263987,G__263988));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__263986) : tailrecursion.hoplon.div.call(null,G__263986));
})(),(function (){var G__264013 = cljs.core.PersistentArrayMap.EMPTY;
var G__264014 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So a procedure definition should be able to suppress detail. The users of the procedure may not have written the procedure themselves, but may have obtained it from another programmer as a black box. A user should not need to know how the procedure is implemented in order to use it."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264013,G__264014) : tailrecursion.hoplon.markdown.para_node.call(null,G__264013,G__264014));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263883;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263882;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_263881;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_263880;
}})()], 0));
var G__258256 = "";
var G__258257 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Local Names"], null),(function (){var _STAR_references_STAR_264015 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264016 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_264017 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264018 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__264019 = cljs.core.PersistentArrayMap.EMPTY;
var G__264020 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One detail of a procedure",(function (){var G__264021 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264022 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264021,G__264022) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264021,G__264022));
})(),"s implementation that should not matter to the user of the procedure is the implementer",(function (){var G__264023 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264024 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264023,G__264024) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264023,G__264024));
})(),"s choice of names for the procedure",(function (){var G__264025 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264026 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264025,G__264026) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264025,G__264026));
})(),"s formal parameters. Thus, the following procedures should not be distinguishable:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264019,G__264020) : tailrecursion.hoplon.markdown.para_node.call(null,G__264019,G__264020));
})(),(function (){var G__264053 = (function (){var G__264054 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264055 = (function (){var G__264056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264057 = "(";
var G__264058 = (function (){var G__264068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264069 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264068,G__264069) : tailrecursion.hoplon.span.call(null,G__264068,G__264069));
})();
var G__264059 = (function (){var G__264070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264071 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264070,G__264071) : tailrecursion.hoplon.span.call(null,G__264070,G__264071));
})();
var G__264060 = " [";
var G__264061 = (function (){var G__264072 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264073 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264072,G__264073) : tailrecursion.hoplon.span.call(null,G__264072,G__264073));
})();
var G__264062 = "] (";
var G__264063 = (function (){var G__264074 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264075 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264074,G__264075) : tailrecursion.hoplon.span.call(null,G__264074,G__264075));
})();
var G__264064 = (function (){var G__264076 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264077 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264076,G__264077) : tailrecursion.hoplon.span.call(null,G__264076,G__264077));
})();
var G__264065 = " ";
var G__264066 = (function (){var G__264078 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264079 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264078,G__264079) : tailrecursion.hoplon.span.call(null,G__264078,G__264079));
})();
var G__264067 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__264056,G__264057,G__264058,G__264059,G__264060,G__264061,G__264062,G__264063,G__264064,G__264065,G__264066,G__264067) : tailrecursion.hoplon.pre.call(null,G__264056,G__264057,G__264058,G__264059,G__264060,G__264061,G__264062,G__264063,G__264064,G__264065,G__264066,G__264067));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264054,G__264055) : tailrecursion.hoplon.div.call(null,G__264054,G__264055));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264053) : tailrecursion.hoplon.div.call(null,G__264053));
})(),(function (){var G__264106 = (function (){var G__264107 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264108 = (function (){var G__264109 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264110 = "(";
var G__264111 = (function (){var G__264121 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264122 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264121,G__264122) : tailrecursion.hoplon.span.call(null,G__264121,G__264122));
})();
var G__264112 = (function (){var G__264123 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264124 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264123,G__264124) : tailrecursion.hoplon.span.call(null,G__264123,G__264124));
})();
var G__264113 = " [";
var G__264114 = (function (){var G__264125 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264126 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264125,G__264126) : tailrecursion.hoplon.span.call(null,G__264125,G__264126));
})();
var G__264115 = "] (";
var G__264116 = (function (){var G__264127 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264128 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264127,G__264128) : tailrecursion.hoplon.span.call(null,G__264127,G__264128));
})();
var G__264117 = (function (){var G__264129 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264130 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264129,G__264130) : tailrecursion.hoplon.span.call(null,G__264129,G__264130));
})();
var G__264118 = " ";
var G__264119 = (function (){var G__264131 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264132 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264131,G__264132) : tailrecursion.hoplon.span.call(null,G__264131,G__264132));
})();
var G__264120 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__264109,G__264110,G__264111,G__264112,G__264113,G__264114,G__264115,G__264116,G__264117,G__264118,G__264119,G__264120) : tailrecursion.hoplon.pre.call(null,G__264109,G__264110,G__264111,G__264112,G__264113,G__264114,G__264115,G__264116,G__264117,G__264118,G__264119,G__264120));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264107,G__264108) : tailrecursion.hoplon.div.call(null,G__264107,G__264108));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264106) : tailrecursion.hoplon.div.call(null,G__264106));
})(),(function (){var G__264133 = cljs.core.PersistentArrayMap.EMPTY;
var G__264134 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This principle ",(function (){var G__264135 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__264136 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264135,G__264136) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264135,G__264136));
})()," that the meaning of a procedure should be independent of the parameter names used by its author ",(function (){var G__264137 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__264138 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264137,G__264138) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264137,G__264138));
})()," seems on the surface to be self-evident, but its consequences are profound. The simplest consequence is that the parameter names of a procedure must be local to the body of the procedure. For example, we used ",(function (){var G__264139 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264140 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264139,G__264140) : tailrecursion.hoplon.markdown.code_node.call(null,G__264139,G__264140));
})()," in the definition of ",(function (){var G__264141 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264142 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264141,G__264142) : tailrecursion.hoplon.markdown.code_node.call(null,G__264141,G__264142));
})()," in our square-root procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264133,G__264134) : tailrecursion.hoplon.markdown.para_node.call(null,G__264133,G__264134));
})(),(function (){var G__264190 = (function (){var G__264191 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264192 = (function (){var G__264193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264194 = "(";
var G__264195 = (function (){var G__264216 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264217 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264216,G__264217) : tailrecursion.hoplon.span.call(null,G__264216,G__264217));
})();
var G__264196 = (function (){var G__264218 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264219 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264218,G__264219) : tailrecursion.hoplon.span.call(null,G__264218,G__264219));
})();
var G__264197 = " [";
var G__264198 = (function (){var G__264220 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264221 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264220,G__264221) : tailrecursion.hoplon.span.call(null,G__264220,G__264221));
})();
var G__264199 = " ";
var G__264200 = (function (){var G__264222 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264223 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264222,G__264223) : tailrecursion.hoplon.span.call(null,G__264222,G__264223));
})();
var G__264201 = "]\n  (";
var G__264202 = (function (){var G__264224 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264225 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264224,G__264225) : tailrecursion.hoplon.span.call(null,G__264224,G__264225));
})();
var G__264203 = "(";
var G__264204 = (function (){var G__264226 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264227 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264226,G__264227) : tailrecursion.hoplon.span.call(null,G__264226,G__264227));
})();
var G__264205 = " (";
var G__264206 = (function (){var G__264228 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264229 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264228,G__264229) : tailrecursion.hoplon.span.call(null,G__264228,G__264229));
})();
var G__264207 = "(";
var G__264208 = (function (){var G__264230 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264231 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264230,G__264231) : tailrecursion.hoplon.span.call(null,G__264230,G__264231));
})();
var G__264209 = " ";
var G__264210 = (function (){var G__264232 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264233 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264232,G__264233) : tailrecursion.hoplon.span.call(null,G__264232,G__264233));
})();
var G__264211 = ") ";
var G__264212 = (function (){var G__264234 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264235 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264234,G__264235) : tailrecursion.hoplon.span.call(null,G__264234,G__264235));
})();
var G__264213 = ")) ";
var G__264214 = (function (){var G__264236 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__264237 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264236,G__264237) : tailrecursion.hoplon.span.call(null,G__264236,G__264237));
})();
var G__264215 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__264193,G__264194,G__264195,G__264196,G__264197,G__264198,G__264199,G__264200,G__264201,G__264202,G__264203,G__264204,G__264205,G__264206,G__264207,G__264208,G__264209,G__264210,G__264211,G__264212,G__264213,G__264214,G__264215) : tailrecursion.hoplon.pre.call(null,G__264193,G__264194,G__264195,G__264196,G__264197,G__264198,G__264199,G__264200,G__264201,G__264202,G__264203,G__264204,G__264205,G__264206,G__264207,G__264208,G__264209,G__264210,G__264211,G__264212,G__264213,G__264214,G__264215));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264191,G__264192) : tailrecursion.hoplon.div.call(null,G__264191,G__264192));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264190) : tailrecursion.hoplon.div.call(null,G__264190));
})(),(function (){var G__264238 = cljs.core.PersistentArrayMap.EMPTY;
var G__264239 = cljs.core.PersistentVector.fromArray(["The intention of the author of ",(function (){var G__264240 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264241 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264240,G__264241) : tailrecursion.hoplon.markdown.code_node.call(null,G__264240,G__264241));
})()," is to determine if the square of the first argument is within a given tolerance of the second argument. We see that the author of ",(function (){var G__264242 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264243 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264242,G__264243) : tailrecursion.hoplon.markdown.code_node.call(null,G__264242,G__264243));
})()," used the name ",(function (){var G__264244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264245 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264244,G__264245) : tailrecursion.hoplon.markdown.code_node.call(null,G__264244,G__264245));
})()," to refer to the first argument and ",(function (){var G__264246 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264247 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264246,G__264247) : tailrecursion.hoplon.markdown.code_node.call(null,G__264246,G__264247));
})()," to refer to the second argument. The argument of ",(function (){var G__264248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264249 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264248,G__264249) : tailrecursion.hoplon.markdown.code_node.call(null,G__264248,G__264249));
})()," is ",(function (){var G__264250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264251 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264250,G__264251) : tailrecursion.hoplon.markdown.code_node.call(null,G__264250,G__264251));
})(),". If the author of ",(function (){var G__264252 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264253 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264252,G__264253) : tailrecursion.hoplon.markdown.code_node.call(null,G__264252,G__264253));
})()," used ",(function (){var G__264254 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264255 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264254,G__264255) : tailrecursion.hoplon.markdown.code_node.call(null,G__264254,G__264255));
})()," (as above) to refer to that argument, we see that the ",(function (){var G__264256 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264257 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264256,G__264257) : tailrecursion.hoplon.markdown.code_node.call(null,G__264256,G__264257));
})()," in ",(function (){var G__264258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264259 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264258,G__264259) : tailrecursion.hoplon.markdown.code_node.call(null,G__264258,G__264259));
})()," must be a different ",(function (){var G__264260 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264261 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264260,G__264261) : tailrecursion.hoplon.markdown.code_node.call(null,G__264260,G__264261));
})()," than the one in ",(function (){var G__264262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264263 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264262,G__264263) : tailrecursion.hoplon.markdown.code_node.call(null,G__264262,G__264263));
})(),". Running the procedure ",(function (){var G__264264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264265 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264264,G__264265) : tailrecursion.hoplon.markdown.code_node.call(null,G__264264,G__264265));
})()," must not affect the value of ",(function (){var G__264266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264267 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264266,G__264267) : tailrecursion.hoplon.markdown.code_node.call(null,G__264266,G__264267));
})()," that is used by ",(function (){var G__264268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264269 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264268,G__264269) : tailrecursion.hoplon.markdown.code_node.call(null,G__264268,G__264269));
})(),", because that value of ",(function (){var G__264270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264271 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264270,G__264271) : tailrecursion.hoplon.markdown.code_node.call(null,G__264270,G__264271));
})()," may be needed by ",(function (){var G__264272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264273 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264272,G__264273) : tailrecursion.hoplon.markdown.code_node.call(null,G__264272,G__264273));
})()," after ",(function (){var G__264274 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264275 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264274,G__264275) : tailrecursion.hoplon.markdown.code_node.call(null,G__264274,G__264275));
})()," is done computing."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264238,G__264239) : tailrecursion.hoplon.markdown.para_node.call(null,G__264238,G__264239));
})(),(function (){var G__264276 = cljs.core.PersistentArrayMap.EMPTY;
var G__264277 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If the parameters were not local to the bodies of their respective procedures, then the parameter ",(function (){var G__264278 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264279 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264278,G__264279) : tailrecursion.hoplon.markdown.code_node.call(null,G__264278,G__264279));
})()," in ",(function (){var G__264280 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264281 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264280,G__264281) : tailrecursion.hoplon.markdown.code_node.call(null,G__264280,G__264281));
})()," could be confused with the parameter ",(function (){var G__264282 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264283 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264282,G__264283) : tailrecursion.hoplon.markdown.code_node.call(null,G__264282,G__264283));
})()," in ",(function (){var G__264284 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264285 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264284,G__264285) : tailrecursion.hoplon.markdown.code_node.call(null,G__264284,G__264285));
})(),", and the behavior of ",(function (){var G__264286 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264287 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264286,G__264287) : tailrecursion.hoplon.markdown.code_node.call(null,G__264286,G__264287));
})()," would depend upon which version of ",(function (){var G__264288 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264289 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264288,G__264289) : tailrecursion.hoplon.markdown.code_node.call(null,G__264288,G__264289));
})()," we used. Thus, ",(function (){var G__264290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264291 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264290,G__264291) : tailrecursion.hoplon.markdown.code_node.call(null,G__264290,G__264291));
})()," would not be the black box we desired."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264276,G__264277) : tailrecursion.hoplon.markdown.para_node.call(null,G__264276,G__264277));
})(),(function (){var G__264292 = cljs.core.PersistentArrayMap.EMPTY;
var G__264293 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A formal parameter of a procedure has a very special role in the procedure definition, in that it doesn",(function (){var G__264294 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264295 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264294,G__264295) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264294,G__264295));
})(),"t matter what name the formal parameter has. Such a name is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["bound variable"], null)], 0)),", and we say that the procedure definition ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["binds"], null)], 0))," its formal parameters. The meaning of a procedure definition is unchanged if a bound variable is consistently renamed throughout the definition.",(function (){var G__264296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__264297 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The concept of consistent renaming is actually subtle and difficult to define formally. Famous logicians have made embarrassing errors here."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__264296,G__264297) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__264296,G__264297));
})()," If a variable is not bound, we say that it is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["free"], null)], 0)),". The set of expressions for which a binding defines a name is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["scope"], null)], 0))," of that name. In a procedure definition, the bound variables declared as the formal parameters of the procedure have the body of the procedure as their scope."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264292,G__264293) : tailrecursion.hoplon.markdown.para_node.call(null,G__264292,G__264293));
})(),(function (){var G__264298 = cljs.core.PersistentArrayMap.EMPTY;
var G__264299 = cljs.core.PersistentVector.fromArray(["In the definition of ",(function (){var G__264300 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264301 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264300,G__264301) : tailrecursion.hoplon.markdown.code_node.call(null,G__264300,G__264301));
})()," above, ",(function (){var G__264302 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264303 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264302,G__264303) : tailrecursion.hoplon.markdown.code_node.call(null,G__264302,G__264303));
})()," and ",(function (){var G__264304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264305 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264304,G__264305) : tailrecursion.hoplon.markdown.code_node.call(null,G__264304,G__264305));
})()," are bound variables but ",(function (){var G__264306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__264307 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264306,G__264307) : tailrecursion.hoplon.markdown.code_node.call(null,G__264306,G__264307));
})(),", ",(function (){var G__264308 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__264309 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264308,G__264309) : tailrecursion.hoplon.markdown.code_node.call(null,G__264308,G__264309));
})(),", ",(function (){var G__264310 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264311 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264310,G__264311) : tailrecursion.hoplon.markdown.code_node.call(null,G__264310,G__264311));
})(),", and ",(function (){var G__264312 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264313 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264312,G__264313) : tailrecursion.hoplon.markdown.code_node.call(null,G__264312,G__264313));
})()," are free. The meaning of ",(function (){var G__264314 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264315 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264314,G__264315) : tailrecursion.hoplon.markdown.code_node.call(null,G__264314,G__264315));
})()," should be independent of the names we choose for ",(function (){var G__264316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264317 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264316,G__264317) : tailrecursion.hoplon.markdown.code_node.call(null,G__264316,G__264317));
})()," and ",(function (){var G__264318 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__264319 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264318,G__264319) : tailrecursion.hoplon.markdown.code_node.call(null,G__264318,G__264319));
})()," so long as they are distinct and different from ",(function (){var G__264320 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__264321 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264320,G__264321) : tailrecursion.hoplon.markdown.code_node.call(null,G__264320,G__264321));
})(),", ",(function (){var G__264322 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__264323 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264322,G__264323) : tailrecursion.hoplon.markdown.code_node.call(null,G__264322,G__264323));
})(),", ",(function (){var G__264324 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264325 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264324,G__264325) : tailrecursion.hoplon.markdown.code_node.call(null,G__264324,G__264325));
})(),", and ",(function (){var G__264326 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__264327 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264326,G__264327) : tailrecursion.hoplon.markdown.code_node.call(null,G__264326,G__264327));
})(),". (If we renamed ",(function (){var G__264328 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__264329 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264328,G__264329) : tailrecursion.hoplon.markdown.code_node.call(null,G__264328,G__264329));
})()," to ",(function (){var G__264330 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264331 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264330,G__264331) : tailrecursion.hoplon.markdown.code_node.call(null,G__264330,G__264331));
})()," we would have introduced a bug by ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["capturing"], null)], 0))," the variable ",(function (){var G__264332 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264333 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264332,G__264333) : tailrecursion.hoplon.markdown.code_node.call(null,G__264332,G__264333));
})(),". It would have changed from free to bound.) The meaning of ",(function (){var G__264334 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264335 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264334,G__264335) : tailrecursion.hoplon.markdown.code_node.call(null,G__264334,G__264335));
})()," is not independent of the names of its free variables, however. It surely depends upon the fact (external to this definition) that the symbol ",(function (){var G__264336 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264337 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264336,G__264337) : tailrecursion.hoplon.markdown.code_node.call(null,G__264336,G__264337));
})()," names a procedure for computing the absolute value of a number. ",(function (){var G__264338 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Good-enough?"], null);
var G__264339 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264338,G__264339) : tailrecursion.hoplon.markdown.code_node.call(null,G__264338,G__264339));
})()," will compute a different function if we substitute ",(function (){var G__264340 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cos"], null);
var G__264341 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264340,G__264341) : tailrecursion.hoplon.markdown.code_node.call(null,G__264340,G__264341));
})()," for ",(function (){var G__264342 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__264343 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264342,G__264343) : tailrecursion.hoplon.markdown.code_node.call(null,G__264342,G__264343));
})()," in its definition."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264298,G__264299) : tailrecursion.hoplon.markdown.para_node.call(null,G__264298,G__264299));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264018;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264017;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264016;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264015;
}})()], 0));
var G__258258 = "";
var G__258259 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Internal Definitions and Block Structures"], null),(function (){var _STAR_references_STAR_264344 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264345 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_264346 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_264347 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__264348 = cljs.core.PersistentArrayMap.EMPTY;
var G__264349 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is instructive to note that the rest of this section does not work as well in Clojure. The reason is that ",(function (){var G__264350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__264351 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264350,G__264351) : tailrecursion.hoplon.markdown.code_node.call(null,G__264350,G__264351));
})(),", ",(function (){var G__264352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__264353 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264352,G__264353) : tailrecursion.hoplon.markdown.code_node.call(null,G__264352,G__264353));
})()," and all other defining forms define things in the global environment directly (no matter where they are called). If this does not make sense to you just yet, don",(function (){var G__264354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__264355 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__264354,G__264355) : tailrecursion.hoplon.markdown.simple_node.call(null,G__264354,G__264355));
})(),"t worry: it should by the end of this section."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264348,G__264349) : tailrecursion.hoplon.markdown.para_node.call(null,G__264348,G__264349));
})(),(function (){var G__264356 = cljs.core.PersistentArrayMap.EMPTY;
var G__264357 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have one kind of name isolation available to us so far: The formal parameters of a procedure are local to the body of the procedure. The square-root program illustrates another way in which we would like to control the use of names. The existing program consists of separate procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264356,G__264357) : tailrecursion.hoplon.markdown.para_node.call(null,G__264356,G__264357));
})(),(function (){var G__264517 = (function (){var G__264518 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264519 = (function (){var G__264520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264521 = "(";
var G__264522 = (function (){var G__264597 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264598 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264597,G__264598) : tailrecursion.hoplon.span.call(null,G__264597,G__264598));
})();
var G__264523 = (function (){var G__264599 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264600 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264599,G__264600) : tailrecursion.hoplon.span.call(null,G__264599,G__264600));
})();
var G__264524 = " [";
var G__264525 = (function (){var G__264601 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264602 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264601,G__264602) : tailrecursion.hoplon.span.call(null,G__264601,G__264602));
})();
var G__264526 = "]\n  (";
var G__264527 = (function (){var G__264603 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264604 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264603,G__264604) : tailrecursion.hoplon.span.call(null,G__264603,G__264604));
})();
var G__264528 = " ";
var G__264529 = (function (){var G__264605 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__264606 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264605,G__264606) : tailrecursion.hoplon.span.call(null,G__264605,G__264606));
})();
var G__264530 = " ";
var G__264531 = (function (){var G__264607 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264608 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264607,G__264608) : tailrecursion.hoplon.span.call(null,G__264607,G__264608));
})();
var G__264532 = "))\n(";
var G__264533 = (function (){var G__264609 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264610 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264609,G__264610) : tailrecursion.hoplon.span.call(null,G__264609,G__264610));
})();
var G__264534 = (function (){var G__264611 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264612 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264611,G__264612) : tailrecursion.hoplon.span.call(null,G__264611,G__264612));
})();
var G__264535 = " [";
var G__264536 = (function (){var G__264613 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264614 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264613,G__264614) : tailrecursion.hoplon.span.call(null,G__264613,G__264614));
})();
var G__264537 = " ";
var G__264538 = (function (){var G__264615 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264616 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264615,G__264616) : tailrecursion.hoplon.span.call(null,G__264615,G__264616));
})();
var G__264539 = "]\n  (";
var G__264540 = (function (){var G__264617 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264618 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264617,G__264618) : tailrecursion.hoplon.span.call(null,G__264617,G__264618));
})();
var G__264541 = "(";
var G__264542 = (function (){var G__264619 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264620 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264619,G__264620) : tailrecursion.hoplon.span.call(null,G__264619,G__264620));
})();
var G__264543 = " ";
var G__264544 = (function (){var G__264621 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264622 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264621,G__264622) : tailrecursion.hoplon.span.call(null,G__264621,G__264622));
})();
var G__264545 = " ";
var G__264546 = (function (){var G__264623 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264624 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264623,G__264624) : tailrecursion.hoplon.span.call(null,G__264623,G__264624));
})();
var G__264547 = ")\n      ";
var G__264548 = (function (){var G__264625 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264626 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264625,G__264626) : tailrecursion.hoplon.span.call(null,G__264625,G__264626));
})();
var G__264549 = "\n      (";
var G__264550 = (function (){var G__264627 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264628 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264627,G__264628) : tailrecursion.hoplon.span.call(null,G__264627,G__264628));
})();
var G__264551 = " (";
var G__264552 = (function (){var G__264629 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264630 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264629,G__264630) : tailrecursion.hoplon.span.call(null,G__264629,G__264630));
})();
var G__264553 = " ";
var G__264554 = (function (){var G__264631 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264632 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264631,G__264632) : tailrecursion.hoplon.span.call(null,G__264631,G__264632));
})();
var G__264555 = " ";
var G__264556 = (function (){var G__264633 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264634 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264633,G__264634) : tailrecursion.hoplon.span.call(null,G__264633,G__264634));
})();
var G__264557 = ") ";
var G__264558 = (function (){var G__264635 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264636 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264635,G__264636) : tailrecursion.hoplon.span.call(null,G__264635,G__264636));
})();
var G__264559 = ")))\n(";
var G__264560 = (function (){var G__264637 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264638 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264637,G__264638) : tailrecursion.hoplon.span.call(null,G__264637,G__264638));
})();
var G__264561 = (function (){var G__264639 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264640 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264639,G__264640) : tailrecursion.hoplon.span.call(null,G__264639,G__264640));
})();
var G__264562 = " [";
var G__264563 = (function (){var G__264641 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264642 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264641,G__264642) : tailrecursion.hoplon.span.call(null,G__264641,G__264642));
})();
var G__264564 = " ";
var G__264565 = (function (){var G__264643 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264644 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264643,G__264644) : tailrecursion.hoplon.span.call(null,G__264643,G__264644));
})();
var G__264566 = "]\n  (";
var G__264567 = (function (){var G__264645 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264646 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264645,G__264646) : tailrecursion.hoplon.span.call(null,G__264645,G__264646));
})();
var G__264568 = "(";
var G__264569 = (function (){var G__264647 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264648 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264647,G__264648) : tailrecursion.hoplon.span.call(null,G__264647,G__264648));
})();
var G__264570 = " (";
var G__264571 = (function (){var G__264649 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264650 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264649,G__264650) : tailrecursion.hoplon.span.call(null,G__264649,G__264650));
})();
var G__264572 = "(";
var G__264573 = (function (){var G__264651 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264652 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264651,G__264652) : tailrecursion.hoplon.span.call(null,G__264651,G__264652));
})();
var G__264574 = " ";
var G__264575 = (function (){var G__264653 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264654 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264653,G__264654) : tailrecursion.hoplon.span.call(null,G__264653,G__264654));
})();
var G__264576 = ") ";
var G__264577 = (function (){var G__264655 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264656 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264655,G__264656) : tailrecursion.hoplon.span.call(null,G__264655,G__264656));
})();
var G__264578 = ")) ";
var G__264579 = (function (){var G__264657 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__264658 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264657,G__264658) : tailrecursion.hoplon.span.call(null,G__264657,G__264658));
})();
var G__264580 = "))\n(";
var G__264581 = (function (){var G__264659 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264660 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264659,G__264660) : tailrecursion.hoplon.span.call(null,G__264659,G__264660));
})();
var G__264582 = (function (){var G__264661 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264662 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264661,G__264662) : tailrecursion.hoplon.span.call(null,G__264661,G__264662));
})();
var G__264583 = " [";
var G__264584 = (function (){var G__264663 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264664 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264663,G__264664) : tailrecursion.hoplon.span.call(null,G__264663,G__264664));
})();
var G__264585 = " ";
var G__264586 = (function (){var G__264665 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264666 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264665,G__264666) : tailrecursion.hoplon.span.call(null,G__264665,G__264666));
})();
var G__264587 = "]\n  (";
var G__264588 = (function (){var G__264667 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264668 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264667,G__264668) : tailrecursion.hoplon.span.call(null,G__264667,G__264668));
})();
var G__264589 = " ";
var G__264590 = (function (){var G__264669 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264670 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264669,G__264670) : tailrecursion.hoplon.span.call(null,G__264669,G__264670));
})();
var G__264591 = " (";
var G__264592 = (function (){var G__264671 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264672 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264671,G__264672) : tailrecursion.hoplon.span.call(null,G__264671,G__264672));
})();
var G__264593 = (function (){var G__264673 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264674 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264673,G__264674) : tailrecursion.hoplon.span.call(null,G__264673,G__264674));
})();
var G__264594 = " ";
var G__264595 = (function (){var G__264675 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264676 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264675,G__264676) : tailrecursion.hoplon.span.call(null,G__264675,G__264676));
})();
var G__264596 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77(G__264520,G__264521,G__264522,G__264523,G__264524,G__264525,G__264526,G__264527,G__264528,G__264529,G__264530,G__264531,G__264532,G__264533,G__264534,G__264535,G__264536,G__264537,G__264538,G__264539,G__264540,G__264541,G__264542,G__264543,G__264544,G__264545,G__264546,G__264547,G__264548,G__264549,G__264550,G__264551,G__264552,G__264553,G__264554,G__264555,G__264556,G__264557,G__264558,G__264559,G__264560,G__264561,G__264562,G__264563,G__264564,G__264565,G__264566,G__264567,G__264568,G__264569,G__264570,G__264571,G__264572,G__264573,G__264574,G__264575,G__264576,G__264577,G__264578,G__264579,G__264580,G__264581,G__264582,G__264583,G__264584,G__264585,G__264586,G__264587,G__264588,G__264589,G__264590,G__264591,G__264592,G__264593,G__264594,G__264595,G__264596) : tailrecursion.hoplon.pre.call(null,G__264520,G__264521,G__264522,G__264523,G__264524,G__264525,G__264526,G__264527,G__264528,G__264529,G__264530,G__264531,G__264532,G__264533,G__264534,G__264535,G__264536,G__264537,G__264538,G__264539,G__264540,G__264541,G__264542,G__264543,G__264544,G__264545,G__264546,G__264547,G__264548,G__264549,G__264550,G__264551,G__264552,G__264553,G__264554,G__264555,G__264556,G__264557,G__264558,G__264559,G__264560,G__264561,G__264562,G__264563,G__264564,G__264565,G__264566,G__264567,G__264568,G__264569,G__264570,G__264571,G__264572,G__264573,G__264574,G__264575,G__264576,G__264577,G__264578,G__264579,G__264580,G__264581,G__264582,G__264583,G__264584,G__264585,G__264586,G__264587,G__264588,G__264589,G__264590,G__264591,G__264592,G__264593,G__264594,G__264595,G__264596));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264518,G__264519) : tailrecursion.hoplon.div.call(null,G__264518,G__264519));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264517) : tailrecursion.hoplon.div.call(null,G__264517));
})(),(function (){var G__264677 = cljs.core.PersistentArrayMap.EMPTY;
var G__264678 = new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The problem with this program is that the only procedure that is important to users of ",(function (){var G__264679 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264680 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264679,G__264680) : tailrecursion.hoplon.markdown.code_node.call(null,G__264679,G__264680));
})()," is ",(function (){var G__264681 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264682 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264681,G__264682) : tailrecursion.hoplon.markdown.code_node.call(null,G__264681,G__264682));
})(),". The other procedures (",(function (){var G__264683 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__264684 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264683,G__264684) : tailrecursion.hoplon.markdown.code_node.call(null,G__264683,G__264684));
})(),", ",(function (){var G__264685 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264686 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264685,G__264686) : tailrecursion.hoplon.markdown.code_node.call(null,G__264685,G__264686));
})(),", and ",(function (){var G__264687 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__264688 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264687,G__264688) : tailrecursion.hoplon.markdown.code_node.call(null,G__264687,G__264688));
})(),") only clutter up their minds. They may not define any other procedure called ",(function (){var G__264689 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264690 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264689,G__264690) : tailrecursion.hoplon.markdown.code_node.call(null,G__264689,G__264690));
})()," as part of another program to work together with the square-root program, because ",(function (){var G__264691 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264692 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264691,G__264692) : tailrecursion.hoplon.markdown.code_node.call(null,G__264691,G__264692));
})()," needs it. The problem is especially severe in the construction of large systems by many separate programmers. For example, in the construction of a large library of numerical procedures, many numerical functions are computed as successive approximations and thus might have procedures named ",(function (){var G__264693 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264694 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264693,G__264694) : tailrecursion.hoplon.markdown.code_node.call(null,G__264693,G__264694));
})()," and ",(function (){var G__264695 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__264696 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264695,G__264696) : tailrecursion.hoplon.markdown.code_node.call(null,G__264695,G__264696));
})()," as auxiliary procedures. We would like to localize the subprocedures, hiding them inside ",(function (){var G__264697 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264698 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264697,G__264698) : tailrecursion.hoplon.markdown.code_node.call(null,G__264697,G__264698));
})()," so that ",(function (){var G__264699 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__264700 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264699,G__264700) : tailrecursion.hoplon.markdown.code_node.call(null,G__264699,G__264700));
})()," could coexist with other successive approximations, each having its own private ",(function (){var G__264701 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__264702 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264701,G__264702) : tailrecursion.hoplon.markdown.code_node.call(null,G__264701,G__264702));
})()," procedure. To make this possible, we allow a procedure to have internal definitions that are local to that procedure. For example, in the ",(function (){var G__264703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square-root"], null);
var G__264704 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__264703,G__264704) : tailrecursion.hoplon.markdown.code_node.call(null,G__264703,G__264704));
})()," problem we can write"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__264677,G__264678) : tailrecursion.hoplon.markdown.para_node.call(null,G__264677,G__264678));
})(),(function (){var G__264867 = (function (){var G__264868 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__264869 = (function (){var G__264870 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__264871 = "(";
var G__264872 = (function (){var G__264950 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264951 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264950,G__264951) : tailrecursion.hoplon.span.call(null,G__264950,G__264951));
})();
var G__264873 = "(";
var G__264874 = (function (){var G__264952 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264953 = "sqrt ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264952,G__264953) : tailrecursion.hoplon.span.call(null,G__264952,G__264953));
})();
var G__264875 = (function (){var G__264954 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264955 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264954,G__264955) : tailrecursion.hoplon.span.call(null,G__264954,G__264955));
})();
var G__264876 = ")\n  (";
var G__264877 = (function (){var G__264956 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264957 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264956,G__264957) : tailrecursion.hoplon.span.call(null,G__264956,G__264957));
})();
var G__264878 = "(";
var G__264879 = (function (){var G__264958 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264959 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264958,G__264959) : tailrecursion.hoplon.span.call(null,G__264958,G__264959));
})();
var G__264880 = " ";
var G__264881 = (function (){var G__264960 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264961 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264960,G__264961) : tailrecursion.hoplon.span.call(null,G__264960,G__264961));
})();
var G__264882 = " ";
var G__264883 = (function (){var G__264962 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264963 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264962,G__264963) : tailrecursion.hoplon.span.call(null,G__264962,G__264963));
})();
var G__264884 = ")\n    (";
var G__264885 = (function (){var G__264964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264965 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264964,G__264965) : tailrecursion.hoplon.span.call(null,G__264964,G__264965));
})();
var G__264886 = "(";
var G__264887 = (function (){var G__264966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264967 = "abs ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264966,G__264967) : tailrecursion.hoplon.span.call(null,G__264966,G__264967));
})();
var G__264888 = "(";
var G__264889 = (function (){var G__264968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264969 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264968,G__264969) : tailrecursion.hoplon.span.call(null,G__264968,G__264969));
})();
var G__264890 = "(";
var G__264891 = (function (){var G__264970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264971 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264970,G__264971) : tailrecursion.hoplon.span.call(null,G__264970,G__264971));
})();
var G__264892 = " ";
var G__264893 = (function (){var G__264972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264973 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264972,G__264973) : tailrecursion.hoplon.span.call(null,G__264972,G__264973));
})();
var G__264894 = ") ";
var G__264895 = (function (){var G__264974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264975 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264974,G__264975) : tailrecursion.hoplon.span.call(null,G__264974,G__264975));
})();
var G__264896 = ")) ";
var G__264897 = (function (){var G__264976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__264977 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264976,G__264977) : tailrecursion.hoplon.span.call(null,G__264976,G__264977));
})();
var G__264898 = "))\n  (";
var G__264899 = (function (){var G__264978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264979 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264978,G__264979) : tailrecursion.hoplon.span.call(null,G__264978,G__264979));
})();
var G__264900 = "(";
var G__264901 = (function (){var G__264980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264981 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264980,G__264981) : tailrecursion.hoplon.span.call(null,G__264980,G__264981));
})();
var G__264902 = " ";
var G__264903 = (function (){var G__264982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264983 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264982,G__264983) : tailrecursion.hoplon.span.call(null,G__264982,G__264983));
})();
var G__264904 = " ";
var G__264905 = (function (){var G__264984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264985 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264984,G__264985) : tailrecursion.hoplon.span.call(null,G__264984,G__264985));
})();
var G__264906 = ")\n    (";
var G__264907 = (function (){var G__264986 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264987 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264986,G__264987) : tailrecursion.hoplon.span.call(null,G__264986,G__264987));
})();
var G__264908 = " ";
var G__264909 = (function (){var G__264988 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264989 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264988,G__264989) : tailrecursion.hoplon.span.call(null,G__264988,G__264989));
})();
var G__264910 = " (";
var G__264911 = (function (){var G__264990 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__264991 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264990,G__264991) : tailrecursion.hoplon.span.call(null,G__264990,G__264991));
})();
var G__264912 = (function (){var G__264992 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264993 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264992,G__264993) : tailrecursion.hoplon.span.call(null,G__264992,G__264993));
})();
var G__264913 = " ";
var G__264914 = (function (){var G__264994 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__264995 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264994,G__264995) : tailrecursion.hoplon.span.call(null,G__264994,G__264995));
})();
var G__264915 = ")))\n  (";
var G__264916 = (function (){var G__264996 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__264997 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264996,G__264997) : tailrecursion.hoplon.span.call(null,G__264996,G__264997));
})();
var G__264917 = "(";
var G__264918 = (function (){var G__264998 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__264999 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__264998,G__264999) : tailrecursion.hoplon.span.call(null,G__264998,G__264999));
})();
var G__264919 = " ";
var G__264920 = (function (){var G__265000 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265001 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265000,G__265001) : tailrecursion.hoplon.span.call(null,G__265000,G__265001));
})();
var G__264921 = " ";
var G__264922 = (function (){var G__265002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265003 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265002,G__265003) : tailrecursion.hoplon.span.call(null,G__265002,G__265003));
})();
var G__264923 = ")\n    (";
var G__264924 = (function (){var G__265004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265005 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265004,G__265005) : tailrecursion.hoplon.span.call(null,G__265004,G__265005));
})();
var G__264925 = "(";
var G__264926 = (function (){var G__265006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265007 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265006,G__265007) : tailrecursion.hoplon.span.call(null,G__265006,G__265007));
})();
var G__264927 = " ";
var G__264928 = (function (){var G__265008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265009 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265008,G__265009) : tailrecursion.hoplon.span.call(null,G__265008,G__265009));
})();
var G__264929 = " ";
var G__264930 = (function (){var G__265010 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265011 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265010,G__265011) : tailrecursion.hoplon.span.call(null,G__265010,G__265011));
})();
var G__264931 = ")\n        ";
var G__264932 = (function (){var G__265012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265013 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265012,G__265013) : tailrecursion.hoplon.span.call(null,G__265012,G__265013));
})();
var G__264933 = "\n        (";
var G__264934 = (function (){var G__265014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265015 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265014,G__265015) : tailrecursion.hoplon.span.call(null,G__265014,G__265015));
})();
var G__264935 = " (";
var G__264936 = (function (){var G__265016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265017 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265016,G__265017) : tailrecursion.hoplon.span.call(null,G__265016,G__265017));
})();
var G__264937 = " ";
var G__264938 = (function (){var G__265018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265019 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265018,G__265019) : tailrecursion.hoplon.span.call(null,G__265018,G__265019));
})();
var G__264939 = " ";
var G__264940 = (function (){var G__265020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265021 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265020,G__265021) : tailrecursion.hoplon.span.call(null,G__265020,G__265021));
})();
var G__264941 = ") ";
var G__264942 = (function (){var G__265022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265023 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265022,G__265023) : tailrecursion.hoplon.span.call(null,G__265022,G__265023));
})();
var G__264943 = ")))\n  (";
var G__264944 = (function (){var G__265024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265025 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265024,G__265025) : tailrecursion.hoplon.span.call(null,G__265024,G__265025));
})();
var G__264945 = " ";
var G__264946 = (function (){var G__265026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__265027 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265026,G__265027) : tailrecursion.hoplon.span.call(null,G__265026,G__265027));
})();
var G__264947 = " ";
var G__264948 = (function (){var G__265028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265029 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265028,G__265029) : tailrecursion.hoplon.span.call(null,G__265028,G__265029));
})();
var G__264949 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80(G__264870,G__264871,G__264872,G__264873,G__264874,G__264875,G__264876,G__264877,G__264878,G__264879,G__264880,G__264881,G__264882,G__264883,G__264884,G__264885,G__264886,G__264887,G__264888,G__264889,G__264890,G__264891,G__264892,G__264893,G__264894,G__264895,G__264896,G__264897,G__264898,G__264899,G__264900,G__264901,G__264902,G__264903,G__264904,G__264905,G__264906,G__264907,G__264908,G__264909,G__264910,G__264911,G__264912,G__264913,G__264914,G__264915,G__264916,G__264917,G__264918,G__264919,G__264920,G__264921,G__264922,G__264923,G__264924,G__264925,G__264926,G__264927,G__264928,G__264929,G__264930,G__264931,G__264932,G__264933,G__264934,G__264935,G__264936,G__264937,G__264938,G__264939,G__264940,G__264941,G__264942,G__264943,G__264944,G__264945,G__264946,G__264947,G__264948,G__264949) : tailrecursion.hoplon.pre.call(null,G__264870,G__264871,G__264872,G__264873,G__264874,G__264875,G__264876,G__264877,G__264878,G__264879,G__264880,G__264881,G__264882,G__264883,G__264884,G__264885,G__264886,G__264887,G__264888,G__264889,G__264890,G__264891,G__264892,G__264893,G__264894,G__264895,G__264896,G__264897,G__264898,G__264899,G__264900,G__264901,G__264902,G__264903,G__264904,G__264905,G__264906,G__264907,G__264908,G__264909,G__264910,G__264911,G__264912,G__264913,G__264914,G__264915,G__264916,G__264917,G__264918,G__264919,G__264920,G__264921,G__264922,G__264923,G__264924,G__264925,G__264926,G__264927,G__264928,G__264929,G__264930,G__264931,G__264932,G__264933,G__264934,G__264935,G__264936,G__264937,G__264938,G__264939,G__264940,G__264941,G__264942,G__264943,G__264944,G__264945,G__264946,G__264947,G__264948,G__264949));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__264868,G__264869) : tailrecursion.hoplon.div.call(null,G__264868,G__264869));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__264867) : tailrecursion.hoplon.div.call(null,G__264867));
})(),(function (){var G__265030 = cljs.core.PersistentArrayMap.EMPTY;
var G__265031 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note: This approach does not solve our problem in Clojure. In Clojure, whenever ",(function (){var G__265032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__265033 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265032,G__265033) : tailrecursion.hoplon.markdown.code_node.call(null,G__265032,G__265033));
})()," or ",(function (){var G__265034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__265035 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265034,G__265035) : tailrecursion.hoplon.markdown.code_node.call(null,G__265034,G__265035));
})()," are used, they add the definitions to the global environment. What that means is, every time you run the ",(function (){var G__265036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__265037 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265036,G__265037) : tailrecursion.hoplon.markdown.code_node.call(null,G__265036,G__265037));
})()," procedure, you would end up redefining ",(function (){var G__265038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__265039 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265038,G__265039) : tailrecursion.hoplon.markdown.code_node.call(null,G__265038,G__265039));
})()," for every program that uses it. Now, if every program that uses ",(function (){var G__265040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__265041 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265040,G__265041) : tailrecursion.hoplon.markdown.code_node.call(null,G__265040,G__265041));
})()," redefines ",(function (){var G__265042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__265043 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265042,G__265043) : tailrecursion.hoplon.markdown.code_node.call(null,G__265042,G__265043));
})(),", then you might not run into any problems; but either way, there is a better alternative: we could use what",(function (){var G__265044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__265045 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__265044,G__265045) : tailrecursion.hoplon.markdown.simple_node.call(null,G__265044,G__265045));
})(),"s called a ",(function (){var G__265046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"let"], null);
var G__265047 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265046,G__265047) : tailrecursion.hoplon.markdown.code_node.call(null,G__265046,G__265047));
})()," binding, but we",(function (){var G__265048 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__265049 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__265048,G__265049) : tailrecursion.hoplon.markdown.simple_node.call(null,G__265048,G__265049));
})(),"ll learn about those a little later."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265030,G__265031) : tailrecursion.hoplon.markdown.para_node.call(null,G__265030,G__265031));
})(),(function (){var G__265050 = cljs.core.PersistentArrayMap.EMPTY;
var G__265051 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The thing to remember is the evaluation model. When the compiler is given a symbol, it has a set procedure for determining what this symbol means: first it looks to see if the symbol is a special form (like ",(function (){var G__265052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__265053 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265052,G__265053) : tailrecursion.hoplon.markdown.code_node.call(null,G__265052,G__265053));
})(),"), if it",(function (){var G__265054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__265055 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__265054,G__265055) : tailrecursion.hoplon.markdown.simple_node.call(null,G__265054,G__265055));
})(),"s not, then it checks each successive nested local environment until it reaches the global environment. The point is, in Scheme, ",(function (){var G__265056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__265057 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265056,G__265057) : tailrecursion.hoplon.markdown.code_node.call(null,G__265056,G__265057));
})()," only mutates the local environment, whatever that may be; the same is not true in Clojure. Defining forms mutate the global environment directly, so using ",(function (){var G__265058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__265059 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265058,G__265059) : tailrecursion.hoplon.markdown.code_node.call(null,G__265058,G__265059));
})()," to change the definition of a function in one place changes it in all places."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265050,G__265051) : tailrecursion.hoplon.markdown.para_node.call(null,G__265050,G__265051));
})(),(function (){var G__265060 = cljs.core.PersistentArrayMap.EMPTY;
var G__265061 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Luckily, Cloure has a built in pair of functions ",(function (){var G__265062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__265063 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265062,G__265063) : tailrecursion.hoplon.markdown.code_node.call(null,G__265062,G__265063));
})()," and ",(function (){var G__265064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__265065 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265064,G__265065) : tailrecursion.hoplon.markdown.code_node.call(null,G__265064,G__265065));
})()," that do help us a bit. We can replace the ",(function (){var G__265066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"iter"], null);
var G__265067 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265066,G__265067) : tailrecursion.hoplon.markdown.code_node.call(null,G__265066,G__265067));
})()," definition with this ",(function (){var G__265068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__265069 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265068,G__265069) : tailrecursion.hoplon.markdown.code_node.call(null,G__265068,G__265069));
})()," ",(function (){var G__265070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__265071 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265070,G__265071) : tailrecursion.hoplon.markdown.code_node.call(null,G__265070,G__265071));
})()," business thusly (assuming ",(function (){var G__265072 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough"], null);
var G__265073 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265072,G__265073) : tailrecursion.hoplon.markdown.code_node.call(null,G__265072,G__265073));
})()," and ",(function (){var G__265074 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__265075 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265074,G__265075) : tailrecursion.hoplon.markdown.code_node.call(null,G__265074,G__265075));
})()," were already defined):"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265060,G__265061) : tailrecursion.hoplon.markdown.para_node.call(null,G__265060,G__265061));
})(),(function (){var G__265139 = (function (){var G__265140 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__265141 = (function (){var G__265142 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__265143 = "(";
var G__265144 = (function (){var G__265173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265174 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265173,G__265174) : tailrecursion.hoplon.span.call(null,G__265173,G__265174));
})();
var G__265145 = (function (){var G__265175 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265176 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265175,G__265176) : tailrecursion.hoplon.span.call(null,G__265175,G__265176));
})();
var G__265146 = " [";
var G__265147 = (function (){var G__265177 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265178 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265177,G__265178) : tailrecursion.hoplon.span.call(null,G__265177,G__265178));
})();
var G__265148 = "]\n  (";
var G__265149 = (function (){var G__265179 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265180 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265179,G__265180) : tailrecursion.hoplon.span.call(null,G__265179,G__265180));
})();
var G__265150 = "[";
var G__265151 = (function (){var G__265181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265182 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265181,G__265182) : tailrecursion.hoplon.span.call(null,G__265181,G__265182));
})();
var G__265152 = " ";
var G__265153 = (function (){var G__265183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__265184 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265183,G__265184) : tailrecursion.hoplon.span.call(null,G__265183,G__265184));
})();
var G__265154 = "]\n    (";
var G__265155 = (function (){var G__265185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265186 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265185,G__265186) : tailrecursion.hoplon.span.call(null,G__265185,G__265186));
})();
var G__265156 = "(";
var G__265157 = (function (){var G__265187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265188 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265187,G__265188) : tailrecursion.hoplon.span.call(null,G__265187,G__265188));
})();
var G__265158 = " ";
var G__265159 = (function (){var G__265189 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265190 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265189,G__265190) : tailrecursion.hoplon.span.call(null,G__265189,G__265190));
})();
var G__265160 = " ";
var G__265161 = (function (){var G__265191 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265192 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265191,G__265192) : tailrecursion.hoplon.span.call(null,G__265191,G__265192));
})();
var G__265162 = ")\n        ";
var G__265163 = (function (){var G__265193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265194 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265193,G__265194) : tailrecursion.hoplon.span.call(null,G__265193,G__265194));
})();
var G__265164 = "\n        (";
var G__265165 = (function (){var G__265195 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265196 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265195,G__265196) : tailrecursion.hoplon.span.call(null,G__265195,G__265196));
})();
var G__265166 = " (";
var G__265167 = (function (){var G__265197 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265198 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265197,G__265198) : tailrecursion.hoplon.span.call(null,G__265197,G__265198));
})();
var G__265168 = " ";
var G__265169 = (function (){var G__265199 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265200 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265199,G__265200) : tailrecursion.hoplon.span.call(null,G__265199,G__265200));
})();
var G__265170 = " ";
var G__265171 = (function (){var G__265201 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265202 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265201,G__265202) : tailrecursion.hoplon.span.call(null,G__265201,G__265202));
})();
var G__265172 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31(G__265142,G__265143,G__265144,G__265145,G__265146,G__265147,G__265148,G__265149,G__265150,G__265151,G__265152,G__265153,G__265154,G__265155,G__265156,G__265157,G__265158,G__265159,G__265160,G__265161,G__265162,G__265163,G__265164,G__265165,G__265166,G__265167,G__265168,G__265169,G__265170,G__265171,G__265172) : tailrecursion.hoplon.pre.call(null,G__265142,G__265143,G__265144,G__265145,G__265146,G__265147,G__265148,G__265149,G__265150,G__265151,G__265152,G__265153,G__265154,G__265155,G__265156,G__265157,G__265158,G__265159,G__265160,G__265161,G__265162,G__265163,G__265164,G__265165,G__265166,G__265167,G__265168,G__265169,G__265170,G__265171,G__265172));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__265140,G__265141) : tailrecursion.hoplon.div.call(null,G__265140,G__265141));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__265139) : tailrecursion.hoplon.div.call(null,G__265139));
})(),(function (){var G__265203 = cljs.core.PersistentArrayMap.EMPTY;
var G__265204 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The genearl format for these will be,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265203,G__265204) : tailrecursion.hoplon.markdown.para_node.call(null,G__265203,G__265204));
})(),(function (){var G__265300 = (function (){var G__265301 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__265302 = (function (){var G__265303 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__265304 = "(";
var G__265305 = (function (){var G__265348 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265349 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265348,G__265349) : tailrecursion.hoplon.span.call(null,G__265348,G__265349));
})();
var G__265306 = (function (){var G__265350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265351 = "function";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265350,G__265351) : tailrecursion.hoplon.span.call(null,G__265350,G__265351));
})();
var G__265307 = " [";
var G__265308 = (function (){var G__265352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265353 = "arguments";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265352,G__265353) : tailrecursion.hoplon.span.call(null,G__265352,G__265353));
})();
var G__265309 = "]\n  (";
var G__265310 = (function (){var G__265354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265355 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265354,G__265355) : tailrecursion.hoplon.span.call(null,G__265354,G__265355));
})();
var G__265311 = "[";
var G__265312 = (function (){var G__265356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265357 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265356,G__265357) : tailrecursion.hoplon.span.call(null,G__265356,G__265357));
})();
var G__265313 = " ";
var G__265314 = (function (){var G__265358 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265359 = "initial-value1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265358,G__265359) : tailrecursion.hoplon.span.call(null,G__265358,G__265359));
})();
var G__265315 = "\n         ";
var G__265316 = (function (){var G__265360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265361 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265360,G__265361) : tailrecursion.hoplon.span.call(null,G__265360,G__265361));
})();
var G__265317 = " ";
var G__265318 = (function (){var G__265362 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265363 = "initial-value2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265362,G__265363) : tailrecursion.hoplon.span.call(null,G__265362,G__265363));
})();
var G__265319 = "\n         ";
var G__265320 = (function (){var G__265364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265365 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265364,G__265365) : tailrecursion.hoplon.span.call(null,G__265364,G__265365));
})();
var G__265321 = "\n         ";
var G__265322 = (function (){var G__265366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265367 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265366,G__265367) : tailrecursion.hoplon.span.call(null,G__265366,G__265367));
})();
var G__265323 = " ";
var G__265324 = (function (){var G__265368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265369 = "initial-valuen";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265368,G__265369) : tailrecursion.hoplon.span.call(null,G__265368,G__265369));
})();
var G__265325 = "]\n    (";
var G__265326 = (function (){var G__265370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265371 = "<if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265370,G__265371) : tailrecursion.hoplon.span.call(null,G__265370,G__265371));
})();
var G__265327 = " ";
var G__265328 = (function (){var G__265372 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265373 = "or cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265372,G__265373) : tailrecursion.hoplon.span.call(null,G__265372,G__265373));
})();
var G__265329 = (function (){var G__265374 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265375 = "can";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265374,G__265375) : tailrecursion.hoplon.span.call(null,G__265374,G__265375));
})();
var G__265330 = " ";
var G__265331 = (function (){var G__265376 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265377 = "go";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265376,G__265377) : tailrecursion.hoplon.span.call(null,G__265376,G__265377));
})();
var G__265332 = " ";
var G__265333 = (function (){var G__265378 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265379 = "here>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265378,G__265379) : tailrecursion.hoplon.span.call(null,G__265378,G__265379));
})();
var G__265334 = " (";
var G__265335 = (function (){var G__265380 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265381 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265380,G__265381) : tailrecursion.hoplon.span.call(null,G__265380,G__265381));
})();
var G__265336 = " (";
var G__265337 = (function (){var G__265382 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265383 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265382,G__265383) : tailrecursion.hoplon.span.call(null,G__265382,G__265383));
})();
var G__265338 = (function (){var G__265384 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265385 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265384,G__265385) : tailrecursion.hoplon.span.call(null,G__265384,G__265385));
})();
var G__265339 = ") (";
var G__265340 = (function (){var G__265386 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265387 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265386,G__265387) : tailrecursion.hoplon.span.call(null,G__265386,G__265387));
})();
var G__265341 = (function (){var G__265388 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265389 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265388,G__265389) : tailrecursion.hoplon.span.call(null,G__265388,G__265389));
})();
var G__265342 = ")";
var G__265343 = (function (){var G__265390 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265391 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265390,G__265391) : tailrecursion.hoplon.span.call(null,G__265390,G__265391));
})();
var G__265344 = "(";
var G__265345 = (function (){var G__265392 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265393 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265392,G__265393) : tailrecursion.hoplon.span.call(null,G__265392,G__265393));
})();
var G__265346 = (function (){var G__265394 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265395 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265394,G__265395) : tailrecursion.hoplon.span.call(null,G__265394,G__265395));
})();
var G__265347 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45(G__265303,G__265304,G__265305,G__265306,G__265307,G__265308,G__265309,G__265310,G__265311,G__265312,G__265313,G__265314,G__265315,G__265316,G__265317,G__265318,G__265319,G__265320,G__265321,G__265322,G__265323,G__265324,G__265325,G__265326,G__265327,G__265328,G__265329,G__265330,G__265331,G__265332,G__265333,G__265334,G__265335,G__265336,G__265337,G__265338,G__265339,G__265340,G__265341,G__265342,G__265343,G__265344,G__265345,G__265346,G__265347) : tailrecursion.hoplon.pre.call(null,G__265303,G__265304,G__265305,G__265306,G__265307,G__265308,G__265309,G__265310,G__265311,G__265312,G__265313,G__265314,G__265315,G__265316,G__265317,G__265318,G__265319,G__265320,G__265321,G__265322,G__265323,G__265324,G__265325,G__265326,G__265327,G__265328,G__265329,G__265330,G__265331,G__265332,G__265333,G__265334,G__265335,G__265336,G__265337,G__265338,G__265339,G__265340,G__265341,G__265342,G__265343,G__265344,G__265345,G__265346,G__265347));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__265301,G__265302) : tailrecursion.hoplon.div.call(null,G__265301,G__265302));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__265300) : tailrecursion.hoplon.div.call(null,G__265300));
})(),(function (){var G__265396 = cljs.core.PersistentArrayMap.EMPTY;
var G__265397 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This ",(function (){var G__265398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[thing1 intial-value1]"], null);
var G__265399 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265398,G__265399) : tailrecursion.hoplon.markdown.code_node.call(null,G__265398,G__265399));
})()," defines ",(function (){var G__265400 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"thing1"], null);
var G__265401 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265400,G__265401) : tailrecursion.hoplon.markdown.code_node.call(null,G__265400,G__265401));
})()," to be ",(function (){var G__265402 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"value1"], null);
var G__265403 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265402,G__265403) : tailrecursion.hoplon.markdown.code_node.call(null,G__265402,G__265403));
})()," for the first iteration, then when you call ",(function (){var G__265404 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__265405 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265404,G__265405) : tailrecursion.hoplon.markdown.code_node.call(null,G__265404,G__265405));
})(),", it goes back to loop with the new values given (in the same order they appear in the ",(function (){var G__265406 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__265407 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265406,G__265407) : tailrecursion.hoplon.markdown.code_node.call(null,G__265406,G__265407));
})()," bindings)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265396,G__265397) : tailrecursion.hoplon.markdown.para_node.call(null,G__265396,G__265397));
})(),(function (){var G__265408 = cljs.core.PersistentArrayMap.EMPTY;
var G__265409 = new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such nesting of definitions, called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["block structure"], null)], 0)),", is basically the right solution to the simplest name-packaging problem. But there is a better idea lurking here. In addition to internalizing the definitions of the auxiliary procedures, we can simplify them. Since ",(function (){var G__265410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265411 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265410,G__265411) : tailrecursion.hoplon.markdown.code_node.call(null,G__265410,G__265411));
})()," is bound in the definition of ",(function (){var G__265412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__265413 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265412,G__265413) : tailrecursion.hoplon.markdown.code_node.call(null,G__265412,G__265413));
})(),", the procedures ",(function (){var G__265414 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__265415 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265414,G__265415) : tailrecursion.hoplon.markdown.code_node.call(null,G__265414,G__265415));
})(),", ",(function (){var G__265416 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__265417 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265416,G__265417) : tailrecursion.hoplon.markdown.code_node.call(null,G__265416,G__265417));
})(),", and ",(function (){var G__265418 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__265419 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265418,G__265419) : tailrecursion.hoplon.markdown.code_node.call(null,G__265418,G__265419));
})(),", which are defined internally to ",(function (){var G__265420 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__265421 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265420,G__265421) : tailrecursion.hoplon.markdown.code_node.call(null,G__265420,G__265421));
})(),", are in the scope of ",(function (){var G__265422 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265423 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265422,G__265423) : tailrecursion.hoplon.markdown.code_node.call(null,G__265422,G__265423));
})(),". Thus, it is not necessary to pass ",(function (){var G__265424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265425 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265424,G__265425) : tailrecursion.hoplon.markdown.code_node.call(null,G__265424,G__265425));
})()," explicitly to each of these procedures. Instead, we allow ",(function (){var G__265426 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265427 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265426,G__265427) : tailrecursion.hoplon.markdown.code_node.call(null,G__265426,G__265427));
})()," to be a free variable in the internal definitions, as shown below. Then ",(function (){var G__265428 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__265429 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265428,G__265429) : tailrecursion.hoplon.markdown.code_node.call(null,G__265428,G__265429));
})()," gets its value from the argument with which the enclosing procedure ",(function (){var G__265430 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__265431 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__265430,G__265431) : tailrecursion.hoplon.markdown.code_node.call(null,G__265430,G__265431));
})()," is called. This discipline is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["lexical scoping"], null)], 0)),".",(function (){var G__265432 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__265433 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lexical scoping dictates that free variables in a procedure are taken to refer to bindings made by enclosing procedure definitions; that is, they are looked up in the environment in which the procedure was defined. We will see how this works in detail in chapter 3 when we study environments and the detailed behavior of the interpreter."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__265432,G__265433) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__265432,G__265433));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265408,G__265409) : tailrecursion.hoplon.markdown.para_node.call(null,G__265408,G__265409));
})(),(function (){var G__265434 = cljs.core.PersistentArrayMap.EMPTY;
var G__265435 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__265436 = cljs.core.PersistentArrayMap.EMPTY;
var G__265437 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This would still work in Clojure, if one were so inclined, it would just define all of these functions globally (as is explained above)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265436,G__265437) : tailrecursion.hoplon.markdown.para_node.call(null,G__265436,G__265437));
})()], null);
return (tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2(G__265434,G__265435) : tailrecursion.hoplon.markdown.block_quote_node.call(null,G__265434,G__265435));
})(),(function (){var G__265569 = (function (){var G__265570 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__265571 = (function (){var G__265572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__265573 = "(";
var G__265574 = (function (){var G__265635 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265636 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265635,G__265636) : tailrecursion.hoplon.span.call(null,G__265635,G__265636));
})();
var G__265575 = (function (){var G__265637 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265638 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265637,G__265638) : tailrecursion.hoplon.span.call(null,G__265637,G__265638));
})();
var G__265576 = " [";
var G__265577 = (function (){var G__265639 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265640 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265639,G__265640) : tailrecursion.hoplon.span.call(null,G__265639,G__265640));
})();
var G__265578 = "]\n  (";
var G__265579 = (function (){var G__265641 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265642 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265641,G__265642) : tailrecursion.hoplon.span.call(null,G__265641,G__265642));
})();
var G__265580 = (function (){var G__265643 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265644 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265643,G__265644) : tailrecursion.hoplon.span.call(null,G__265643,G__265644));
})();
var G__265581 = " [";
var G__265582 = (function (){var G__265645 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265646 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265645,G__265646) : tailrecursion.hoplon.span.call(null,G__265645,G__265646));
})();
var G__265583 = "]\n    (";
var G__265584 = (function (){var G__265647 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265648 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265647,G__265648) : tailrecursion.hoplon.span.call(null,G__265647,G__265648));
})();
var G__265585 = "(";
var G__265586 = (function (){var G__265649 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265650 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265649,G__265650) : tailrecursion.hoplon.span.call(null,G__265649,G__265650));
})();
var G__265587 = " (";
var G__265588 = (function (){var G__265651 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265652 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265651,G__265652) : tailrecursion.hoplon.span.call(null,G__265651,G__265652));
})();
var G__265589 = "(";
var G__265590 = (function (){var G__265653 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265654 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265653,G__265654) : tailrecursion.hoplon.span.call(null,G__265653,G__265654));
})();
var G__265591 = " ";
var G__265592 = (function (){var G__265655 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265656 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265655,G__265656) : tailrecursion.hoplon.span.call(null,G__265655,G__265656));
})();
var G__265593 = ") ";
var G__265594 = (function (){var G__265657 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265658 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265657,G__265658) : tailrecursion.hoplon.span.call(null,G__265657,G__265658));
})();
var G__265595 = ")) ";
var G__265596 = (function (){var G__265659 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__265660 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265659,G__265660) : tailrecursion.hoplon.span.call(null,G__265659,G__265660));
})();
var G__265597 = "))\n  (";
var G__265598 = (function (){var G__265661 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265662 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265661,G__265662) : tailrecursion.hoplon.span.call(null,G__265661,G__265662));
})();
var G__265599 = (function (){var G__265663 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265664 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265663,G__265664) : tailrecursion.hoplon.span.call(null,G__265663,G__265664));
})();
var G__265600 = " [";
var G__265601 = (function (){var G__265665 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265666 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265665,G__265666) : tailrecursion.hoplon.span.call(null,G__265665,G__265666));
})();
var G__265602 = "]\n    (";
var G__265603 = (function (){var G__265667 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265668 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265667,G__265668) : tailrecursion.hoplon.span.call(null,G__265667,G__265668));
})();
var G__265604 = " ";
var G__265605 = (function (){var G__265669 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265670 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265669,G__265670) : tailrecursion.hoplon.span.call(null,G__265669,G__265670));
})();
var G__265606 = " (";
var G__265607 = (function (){var G__265671 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__265672 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265671,G__265672) : tailrecursion.hoplon.span.call(null,G__265671,G__265672));
})();
var G__265608 = (function (){var G__265673 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265674 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265673,G__265674) : tailrecursion.hoplon.span.call(null,G__265673,G__265674));
})();
var G__265609 = " ";
var G__265610 = (function (){var G__265675 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265676 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265675,G__265676) : tailrecursion.hoplon.span.call(null,G__265675,G__265676));
})();
var G__265611 = ")))\n  (";
var G__265612 = (function (){var G__265677 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265678 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265677,G__265678) : tailrecursion.hoplon.span.call(null,G__265677,G__265678));
})();
var G__265613 = (function (){var G__265679 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265680 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265679,G__265680) : tailrecursion.hoplon.span.call(null,G__265679,G__265680));
})();
var G__265614 = " [";
var G__265615 = (function (){var G__265681 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265682 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265681,G__265682) : tailrecursion.hoplon.span.call(null,G__265681,G__265682));
})();
var G__265616 = "]\n    (";
var G__265617 = (function (){var G__265683 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__265684 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265683,G__265684) : tailrecursion.hoplon.span.call(null,G__265683,G__265684));
})();
var G__265618 = "(";
var G__265619 = (function (){var G__265685 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265686 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265685,G__265686) : tailrecursion.hoplon.span.call(null,G__265685,G__265686));
})();
var G__265620 = " ";
var G__265621 = (function (){var G__265687 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265688 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265687,G__265688) : tailrecursion.hoplon.span.call(null,G__265687,G__265688));
})();
var G__265622 = ")\n        ";
var G__265623 = (function (){var G__265689 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265690 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265689,G__265690) : tailrecursion.hoplon.span.call(null,G__265689,G__265690));
})();
var G__265624 = "\n        (";
var G__265625 = (function (){var G__265691 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265692 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265691,G__265692) : tailrecursion.hoplon.span.call(null,G__265691,G__265692));
})();
var G__265626 = " (";
var G__265627 = (function (){var G__265693 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265694 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265693,G__265694) : tailrecursion.hoplon.span.call(null,G__265693,G__265694));
})();
var G__265628 = " ";
var G__265629 = (function (){var G__265695 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__265696 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265695,G__265696) : tailrecursion.hoplon.span.call(null,G__265695,G__265696));
})();
var G__265630 = "))))\n  (";
var G__265631 = (function (){var G__265697 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__265698 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265697,G__265698) : tailrecursion.hoplon.span.call(null,G__265697,G__265698));
})();
var G__265632 = " ";
var G__265633 = (function (){var G__265699 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__265700 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__265699,G__265700) : tailrecursion.hoplon.span.call(null,G__265699,G__265700));
})();
var G__265634 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63(G__265572,G__265573,G__265574,G__265575,G__265576,G__265577,G__265578,G__265579,G__265580,G__265581,G__265582,G__265583,G__265584,G__265585,G__265586,G__265587,G__265588,G__265589,G__265590,G__265591,G__265592,G__265593,G__265594,G__265595,G__265596,G__265597,G__265598,G__265599,G__265600,G__265601,G__265602,G__265603,G__265604,G__265605,G__265606,G__265607,G__265608,G__265609,G__265610,G__265611,G__265612,G__265613,G__265614,G__265615,G__265616,G__265617,G__265618,G__265619,G__265620,G__265621,G__265622,G__265623,G__265624,G__265625,G__265626,G__265627,G__265628,G__265629,G__265630,G__265631,G__265632,G__265633,G__265634) : tailrecursion.hoplon.pre.call(null,G__265572,G__265573,G__265574,G__265575,G__265576,G__265577,G__265578,G__265579,G__265580,G__265581,G__265582,G__265583,G__265584,G__265585,G__265586,G__265587,G__265588,G__265589,G__265590,G__265591,G__265592,G__265593,G__265594,G__265595,G__265596,G__265597,G__265598,G__265599,G__265600,G__265601,G__265602,G__265603,G__265604,G__265605,G__265606,G__265607,G__265608,G__265609,G__265610,G__265611,G__265612,G__265613,G__265614,G__265615,G__265616,G__265617,G__265618,G__265619,G__265620,G__265621,G__265622,G__265623,G__265624,G__265625,G__265626,G__265627,G__265628,G__265629,G__265630,G__265631,G__265632,G__265633,G__265634));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__265570,G__265571) : tailrecursion.hoplon.div.call(null,G__265570,G__265571));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__265569) : tailrecursion.hoplon.div.call(null,G__265569));
})(),(function (){var G__265701 = cljs.core.PersistentArrayMap.EMPTY;
var G__265702 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will use block structure extensively to help us break up large programs into tractable pieces.",(function (){var G__265703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__265704 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Embedded definitions must come first in a procedure body. The management is not responsible for the consequences of running programs that intertwine definition and use."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__265703,G__265704) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__265703,G__265704));
})()," The idea of block structure originated with the programming language Algol 60. It appears in most advanced programming languages and is an important tool for helping to organize the construction of large programs."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__265701,G__265702) : tailrecursion.hoplon.markdown.para_node.call(null,G__265701,G__265702));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264347;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264346;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_264345;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_264344;
}})()], 0));
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27(G__258233,G__258234,G__258235,G__258236,G__258237,G__258238,G__258239,G__258240,G__258241,G__258242,G__258243,G__258244,G__258245,G__258246,G__258247,G__258248,G__258249,G__258250,G__258251,G__258252,G__258253,G__258254,G__258255,G__258256,G__258257,G__258258,G__258259) : tailrecursion.hoplon.div.call(null,G__258233,G__258234,G__258235,G__258236,G__258237,G__258238,G__258239,G__258240,G__258241,G__258242,G__258243,G__258244,G__258245,G__258246,G__258247,G__258248,G__258249,G__258250,G__258251,G__258252,G__258253,G__258254,G__258255,G__258256,G__258257,G__258258,G__258259));
};
var book$sicp$texts$ch1sect1$content = function (var_args){
var args__8082__auto__ = null;
if (arguments.length > 0) {
var G__265705__i = 0, G__265705__a = new Array(arguments.length -  0);
while (G__265705__i < G__265705__a.length) {G__265705__a[G__265705__i] = arguments[G__265705__i + 0]; ++G__265705__i;}
  args__8082__auto__ = new cljs.core.IndexedSeq(G__265705__a,0);
} 
return book$sicp$texts$ch1sect1$content__delegate.call(this,args__8082__auto__);};
book$sicp$texts$ch1sect1$content.cljs$lang$maxFixedArity = 0;
book$sicp$texts$ch1sect1$content.cljs$lang$applyTo = (function (arglist__265706){
var args__8082__auto__ = cljs.core.seq(arglist__265706);
return book$sicp$texts$ch1sect1$content__delegate(args__8082__auto__);
});
book$sicp$texts$ch1sect1$content.cljs$core$IFn$_invoke$arity$variadic = book$sicp$texts$ch1sect1$content__delegate;
return book$sicp$texts$ch1sect1$content;
})()
;
