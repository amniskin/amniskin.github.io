// Compiled by ClojureScript 1.7.48 {:static-fns true, :optimize-constants true}
goog.provide('book.sicp.texts.ch1sect1');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('book.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
book.sicp.texts.ch1sect1.content = (function() { 
var book$sicp$texts$ch1sect1$content__delegate = function (args__8262__auto__){
var vec__239898 = tailrecursion.hoplon.parse_args(args__8262__auto__);
var attr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__239898,(0),null);
var kids = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__239898,(1),null);
var G__239899 = cljs.core.PersistentArrayMap.EMPTY;
var G__239900 = book.sicp.book_data.sect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Elements of Programming"], null),(function (){var _STAR_references_STAR_239926 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239927 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239928 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239929 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239930 = cljs.core.PersistentArrayMap.EMPTY;
var G__239931 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes. Thus, when we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three mechanisms for accomplishing this:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239930,G__239931) : tailrecursion.hoplon.markdown.para_node.call(null,G__239930,G__239931));
})(),(function (){var G__239932 = cljs.core.PersistentArrayMap.EMPTY;
var G__239933 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239934 = cljs.core.PersistentArrayMap.EMPTY;
var G__239935 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239936 = cljs.core.PersistentArrayMap.EMPTY;
var G__239937 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["primitive expressions"], null)], 0)),", which represent the simplest entities the language is concerned with,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239936,G__239937) : tailrecursion.hoplon.markdown.para_node.call(null,G__239936,G__239937));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__239934,G__239935) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__239934,G__239935));
})(),(function (){var G__239938 = cljs.core.PersistentArrayMap.EMPTY;
var G__239939 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_239940 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239941 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239942 = cljs.core.PersistentArrayMap.EMPTY;
var G__239943 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of combination"], null)], 0)),", by which compound elements are built from simpler ones, and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239942,G__239943) : tailrecursion.hoplon.markdown.para_node.call(null,G__239942,G__239943));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239941;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239940;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__239938,G__239939) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__239938,G__239939));
})(),(function (){var G__239944 = cljs.core.PersistentArrayMap.EMPTY;
var G__239945 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_239946 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239947 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239948 = cljs.core.PersistentArrayMap.EMPTY;
var G__239949 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of abstraction"], null)], 0)),", by which compound elements can be named and manipulated as units."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239948,G__239949) : tailrecursion.hoplon.markdown.para_node.call(null,G__239948,G__239949));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239947;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239946;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__239944,G__239945) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__239944,G__239945));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__239932,G__239933) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__239932,G__239933));
})(),(function (){var G__239950 = cljs.core.PersistentArrayMap.EMPTY;
var G__239951 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In programming, we deal with two kinds of elements: procedures and data. (Later we will discover that they are really not so distinct.) Informally, data is ``stuff",(function (){var G__239952 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__239953 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__239952,G__239953) : tailrecursion.hoplon.markdown.simple_node.call(null,G__239952,G__239953));
})(),(function (){var G__239954 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__239955 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__239954,G__239955) : tailrecursion.hoplon.markdown.simple_node.call(null,G__239954,G__239955));
})()," that we want to manipulate, and procedures are descriptions of the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive procedures and should have methods for combining and abstracting procedures and data."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239950,G__239951) : tailrecursion.hoplon.markdown.para_node.call(null,G__239950,G__239951));
})(),(function (){var G__239956 = cljs.core.PersistentArrayMap.EMPTY;
var G__239957 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this chapter we will deal only with simple numerical data so that we can focus on the rules for building procedures.",(function (){var G__239958 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__239959 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The characterization of numbers as ",(function (){var G__239960 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__239961 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["simple data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__239960,G__239961) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__239960,G__239961));
})()," is a barefaced bluff. In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language. Some typical issues involved are these: Some computer systems distinguish ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["integers"], null)], 0)),", such as 2, from ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["real numbers"], null)], 0)),", such as 2.71. Is the real number 2.00 different from the integer 2? Are the arithmetic operations used for integers the same as the operations used for real numbers? Does 6 divided by 2 produce 3, or 3.0? How large a number can we represent? How many decimal places of accuracy can we represent? Is the range of integers the same as the range of real numbers? Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors ",(function (){var G__239962 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__239963 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__239962,G__239963) : tailrecursion.hoplon.markdown.simple_node.call(null,G__239962,G__239963));
})()," the entire science of numerical analysis. Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems. The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__239958,G__239959) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__239958,G__239959));
})()," In later chapters we will see that these same rules allow us to build procedures to manipulate compound data as well."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239956,G__239957) : tailrecursion.hoplon.markdown.para_node.call(null,G__239956,G__239957));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239929;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239928;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239927;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239926;
}})()], 0));
var G__239901 = "";
var G__239902 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Expressions"], null),(function (){var _STAR_references_STAR_239964 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239965 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_239966 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_239967 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 24, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__239968 = cljs.core.PersistentArrayMap.EMPTY;
var G__239969 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One easy way to get started at programming is to examine some typical interactions with an interpreter for the Scheme dialect of Lisp. Imagine that you are sitting at a computer terminal. You type an ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["expression"], null)], 0)),", and the interpreter responds by displaying the result of its evaluating that expression."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239968,G__239969) : tailrecursion.hoplon.markdown.para_node.call(null,G__239968,G__239969));
})(),(function (){var G__239970 = cljs.core.PersistentArrayMap.EMPTY;
var G__239971 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One kind of primitive expression you might type is a number. (More precisely, the expression that you type consists of the numerals that represent the number in base 10.) If you present Lisp with a number"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239970,G__239971) : tailrecursion.hoplon.markdown.para_node.call(null,G__239970,G__239971));
})(),(function (){var G__239972 = cljs.core.PersistentArrayMap.EMPTY;
var G__239973 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239972,G__239973) : tailrecursion.hoplon.markdown.para_node.call(null,G__239972,G__239973));
})(),(function (){var G__239974 = cljs.core.PersistentArrayMap.EMPTY;
var G__239975 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the interpreter will respond by printing",(function (){var G__239976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__239977 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, when we wish to emphasize the distinction between the input typed by the user and the response printed by the interpreter, we will show the latter in slanted characters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__239976,G__239977) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__239976,G__239977));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239974,G__239975) : tailrecursion.hoplon.markdown.para_node.call(null,G__239974,G__239975));
})(),(function (){var G__239978 = cljs.core.PersistentArrayMap.EMPTY;
var G__239979 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239978,G__239979) : tailrecursion.hoplon.markdown.para_node.call(null,G__239978,G__239979));
})(),(function (){var G__239980 = cljs.core.PersistentArrayMap.EMPTY;
var G__239981 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions representing numbers may be combined with an expression representing a primitive procedure (such as + or ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,false,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [") to form a compound expression that represents the application of the procedure to those numbers. For example:"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__239980,G__239981) : tailrecursion.hoplon.markdown.para_node.call(null,G__239980,G__239981));
})(),(function (){var G__240001 = (function (){var G__240002 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240003 = (function (){var G__240004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240005 = "(";
var G__240006 = (function (){var G__240013 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240014 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240013,G__240014) : tailrecursion.hoplon.span.call(null,G__240013,G__240014));
})();
var G__240007 = (function (){var G__240015 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240016 = "137";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240015,G__240016) : tailrecursion.hoplon.span.call(null,G__240015,G__240016));
})();
var G__240008 = " ";
var G__240009 = (function (){var G__240017 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240018 = "349";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240017,G__240018) : tailrecursion.hoplon.span.call(null,G__240017,G__240018));
})();
var G__240010 = ")\n";
var G__240011 = (function (){var G__240019 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240020 = "486";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240019,G__240020) : tailrecursion.hoplon.span.call(null,G__240019,G__240020));
})();
var G__240012 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__240004,G__240005,G__240006,G__240007,G__240008,G__240009,G__240010,G__240011,G__240012) : tailrecursion.hoplon.pre.call(null,G__240004,G__240005,G__240006,G__240007,G__240008,G__240009,G__240010,G__240011,G__240012));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240002,G__240003) : tailrecursion.hoplon.div.call(null,G__240002,G__240003));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240001) : tailrecursion.hoplon.div.call(null,G__240001));
})(),(function (){var G__240040 = (function (){var G__240041 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240042 = (function (){var G__240043 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240044 = "(";
var G__240045 = (function (){var G__240052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240053 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240052,G__240053) : tailrecursion.hoplon.span.call(null,G__240052,G__240053));
})();
var G__240046 = (function (){var G__240054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240055 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240054,G__240055) : tailrecursion.hoplon.span.call(null,G__240054,G__240055));
})();
var G__240047 = " ";
var G__240048 = (function (){var G__240056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240057 = "334";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240056,G__240057) : tailrecursion.hoplon.span.call(null,G__240056,G__240057));
})();
var G__240049 = ")\n";
var G__240050 = (function (){var G__240058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240059 = "666";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240058,G__240059) : tailrecursion.hoplon.span.call(null,G__240058,G__240059));
})();
var G__240051 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__240043,G__240044,G__240045,G__240046,G__240047,G__240048,G__240049,G__240050,G__240051) : tailrecursion.hoplon.pre.call(null,G__240043,G__240044,G__240045,G__240046,G__240047,G__240048,G__240049,G__240050,G__240051));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240041,G__240042) : tailrecursion.hoplon.div.call(null,G__240041,G__240042));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240040) : tailrecursion.hoplon.div.call(null,G__240040));
})(),(function (){var G__240079 = (function (){var G__240080 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240081 = (function (){var G__240082 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240083 = "(";
var G__240084 = (function (){var G__240091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240092 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240091,G__240092) : tailrecursion.hoplon.span.call(null,G__240091,G__240092));
})();
var G__240085 = (function (){var G__240093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240094 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240093,G__240094) : tailrecursion.hoplon.span.call(null,G__240093,G__240094));
})();
var G__240086 = " ";
var G__240087 = (function (){var G__240095 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240096 = "99";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240095,G__240096) : tailrecursion.hoplon.span.call(null,G__240095,G__240096));
})();
var G__240088 = ")\n";
var G__240089 = (function (){var G__240097 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240098 = "495";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240097,G__240098) : tailrecursion.hoplon.span.call(null,G__240097,G__240098));
})();
var G__240090 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__240082,G__240083,G__240084,G__240085,G__240086,G__240087,G__240088,G__240089,G__240090) : tailrecursion.hoplon.pre.call(null,G__240082,G__240083,G__240084,G__240085,G__240086,G__240087,G__240088,G__240089,G__240090));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240080,G__240081) : tailrecursion.hoplon.div.call(null,G__240080,G__240081));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240079) : tailrecursion.hoplon.div.call(null,G__240079));
})(),(function (){var G__240118 = (function (){var G__240119 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240120 = (function (){var G__240121 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240122 = "(";
var G__240123 = (function (){var G__240130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240131 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240130,G__240131) : tailrecursion.hoplon.span.call(null,G__240130,G__240131));
})();
var G__240124 = (function (){var G__240132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240133 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240132,G__240133) : tailrecursion.hoplon.span.call(null,G__240132,G__240133));
})();
var G__240125 = " ";
var G__240126 = (function (){var G__240134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240135 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240134,G__240135) : tailrecursion.hoplon.span.call(null,G__240134,G__240135));
})();
var G__240127 = ")\n";
var G__240128 = (function (){var G__240136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240137 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240136,G__240137) : tailrecursion.hoplon.span.call(null,G__240136,G__240137));
})();
var G__240129 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__240121,G__240122,G__240123,G__240124,G__240125,G__240126,G__240127,G__240128,G__240129) : tailrecursion.hoplon.pre.call(null,G__240121,G__240122,G__240123,G__240124,G__240125,G__240126,G__240127,G__240128,G__240129));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240119,G__240120) : tailrecursion.hoplon.div.call(null,G__240119,G__240120));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240118) : tailrecursion.hoplon.div.call(null,G__240118));
})(),(function (){var G__240157 = (function (){var G__240158 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240159 = (function (){var G__240160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240161 = "(";
var G__240162 = (function (){var G__240169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240170 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240169,G__240170) : tailrecursion.hoplon.span.call(null,G__240169,G__240170));
})();
var G__240163 = (function (){var G__240171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240172 = "2.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240171,G__240172) : tailrecursion.hoplon.span.call(null,G__240171,G__240172));
})();
var G__240164 = " ";
var G__240165 = (function (){var G__240173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240174 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240173,G__240174) : tailrecursion.hoplon.span.call(null,G__240173,G__240174));
})();
var G__240166 = ")\n";
var G__240167 = (function (){var G__240175 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240176 = "12.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240175,G__240176) : tailrecursion.hoplon.span.call(null,G__240175,G__240176));
})();
var G__240168 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__240160,G__240161,G__240162,G__240163,G__240164,G__240165,G__240166,G__240167,G__240168) : tailrecursion.hoplon.pre.call(null,G__240160,G__240161,G__240162,G__240163,G__240164,G__240165,G__240166,G__240167,G__240168));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240158,G__240159) : tailrecursion.hoplon.div.call(null,G__240158,G__240159));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240157) : tailrecursion.hoplon.div.call(null,G__240157));
})(),(function (){var G__240177 = cljs.core.PersistentArrayMap.EMPTY;
var G__240178 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions such as these, formed by delimiting a list of expressions within parentheses in order to denote procedure application, are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["combinations"], null)], 0)),". The leftmost element in the list is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operator"], null)], 0)),", and the other elements are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operands"], null)], 0)),". The value of a combination is obtained by applying the procedure specified by the operator to the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["arguments"], null)], 0))," that are the values of the operands."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240177,G__240178) : tailrecursion.hoplon.markdown.para_node.call(null,G__240177,G__240178));
})(),(function (){var G__240179 = cljs.core.PersistentArrayMap.EMPTY;
var G__240180 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The convention of placing the operator to the left of the operands is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["prefix notation"], null)], 0)),", and it may be somewhat confusing at first because it departs significantly from the customary mathematical convention. Prefix notation has several advantages, however. One of them is that it can accommodate procedures that may take an arbitrary number of arguments, as in the following examples:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240179,G__240180) : tailrecursion.hoplon.markdown.para_node.call(null,G__240179,G__240180));
})(),(function (){var G__240208 = (function (){var G__240209 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240210 = (function (){var G__240211 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240212 = "(";
var G__240213 = (function (){var G__240224 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240225 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240224,G__240225) : tailrecursion.hoplon.span.call(null,G__240224,G__240225));
})();
var G__240214 = (function (){var G__240226 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240227 = "21";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240226,G__240227) : tailrecursion.hoplon.span.call(null,G__240226,G__240227));
})();
var G__240215 = " ";
var G__240216 = (function (){var G__240228 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240229 = "35";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240228,G__240229) : tailrecursion.hoplon.span.call(null,G__240228,G__240229));
})();
var G__240217 = " ";
var G__240218 = (function (){var G__240230 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240231 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240230,G__240231) : tailrecursion.hoplon.span.call(null,G__240230,G__240231));
})();
var G__240219 = " ";
var G__240220 = (function (){var G__240232 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240233 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240232,G__240233) : tailrecursion.hoplon.span.call(null,G__240232,G__240233));
})();
var G__240221 = ")\n";
var G__240222 = (function (){var G__240234 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240235 = "75";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240234,G__240235) : tailrecursion.hoplon.span.call(null,G__240234,G__240235));
})();
var G__240223 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__240211,G__240212,G__240213,G__240214,G__240215,G__240216,G__240217,G__240218,G__240219,G__240220,G__240221,G__240222,G__240223) : tailrecursion.hoplon.pre.call(null,G__240211,G__240212,G__240213,G__240214,G__240215,G__240216,G__240217,G__240218,G__240219,G__240220,G__240221,G__240222,G__240223));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240209,G__240210) : tailrecursion.hoplon.div.call(null,G__240209,G__240210));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240208) : tailrecursion.hoplon.div.call(null,G__240208));
})(),(function (){var G__240259 = (function (){var G__240260 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240261 = (function (){var G__240262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240263 = "(";
var G__240264 = (function (){var G__240273 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240274 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240273,G__240274) : tailrecursion.hoplon.span.call(null,G__240273,G__240274));
})();
var G__240265 = (function (){var G__240275 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240276 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240275,G__240276) : tailrecursion.hoplon.span.call(null,G__240275,G__240276));
})();
var G__240266 = " ";
var G__240267 = (function (){var G__240277 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240278 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240277,G__240278) : tailrecursion.hoplon.span.call(null,G__240277,G__240278));
})();
var G__240268 = " ";
var G__240269 = (function (){var G__240279 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240280 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240279,G__240280) : tailrecursion.hoplon.span.call(null,G__240279,G__240280));
})();
var G__240270 = ")\n";
var G__240271 = (function (){var G__240281 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240282 = "1200";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240281,G__240282) : tailrecursion.hoplon.span.call(null,G__240281,G__240282));
})();
var G__240272 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__240262,G__240263,G__240264,G__240265,G__240266,G__240267,G__240268,G__240269,G__240270,G__240271,G__240272) : tailrecursion.hoplon.pre.call(null,G__240262,G__240263,G__240264,G__240265,G__240266,G__240267,G__240268,G__240269,G__240270,G__240271,G__240272));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240260,G__240261) : tailrecursion.hoplon.div.call(null,G__240260,G__240261));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240259) : tailrecursion.hoplon.div.call(null,G__240259));
})(),(function (){var G__240283 = cljs.core.PersistentArrayMap.EMPTY;
var G__240284 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["No ambiguity can arise, because the operator is always the leftmost element and the entire combination is delimited by the parentheses."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240283,G__240284) : tailrecursion.hoplon.markdown.para_node.call(null,G__240283,G__240284));
})(),(function (){var G__240285 = cljs.core.PersistentArrayMap.EMPTY;
var G__240286 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A second advantage of prefix notation is that it extends in a straightforward way to allow combinations to be ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["nested"], null)], 0)),", that is, to have combinations whose elements are themselves combinations:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240285,G__240286) : tailrecursion.hoplon.markdown.para_node.call(null,G__240285,G__240286));
})(),(function (){var G__240321 = (function (){var G__240322 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240323 = (function (){var G__240324 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240325 = "(";
var G__240326 = (function (){var G__240340 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240341 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240340,G__240341) : tailrecursion.hoplon.span.call(null,G__240340,G__240341));
})();
var G__240327 = "(";
var G__240328 = (function (){var G__240342 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240343 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240342,G__240343) : tailrecursion.hoplon.span.call(null,G__240342,G__240343));
})();
var G__240329 = (function (){var G__240344 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240345 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240344,G__240345) : tailrecursion.hoplon.span.call(null,G__240344,G__240345));
})();
var G__240330 = " ";
var G__240331 = (function (){var G__240346 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240347 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240346,G__240347) : tailrecursion.hoplon.span.call(null,G__240346,G__240347));
})();
var G__240332 = ") (";
var G__240333 = (function (){var G__240348 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240349 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240348,G__240349) : tailrecursion.hoplon.span.call(null,G__240348,G__240349));
})();
var G__240334 = (function (){var G__240350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240351 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240350,G__240351) : tailrecursion.hoplon.span.call(null,G__240350,G__240351));
})();
var G__240335 = " ";
var G__240336 = (function (){var G__240352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240353 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240352,G__240353) : tailrecursion.hoplon.span.call(null,G__240352,G__240353));
})();
var G__240337 = "))\n";
var G__240338 = (function (){var G__240354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240355 = "19";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240354,G__240355) : tailrecursion.hoplon.span.call(null,G__240354,G__240355));
})();
var G__240339 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__240324,G__240325,G__240326,G__240327,G__240328,G__240329,G__240330,G__240331,G__240332,G__240333,G__240334,G__240335,G__240336,G__240337,G__240338,G__240339) : tailrecursion.hoplon.pre.call(null,G__240324,G__240325,G__240326,G__240327,G__240328,G__240329,G__240330,G__240331,G__240332,G__240333,G__240334,G__240335,G__240336,G__240337,G__240338,G__240339));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240322,G__240323) : tailrecursion.hoplon.div.call(null,G__240322,G__240323));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240321) : tailrecursion.hoplon.div.call(null,G__240321));
})(),(function (){var G__240356 = cljs.core.PersistentArrayMap.EMPTY;
var G__240357 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the Lisp interpreter can evaluate. It is we humans who get confused by still relatively simple expressions such as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240356,G__240357) : tailrecursion.hoplon.markdown.para_node.call(null,G__240356,G__240357));
})(),(function (){var G__240418 = (function (){var G__240419 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240420 = (function (){var G__240421 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240422 = "(";
var G__240423 = (function (){var G__240449 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240450 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240449,G__240450) : tailrecursion.hoplon.span.call(null,G__240449,G__240450));
})();
var G__240424 = "(";
var G__240425 = (function (){var G__240451 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240452 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240451,G__240452) : tailrecursion.hoplon.span.call(null,G__240451,G__240452));
})();
var G__240426 = (function (){var G__240453 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240454 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240453,G__240454) : tailrecursion.hoplon.span.call(null,G__240453,G__240454));
})();
var G__240427 = " (";
var G__240428 = (function (){var G__240455 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240456 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240455,G__240456) : tailrecursion.hoplon.span.call(null,G__240455,G__240456));
})();
var G__240429 = "(";
var G__240430 = (function (){var G__240457 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240458 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240457,G__240458) : tailrecursion.hoplon.span.call(null,G__240457,G__240458));
})();
var G__240431 = (function (){var G__240459 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240460 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240459,G__240460) : tailrecursion.hoplon.span.call(null,G__240459,G__240460));
})();
var G__240432 = " ";
var G__240433 = (function (){var G__240461 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240462 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240461,G__240462) : tailrecursion.hoplon.span.call(null,G__240461,G__240462));
})();
var G__240434 = ") (";
var G__240435 = (function (){var G__240463 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240464 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240463,G__240464) : tailrecursion.hoplon.span.call(null,G__240463,G__240464));
})();
var G__240436 = (function (){var G__240465 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240466 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240465,G__240466) : tailrecursion.hoplon.span.call(null,G__240465,G__240466));
})();
var G__240437 = " ";
var G__240438 = (function (){var G__240467 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240468 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240467,G__240468) : tailrecursion.hoplon.span.call(null,G__240467,G__240468));
})();
var G__240439 = "))) (";
var G__240440 = (function (){var G__240469 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240470 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240469,G__240470) : tailrecursion.hoplon.span.call(null,G__240469,G__240470));
})();
var G__240441 = "(";
var G__240442 = (function (){var G__240471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240472 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240471,G__240472) : tailrecursion.hoplon.span.call(null,G__240471,G__240472));
})();
var G__240443 = (function (){var G__240473 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240474 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240473,G__240474) : tailrecursion.hoplon.span.call(null,G__240473,G__240474));
})();
var G__240444 = " ";
var G__240445 = (function (){var G__240475 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240476 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240475,G__240476) : tailrecursion.hoplon.span.call(null,G__240475,G__240476));
})();
var G__240446 = ") ";
var G__240447 = (function (){var G__240477 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240478 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240477,G__240478) : tailrecursion.hoplon.span.call(null,G__240477,G__240478));
})();
var G__240448 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__240421,G__240422,G__240423,G__240424,G__240425,G__240426,G__240427,G__240428,G__240429,G__240430,G__240431,G__240432,G__240433,G__240434,G__240435,G__240436,G__240437,G__240438,G__240439,G__240440,G__240441,G__240442,G__240443,G__240444,G__240445,G__240446,G__240447,G__240448) : tailrecursion.hoplon.pre.call(null,G__240421,G__240422,G__240423,G__240424,G__240425,G__240426,G__240427,G__240428,G__240429,G__240430,G__240431,G__240432,G__240433,G__240434,G__240435,G__240436,G__240437,G__240438,G__240439,G__240440,G__240441,G__240442,G__240443,G__240444,G__240445,G__240446,G__240447,G__240448));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240419,G__240420) : tailrecursion.hoplon.div.call(null,G__240419,G__240420));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240418) : tailrecursion.hoplon.div.call(null,G__240418));
})(),(function (){var G__240479 = cljs.core.PersistentArrayMap.EMPTY;
var G__240480 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which the interpreter would readily evaluate to be 57. We can help ourselves by writing such an expression in the form"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240479,G__240480) : tailrecursion.hoplon.markdown.para_node.call(null,G__240479,G__240480));
})(),(function (){var G__240541 = (function (){var G__240542 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240543 = (function (){var G__240544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240545 = "(";
var G__240546 = (function (){var G__240572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240573 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240572,G__240573) : tailrecursion.hoplon.span.call(null,G__240572,G__240573));
})();
var G__240547 = "(";
var G__240548 = (function (){var G__240574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240575 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240574,G__240575) : tailrecursion.hoplon.span.call(null,G__240574,G__240575));
})();
var G__240549 = (function (){var G__240576 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240577 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240576,G__240577) : tailrecursion.hoplon.span.call(null,G__240576,G__240577));
})();
var G__240550 = "\n      (";
var G__240551 = (function (){var G__240578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240579 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240578,G__240579) : tailrecursion.hoplon.span.call(null,G__240578,G__240579));
})();
var G__240552 = "(";
var G__240553 = (function (){var G__240580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240581 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240580,G__240581) : tailrecursion.hoplon.span.call(null,G__240580,G__240581));
})();
var G__240554 = (function (){var G__240582 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240583 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240582,G__240583) : tailrecursion.hoplon.span.call(null,G__240582,G__240583));
})();
var G__240555 = " ";
var G__240556 = (function (){var G__240584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240585 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240584,G__240585) : tailrecursion.hoplon.span.call(null,G__240584,G__240585));
})();
var G__240557 = ")\n         (";
var G__240558 = (function (){var G__240586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240587 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240586,G__240587) : tailrecursion.hoplon.span.call(null,G__240586,G__240587));
})();
var G__240559 = (function (){var G__240588 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240589 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240588,G__240589) : tailrecursion.hoplon.span.call(null,G__240588,G__240589));
})();
var G__240560 = " ";
var G__240561 = (function (){var G__240590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240591 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240590,G__240591) : tailrecursion.hoplon.span.call(null,G__240590,G__240591));
})();
var G__240562 = ")))\n   (";
var G__240563 = (function (){var G__240592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240593 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240592,G__240593) : tailrecursion.hoplon.span.call(null,G__240592,G__240593));
})();
var G__240564 = "(";
var G__240565 = (function (){var G__240594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240595 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240594,G__240595) : tailrecursion.hoplon.span.call(null,G__240594,G__240595));
})();
var G__240566 = (function (){var G__240596 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240597 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240596,G__240597) : tailrecursion.hoplon.span.call(null,G__240596,G__240597));
})();
var G__240567 = " ";
var G__240568 = (function (){var G__240598 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240599 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240598,G__240599) : tailrecursion.hoplon.span.call(null,G__240598,G__240599));
})();
var G__240569 = ")\n      ";
var G__240570 = (function (){var G__240600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240601 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240600,G__240601) : tailrecursion.hoplon.span.call(null,G__240600,G__240601));
})();
var G__240571 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__240544,G__240545,G__240546,G__240547,G__240548,G__240549,G__240550,G__240551,G__240552,G__240553,G__240554,G__240555,G__240556,G__240557,G__240558,G__240559,G__240560,G__240561,G__240562,G__240563,G__240564,G__240565,G__240566,G__240567,G__240568,G__240569,G__240570,G__240571) : tailrecursion.hoplon.pre.call(null,G__240544,G__240545,G__240546,G__240547,G__240548,G__240549,G__240550,G__240551,G__240552,G__240553,G__240554,G__240555,G__240556,G__240557,G__240558,G__240559,G__240560,G__240561,G__240562,G__240563,G__240564,G__240565,G__240566,G__240567,G__240568,G__240569,G__240570,G__240571));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240542,G__240543) : tailrecursion.hoplon.div.call(null,G__240542,G__240543));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240541) : tailrecursion.hoplon.div.call(null,G__240541));
})(),(function (){var G__240602 = cljs.core.PersistentArrayMap.EMPTY;
var G__240603 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["following a formatting convention known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["pretty-printing"], null)], 0)),", in which each long combination is written so that the operands are aligned vertically. The resulting indentations display clearly the structure of the expression.",(function (){var G__240604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__240605 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp systems typically provide features to aid the user in formatting expressions. Two especially useful features are one that automatically indents to the proper pretty-print position whenever a new line is started and one that highlights the matching left parenthesis whenever a right parenthesis is typed."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__240604,G__240605) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__240604,G__240605));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240602,G__240603) : tailrecursion.hoplon.markdown.para_node.call(null,G__240602,G__240603));
})(),(function (){var G__240606 = cljs.core.PersistentArrayMap.EMPTY;
var G__240607 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even with complex expressions, the interpreter always operates in the same basic cycle: It reads an expression from the terminal, evaluates the expression, and prints the result. This mode of operation is often expressed by saying that the interpreter runs in a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["read-eval-print loop"], null)], 0)),". Observe in particular that it is not necessary to explicitly instruct the interpreter to print the value of the expression.",(function (){var G__240608 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__240609 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp obeys the convention that every expression has a value. This convention, together with the old reputation of Lisp as an inefficient language, is the source of the quip by Alan Perlis (paraphrasing Oscar Wilde) that ",(function (){var G__240610 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__240611 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp programmers know the value of everything but the cost of nothing."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__240610,G__240611) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__240610,G__240611));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__240608,G__240609) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__240608,G__240609));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240606,G__240607) : tailrecursion.hoplon.markdown.para_node.call(null,G__240606,G__240607));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239967;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239966;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_239965;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_239964;
}})()], 0));
var G__239903 = "";
var G__239904 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Naming and the Environment"], null),(function (){var _STAR_references_STAR_240612 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240613 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240614 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240615 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240616 = cljs.core.PersistentArrayMap.EMPTY;
var G__240617 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A critical aspect of a programming language is the means it provides for using names to refer to computational objects. We say that the name identifies a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["variable"], null)], 0))," whose ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["value"], null)], 0))," is the object."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240616,G__240617) : tailrecursion.hoplon.markdown.para_node.call(null,G__240616,G__240617));
})(),(function (){var G__240618 = cljs.core.PersistentArrayMap.EMPTY;
var G__240619 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In the Scheme dialect of Lisp, we name things with ",(function (){var G__240620 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__240621 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__240620,G__240621) : tailrecursion.hoplon.markdown.code_node.call(null,G__240620,G__240621));
})(),". Typing"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240618,G__240619) : tailrecursion.hoplon.markdown.para_node.call(null,G__240618,G__240619));
})(),(function (){var G__240637 = (function (){var G__240638 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240639 = (function (){var G__240640 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240641 = "(";
var G__240642 = (function (){var G__240647 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240648 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240647,G__240648) : tailrecursion.hoplon.span.call(null,G__240647,G__240648));
})();
var G__240643 = (function (){var G__240649 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240650 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240649,G__240650) : tailrecursion.hoplon.span.call(null,G__240649,G__240650));
})();
var G__240644 = " ";
var G__240645 = (function (){var G__240651 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240652 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240651,G__240652) : tailrecursion.hoplon.span.call(null,G__240651,G__240652));
})();
var G__240646 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__240640,G__240641,G__240642,G__240643,G__240644,G__240645,G__240646) : tailrecursion.hoplon.pre.call(null,G__240640,G__240641,G__240642,G__240643,G__240644,G__240645,G__240646));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240638,G__240639) : tailrecursion.hoplon.div.call(null,G__240638,G__240639));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240637) : tailrecursion.hoplon.div.call(null,G__240637));
})(),(function (){var G__240653 = cljs.core.PersistentArrayMap.EMPTY;
var G__240654 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["causes the interpreter to associate the value 2 with the name size.",(function (){var G__240655 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__240656 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this book, we do not show the interpreter",(function (){var G__240657 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__240658 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__240657,G__240658) : tailrecursion.hoplon.markdown.simple_node.call(null,G__240657,G__240658));
})(),"s response to evaluating definitions, since this is highly implementation-dependent."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__240655,G__240656) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__240655,G__240656));
})()," In Clojure we would use ",(function (){var G__240659 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__240660 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__240659,G__240660) : tailrecursion.hoplon.markdown.code_node.call(null,G__240659,G__240660));
})()," to accomplish the same goal. i.e."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240653,G__240654) : tailrecursion.hoplon.markdown.para_node.call(null,G__240653,G__240654));
})(),(function (){var G__240676 = (function (){var G__240677 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240678 = (function (){var G__240679 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240680 = "(";
var G__240681 = (function (){var G__240686 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240687 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240686,G__240687) : tailrecursion.hoplon.span.call(null,G__240686,G__240687));
})();
var G__240682 = (function (){var G__240688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240689 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240688,G__240689) : tailrecursion.hoplon.span.call(null,G__240688,G__240689));
})();
var G__240683 = " ";
var G__240684 = (function (){var G__240690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240691 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240690,G__240691) : tailrecursion.hoplon.span.call(null,G__240690,G__240691));
})();
var G__240685 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__240679,G__240680,G__240681,G__240682,G__240683,G__240684,G__240685) : tailrecursion.hoplon.pre.call(null,G__240679,G__240680,G__240681,G__240682,G__240683,G__240684,G__240685));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240677,G__240678) : tailrecursion.hoplon.div.call(null,G__240677,G__240678));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240676) : tailrecursion.hoplon.div.call(null,G__240676));
})(),(function (){var G__240692 = cljs.core.PersistentArrayMap.EMPTY;
var G__240693 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and the interpreter will now associate the value 2 with the name size. Once the name size has been associated with the number 2, we can refer to the value 2 by name:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240692,G__240693) : tailrecursion.hoplon.markdown.para_node.call(null,G__240692,G__240693));
})(),(function (){var G__240705 = (function (){var G__240706 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240707 = (function (){var G__240708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240709 = (function (){var G__240713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240714 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240713,G__240714) : tailrecursion.hoplon.span.call(null,G__240713,G__240714));
})();
var G__240710 = "\n";
var G__240711 = (function (){var G__240715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240716 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240715,G__240716) : tailrecursion.hoplon.span.call(null,G__240715,G__240716));
})();
var G__240712 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5(G__240708,G__240709,G__240710,G__240711,G__240712) : tailrecursion.hoplon.pre.call(null,G__240708,G__240709,G__240710,G__240711,G__240712));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240706,G__240707) : tailrecursion.hoplon.div.call(null,G__240706,G__240707));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240705) : tailrecursion.hoplon.div.call(null,G__240705));
})(),(function (){var G__240736 = (function (){var G__240737 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240738 = (function (){var G__240739 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240740 = "(";
var G__240741 = (function (){var G__240748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240749 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240748,G__240749) : tailrecursion.hoplon.span.call(null,G__240748,G__240749));
})();
var G__240742 = (function (){var G__240750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240751 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240750,G__240751) : tailrecursion.hoplon.span.call(null,G__240750,G__240751));
})();
var G__240743 = " ";
var G__240744 = (function (){var G__240752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240753 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240752,G__240753) : tailrecursion.hoplon.span.call(null,G__240752,G__240753));
})();
var G__240745 = ")\n";
var G__240746 = (function (){var G__240754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240755 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240754,G__240755) : tailrecursion.hoplon.span.call(null,G__240754,G__240755));
})();
var G__240747 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__240739,G__240740,G__240741,G__240742,G__240743,G__240744,G__240745,G__240746,G__240747) : tailrecursion.hoplon.pre.call(null,G__240739,G__240740,G__240741,G__240742,G__240743,G__240744,G__240745,G__240746,G__240747));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240737,G__240738) : tailrecursion.hoplon.div.call(null,G__240737,G__240738));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240736) : tailrecursion.hoplon.div.call(null,G__240736));
})(),(function (){var G__240756 = cljs.core.PersistentArrayMap.EMPTY;
var G__240757 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here are further examples of the use of ",(function (){var G__240758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__240759 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__240758,G__240759) : tailrecursion.hoplon.markdown.code_node.call(null,G__240758,G__240759));
})(),":"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240756,G__240757) : tailrecursion.hoplon.markdown.para_node.call(null,G__240756,G__240757));
})(),(function (){var G__240838 = (function (){var G__240839 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__240840 = (function (){var G__240841 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__240842 = "(";
var G__240843 = (function (){var G__240877 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240878 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240877,G__240878) : tailrecursion.hoplon.span.call(null,G__240877,G__240878));
})();
var G__240844 = (function (){var G__240879 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240880 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240879,G__240880) : tailrecursion.hoplon.span.call(null,G__240879,G__240880));
})();
var G__240845 = " ";
var G__240846 = (function (){var G__240881 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240882 = "3.14159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240881,G__240882) : tailrecursion.hoplon.span.call(null,G__240881,G__240882));
})();
var G__240847 = ")\n(";
var G__240848 = (function (){var G__240883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240884 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240883,G__240884) : tailrecursion.hoplon.span.call(null,G__240883,G__240884));
})();
var G__240849 = (function (){var G__240885 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240886 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240885,G__240886) : tailrecursion.hoplon.span.call(null,G__240885,G__240886));
})();
var G__240850 = " ";
var G__240851 = (function (){var G__240887 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240888 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240887,G__240888) : tailrecursion.hoplon.span.call(null,G__240887,G__240888));
})();
var G__240852 = ")\n(";
var G__240853 = (function (){var G__240889 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240890 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240889,G__240890) : tailrecursion.hoplon.span.call(null,G__240889,G__240890));
})();
var G__240854 = (function (){var G__240891 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240892 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240891,G__240892) : tailrecursion.hoplon.span.call(null,G__240891,G__240892));
})();
var G__240855 = " (";
var G__240856 = (function (){var G__240893 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240894 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240893,G__240894) : tailrecursion.hoplon.span.call(null,G__240893,G__240894));
})();
var G__240857 = (function (){var G__240895 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240896 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240895,G__240896) : tailrecursion.hoplon.span.call(null,G__240895,G__240896));
})();
var G__240858 = " ";
var G__240859 = (function (){var G__240897 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240898 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240897,G__240898) : tailrecursion.hoplon.span.call(null,G__240897,G__240898));
})();
var G__240860 = "))\n";
var G__240861 = (function (){var G__240899 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240900 = "314.159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240899,G__240900) : tailrecursion.hoplon.span.call(null,G__240899,G__240900));
})();
var G__240862 = "\n(";
var G__240863 = (function (){var G__240901 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__240902 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240901,G__240902) : tailrecursion.hoplon.span.call(null,G__240901,G__240902));
})();
var G__240864 = (function (){var G__240903 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240904 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240903,G__240904) : tailrecursion.hoplon.span.call(null,G__240903,G__240904));
})();
var G__240865 = " (";
var G__240866 = (function (){var G__240905 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__240906 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240905,G__240906) : tailrecursion.hoplon.span.call(null,G__240905,G__240906));
})();
var G__240867 = (function (){var G__240907 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240908 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240907,G__240908) : tailrecursion.hoplon.span.call(null,G__240907,G__240908));
})();
var G__240868 = " ";
var G__240869 = (function (){var G__240909 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240910 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240909,G__240910) : tailrecursion.hoplon.span.call(null,G__240909,G__240910));
})();
var G__240870 = " ";
var G__240871 = (function (){var G__240911 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240912 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240911,G__240912) : tailrecursion.hoplon.span.call(null,G__240911,G__240912));
})();
var G__240872 = "))\n";
var G__240873 = (function (){var G__240913 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__240914 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240913,G__240914) : tailrecursion.hoplon.span.call(null,G__240913,G__240914));
})();
var G__240874 = "\n";
var G__240875 = (function (){var G__240915 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__240916 = "62.8318";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__240915,G__240916) : tailrecursion.hoplon.span.call(null,G__240915,G__240916));
})();
var G__240876 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__240841,G__240842,G__240843,G__240844,G__240845,G__240846,G__240847,G__240848,G__240849,G__240850,G__240851,G__240852,G__240853,G__240854,G__240855,G__240856,G__240857,G__240858,G__240859,G__240860,G__240861,G__240862,G__240863,G__240864,G__240865,G__240866,G__240867,G__240868,G__240869,G__240870,G__240871,G__240872,G__240873,G__240874,G__240875,G__240876) : tailrecursion.hoplon.pre.call(null,G__240841,G__240842,G__240843,G__240844,G__240845,G__240846,G__240847,G__240848,G__240849,G__240850,G__240851,G__240852,G__240853,G__240854,G__240855,G__240856,G__240857,G__240858,G__240859,G__240860,G__240861,G__240862,G__240863,G__240864,G__240865,G__240866,G__240867,G__240868,G__240869,G__240870,G__240871,G__240872,G__240873,G__240874,G__240875,G__240876));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__240839,G__240840) : tailrecursion.hoplon.div.call(null,G__240839,G__240840));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__240838) : tailrecursion.hoplon.div.call(null,G__240838));
})(),(function (){var G__240917 = cljs.core.PersistentArrayMap.EMPTY;
var G__240918 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__240920 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__240919,G__240920) : tailrecursion.hoplon.markdown.code_node.call(null,G__240919,G__240920));
})()," is our language",(function (){var G__240921 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__240922 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__240921,G__240922) : tailrecursion.hoplon.markdown.simple_node.call(null,G__240921,G__240922));
})(),"s simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the ",(function (){var G__240923 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"circumference"], null);
var G__240924 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__240923,G__240924) : tailrecursion.hoplon.markdown.code_node.call(null,G__240923,G__240924));
})()," computed above. In general, computational objects may have very complex structures, and it would be extremely inconvenient to have to remember and repeat their details each time we want to use them. Indeed, complex programs are constructed by building, step by step, computational objects of increasing complexity. The interpreter makes this step-by-step program construction particularly convenient because name-object associations can be created incrementally in successive interactions. This feature encourages the incremental development and testing of programs and is largely responsible for the fact that a Lisp program usually consists of a large number of relatively simple procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240917,G__240918) : tailrecursion.hoplon.markdown.para_node.call(null,G__240917,G__240918));
})(),(function (){var G__240925 = cljs.core.PersistentArrayMap.EMPTY;
var G__240926 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It should be clear that the possibility of associating values with symbols and later retrieving them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. This memory is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["environment"], null)], 0))," (more precisely the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["global environment"], null)], 0)),", since we will see later that a computation may involve a number of different environments).",(function (){var G__240927 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__240928 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Chapter 3 will show that this notion of environment is crucial, both for understanding how the interpreter works and for implementing interpreters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__240927,G__240928) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__240927,G__240928));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240925,G__240926) : tailrecursion.hoplon.markdown.para_node.call(null,G__240925,G__240926));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240615;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240614;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240613;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240612;
}})()], 0));
var G__239905 = " ";
var G__239906 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Evaluating Combinations"], null),(function (){var _STAR_references_STAR_240929 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240930 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_240931 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240932 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240933 = cljs.core.PersistentArrayMap.EMPTY;
var G__240934 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating combinations, the interpreter is itself following a procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240933,G__240934) : tailrecursion.hoplon.markdown.para_node.call(null,G__240933,G__240934));
})(),(function (){var G__240935 = cljs.core.PersistentArrayMap.EMPTY;
var G__240936 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240937 = cljs.core.PersistentArrayMap.EMPTY;
var G__240938 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240939 = cljs.core.PersistentArrayMap.EMPTY;
var G__240940 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination, do the following:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240939,G__240940) : tailrecursion.hoplon.markdown.para_node.call(null,G__240939,G__240940));
})(),(function (){var _STAR_references_STAR_240941 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240942 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240943 = cljs.core.PersistentArrayMap.EMPTY;
var G__240944 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__240945 = cljs.core.PersistentArrayMap.EMPTY;
var G__240946 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_240947 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240948 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Evaluate the subexpressions of the combination."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240948;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240947;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__240945,G__240946) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__240945,G__240946));
})(),(function (){var G__240949 = cljs.core.PersistentArrayMap.EMPTY;
var G__240950 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_240951 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_240952 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands)."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240952;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240951;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__240949,G__240950) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__240949,G__240950));
})()], null);
return (tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2(G__240943,G__240944) : tailrecursion.hoplon.markdown.ordered_list_node.call(null,G__240943,G__240944));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240942;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240941;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__240937,G__240938) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__240937,G__240938));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__240935,G__240936) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__240935,G__240936));
})(),(function (){var G__240953 = cljs.core.PersistentArrayMap.EMPTY;
var G__240954 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even this simple rule illustrates some important points about processes in general. First, observe that the first step dictates that in order to accomplish the evaluation process for a combination we must first perform the evaluation process on each element of the combination. Thus, the evaluation rule is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0))," in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.",(function (){var G__240955 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__240956 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It may seem strange that the evaluation rule says, as part of the first step, that we should evaluate the leftmost element of a combination, since at this point that can only be an operator such as ",(function (){var G__240957 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__240958 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__240957,G__240958) : tailrecursion.hoplon.markdown.code_node.call(null,G__240957,G__240958));
})()," or ",(function (){var G__240959 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__240960 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__240959,G__240960) : tailrecursion.hoplon.markdown.code_node.call(null,G__240959,G__240960));
})()," representing a built-in primitive procedure such as addition or multiplication. We will see later that it is useful to be able to work with combinations whose operators are themselves compound expressions."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__240955,G__240956) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__240955,G__240956));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240953,G__240954) : tailrecursion.hoplon.markdown.para_node.call(null,G__240953,G__240954));
})(),(function (){var G__240961 = cljs.core.PersistentArrayMap.EMPTY;
var G__240962 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice how succinctly the idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process. For example, evaluating"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__240961,G__240962) : tailrecursion.hoplon.markdown.para_node.call(null,G__240961,G__240962));
})(),(function (){var G__241004 = (function (){var G__241005 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241006 = (function (){var G__241007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241008 = "(";
var G__241009 = (function (){var G__241026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241027 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241026,G__241027) : tailrecursion.hoplon.span.call(null,G__241026,G__241027));
})();
var G__241010 = "(";
var G__241011 = (function (){var G__241028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241029 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241028,G__241029) : tailrecursion.hoplon.span.call(null,G__241028,G__241029));
})();
var G__241012 = (function (){var G__241030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241031 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241030,G__241031) : tailrecursion.hoplon.span.call(null,G__241030,G__241031));
})();
var G__241013 = " (";
var G__241014 = (function (){var G__241032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241033 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241032,G__241033) : tailrecursion.hoplon.span.call(null,G__241032,G__241033));
})();
var G__241015 = (function (){var G__241034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241035 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241034,G__241035) : tailrecursion.hoplon.span.call(null,G__241034,G__241035));
})();
var G__241016 = " ";
var G__241017 = (function (){var G__241036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241037 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241036,G__241037) : tailrecursion.hoplon.span.call(null,G__241036,G__241037));
})();
var G__241018 = "))\n   (";
var G__241019 = (function (){var G__241038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241039 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241038,G__241039) : tailrecursion.hoplon.span.call(null,G__241038,G__241039));
})();
var G__241020 = (function (){var G__241040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241041 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241040,G__241041) : tailrecursion.hoplon.span.call(null,G__241040,G__241041));
})();
var G__241021 = " ";
var G__241022 = (function (){var G__241042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241043 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241042,G__241043) : tailrecursion.hoplon.span.call(null,G__241042,G__241043));
})();
var G__241023 = " ";
var G__241024 = (function (){var G__241044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241045 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241044,G__241045) : tailrecursion.hoplon.span.call(null,G__241044,G__241045));
})();
var G__241025 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__241007,G__241008,G__241009,G__241010,G__241011,G__241012,G__241013,G__241014,G__241015,G__241016,G__241017,G__241018,G__241019,G__241020,G__241021,G__241022,G__241023,G__241024,G__241025) : tailrecursion.hoplon.pre.call(null,G__241007,G__241008,G__241009,G__241010,G__241011,G__241012,G__241013,G__241014,G__241015,G__241016,G__241017,G__241018,G__241019,G__241020,G__241021,G__241022,G__241023,G__241024,G__241025));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241005,G__241006) : tailrecursion.hoplon.div.call(null,G__241005,G__241006));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241004) : tailrecursion.hoplon.div.call(null,G__241004));
})(),(function (){var G__241046 = cljs.core.PersistentArrayMap.EMPTY;
var G__241047 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["requires that the evaluation rule be applied to four different combinations. We can obtain a picture of this process by representing the combination in the form of a tree, as shown in figure 1.1. Each combination is represented by a node with branches corresponding to the operator and the operands of the combination stemming from it. The terminal nodes (that is, nodes with no branches stemming from them) represent either operators or numbers. Viewing evaluation in terms of the tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels. In general, we shall see that recursion is a very powerful technique for dealing with hierarchical, treelike objects. In fact, the ``percolate values upward",(function (){var G__241048 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241049 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241048,G__241049) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241048,G__241049));
})(),(function (){var G__241050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241051 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241050,G__241051) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241050,G__241051));
})()," form of the evaluation rule is an example of a general kind of process known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["tree accumulation"], null)], 0)),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241046,G__241047) : tailrecursion.hoplon.markdown.para_node.call(null,G__241046,G__241047));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240932;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240931;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_240930;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_240929;
}})(),"",book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Tree representation, showing the value of each subcombination."], null)], 0)),(function (){var _STAR_references_STAR_241052 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241053 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_241054 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241055 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241056 = cljs.core.PersistentArrayMap.EMPTY;
var G__241057 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not combinations, but primitive expressions such as numerals, built-in operators, or other names. We take care of the primitive cases by stipulating that"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241056,G__241057) : tailrecursion.hoplon.markdown.para_node.call(null,G__241056,G__241057));
})(),(function (){var G__241058 = cljs.core.PersistentArrayMap.EMPTY;
var G__241059 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241060 = cljs.core.PersistentArrayMap.EMPTY;
var G__241061 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_241062 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241063 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of numerals are the numbers that they name,"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241063;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241062;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241060,G__241061) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241060,G__241061));
})(),(function (){var G__241064 = cljs.core.PersistentArrayMap.EMPTY;
var G__241065 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_241066 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241067 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of built-in operators are the machine  instruction sequences that carry out the corresponding operations, and"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241067;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241066;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241064,G__241065) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241064,G__241065));
})(),(function (){var G__241068 = cljs.core.PersistentArrayMap.EMPTY;
var G__241069 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_241070 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241071 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of other names are the objects associated with  those names in the environment."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241071;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241070;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241068,G__241069) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241068,G__241069));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__241058,G__241059) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__241058,G__241059));
})(),(function (){var G__241072 = cljs.core.PersistentArrayMap.EMPTY;
var G__241073 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We may regard the second rule as a special case of the third one by stipulating that symbols such as + and * are also included in the global environment, and are associated with the sequences of machine instructions that are their ",(function (){var G__241074 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241075 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["values."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241074,G__241075) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241074,G__241075));
})()," The key point to notice is the role of the environment in determining the meaning of the symbols in expressions. In an interactive language such as Lisp, it is meaningless to speak of the value of an expression such as ",(function (){var G__241076 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+\nx 1)"], null);
var G__241077 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241076,G__241077) : tailrecursion.hoplon.markdown.code_node.call(null,G__241076,G__241077));
})()," without specifying any information about the environment that would provide a meaning for the symbol ",(function (){var G__241078 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__241079 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241078,G__241079) : tailrecursion.hoplon.markdown.code_node.call(null,G__241078,G__241079));
})()," (or even for the symbol ",(function (){var G__241080 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__241081 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241080,G__241081) : tailrecursion.hoplon.markdown.code_node.call(null,G__241080,G__241081));
})(),"). As we shall see in chapter 3, the general notion of the environment as providing a context in which evaluation takes place will play an important role in our understanding of program execution."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241072,G__241073) : tailrecursion.hoplon.markdown.para_node.call(null,G__241072,G__241073));
})(),(function (){var G__241082 = cljs.core.PersistentArrayMap.EMPTY;
var G__241083 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that the evaluation rule given above does not handle definitions. For instance, evaluating ",(function (){var G__241084 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x 3)"], null);
var G__241085 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241084,G__241085) : tailrecursion.hoplon.markdown.code_node.call(null,G__241084,G__241085));
})()," does not apply ",(function (){var G__241086 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__241087 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241086,G__241087) : tailrecursion.hoplon.markdown.code_node.call(null,G__241086,G__241087));
})()," to two arguments, one of which is the value of the symbol ",(function (){var G__241088 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__241089 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241088,G__241089) : tailrecursion.hoplon.markdown.code_node.call(null,G__241088,G__241089));
})()," and the other of which is 3, since the purpose of the define is precisely to associate ",(function (){var G__241090 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__241091 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241090,G__241091) : tailrecursion.hoplon.markdown.code_node.call(null,G__241090,G__241091));
})()," with a value. (That is, ",(function (){var G__241092 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x\n3)"], null);
var G__241093 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241092,G__241093) : tailrecursion.hoplon.markdown.code_node.call(null,G__241092,G__241093));
})()," is not a combination.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241082,G__241083) : tailrecursion.hoplon.markdown.para_node.call(null,G__241082,G__241083));
})(),(function (){var G__241094 = cljs.core.PersistentArrayMap.EMPTY;
var G__241095 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such exceptions to the general evaluation rule are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["special forms"], null)], 0)),". ",(function (){var G__241096 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__241097 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241096,G__241097) : tailrecursion.hoplon.markdown.code_node.call(null,G__241096,G__241097));
})()," is the only example of a special form that we have seen so far, but we will meet others shortly. Each special form has its own evaluation rule. The various kinds of expressions (each with its associated evaluation rule) constitute the syntax of the programming language. In comparison with most other programming languages, Lisp has a very simple syntax; that is, the evaluation rule for expressions can be described by a simple general rule together with specialized rules for a small number of special forms.",(function (){var G__241098 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241099 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Special syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["syntactic sugar"], null)], 0)),", to use a phrase coined by Peter Landin. In comparison with users of other languages, Lisp programmers, as a rule, are less concerned with matters of syntax. (By contrast, examine any Pascal manual and notice how much of it is devoted to descriptions of syntax.) This disdain for syntax is due partly to the flexibility of Lisp, which makes it easy to change surface syntax, and partly to the observation that many ",(function (){var G__241100 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241101 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["convenient"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241100,G__241101) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241100,G__241101));
})()," syntactic constructs, which make the language less uniform, end up causing more trouble than they are worth when programs become large and complex. In the words of Alan Perlis, ",(function (){var G__241102 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241103 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Syntactic sugar causes cancer of the semicolon."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241102,G__241103) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241102,G__241103));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241098,G__241099) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241098,G__241099));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241094,G__241095) : tailrecursion.hoplon.markdown.para_node.call(null,G__241094,G__241095));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241055;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241054;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241053;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241052;
}})()], 0));
var G__239907 = "";
var G__239908 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Compound Procedures"], null),(function (){var _STAR_references_STAR_241104 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241105 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_241106 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241107 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241108 = cljs.core.PersistentArrayMap.EMPTY;
var G__241109 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have identified in Lisp some of the elements that must appear in any powerful programming language:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241108,G__241109) : tailrecursion.hoplon.markdown.para_node.call(null,G__241108,G__241109));
})(),(function (){var G__241110 = cljs.core.PersistentArrayMap.EMPTY;
var G__241111 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241112 = cljs.core.PersistentArrayMap.EMPTY;
var G__241113 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241114 = cljs.core.PersistentArrayMap.EMPTY;
var G__241115 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Numbers and arithmetic operations are primitive data and procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241114,G__241115) : tailrecursion.hoplon.markdown.para_node.call(null,G__241114,G__241115));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241112,G__241113) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241112,G__241113));
})(),(function (){var G__241116 = cljs.core.PersistentArrayMap.EMPTY;
var G__241117 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_241118 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241119 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241120 = cljs.core.PersistentArrayMap.EMPTY;
var G__241121 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Nesting of combinations provides a means of combining operations."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241120,G__241121) : tailrecursion.hoplon.markdown.para_node.call(null,G__241120,G__241121));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241119;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241118;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241116,G__241117) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241116,G__241117));
})(),(function (){var G__241122 = cljs.core.PersistentArrayMap.EMPTY;
var G__241123 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_241124 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241125 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241126 = cljs.core.PersistentArrayMap.EMPTY;
var G__241127 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Definitions that associate names with values provide a  limited means of abstraction."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241126,G__241127) : tailrecursion.hoplon.markdown.para_node.call(null,G__241126,G__241127));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241125;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241124;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241122,G__241123) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241122,G__241123));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__241110,G__241111) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__241110,G__241111));
})(),(function (){var G__241128 = cljs.core.PersistentArrayMap.EMPTY;
var G__241129 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we will learn about ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedure definitions"], null)], 0)),", a much more powerful abstraction technique by which a compound operation can be given a name and then referred to as a unit."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241128,G__241129) : tailrecursion.hoplon.markdown.para_node.call(null,G__241128,G__241129));
})(),(function (){var G__241130 = cljs.core.PersistentArrayMap.EMPTY;
var G__241131 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We begin by examining how to express the idea of ",(function (){var G__241132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241133 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["squaring."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241132,G__241133) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241132,G__241133));
})()," We might say, ",(function (){var G__241134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241135 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To square something, multiply it by itself."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241134,G__241135) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241134,G__241135));
})()," This is expressed in scheme as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241130,G__241131) : tailrecursion.hoplon.markdown.para_node.call(null,G__241130,G__241131));
})(),(function (){var G__241163 = (function (){var G__241164 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241165 = (function (){var G__241166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241167 = "(";
var G__241168 = (function (){var G__241179 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241180 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241179,G__241180) : tailrecursion.hoplon.span.call(null,G__241179,G__241180));
})();
var G__241169 = "(";
var G__241170 = (function (){var G__241181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241182 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241181,G__241182) : tailrecursion.hoplon.span.call(null,G__241181,G__241182));
})();
var G__241171 = " ";
var G__241172 = (function (){var G__241183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241184 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241183,G__241184) : tailrecursion.hoplon.span.call(null,G__241183,G__241184));
})();
var G__241173 = ") (";
var G__241174 = (function (){var G__241185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241186 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241185,G__241186) : tailrecursion.hoplon.span.call(null,G__241185,G__241186));
})();
var G__241175 = (function (){var G__241187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241188 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241187,G__241188) : tailrecursion.hoplon.span.call(null,G__241187,G__241188));
})();
var G__241176 = " ";
var G__241177 = (function (){var G__241189 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241190 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241189,G__241190) : tailrecursion.hoplon.span.call(null,G__241189,G__241190));
})();
var G__241178 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__241166,G__241167,G__241168,G__241169,G__241170,G__241171,G__241172,G__241173,G__241174,G__241175,G__241176,G__241177,G__241178) : tailrecursion.hoplon.pre.call(null,G__241166,G__241167,G__241168,G__241169,G__241170,G__241171,G__241172,G__241173,G__241174,G__241175,G__241176,G__241177,G__241178));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241164,G__241165) : tailrecursion.hoplon.div.call(null,G__241164,G__241165));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241163) : tailrecursion.hoplon.div.call(null,G__241163));
})(),(function (){var G__241191 = cljs.core.PersistentArrayMap.EMPTY;
var G__241192 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["but in Clojure, we would write that as,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241191,G__241192) : tailrecursion.hoplon.markdown.para_node.call(null,G__241191,G__241192));
})(),(function (){var G__241219 = (function (){var G__241220 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241221 = (function (){var G__241222 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241223 = "(";
var G__241224 = (function (){var G__241234 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241235 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241234,G__241235) : tailrecursion.hoplon.span.call(null,G__241234,G__241235));
})();
var G__241225 = (function (){var G__241236 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241237 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241236,G__241237) : tailrecursion.hoplon.span.call(null,G__241236,G__241237));
})();
var G__241226 = " [";
var G__241227 = (function (){var G__241238 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241239 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241238,G__241239) : tailrecursion.hoplon.span.call(null,G__241238,G__241239));
})();
var G__241228 = "] (";
var G__241229 = (function (){var G__241240 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241241 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241240,G__241241) : tailrecursion.hoplon.span.call(null,G__241240,G__241241));
})();
var G__241230 = (function (){var G__241242 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241243 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241242,G__241243) : tailrecursion.hoplon.span.call(null,G__241242,G__241243));
})();
var G__241231 = " ";
var G__241232 = (function (){var G__241244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241245 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241244,G__241245) : tailrecursion.hoplon.span.call(null,G__241244,G__241245));
})();
var G__241233 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__241222,G__241223,G__241224,G__241225,G__241226,G__241227,G__241228,G__241229,G__241230,G__241231,G__241232,G__241233) : tailrecursion.hoplon.pre.call(null,G__241222,G__241223,G__241224,G__241225,G__241226,G__241227,G__241228,G__241229,G__241230,G__241231,G__241232,G__241233));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241220,G__241221) : tailrecursion.hoplon.div.call(null,G__241220,G__241221));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241219) : tailrecursion.hoplon.div.call(null,G__241219));
})(),(function (){var G__241246 = cljs.core.PersistentArrayMap.EMPTY;
var G__241247 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note that Clojure differentiates between definining an atom and defining a procedure! We can understand this in the following way:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241246,G__241247) : tailrecursion.hoplon.markdown.para_node.call(null,G__241246,G__241247));
})(),(function (){var G__241327 = (function (){var G__241328 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241329 = (function (){var G__241330 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241331 = "(";
var G__241332 = (function (){var G__241369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241370 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241369,G__241370) : tailrecursion.hoplon.span.call(null,G__241369,G__241370));
})();
var G__241333 = (function (){var G__241371 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241372 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241371,G__241372) : tailrecursion.hoplon.span.call(null,G__241371,G__241372));
})();
var G__241334 = "      [";
var G__241335 = (function (){var G__241373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241374 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241373,G__241374) : tailrecursion.hoplon.span.call(null,G__241373,G__241374));
})();
var G__241336 = "]      (";
var G__241337 = (function (){var G__241375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241376 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241375,G__241376) : tailrecursion.hoplon.span.call(null,G__241375,G__241376));
})();
var G__241338 = "     ";
var G__241339 = (function (){var G__241377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241378 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241377,G__241378) : tailrecursion.hoplon.span.call(null,G__241377,G__241378));
})();
var G__241340 = "      ";
var G__241341 = (function (){var G__241379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241380 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241379,G__241380) : tailrecursion.hoplon.span.call(null,G__241379,G__241380));
})();
var G__241342 = "))\n  ";
var G__241343 = (function (){var G__241381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__241382 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241381,G__241382) : tailrecursion.hoplon.span.call(null,G__241381,G__241382));
})();
var G__241344 = "    ";
var G__241345 = (function (){var G__241383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__241384 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241383,G__241384) : tailrecursion.hoplon.span.call(null,G__241383,G__241384));
})();
var G__241346 = "          ";
var G__241347 = (function (){var G__241385 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__241386 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241385,G__241386) : tailrecursion.hoplon.span.call(null,G__241385,G__241386));
})();
var G__241348 = "        ";
var G__241349 = (function (){var G__241387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__241388 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241387,G__241388) : tailrecursion.hoplon.span.call(null,G__241387,G__241388));
})();
var G__241350 = "     ";
var G__241351 = (function (){var G__241389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__241390 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241389,G__241390) : tailrecursion.hoplon.span.call(null,G__241389,G__241390));
})();
var G__241352 = "      ";
var G__241353 = (function (){var G__241391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__241392 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241391,G__241392) : tailrecursion.hoplon.span.call(null,G__241391,G__241392));
})();
var G__241354 = "\n ";
var G__241355 = (function (){var G__241393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241394 = "to";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241393,G__241394) : tailrecursion.hoplon.span.call(null,G__241393,G__241394));
})();
var G__241356 = "  ";
var G__241357 = (function (){var G__241395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #BA2121"], null);
var G__241396 = "\"square\"";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241395,G__241396) : tailrecursion.hoplon.span.call(null,G__241395,G__241396));
})();
var G__241358 = " ";
var G__241359 = (function (){var G__241397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241398 = "something";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241397,G__241398) : tailrecursion.hoplon.span.call(null,G__241397,G__241398));
})();
var G__241360 = ", ";
var G__241361 = (function (){var G__241399 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241400 = "multiply";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241399,G__241400) : tailrecursion.hoplon.span.call(null,G__241399,G__241400));
})();
var G__241362 = " ";
var G__241363 = (function (){var G__241401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241402 = "it";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241401,G__241402) : tailrecursion.hoplon.span.call(null,G__241401,G__241402));
})();
var G__241364 = " ";
var G__241365 = (function (){var G__241403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241404 = "by";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241403,G__241404) : tailrecursion.hoplon.span.call(null,G__241403,G__241404));
})();
var G__241366 = " ";
var G__241367 = (function (){var G__241405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241406 = "itself.";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241405,G__241406) : tailrecursion.hoplon.span.call(null,G__241405,G__241406));
})();
var G__241368 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__241330,G__241331,G__241332,G__241333,G__241334,G__241335,G__241336,G__241337,G__241338,G__241339,G__241340,G__241341,G__241342,G__241343,G__241344,G__241345,G__241346,G__241347,G__241348,G__241349,G__241350,G__241351,G__241352,G__241353,G__241354,G__241355,G__241356,G__241357,G__241358,G__241359,G__241360,G__241361,G__241362,G__241363,G__241364,G__241365,G__241366,G__241367,G__241368) : tailrecursion.hoplon.pre.call(null,G__241330,G__241331,G__241332,G__241333,G__241334,G__241335,G__241336,G__241337,G__241338,G__241339,G__241340,G__241341,G__241342,G__241343,G__241344,G__241345,G__241346,G__241347,G__241348,G__241349,G__241350,G__241351,G__241352,G__241353,G__241354,G__241355,G__241356,G__241357,G__241358,G__241359,G__241360,G__241361,G__241362,G__241363,G__241364,G__241365,G__241366,G__241367,G__241368));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241328,G__241329) : tailrecursion.hoplon.div.call(null,G__241328,G__241329));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241327) : tailrecursion.hoplon.div.call(null,G__241327));
})(),(function (){var G__241407 = cljs.core.PersistentArrayMap.EMPTY;
var G__241408 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have here a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["compound procedure"], null)], 0)),", which has been given the name ",(function (){var G__241409 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__241410 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241409,G__241410) : tailrecursion.hoplon.markdown.code_node.call(null,G__241409,G__241410));
})(),". The procedure represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, x, which plays the same role that a pronoun plays in natural language. Evaluating the definition creates this compound procedure and associates it with the name square.",(function (){var G__241411 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241412 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that there are two different operations being combined here: we are creating the procedure, and we are giving it the name ",(function (){var G__241413 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__241414 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241413,G__241414) : tailrecursion.hoplon.markdown.code_node.call(null,G__241413,G__241414));
})(),". It is possible, indeed important, to be able to separate these two notions ",(function (){var G__241415 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__241416 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241415,G__241416) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241415,G__241416));
})()," to create procedures without naming them, and to give names to procedures that have already been created. We will see how to do this in section 1.3.2."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241411,G__241412) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241411,G__241412));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241407,G__241408) : tailrecursion.hoplon.markdown.para_node.call(null,G__241407,G__241408));
})(),(function (){var G__241417 = cljs.core.PersistentArrayMap.EMPTY;
var G__241418 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a procedure definition is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241417,G__241418) : tailrecursion.hoplon.markdown.para_node.call(null,G__241417,G__241418));
})(),(function (){var G__241442 = (function (){var G__241443 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241444 = (function (){var G__241445 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241446 = "(";
var G__241447 = (function (){var G__241456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241457 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241456,G__241457) : tailrecursion.hoplon.span.call(null,G__241456,G__241457));
})();
var G__241448 = (function (){var G__241458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241459 = "<name>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241458,G__241459) : tailrecursion.hoplon.span.call(null,G__241458,G__241459));
})();
var G__241449 = " [";
var G__241450 = (function (){var G__241460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241461 = "<formal";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241460,G__241461) : tailrecursion.hoplon.span.call(null,G__241460,G__241461));
})();
var G__241451 = " ";
var G__241452 = (function (){var G__241462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241463 = "parameters>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241462,G__241463) : tailrecursion.hoplon.span.call(null,G__241462,G__241463));
})();
var G__241453 = "] ";
var G__241454 = (function (){var G__241464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241465 = "<body>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241464,G__241465) : tailrecursion.hoplon.span.call(null,G__241464,G__241465));
})();
var G__241455 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__241445,G__241446,G__241447,G__241448,G__241449,G__241450,G__241451,G__241452,G__241453,G__241454,G__241455) : tailrecursion.hoplon.pre.call(null,G__241445,G__241446,G__241447,G__241448,G__241449,G__241450,G__241451,G__241452,G__241453,G__241454,G__241455));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241443,G__241444) : tailrecursion.hoplon.div.call(null,G__241443,G__241444));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241442) : tailrecursion.hoplon.div.call(null,G__241442));
})(),(function (){var G__241466 = cljs.core.PersistentArrayMap.EMPTY;
var G__241467 = new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Just in case you end up reading from the original SICP, let",(function (){var G__241468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241469 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241468,G__241469) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241468,G__241469));
})(),"s take a moment to note the differences between the Scheme method of defining compound procedures, and the Clojure method. The Scheme method ",(function (){var G__241470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(define\n(<name> <formal parameters>) <body>)"], null);
var G__241471 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241470,G__241471) : tailrecursion.hoplon.markdown.code_node.call(null,G__241470,G__241471));
})()," is very straight forward: it defines the first form to be the second. In this way, we can see ",(function (){var G__241472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__241473 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241472,G__241473) : tailrecursion.hoplon.markdown.code_node.call(null,G__241472,G__241473));
})()," to be a procedure that takes two arguments. The procedure ",(function (){var G__241474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__241475 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241474,G__241475) : tailrecursion.hoplon.markdown.code_node.call(null,G__241474,G__241475));
})()," in Clojure takes three arguments: the first being the name of the intended procedure (in our example ",(function (){var G__241476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241477 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241478 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__241479 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241478,G__241479) : tailrecursion.hoplon.markdown.code_node.call(null,G__241478,G__241479));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241476,G__241477) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241476,G__241477));
})(),"), the second is a list of all the arguments (we",(function (){var G__241480 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241481 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241480,G__241481) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241480,G__241481));
})(),"ll cover lists later, but in our example it was ",(function (){var G__241482 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[x]"], null);
var G__241483 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241482,G__241483) : tailrecursion.hoplon.markdown.code_node.call(null,G__241482,G__241483));
})(),"), and the third is the intended procedure or the body (in our example it was ",(function (){var G__241484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* x x)"], null);
var G__241485 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241484,G__241485) : tailrecursion.hoplon.markdown.code_node.call(null,G__241484,G__241485));
})(),")."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241466,G__241467) : tailrecursion.hoplon.markdown.para_node.call(null,G__241466,G__241467));
})(),(function (){var G__241486 = cljs.core.PersistentArrayMap.EMPTY;
var G__241487 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The <name> is a symbol to be associated with the procedure definition in the environment.",(function (){var G__241488 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241489 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, we will describe the general syntax of expressions by using italic symbols delimited by angle brackets ",(function (){var G__241490 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__241491 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241490,G__241491) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241490,G__241491));
})()," e.g., ",(function (){var G__241492 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<name>"], null);
var G__241493 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241492,G__241493) : tailrecursion.hoplon.markdown.code_node.call(null,G__241492,G__241493));
})()," ",(function (){var G__241494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__241495 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241494,G__241495) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241494,G__241495));
})()," to denote the ",(function (){var G__241496 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241497 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["slots"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241496,G__241497) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241496,G__241497));
})()," in the expression to be filled in when such an expression is actually used."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241488,G__241489) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241488,G__241489));
})()," The <formal\nparameters> are the names used within the body of the procedure to refer to the corresponding arguments of the procedure. The <body> is an expression that will yield the value of the procedure application when the formal parameters are replaced by the actual arguments to which the procedure is applied.",(function (){var G__241498 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241499 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["More generally, the body of the procedure can be a sequence of expressions. In this case, the interpreter evaluates each expression in the sequence in turn and returns the value of the final expression as the value of the procedure application."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241498,G__241499) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241498,G__241499));
})()," In Scheme, the <name> and the <formal parameters> are grouped within parentheses, just as they would be in an actual call to the procedure being defined, but in Clojure they are not."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241486,G__241487) : tailrecursion.hoplon.markdown.para_node.call(null,G__241486,G__241487));
})(),(function (){var G__241500 = cljs.core.PersistentArrayMap.EMPTY;
var G__241501 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Having defined square, we can now use it:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241500,G__241501) : tailrecursion.hoplon.markdown.para_node.call(null,G__241500,G__241501));
})(),(function (){var G__241502 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square 21)\n441\n") : tailrecursion.hoplon.code.call(null,"(square 21)\n441\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241502) : tailrecursion.hoplon.pre.call(null,G__241502));
})(),(function (){var G__241503 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (+ 2 5))\n49\n") : tailrecursion.hoplon.code.call(null,"(square (+ 2 5))\n49\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241503) : tailrecursion.hoplon.pre.call(null,G__241503));
})(),(function (){var G__241504 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (square 3))\n81\n") : tailrecursion.hoplon.code.call(null,"(square (square 3))\n81\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241504) : tailrecursion.hoplon.pre.call(null,G__241504));
})(),(function (){var G__241505 = cljs.core.PersistentArrayMap.EMPTY;
var G__241506 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can also use square as a building block in defining other procedures. For example, \\(x^2 + y^2\\) can be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241505,G__241506) : tailrecursion.hoplon.markdown.para_node.call(null,G__241505,G__241506));
})(),(function (){var G__241507 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square x) (square y))\n") : tailrecursion.hoplon.code.call(null,"(+ (square x) (square y))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241507) : tailrecursion.hoplon.pre.call(null,G__241507));
})(),(function (){var G__241508 = cljs.core.PersistentArrayMap.EMPTY;
var G__241509 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can easily define a procedure sum-of-squares that, given any two numbers as arguments, produces the sum of their squares:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241508,G__241509) : tailrecursion.hoplon.markdown.para_node.call(null,G__241508,G__241509));
})(),(function (){var G__241549 = (function (){var G__241550 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241551 = (function (){var G__241552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241553 = "(";
var G__241554 = (function (){var G__241571 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241572 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241571,G__241572) : tailrecursion.hoplon.span.call(null,G__241571,G__241572));
})();
var G__241555 = (function (){var G__241573 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241574 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241573,G__241574) : tailrecursion.hoplon.span.call(null,G__241573,G__241574));
})();
var G__241556 = " [";
var G__241557 = (function (){var G__241575 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241576 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241575,G__241576) : tailrecursion.hoplon.span.call(null,G__241575,G__241576));
})();
var G__241558 = " ";
var G__241559 = (function (){var G__241577 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241578 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241577,G__241578) : tailrecursion.hoplon.span.call(null,G__241577,G__241578));
})();
var G__241560 = "]\n  (";
var G__241561 = (function (){var G__241579 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241580 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241579,G__241580) : tailrecursion.hoplon.span.call(null,G__241579,G__241580));
})();
var G__241562 = "(";
var G__241563 = (function (){var G__241581 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241582 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241581,G__241582) : tailrecursion.hoplon.span.call(null,G__241581,G__241582));
})();
var G__241564 = " ";
var G__241565 = (function (){var G__241583 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241584 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241583,G__241584) : tailrecursion.hoplon.span.call(null,G__241583,G__241584));
})();
var G__241566 = ") (";
var G__241567 = (function (){var G__241585 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241586 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241585,G__241586) : tailrecursion.hoplon.span.call(null,G__241585,G__241586));
})();
var G__241568 = " ";
var G__241569 = (function (){var G__241587 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241588 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241587,G__241588) : tailrecursion.hoplon.span.call(null,G__241587,G__241588));
})();
var G__241570 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__241552,G__241553,G__241554,G__241555,G__241556,G__241557,G__241558,G__241559,G__241560,G__241561,G__241562,G__241563,G__241564,G__241565,G__241566,G__241567,G__241568,G__241569,G__241570) : tailrecursion.hoplon.pre.call(null,G__241552,G__241553,G__241554,G__241555,G__241556,G__241557,G__241558,G__241559,G__241560,G__241561,G__241562,G__241563,G__241564,G__241565,G__241566,G__241567,G__241568,G__241569,G__241570));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241550,G__241551) : tailrecursion.hoplon.div.call(null,G__241550,G__241551));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241549) : tailrecursion.hoplon.div.call(null,G__241549));
})(),(function (){var G__241589 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares 3 4)\n25\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares 3 4)\n25\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241589) : tailrecursion.hoplon.pre.call(null,G__241589));
})(),(function (){var G__241590 = cljs.core.PersistentArrayMap.EMPTY;
var G__241591 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we can use sum-of-squares as a building block in constructing further procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241590,G__241591) : tailrecursion.hoplon.markdown.para_node.call(null,G__241590,G__241591));
})(),(function (){var G__241633 = (function (){var G__241634 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241635 = (function (){var G__241636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241637 = "(";
var G__241638 = (function (){var G__241655 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241656 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241655,G__241656) : tailrecursion.hoplon.span.call(null,G__241655,G__241656));
})();
var G__241639 = (function (){var G__241657 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241658 = "f";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241657,G__241658) : tailrecursion.hoplon.span.call(null,G__241657,G__241658));
})();
var G__241640 = " [";
var G__241641 = (function (){var G__241659 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241660 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241659,G__241660) : tailrecursion.hoplon.span.call(null,G__241659,G__241660));
})();
var G__241642 = "]\n  (";
var G__241643 = (function (){var G__241661 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__241662 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241661,G__241662) : tailrecursion.hoplon.span.call(null,G__241661,G__241662));
})();
var G__241644 = " (";
var G__241645 = (function (){var G__241663 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241664 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241663,G__241664) : tailrecursion.hoplon.span.call(null,G__241663,G__241664));
})();
var G__241646 = (function (){var G__241665 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241666 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241665,G__241666) : tailrecursion.hoplon.span.call(null,G__241665,G__241666));
})();
var G__241647 = " ";
var G__241648 = (function (){var G__241667 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241668 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241667,G__241668) : tailrecursion.hoplon.span.call(null,G__241667,G__241668));
})();
var G__241649 = ") (";
var G__241650 = (function (){var G__241669 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241670 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241669,G__241670) : tailrecursion.hoplon.span.call(null,G__241669,G__241670));
})();
var G__241651 = (function (){var G__241671 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241672 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241671,G__241672) : tailrecursion.hoplon.span.call(null,G__241671,G__241672));
})();
var G__241652 = " ";
var G__241653 = (function (){var G__241673 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241674 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241673,G__241674) : tailrecursion.hoplon.span.call(null,G__241673,G__241674));
})();
var G__241654 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__241636,G__241637,G__241638,G__241639,G__241640,G__241641,G__241642,G__241643,G__241644,G__241645,G__241646,G__241647,G__241648,G__241649,G__241650,G__241651,G__241652,G__241653,G__241654) : tailrecursion.hoplon.pre.call(null,G__241636,G__241637,G__241638,G__241639,G__241640,G__241641,G__241642,G__241643,G__241644,G__241645,G__241646,G__241647,G__241648,G__241649,G__241650,G__241651,G__241652,G__241653,G__241654));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241634,G__241635) : tailrecursion.hoplon.div.call(null,G__241634,G__241635));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241633) : tailrecursion.hoplon.div.call(null,G__241633));
})(),(function (){var G__241675 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n136\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241675) : tailrecursion.hoplon.pre.call(null,G__241675));
})(),(function (){var G__241676 = cljs.core.PersistentArrayMap.EMPTY;
var G__241677 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Compound procedures are used in exactly the same way as primitive procedures. Indeed, one could not tell by looking at the definition of ",(function (){var G__241678 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__241679 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241678,G__241679) : tailrecursion.hoplon.markdown.code_node.call(null,G__241678,G__241679));
})()," given above whether ",(function (){var G__241680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__241681 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241680,G__241681) : tailrecursion.hoplon.markdown.code_node.call(null,G__241680,G__241681));
})()," was built into the interpreter, like ",(function (){var G__241682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__241683 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241682,G__241683) : tailrecursion.hoplon.markdown.code_node.call(null,G__241682,G__241683));
})()," and ",(function (){var G__241684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__241685 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241684,G__241685) : tailrecursion.hoplon.markdown.code_node.call(null,G__241684,G__241685));
})(),", or defined as a compound procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241676,G__241677) : tailrecursion.hoplon.markdown.para_node.call(null,G__241676,G__241677));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241107;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241106;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241105;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241104;
}})()], 0));
var G__239909 = "";
var G__239910 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Substitution Model for Procedure Application"], null),(function (){var _STAR_references_STAR_241686 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241687 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_241688 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241689 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241690 = cljs.core.PersistentArrayMap.EMPTY;
var G__241691 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination whose operator names a compound procedure, the interpreter follows much the same process as for combinations whose operators name primitive procedures, which we described in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),". That is, the interpreter evaluates the elements of the combination and applies the procedure (which is the value of the operator of the combination) to the arguments (which are the values of the operands of the combination)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241690,G__241691) : tailrecursion.hoplon.markdown.para_node.call(null,G__241690,G__241691));
})(),(function (){var G__241692 = cljs.core.PersistentArrayMap.EMPTY;
var G__241693 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can assume that the mechanism for applying primitive procedures to arguments is built into the interpreter. For compound procedures, the application process is as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241692,G__241693) : tailrecursion.hoplon.markdown.para_node.call(null,G__241692,G__241693));
})(),(function (){var G__241694 = cljs.core.PersistentArrayMap.EMPTY;
var G__241695 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241696 = cljs.core.PersistentArrayMap.EMPTY;
var G__241697 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_241698 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241699 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241699;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241698;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241696,G__241697) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241696,G__241697));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__241694,G__241695) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__241694,G__241695));
})(),(function (){var G__241700 = cljs.core.PersistentArrayMap.EMPTY;
var G__241701 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To illustrate this process, let",(function (){var G__241702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241703 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241702,G__241703) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241702,G__241703));
})(),"s evaluate the combination"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241700,G__241701) : tailrecursion.hoplon.markdown.para_node.call(null,G__241700,G__241701));
})(),(function (){var G__241704 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241704) : tailrecursion.hoplon.pre.call(null,G__241704));
})(),(function (){var G__241705 = cljs.core.PersistentArrayMap.EMPTY;
var G__241706 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where f is the procedure defined in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.4"], null)], 0)),". We begin by retrieving the body of f:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241705,G__241706) : tailrecursion.hoplon.markdown.para_node.call(null,G__241705,G__241706));
})(),(function (){var G__241707 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ a 1) (* a 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ a 1) (* a 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241707) : tailrecursion.hoplon.pre.call(null,G__241707));
})(),(function (){var G__241708 = cljs.core.PersistentArrayMap.EMPTY;
var G__241709 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then we replace the formal parameter a by the argument 5:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241708,G__241709) : tailrecursion.hoplon.markdown.para_node.call(null,G__241708,G__241709));
})(),(function (){var G__241710 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241710) : tailrecursion.hoplon.pre.call(null,G__241710));
})(),(function (){var G__241711 = cljs.core.PersistentArrayMap.EMPTY;
var G__241712 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus the problem reduces to the evaluation of a combination with two operands and an operator ",(function (){var G__241713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__241714 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241713,G__241714) : tailrecursion.hoplon.markdown.code_node.call(null,G__241713,G__241714));
})(),". Evaluating this combination involves three subproblems. We must evaluate the operator to get the procedure to be applied, and we must evaluate the operands to get the arguments. Now ",(function (){var G__241715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__241716 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241715,G__241716) : tailrecursion.hoplon.markdown.code_node.call(null,G__241715,G__241716));
})()," produces 6 and ",(function (){var G__241717 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__241718 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241717,G__241718) : tailrecursion.hoplon.markdown.code_node.call(null,G__241717,G__241718));
})()," produces 10, so we must apply the ",(function (){var G__241719 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__241720 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241719,G__241720) : tailrecursion.hoplon.markdown.code_node.call(null,G__241719,G__241720));
})()," procedure to 6 and 10. These values are substituted for the formal parameters ",(function (){var G__241721 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__241722 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241721,G__241722) : tailrecursion.hoplon.markdown.code_node.call(null,G__241721,G__241722));
})()," and ",(function (){var G__241723 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"y"], null);
var G__241724 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241723,G__241724) : tailrecursion.hoplon.markdown.code_node.call(null,G__241723,G__241724));
})()," in the body of ",(function (){var G__241725 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__241726 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241725,G__241726) : tailrecursion.hoplon.markdown.code_node.call(null,G__241725,G__241726));
})(),", reducing the expression to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241711,G__241712) : tailrecursion.hoplon.markdown.para_node.call(null,G__241711,G__241712));
})(),(function (){var G__241727 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square 6) (square 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (square 6) (square 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241727) : tailrecursion.hoplon.pre.call(null,G__241727));
})(),(function (){var G__241728 = cljs.core.PersistentArrayMap.EMPTY;
var G__241729 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we use the definition of ",(function (){var G__241730 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__241731 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241730,G__241731) : tailrecursion.hoplon.markdown.code_node.call(null,G__241730,G__241731));
})(),", this reduces to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241728,G__241729) : tailrecursion.hoplon.markdown.para_node.call(null,G__241728,G__241729));
})(),(function (){var G__241732 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241732) : tailrecursion.hoplon.pre.call(null,G__241732));
})(),(function (){var G__241733 = cljs.core.PersistentArrayMap.EMPTY;
var G__241734 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which reduces by multiplication to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241733,G__241734) : tailrecursion.hoplon.markdown.para_node.call(null,G__241733,G__241734));
})(),(function (){var G__241735 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ 36 100)\n") : tailrecursion.hoplon.code.call(null,"(+ 36 100)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241735) : tailrecursion.hoplon.pre.call(null,G__241735));
})(),(function (){var G__241736 = cljs.core.PersistentArrayMap.EMPTY;
var G__241737 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and finally to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241736,G__241737) : tailrecursion.hoplon.markdown.para_node.call(null,G__241736,G__241737));
})(),(function (){var G__241738 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("136\n") : tailrecursion.hoplon.code.call(null,"136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241738) : tailrecursion.hoplon.pre.call(null,G__241738));
})(),(function (){var G__241739 = cljs.core.PersistentArrayMap.EMPTY;
var G__241740 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The process we have just described is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution model"], null)], 0))," for procedure application. It can be taken as a model that determines the ",(function (){var G__241741 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241742 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["meaning"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241741,G__241742) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241741,G__241742));
})()," of procedure application, insofar as the procedures in this chapter are concerned. However, there are two points that should be stressed:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241739,G__241740) : tailrecursion.hoplon.markdown.para_node.call(null,G__241739,G__241740));
})(),(function (){var G__241743 = cljs.core.PersistentArrayMap.EMPTY;
var G__241744 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241745 = cljs.core.PersistentArrayMap.EMPTY;
var G__241746 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241747 = cljs.core.PersistentArrayMap.EMPTY;
var G__241748 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The purpose of the substitution is to help us think about procedure application, not to provide a description of how the interpreter really works. Typical interpreters do not evaluate procedure applications by manipulating the text of a procedure to substitute values for the formal parameters. In practice, the ",(function (){var G__241749 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241750 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241749,G__241750) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241749,G__241750));
})()," is accomplished by using a local environment for the formal parameters. We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241747,G__241748) : tailrecursion.hoplon.markdown.para_node.call(null,G__241747,G__241748));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241745,G__241746) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241745,G__241746));
})(),(function (){var G__241751 = cljs.core.PersistentArrayMap.EMPTY;
var G__241752 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_241753 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241754 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241755 = cljs.core.PersistentArrayMap.EMPTY;
var G__241756 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Over the course of this book, we will present a sequence of increasingly elaborate models of how interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. The substitution model is only the first of these models ",(function (){var G__241757 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__241758 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241757,G__241758) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241757,G__241758));
})()," a way to get started thinking formally about the evaluation process. In general, when modeling phenomena in science and engineering, we begin with simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate and must be replaced by more refined models. The substitution model is no exception. In particular, when we address in chapter 3 the use of procedures with ",(function (){var G__241759 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241760 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mutable data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241759,G__241760) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241759,G__241760));
})(),", we will see that the substitution model breaks down and must be replaced by a more complicated model of procedure application.",(function (){var G__241761 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241762 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process. The problem arises from the possibility of confusion between the names used for the formal parameters of a procedure and the (possibly identical) names used in the expressions to which the procedure may be applied. Indeed, there is a long history of erroneous definitions of substitution in the literature of logic and programming semantics. See Stoy 1977 for a careful discussion of substitution."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241761,G__241762) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241761,G__241762));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241755,G__241756) : tailrecursion.hoplon.markdown.para_node.call(null,G__241755,G__241756));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241754;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241753;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__241751,G__241752) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__241751,G__241752));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__241743,G__241744) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__241743,G__241744));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241689;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241688;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241687;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241686;
}})()], 0));
var G__239911 = "";
var G__239912 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Applicative Order vs Normal Order"], null),(function (){var _STAR_references_STAR_241763 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241764 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_241765 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241766 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241767 = cljs.core.PersistentArrayMap.EMPTY;
var G__241768 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["According to the description of evaluation given in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),", the interpreter first evaluates the operator and operands and then applies the resulting procedure to the resulting arguments. This is not the only way to perform evaluation. An alternative evaluation model would not evaluate the operands until their values were needed. Instead it would first substitute operand expressions for parameters until it obtained an expression involving only primitive operators, and would then perform the evaluation. If we used this method, the evaluation of"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241767,G__241768) : tailrecursion.hoplon.markdown.para_node.call(null,G__241767,G__241768));
})(),(function (){var G__241769 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241769) : tailrecursion.hoplon.pre.call(null,G__241769));
})(),(function (){var G__241770 = cljs.core.PersistentArrayMap.EMPTY;
var G__241771 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["would proceed according to the sequence of expansions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241770,G__241771) : tailrecursion.hoplon.markdown.para_node.call(null,G__241770,G__241771));
})(),(function (){var G__241772 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241772) : tailrecursion.hoplon.pre.call(null,G__241772));
})(),(function (){var G__241773 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (square (+ 5 1))      (square (* 5 2))  )\n") : tailrecursion.hoplon.code.call(null,"(+    (square (+ 5 1))      (square (* 5 2))  )\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241773) : tailrecursion.hoplon.pre.call(null,G__241773));
})(),(function (){var G__241774 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n") : tailrecursion.hoplon.code.call(null,"(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241774) : tailrecursion.hoplon.pre.call(null,G__241774));
})(),(function (){var G__241775 = cljs.core.PersistentArrayMap.EMPTY;
var G__241776 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["followed by the reductions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241775,G__241776) : tailrecursion.hoplon.markdown.para_node.call(null,G__241775,G__241776));
})(),(function (){var G__241777 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241777) : tailrecursion.hoplon.pre.call(null,G__241777));
})(),(function (){var G__241778 = cljs.core.PersistentArrayMap.EMPTY;
var G__241779 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This gives the same answer as our previous evaluation model, but the process is different. In particular, the evaluations of ",(function (){var G__241780 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__241781 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241780,G__241781) : tailrecursion.hoplon.markdown.code_node.call(null,G__241780,G__241781));
})()," and ",(function (){var G__241782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__241783 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241782,G__241783) : tailrecursion.hoplon.markdown.code_node.call(null,G__241782,G__241783));
})()," are each performed twice here, corresponding to the reduction of the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241778,G__241779) : tailrecursion.hoplon.markdown.para_node.call(null,G__241778,G__241779));
})(),(function (){var G__241784 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(* x x)\n") : tailrecursion.hoplon.code.call(null,"(* x x)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241784) : tailrecursion.hoplon.pre.call(null,G__241784));
})(),(function (){var G__241785 = cljs.core.PersistentArrayMap.EMPTY;
var G__241786 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["with ",(function (){var G__241787 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__241788 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241787,G__241788) : tailrecursion.hoplon.markdown.code_node.call(null,G__241787,G__241788));
})()," replaced respectively by ",(function (){var G__241789 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__241790 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241789,G__241790) : tailrecursion.hoplon.markdown.code_node.call(null,G__241789,G__241790));
})()," and ",(function (){var G__241791 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__241792 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241791,G__241792) : tailrecursion.hoplon.markdown.code_node.call(null,G__241791,G__241792));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241785,G__241786) : tailrecursion.hoplon.markdown.para_node.call(null,G__241785,G__241786));
})(),(function (){var G__241793 = cljs.core.PersistentArrayMap.EMPTY;
var G__241794 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This alternative ",(function (){var G__241795 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241796 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["fully expand and then reduce"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241795,G__241796) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241795,G__241796));
})()," evaluation method is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["normal-order evaluation"], null)], 0)),", in contrast to the ",(function (){var G__241797 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241798 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["evaluate the arguments and then apply"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241797,G__241798) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241797,G__241798));
})()," method that the interpreter actually uses, which is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["applicative-order evaluation"], null)], 0)),". It can be shown that, for procedure applications that can be modeled using substitution (including all the procedures in the first two chapters of this book) and that yield legitimate values, normal-order and applicative-order evaluation produce the same value. (See ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#q1.5",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.5"], null)], 0))," for an instance of an ",(function (){var G__241799 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241800 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["illegitimate"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241799,G__241800) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241799,G__241800));
})()," value where normal-order and applicative-order evaluation do not give the same result.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241793,G__241794) : tailrecursion.hoplon.markdown.para_node.call(null,G__241793,G__241794));
})(),(function (){var G__241801 = cljs.core.PersistentArrayMap.EMPTY;
var G__241802 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp uses applicative-order evaluation, partly because of the additional efficiency obtained from avoiding multiple evaluations of expressions such as those illustrated with ",(function (){var G__241803 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__241804 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241803,G__241804) : tailrecursion.hoplon.markdown.code_node.call(null,G__241803,G__241804));
})()," and ",(function (){var G__241805 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__241806 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241805,G__241806) : tailrecursion.hoplon.markdown.code_node.call(null,G__241805,G__241806));
})()," above and, more significantly, because normal-order evaluation becomes much more complicated to deal with when we leave the realm of procedures that can be modeled by substitution. On the other hand, normal-order evaluation can be an extremely valuable tool, and we will investigate some of its implications in chapters 3 and 4.",(function (){var G__241807 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241808 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In chapter 3 we will introduce ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["stream processing"], null)], 0)),", which is a way of handling apparently ",(function (){var G__241809 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241810 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["infinite"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241809,G__241810) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241809,G__241810));
})()," data structures by incorporating a limited form of normal-order evaluation. In section 4.2 we will modify the Scheme interpreter to produce a normal-order variant of Scheme."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241807,G__241808) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241807,G__241808));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241801,G__241802) : tailrecursion.hoplon.markdown.para_node.call(null,G__241801,G__241802));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241766;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241765;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241764;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241763;
}})()], 0));
var G__239913 = "";
var G__239914 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Conditional Expressions and Predicates"], null),(function (){var _STAR_references_STAR_241811 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241812 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_241813 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_241814 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 31, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241815 = cljs.core.PersistentArrayMap.EMPTY;
var G__241816 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The expressive power of the class of procedures that we can define at this point is very limited, because we have no way to make tests and to perform different operations depending on the result of a test. For instance, we cannot define a procedure that computes the absolute value of a number by testing whether the number is positive, negative, or zero and taking different actions in the different cases according to the rule"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241815,G__241816) : tailrecursion.hoplon.markdown.para_node.call(null,G__241815,G__241816));
})(),(function (){var G__241817 = cljs.core.PersistentArrayMap.EMPTY;
var G__241818 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$| x |= \\begin{cases} x &\\mbox{if } x > 0 \\cr 0 &\\mbox{if } x = 0 \\cr -x &\\mbox{if } x < 0 \\end{cases}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241817,G__241818) : tailrecursion.hoplon.markdown.para_node.call(null,G__241817,G__241818));
})(),(function (){var G__241819 = cljs.core.PersistentArrayMap.EMPTY;
var G__241820 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This construct is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["case analysis"], null)], 0)),", and there is a special form in Lisp for notating such a case analysis. It is called ",(function (){var G__241821 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__241822 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241821,G__241822) : tailrecursion.hoplon.markdown.code_node.call(null,G__241821,G__241822));
})()," (which stands for ",(function (){var G__241823 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241824 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["conditional"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241823,G__241824) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241823,G__241824));
})(),"), and it is used as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241819,G__241820) : tailrecursion.hoplon.markdown.para_node.call(null,G__241819,G__241820));
})(),(function (){var G__241825 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n") : tailrecursion.hoplon.code.call(null,"(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241825) : tailrecursion.hoplon.pre.call(null,G__241825));
})(),(function (){var G__241826 = cljs.core.PersistentArrayMap.EMPTY;
var G__241827 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a conditional expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241826,G__241827) : tailrecursion.hoplon.markdown.para_node.call(null,G__241826,G__241827));
})(),(function (){var G__241828 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n") : tailrecursion.hoplon.code.call(null,"(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__241828) : tailrecursion.hoplon.pre.call(null,G__241828));
})(),(function (){var G__241829 = cljs.core.PersistentArrayMap.EMPTY;
var G__241830 = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consisting of the symbol cond followed by pairs of expressions <p> <e> called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clauses"], null)], 0)),". The first expression in each pair is a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," ",(function (){var G__241831 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__241832 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241831,G__241832) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241831,G__241832));
})()," that is, an expression whose value is interpreted as either ",(function (){var G__241833 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__241834 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241833,G__241834) : tailrecursion.hoplon.markdown.code_node.call(null,G__241833,G__241834));
})()," or ",(function (){var G__241835 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__241836 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241835,G__241836) : tailrecursion.hoplon.markdown.code_node.call(null,G__241835,G__241836));
})(),".",(function (){var G__241837 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241838 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241839 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241840 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Interpreted as either true or false"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241839,G__241840) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241839,G__241840));
})()," means this: In Scheme, there are two distinguished values that are denoted by the constants ",(function (){var G__241841 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__241842 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241841,G__241842) : tailrecursion.hoplon.markdown.code_node.call(null,G__241841,G__241842));
})()," and ",(function (){var G__241843 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__241844 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241843,G__241844) : tailrecursion.hoplon.markdown.code_node.call(null,G__241843,G__241844));
})(),". When the interpreter checks a predicate",(function (){var G__241845 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241846 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241845,G__241846) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241845,G__241846));
})(),"s value, it interprets",(function (){var G__241847 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__241848 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241847,G__241848) : tailrecursion.hoplon.markdown.code_node.call(null,G__241847,G__241848));
})()," and ",(function (){var G__241849 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"nil"], null);
var G__241850 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241849,G__241850) : tailrecursion.hoplon.markdown.code_node.call(null,G__241849,G__241850));
})()," as false. Any other value is treated as true. (Thus, providing ",(function (){var G__241851 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__241852 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241851,G__241852) : tailrecursion.hoplon.markdown.code_node.call(null,G__241851,G__241852));
})()," is logically unnecessary, but it is convenient.)"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241837,G__241838) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241837,G__241838));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241829,G__241830) : tailrecursion.hoplon.markdown.para_node.call(null,G__241829,G__241830));
})(),(function (){var G__241853 = cljs.core.PersistentArrayMap.EMPTY;
var G__241854 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Conditional expressions are evaluated as follows. The predicate <p1> is evaluated first. If its value is false, then <p2> is evaluated. If <p2>",(function (){var G__241855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241856 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241855,G__241856) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241855,G__241856));
})(),"s value is also false, then <p3> is evaluated. This process continues until a predicate is found whose value is true, in which case the interpreter returns the value of the corresponding ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consequent expression"], null)], 0))," <e> of the clause as the value of the conditional expression. If none of the <p>",(function (){var G__241857 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__241858 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__241857,G__241858) : tailrecursion.hoplon.markdown.simple_node.call(null,G__241857,G__241858));
})(),"s is found to be true, the value of the ",(function (){var G__241859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__241860 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241859,G__241860) : tailrecursion.hoplon.markdown.code_node.call(null,G__241859,G__241860));
})()," is undefined."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241853,G__241854) : tailrecursion.hoplon.markdown.para_node.call(null,G__241853,G__241854));
})(),(function (){var G__241861 = cljs.core.PersistentArrayMap.EMPTY;
var G__241862 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The word ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," is used for procedures that return ",(function (){var G__241863 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__241864 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241863,G__241864) : tailrecursion.hoplon.markdown.code_node.call(null,G__241863,G__241864));
})()," or ",(function (){var G__241865 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__241866 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241865,G__241866) : tailrecursion.hoplon.markdown.code_node.call(null,G__241865,G__241866));
})(),", as well as for expressions that evaluate to ",(function (){var G__241867 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__241868 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241867,G__241868) : tailrecursion.hoplon.markdown.code_node.call(null,G__241867,G__241868));
})()," or ",(function (){var G__241869 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__241870 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241869,G__241870) : tailrecursion.hoplon.markdown.code_node.call(null,G__241869,G__241870));
})(),". The absolute-value procedure ",(function (){var G__241871 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__241872 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241871,G__241872) : tailrecursion.hoplon.markdown.code_node.call(null,G__241871,G__241872));
})()," makes use of the primitive predicates >, <, and =.",(function (){var G__241873 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__241874 = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__241875 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Abs"], null);
var G__241876 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241875,G__241876) : tailrecursion.hoplon.markdown.code_node.call(null,G__241875,G__241876));
})()," also uses the ",(function (){var G__241877 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241878 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["minus"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241877,G__241878) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241877,G__241878));
})()," operator ",(function (){var G__241879 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__241880 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241879,G__241880) : tailrecursion.hoplon.markdown.code_node.call(null,G__241879,G__241880));
})(),", which, when used with a single operand, as in ",(function (){var G__241881 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- x)"], null);
var G__241882 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241881,G__241882) : tailrecursion.hoplon.markdown.code_node.call(null,G__241881,G__241882));
})(),", indicates negation."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241873,G__241874) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241873,G__241874));
})()," These take two numbers as arguments and test whether the first number is, respectively, greater than, less than, or equal to the second number, returning true or false accordingly."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241861,G__241862) : tailrecursion.hoplon.markdown.para_node.call(null,G__241861,G__241862));
})(),(function (){var G__241883 = cljs.core.PersistentArrayMap.EMPTY;
var G__241884 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Another way to write the absolute-value procedure is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241883,G__241884) : tailrecursion.hoplon.markdown.para_node.call(null,G__241883,G__241884));
})(),(function (){var G__241930 = (function (){var G__241931 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__241932 = (function (){var G__241933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__241934 = "(";
var G__241935 = (function (){var G__241954 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__241955 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241954,G__241955) : tailrecursion.hoplon.span.call(null,G__241954,G__241955));
})();
var G__241936 = (function (){var G__241956 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241957 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241956,G__241957) : tailrecursion.hoplon.span.call(null,G__241956,G__241957));
})();
var G__241937 = " [";
var G__241938 = (function (){var G__241958 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241959 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241958,G__241959) : tailrecursion.hoplon.span.call(null,G__241958,G__241959));
})();
var G__241939 = "]\n  (";
var G__241940 = (function (){var G__241960 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241961 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241960,G__241961) : tailrecursion.hoplon.span.call(null,G__241960,G__241961));
})();
var G__241941 = "(";
var G__241942 = (function (){var G__241962 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241963 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241962,G__241963) : tailrecursion.hoplon.span.call(null,G__241962,G__241963));
})();
var G__241943 = (function (){var G__241964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241965 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241964,G__241965) : tailrecursion.hoplon.span.call(null,G__241964,G__241965));
})();
var G__241944 = " ";
var G__241945 = (function (){var G__241966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__241967 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241966,G__241967) : tailrecursion.hoplon.span.call(null,G__241966,G__241967));
})();
var G__241946 = ") (";
var G__241947 = (function (){var G__241968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__241969 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241968,G__241969) : tailrecursion.hoplon.span.call(null,G__241968,G__241969));
})();
var G__241948 = (function (){var G__241970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241971 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241970,G__241971) : tailrecursion.hoplon.span.call(null,G__241970,G__241971));
})();
var G__241949 = ")\n        ";
var G__241950 = (function (){var G__241972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241973 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241972,G__241973) : tailrecursion.hoplon.span.call(null,G__241972,G__241973));
})();
var G__241951 = " ";
var G__241952 = (function (){var G__241974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__241975 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__241974,G__241975) : tailrecursion.hoplon.span.call(null,G__241974,G__241975));
})();
var G__241953 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__241933,G__241934,G__241935,G__241936,G__241937,G__241938,G__241939,G__241940,G__241941,G__241942,G__241943,G__241944,G__241945,G__241946,G__241947,G__241948,G__241949,G__241950,G__241951,G__241952,G__241953) : tailrecursion.hoplon.pre.call(null,G__241933,G__241934,G__241935,G__241936,G__241937,G__241938,G__241939,G__241940,G__241941,G__241942,G__241943,G__241944,G__241945,G__241946,G__241947,G__241948,G__241949,G__241950,G__241951,G__241952,G__241953));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__241931,G__241932) : tailrecursion.hoplon.div.call(null,G__241931,G__241932));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__241930) : tailrecursion.hoplon.div.call(null,G__241930));
})(),(function (){var G__241976 = cljs.core.PersistentArrayMap.EMPTY;
var G__241977 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which could be expressed in English as ",(function (){var G__241978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__241979 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If x is less than zero return - x; otherwise return x."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__241978,G__241979) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__241978,G__241979));
})()," ",(function (){var G__241980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,":else"], null);
var G__241981 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241980,G__241981) : tailrecursion.hoplon.markdown.code_node.call(null,G__241980,G__241981));
})()," is a special symbol that can be used in place of the <p> in the final clause of a ",(function (){var G__241982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__241983 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241982,G__241983) : tailrecursion.hoplon.markdown.code_node.call(null,G__241982,G__241983));
})(),". This causes the ",(function (){var G__241984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__241985 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__241984,G__241985) : tailrecursion.hoplon.markdown.code_node.call(null,G__241984,G__241985));
})()," to return as its value the value of the corresponding <e> whenever all previous clauses have been bypassed. In fact, any expression that always evaluates to a true value could be used as the <p> here."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241976,G__241977) : tailrecursion.hoplon.markdown.para_node.call(null,G__241976,G__241977));
})(),(function (){var G__241986 = cljs.core.PersistentArrayMap.EMPTY;
var G__241987 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here is yet another way to write the absolute-value procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__241986,G__241987) : tailrecursion.hoplon.markdown.para_node.call(null,G__241986,G__241987));
})(),(function (){var G__242029 = (function (){var G__242030 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242031 = (function (){var G__242032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242033 = "(";
var G__242034 = (function (){var G__242051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242052 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242051,G__242052) : tailrecursion.hoplon.span.call(null,G__242051,G__242052));
})();
var G__242035 = (function (){var G__242053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242054 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242053,G__242054) : tailrecursion.hoplon.span.call(null,G__242053,G__242054));
})();
var G__242036 = " [";
var G__242037 = (function (){var G__242055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242056 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242055,G__242056) : tailrecursion.hoplon.span.call(null,G__242055,G__242056));
})();
var G__242038 = "]\n  (";
var G__242039 = (function (){var G__242057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242058 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242057,G__242058) : tailrecursion.hoplon.span.call(null,G__242057,G__242058));
})();
var G__242040 = "(";
var G__242041 = (function (){var G__242059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242060 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242059,G__242060) : tailrecursion.hoplon.span.call(null,G__242059,G__242060));
})();
var G__242042 = (function (){var G__242061 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242062 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242061,G__242062) : tailrecursion.hoplon.span.call(null,G__242061,G__242062));
})();
var G__242043 = " ";
var G__242044 = (function (){var G__242063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242064 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242063,G__242064) : tailrecursion.hoplon.span.call(null,G__242063,G__242064));
})();
var G__242045 = ")\n      (";
var G__242046 = (function (){var G__242065 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242066 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242065,G__242066) : tailrecursion.hoplon.span.call(null,G__242065,G__242066));
})();
var G__242047 = (function (){var G__242067 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242068 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242067,G__242068) : tailrecursion.hoplon.span.call(null,G__242067,G__242068));
})();
var G__242048 = ")\n      ";
var G__242049 = (function (){var G__242069 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242070 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242069,G__242070) : tailrecursion.hoplon.span.call(null,G__242069,G__242070));
})();
var G__242050 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__242032,G__242033,G__242034,G__242035,G__242036,G__242037,G__242038,G__242039,G__242040,G__242041,G__242042,G__242043,G__242044,G__242045,G__242046,G__242047,G__242048,G__242049,G__242050) : tailrecursion.hoplon.pre.call(null,G__242032,G__242033,G__242034,G__242035,G__242036,G__242037,G__242038,G__242039,G__242040,G__242041,G__242042,G__242043,G__242044,G__242045,G__242046,G__242047,G__242048,G__242049,G__242050));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242030,G__242031) : tailrecursion.hoplon.div.call(null,G__242030,G__242031));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242029) : tailrecursion.hoplon.div.call(null,G__242029));
})(),(function (){var G__242071 = cljs.core.PersistentArrayMap.EMPTY;
var G__242072 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This uses the special form ",(function (){var G__242073 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__242074 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242073,G__242074) : tailrecursion.hoplon.markdown.code_node.call(null,G__242073,G__242074));
})(),", a restricted type of conditional that can be used when there are precisely two cases in the case analysis. The general form of an ",(function (){var G__242075 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__242076 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242075,G__242076) : tailrecursion.hoplon.markdown.code_node.call(null,G__242075,G__242076));
})()," expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242071,G__242072) : tailrecursion.hoplon.markdown.para_node.call(null,G__242071,G__242072));
})(),(function (){var G__242096 = (function (){var G__242097 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242098 = (function (){var G__242099 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242100 = "(";
var G__242101 = (function (){var G__242108 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242109 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242108,G__242109) : tailrecursion.hoplon.span.call(null,G__242108,G__242109));
})();
var G__242102 = (function (){var G__242110 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242111 = "<predicate>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242110,G__242111) : tailrecursion.hoplon.span.call(null,G__242110,G__242111));
})();
var G__242103 = " ";
var G__242104 = (function (){var G__242112 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242113 = "<consequent>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242112,G__242113) : tailrecursion.hoplon.span.call(null,G__242112,G__242113));
})();
var G__242105 = " ";
var G__242106 = (function (){var G__242114 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242115 = "<alternative>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242114,G__242115) : tailrecursion.hoplon.span.call(null,G__242114,G__242115));
})();
var G__242107 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__242099,G__242100,G__242101,G__242102,G__242103,G__242104,G__242105,G__242106,G__242107) : tailrecursion.hoplon.pre.call(null,G__242099,G__242100,G__242101,G__242102,G__242103,G__242104,G__242105,G__242106,G__242107));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242097,G__242098) : tailrecursion.hoplon.div.call(null,G__242097,G__242098));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242096) : tailrecursion.hoplon.div.call(null,G__242096));
})(),(function (){var G__242116 = cljs.core.PersistentArrayMap.EMPTY;
var G__242117 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate an ",(function (){var G__242118 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__242119 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242118,G__242119) : tailrecursion.hoplon.markdown.code_node.call(null,G__242118,G__242119));
})()," expression, the interpreter starts by evaluating the <predicate> part of the expression. If the <predicate> evaluates to a true value, the interpreter then evaluates the <consequent> and returns its value. Otherwise it evaluates the <alternative> and returns its value.",(function (){var G__242120 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__242121 = new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In Scheme, a minor difference between ",(function (){var G__242122 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__242123 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242122,G__242123) : tailrecursion.hoplon.markdown.code_node.call(null,G__242122,G__242123));
})()," and ",(function (){var G__242124 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__242125 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242124,G__242125) : tailrecursion.hoplon.markdown.code_node.call(null,G__242124,G__242125));
})()," is that the ",(function (){var G__242126 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__242127 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242126,G__242127) : tailrecursion.hoplon.markdown.code_node.call(null,G__242126,G__242127));
})()," part of each ",(function (){var G__242128 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__242129 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242128,G__242129) : tailrecursion.hoplon.markdown.code_node.call(null,G__242128,G__242129));
})()," clause may be a sequence of expressions. If the corresponding ",(function (){var G__242130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<p>"], null);
var G__242131 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242130,G__242131) : tailrecursion.hoplon.markdown.code_node.call(null,G__242130,G__242131));
})()," is found to be true, the expressions ",(function (){var G__242132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__242133 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242132,G__242133) : tailrecursion.hoplon.markdown.code_node.call(null,G__242132,G__242133));
})()," are evaluated in sequence and the value of the final expression in the sequence is returned as the value of the ",(function (){var G__242134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__242135 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242134,G__242135) : tailrecursion.hoplon.markdown.code_node.call(null,G__242134,G__242135));
})(),". In an ",(function (){var G__242136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__242137 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242136,G__242137) : tailrecursion.hoplon.markdown.code_node.call(null,G__242136,G__242137));
})()," expression, however, the ",(function (){var G__242138 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<consequent>"], null);
var G__242139 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242138,G__242139) : tailrecursion.hoplon.markdown.code_node.call(null,G__242138,G__242139));
})()," and ",(function (){var G__242140 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<alternative>"], null);
var G__242141 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242140,G__242141) : tailrecursion.hoplon.markdown.code_node.call(null,G__242140,G__242141));
})()," must be single expressions. In Clojure, however, these must all be single expressioins. To get a similar functionality one could use ",(function (){var G__242142 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"do"], null);
var G__242143 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242142,G__242143) : tailrecursion.hoplon.markdown.code_node.call(null,G__242142,G__242143));
})(),"."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__242120,G__242121) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__242120,G__242121));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242116,G__242117) : tailrecursion.hoplon.markdown.para_node.call(null,G__242116,G__242117));
})(),(function (){var G__242144 = cljs.core.PersistentArrayMap.EMPTY;
var G__242145 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In addition to primitive predicates such as <, =, and >, there are logical composition operations, which enable us to construct compound predicates. The three most frequently used are these:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242144,G__242145) : tailrecursion.hoplon.markdown.para_node.call(null,G__242144,G__242145));
})(),(function (){var G__242146 = cljs.core.PersistentArrayMap.EMPTY;
var G__242147 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242148 = cljs.core.PersistentArrayMap.EMPTY;
var G__242149 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_242150 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242151 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__242152 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (and <e1> ... <en>)\n"], null);
var G__242153 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242152,G__242153) : tailrecursion.hoplon.markdown.code_node.call(null,G__242152,G__242153));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242151;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242150;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__242148,G__242149) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__242148,G__242149));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__242146,G__242147) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__242146,G__242147));
})(),(function (){var G__242154 = cljs.core.PersistentArrayMap.EMPTY;
var G__242155 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to false, the value of the  ",(function (){var G__242156 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__242157 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242156,G__242157) : tailrecursion.hoplon.markdown.code_node.call(null,G__242156,G__242157));
})()," expression is false, and the rest of the <e>",(function (){var G__242158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242159 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242158,G__242159) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242158,G__242159));
})(),"s are not  evaluated. If all <e>",(function (){var G__242160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242161 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242160,G__242161) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242160,G__242161));
})(),"s evaluate to true values, the value of the and  expression is the value of the last one."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242154,G__242155) : tailrecursion.hoplon.markdown.para_node.call(null,G__242154,G__242155));
})(),(function (){var G__242162 = cljs.core.PersistentArrayMap.EMPTY;
var G__242163 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242164 = cljs.core.PersistentArrayMap.EMPTY;
var G__242165 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_242166 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242167 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__242168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (or <e1> ... <en>)\n"], null);
var G__242169 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242168,G__242169) : tailrecursion.hoplon.markdown.code_node.call(null,G__242168,G__242169));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242167;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242166;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__242164,G__242165) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__242164,G__242165));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__242162,G__242163) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__242162,G__242163));
})(),(function (){var G__242170 = cljs.core.PersistentArrayMap.EMPTY;
var G__242171 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to a true value, that value  is returned as the value of the or expression, and the rest of the  <e>",(function (){var G__242172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242173 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242172,G__242173) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242172,G__242173));
})(),"s are not evaluated. If all <e>",(function (){var G__242174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__242175 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__242174,G__242175) : tailrecursion.hoplon.markdown.simple_node.call(null,G__242174,G__242175));
})(),"s evaluate to false, the value of  the ",(function (){var G__242176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__242177 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242176,G__242177) : tailrecursion.hoplon.markdown.code_node.call(null,G__242176,G__242177));
})()," expression is false."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242170,G__242171) : tailrecursion.hoplon.markdown.para_node.call(null,G__242170,G__242171));
})(),(function (){var G__242178 = cljs.core.PersistentArrayMap.EMPTY;
var G__242179 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242180 = cljs.core.PersistentArrayMap.EMPTY;
var G__242181 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_242182 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242183 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__242184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (not <e>)\n"], null);
var G__242185 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242184,G__242185) : tailrecursion.hoplon.markdown.code_node.call(null,G__242184,G__242185));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242183;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242182;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__242180,G__242181) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__242180,G__242181));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__242178,G__242179) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__242178,G__242179));
})(),(function (){var G__242186 = cljs.core.PersistentArrayMap.EMPTY;
var G__242187 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The value of a ",(function (){var G__242188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__242189 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242188,G__242189) : tailrecursion.hoplon.markdown.code_node.call(null,G__242188,G__242189));
})()," expression is true when the expression <e>  evaluates to false, and false otherwise."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242186,G__242187) : tailrecursion.hoplon.markdown.para_node.call(null,G__242186,G__242187));
})(),(function (){var G__242190 = cljs.core.PersistentArrayMap.EMPTY;
var G__242191 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that ",(function (){var G__242192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__242193 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242192,G__242193) : tailrecursion.hoplon.markdown.code_node.call(null,G__242192,G__242193));
})()," and ",(function (){var G__242194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__242195 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242194,G__242195) : tailrecursion.hoplon.markdown.code_node.call(null,G__242194,G__242195));
})()," are special forms, not procedures, because the subexpressions are not necessarily all evaluated. ",(function (){var G__242196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__242197 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__242196,G__242197) : tailrecursion.hoplon.markdown.code_node.call(null,G__242196,G__242197));
})()," is an ordinary procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242190,G__242191) : tailrecursion.hoplon.markdown.para_node.call(null,G__242190,G__242191));
})(),(function (){var G__242198 = cljs.core.PersistentArrayMap.EMPTY;
var G__242199 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As an example of how these are used, the condition that a number x be in the range \\(5 \\lt x \\lt 10\\) may be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242198,G__242199) : tailrecursion.hoplon.markdown.para_node.call(null,G__242198,G__242199));
})(),(function (){var G__242230 = (function (){var G__242231 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242232 = (function (){var G__242233 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242234 = "(";
var G__242235 = (function (){var G__242247 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242248 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242247,G__242248) : tailrecursion.hoplon.span.call(null,G__242247,G__242248));
})();
var G__242236 = "(";
var G__242237 = (function (){var G__242249 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242250 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242249,G__242250) : tailrecursion.hoplon.span.call(null,G__242249,G__242250));
})();
var G__242238 = (function (){var G__242251 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242252 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242251,G__242252) : tailrecursion.hoplon.span.call(null,G__242251,G__242252));
})();
var G__242239 = " ";
var G__242240 = (function (){var G__242253 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242254 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242253,G__242254) : tailrecursion.hoplon.span.call(null,G__242253,G__242254));
})();
var G__242241 = ") (";
var G__242242 = (function (){var G__242255 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242256 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242255,G__242256) : tailrecursion.hoplon.span.call(null,G__242255,G__242256));
})();
var G__242243 = (function (){var G__242257 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242258 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242257,G__242258) : tailrecursion.hoplon.span.call(null,G__242257,G__242258));
})();
var G__242244 = " ";
var G__242245 = (function (){var G__242259 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242260 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242259,G__242260) : tailrecursion.hoplon.span.call(null,G__242259,G__242260));
})();
var G__242246 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__242233,G__242234,G__242235,G__242236,G__242237,G__242238,G__242239,G__242240,G__242241,G__242242,G__242243,G__242244,G__242245,G__242246) : tailrecursion.hoplon.pre.call(null,G__242233,G__242234,G__242235,G__242236,G__242237,G__242238,G__242239,G__242240,G__242241,G__242242,G__242243,G__242244,G__242245,G__242246));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242231,G__242232) : tailrecursion.hoplon.div.call(null,G__242231,G__242232));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242230) : tailrecursion.hoplon.div.call(null,G__242230));
})(),(function (){var G__242261 = cljs.core.PersistentArrayMap.EMPTY;
var G__242262 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As another example, we can define a predicate to test whether one number is greater than or equal to another as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242261,G__242262) : tailrecursion.hoplon.markdown.para_node.call(null,G__242261,G__242262));
})(),(function (){var G__242308 = (function (){var G__242309 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242310 = (function (){var G__242311 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242312 = "(";
var G__242313 = (function (){var G__242332 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242333 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242332,G__242333) : tailrecursion.hoplon.span.call(null,G__242332,G__242333));
})();
var G__242314 = (function (){var G__242334 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242335 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242334,G__242335) : tailrecursion.hoplon.span.call(null,G__242334,G__242335));
})();
var G__242315 = "[";
var G__242316 = (function (){var G__242336 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242337 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242336,G__242337) : tailrecursion.hoplon.span.call(null,G__242336,G__242337));
})();
var G__242317 = " ";
var G__242318 = (function (){var G__242338 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242339 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242338,G__242339) : tailrecursion.hoplon.span.call(null,G__242338,G__242339));
})();
var G__242319 = "] \n  (";
var G__242320 = (function (){var G__242340 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242341 = "or ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242340,G__242341) : tailrecursion.hoplon.span.call(null,G__242340,G__242341));
})();
var G__242321 = "(";
var G__242322 = (function (){var G__242342 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242343 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242342,G__242343) : tailrecursion.hoplon.span.call(null,G__242342,G__242343));
})();
var G__242323 = (function (){var G__242344 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242345 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242344,G__242345) : tailrecursion.hoplon.span.call(null,G__242344,G__242345));
})();
var G__242324 = " ";
var G__242325 = (function (){var G__242346 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242347 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242346,G__242347) : tailrecursion.hoplon.span.call(null,G__242346,G__242347));
})();
var G__242326 = ") (";
var G__242327 = (function (){var G__242348 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242349 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242348,G__242349) : tailrecursion.hoplon.span.call(null,G__242348,G__242349));
})();
var G__242328 = (function (){var G__242350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242351 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242350,G__242351) : tailrecursion.hoplon.span.call(null,G__242350,G__242351));
})();
var G__242329 = " ";
var G__242330 = (function (){var G__242352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242353 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242352,G__242353) : tailrecursion.hoplon.span.call(null,G__242352,G__242353));
})();
var G__242331 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__242311,G__242312,G__242313,G__242314,G__242315,G__242316,G__242317,G__242318,G__242319,G__242320,G__242321,G__242322,G__242323,G__242324,G__242325,G__242326,G__242327,G__242328,G__242329,G__242330,G__242331) : tailrecursion.hoplon.pre.call(null,G__242311,G__242312,G__242313,G__242314,G__242315,G__242316,G__242317,G__242318,G__242319,G__242320,G__242321,G__242322,G__242323,G__242324,G__242325,G__242326,G__242327,G__242328,G__242329,G__242330,G__242331));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242309,G__242310) : tailrecursion.hoplon.div.call(null,G__242309,G__242310));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242308) : tailrecursion.hoplon.div.call(null,G__242308));
})(),(function (){var G__242354 = cljs.core.PersistentArrayMap.EMPTY;
var G__242355 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["or alternatively as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242354,G__242355) : tailrecursion.hoplon.markdown.para_node.call(null,G__242354,G__242355));
})(),(function (){var G__242390 = (function (){var G__242391 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242392 = (function (){var G__242393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242394 = "(";
var G__242395 = (function (){var G__242409 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242410 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242409,G__242410) : tailrecursion.hoplon.span.call(null,G__242409,G__242410));
})();
var G__242396 = (function (){var G__242411 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242412 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242411,G__242412) : tailrecursion.hoplon.span.call(null,G__242411,G__242412));
})();
var G__242397 = "[";
var G__242398 = (function (){var G__242413 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242414 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242413,G__242414) : tailrecursion.hoplon.span.call(null,G__242413,G__242414));
})();
var G__242399 = " ";
var G__242400 = (function (){var G__242415 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242416 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242415,G__242416) : tailrecursion.hoplon.span.call(null,G__242415,G__242416));
})();
var G__242401 = "]\n  (";
var G__242402 = (function (){var G__242417 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242418 = "not ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242417,G__242418) : tailrecursion.hoplon.span.call(null,G__242417,G__242418));
})();
var G__242403 = "(";
var G__242404 = (function (){var G__242419 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242420 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242419,G__242420) : tailrecursion.hoplon.span.call(null,G__242419,G__242420));
})();
var G__242405 = (function (){var G__242421 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242422 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242421,G__242422) : tailrecursion.hoplon.span.call(null,G__242421,G__242422));
})();
var G__242406 = " ";
var G__242407 = (function (){var G__242423 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242424 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242423,G__242424) : tailrecursion.hoplon.span.call(null,G__242423,G__242424));
})();
var G__242408 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__242393,G__242394,G__242395,G__242396,G__242397,G__242398,G__242399,G__242400,G__242401,G__242402,G__242403,G__242404,G__242405,G__242406,G__242407,G__242408) : tailrecursion.hoplon.pre.call(null,G__242393,G__242394,G__242395,G__242396,G__242397,G__242398,G__242399,G__242400,G__242401,G__242402,G__242403,G__242404,G__242405,G__242406,G__242407,G__242408));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242391,G__242392) : tailrecursion.hoplon.div.call(null,G__242391,G__242392));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242390) : tailrecursion.hoplon.div.call(null,G__242390));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241814;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241813;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_241812;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_241811;
}})()], 0));
var G__239915 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242425 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242426 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242427 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242428 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242429 = cljs.core.PersistentArrayMap.EMPTY;
var G__242430 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__242429,G__242430) : tailrecursion.hoplon.markdown.para_node.call(null,G__242429,G__242430));
})(),(function (){var G__242438 = (function (){var G__242439 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242440 = (function (){var G__242441 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242442 = (function (){var G__242444 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242445 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242444,G__242445) : tailrecursion.hoplon.span.call(null,G__242444,G__242445));
})();
var G__242443 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3(G__242441,G__242442,G__242443) : tailrecursion.hoplon.pre.call(null,G__242441,G__242442,G__242443));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242439,G__242440) : tailrecursion.hoplon.div.call(null,G__242439,G__242440));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242438) : tailrecursion.hoplon.div.call(null,G__242438));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242428;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242427;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242426;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242425;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242446 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242447 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242448 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242449 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242450 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("10\n") : tailrecursion.hoplon.code.call(null,"10\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242450) : tailrecursion.hoplon.pre.call(null,G__242450));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242449;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242448;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242447;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242446;
}})()], 0)),"",(function (){var _STAR_references_STAR_242451 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242452 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242453 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242454 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242474 = (function (){var G__242475 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242476 = (function (){var G__242477 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242478 = "(";
var G__242479 = (function (){var G__242486 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242487 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242486,G__242487) : tailrecursion.hoplon.span.call(null,G__242486,G__242487));
})();
var G__242480 = (function (){var G__242488 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242489 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242488,G__242489) : tailrecursion.hoplon.span.call(null,G__242488,G__242489));
})();
var G__242481 = " ";
var G__242482 = (function (){var G__242490 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242491 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242490,G__242491) : tailrecursion.hoplon.span.call(null,G__242490,G__242491));
})();
var G__242483 = " ";
var G__242484 = (function (){var G__242492 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242493 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242492,G__242493) : tailrecursion.hoplon.span.call(null,G__242492,G__242493));
})();
var G__242485 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__242477,G__242478,G__242479,G__242480,G__242481,G__242482,G__242483,G__242484,G__242485) : tailrecursion.hoplon.pre.call(null,G__242477,G__242478,G__242479,G__242480,G__242481,G__242482,G__242483,G__242484,G__242485));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242475,G__242476) : tailrecursion.hoplon.div.call(null,G__242475,G__242476));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242474) : tailrecursion.hoplon.div.call(null,G__242474));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242454;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242453;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242452;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242451;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242494 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242495 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242496 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242497 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242498 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("12\n") : tailrecursion.hoplon.code.call(null,"12\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242498) : tailrecursion.hoplon.pre.call(null,G__242498));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242497;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242496;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242495;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242494;
}})()], 0)),"",(function (){var _STAR_references_STAR_242499 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242500 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242501 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242502 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242518 = (function (){var G__242519 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242520 = (function (){var G__242521 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242522 = "(";
var G__242523 = (function (){var G__242528 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242529 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242528,G__242529) : tailrecursion.hoplon.span.call(null,G__242528,G__242529));
})();
var G__242524 = (function (){var G__242530 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242531 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242530,G__242531) : tailrecursion.hoplon.span.call(null,G__242530,G__242531));
})();
var G__242525 = " ";
var G__242526 = (function (){var G__242532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242533 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242532,G__242533) : tailrecursion.hoplon.span.call(null,G__242532,G__242533));
})();
var G__242527 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__242521,G__242522,G__242523,G__242524,G__242525,G__242526,G__242527) : tailrecursion.hoplon.pre.call(null,G__242521,G__242522,G__242523,G__242524,G__242525,G__242526,G__242527));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242519,G__242520) : tailrecursion.hoplon.div.call(null,G__242519,G__242520));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242518) : tailrecursion.hoplon.div.call(null,G__242518));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242502;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242501;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242500;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242499;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242534 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242535 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242536 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242537 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242538 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("8\n") : tailrecursion.hoplon.code.call(null,"8\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242538) : tailrecursion.hoplon.pre.call(null,G__242538));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242537;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242536;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242535;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242534;
}})()], 0)),"",(function (){var _STAR_references_STAR_242539 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242540 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242541 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242542 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242558 = (function (){var G__242559 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242560 = (function (){var G__242561 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242562 = "(";
var G__242563 = (function (){var G__242568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242569 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242568,G__242569) : tailrecursion.hoplon.span.call(null,G__242568,G__242569));
})();
var G__242564 = (function (){var G__242570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242571 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242570,G__242571) : tailrecursion.hoplon.span.call(null,G__242570,G__242571));
})();
var G__242565 = " ";
var G__242566 = (function (){var G__242572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242573 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242572,G__242573) : tailrecursion.hoplon.span.call(null,G__242572,G__242573));
})();
var G__242567 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__242561,G__242562,G__242563,G__242564,G__242565,G__242566,G__242567) : tailrecursion.hoplon.pre.call(null,G__242561,G__242562,G__242563,G__242564,G__242565,G__242566,G__242567));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242559,G__242560) : tailrecursion.hoplon.div.call(null,G__242559,G__242560));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242558) : tailrecursion.hoplon.div.call(null,G__242558));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242542;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242541;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242540;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242539;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242574 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242575 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242576 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242577 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242578 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("3\n") : tailrecursion.hoplon.code.call(null,"3\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242578) : tailrecursion.hoplon.pre.call(null,G__242578));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242577;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242576;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242575;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242574;
}})()], 0)),"",(function (){var _STAR_references_STAR_242579 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242580 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242581 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242582 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242613 = (function (){var G__242614 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242615 = (function (){var G__242616 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242617 = "(";
var G__242618 = (function (){var G__242630 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242631 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242630,G__242631) : tailrecursion.hoplon.span.call(null,G__242630,G__242631));
})();
var G__242619 = "(";
var G__242620 = (function (){var G__242632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242633 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242632,G__242633) : tailrecursion.hoplon.span.call(null,G__242632,G__242633));
})();
var G__242621 = (function (){var G__242634 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242635 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242634,G__242635) : tailrecursion.hoplon.span.call(null,G__242634,G__242635));
})();
var G__242622 = " ";
var G__242623 = (function (){var G__242636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242637 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242636,G__242637) : tailrecursion.hoplon.span.call(null,G__242636,G__242637));
})();
var G__242624 = ") (";
var G__242625 = (function (){var G__242638 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242639 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242638,G__242639) : tailrecursion.hoplon.span.call(null,G__242638,G__242639));
})();
var G__242626 = (function (){var G__242640 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242641 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242640,G__242641) : tailrecursion.hoplon.span.call(null,G__242640,G__242641));
})();
var G__242627 = " ";
var G__242628 = (function (){var G__242642 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242643 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242642,G__242643) : tailrecursion.hoplon.span.call(null,G__242642,G__242643));
})();
var G__242629 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__242616,G__242617,G__242618,G__242619,G__242620,G__242621,G__242622,G__242623,G__242624,G__242625,G__242626,G__242627,G__242628,G__242629) : tailrecursion.hoplon.pre.call(null,G__242616,G__242617,G__242618,G__242619,G__242620,G__242621,G__242622,G__242623,G__242624,G__242625,G__242626,G__242627,G__242628,G__242629));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242614,G__242615) : tailrecursion.hoplon.div.call(null,G__242614,G__242615));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242613) : tailrecursion.hoplon.div.call(null,G__242613));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242582;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242581;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242580;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242579;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242644 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242645 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242646 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242647 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242648 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("6\n") : tailrecursion.hoplon.code.call(null,"6\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242648) : tailrecursion.hoplon.pre.call(null,G__242648));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242647;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242646;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242645;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242644;
}})()], 0)),"",(function (){var _STAR_references_STAR_242649 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242650 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242651 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242652 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242668 = (function (){var G__242669 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242670 = (function (){var G__242671 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242672 = "(";
var G__242673 = (function (){var G__242678 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242679 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242678,G__242679) : tailrecursion.hoplon.span.call(null,G__242678,G__242679));
})();
var G__242674 = (function (){var G__242680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242681 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242680,G__242681) : tailrecursion.hoplon.span.call(null,G__242680,G__242681));
})();
var G__242675 = " ";
var G__242676 = (function (){var G__242682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242683 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242682,G__242683) : tailrecursion.hoplon.span.call(null,G__242682,G__242683));
})();
var G__242677 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__242671,G__242672,G__242673,G__242674,G__242675,G__242676,G__242677) : tailrecursion.hoplon.pre.call(null,G__242671,G__242672,G__242673,G__242674,G__242675,G__242676,G__242677));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242669,G__242670) : tailrecursion.hoplon.div.call(null,G__242669,G__242670));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242668) : tailrecursion.hoplon.div.call(null,G__242668));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242652;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242651;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242650;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242649;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242684 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242685 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242686 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242687 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242688 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("a\n") : tailrecursion.hoplon.code.call(null,"a\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242688) : tailrecursion.hoplon.pre.call(null,G__242688));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242687;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242686;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242685;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242684;
}})()], 0)),"",(function (){var _STAR_references_STAR_242689 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242690 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242691 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242692 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242715 = (function (){var G__242716 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242717 = (function (){var G__242718 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242719 = "(";
var G__242720 = (function (){var G__242728 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242729 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242728,G__242729) : tailrecursion.hoplon.span.call(null,G__242728,G__242729));
})();
var G__242721 = (function (){var G__242730 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242731 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242730,G__242731) : tailrecursion.hoplon.span.call(null,G__242730,G__242731));
})();
var G__242722 = " (";
var G__242723 = (function (){var G__242732 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242733 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242732,G__242733) : tailrecursion.hoplon.span.call(null,G__242732,G__242733));
})();
var G__242724 = (function (){var G__242734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242735 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242734,G__242735) : tailrecursion.hoplon.span.call(null,G__242734,G__242735));
})();
var G__242725 = " ";
var G__242726 = (function (){var G__242736 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__242737 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242736,G__242737) : tailrecursion.hoplon.span.call(null,G__242736,G__242737));
})();
var G__242727 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10(G__242718,G__242719,G__242720,G__242721,G__242722,G__242723,G__242724,G__242725,G__242726,G__242727) : tailrecursion.hoplon.pre.call(null,G__242718,G__242719,G__242720,G__242721,G__242722,G__242723,G__242724,G__242725,G__242726,G__242727));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242716,G__242717) : tailrecursion.hoplon.div.call(null,G__242716,G__242717));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242715) : tailrecursion.hoplon.div.call(null,G__242715));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242692;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242691;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242690;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242689;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242738 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242739 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242740 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242741 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242742 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("b\n") : tailrecursion.hoplon.code.call(null,"b\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242742) : tailrecursion.hoplon.pre.call(null,G__242742));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242741;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242740;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242739;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242738;
}})()], 0)),"",(function (){var _STAR_references_STAR_242743 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242744 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242745 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242746 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242773 = (function (){var G__242774 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242775 = (function (){var G__242776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242777 = "(";
var G__242778 = (function (){var G__242788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242789 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242788,G__242789) : tailrecursion.hoplon.span.call(null,G__242788,G__242789));
})();
var G__242779 = (function (){var G__242790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242791 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242790,G__242791) : tailrecursion.hoplon.span.call(null,G__242790,G__242791));
})();
var G__242780 = " ";
var G__242781 = (function (){var G__242792 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242793 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242792,G__242793) : tailrecursion.hoplon.span.call(null,G__242792,G__242793));
})();
var G__242782 = " (";
var G__242783 = (function (){var G__242794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242795 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242794,G__242795) : tailrecursion.hoplon.span.call(null,G__242794,G__242795));
})();
var G__242784 = (function (){var G__242796 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242797 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242796,G__242797) : tailrecursion.hoplon.span.call(null,G__242796,G__242797));
})();
var G__242785 = " ";
var G__242786 = (function (){var G__242798 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242799 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242798,G__242799) : tailrecursion.hoplon.span.call(null,G__242798,G__242799));
})();
var G__242787 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__242776,G__242777,G__242778,G__242779,G__242780,G__242781,G__242782,G__242783,G__242784,G__242785,G__242786,G__242787) : tailrecursion.hoplon.pre.call(null,G__242776,G__242777,G__242778,G__242779,G__242780,G__242781,G__242782,G__242783,G__242784,G__242785,G__242786,G__242787));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242774,G__242775) : tailrecursion.hoplon.div.call(null,G__242774,G__242775));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242773) : tailrecursion.hoplon.div.call(null,G__242773));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242746;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242745;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242744;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242743;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242800 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242801 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242802 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242803 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242804 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("19\n") : tailrecursion.hoplon.code.call(null,"19\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242804) : tailrecursion.hoplon.pre.call(null,G__242804));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242803;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242802;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242801;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242800;
}})()], 0)),"",(function (){var _STAR_references_STAR_242805 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242806 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242807 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242808 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242824 = (function (){var G__242825 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242826 = (function (){var G__242827 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242828 = "(";
var G__242829 = (function (){var G__242834 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242835 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242834,G__242835) : tailrecursion.hoplon.span.call(null,G__242834,G__242835));
})();
var G__242830 = (function (){var G__242836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242837 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242836,G__242837) : tailrecursion.hoplon.span.call(null,G__242836,G__242837));
})();
var G__242831 = " ";
var G__242832 = (function (){var G__242838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242839 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242838,G__242839) : tailrecursion.hoplon.span.call(null,G__242838,G__242839));
})();
var G__242833 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__242827,G__242828,G__242829,G__242830,G__242831,G__242832,G__242833) : tailrecursion.hoplon.pre.call(null,G__242827,G__242828,G__242829,G__242830,G__242831,G__242832,G__242833));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242825,G__242826) : tailrecursion.hoplon.div.call(null,G__242825,G__242826));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242824) : tailrecursion.hoplon.div.call(null,G__242824));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242808;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242807;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242806;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242805;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242840 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242841 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242842 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242843 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242844 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("false\n") : tailrecursion.hoplon.code.call(null,"false\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242844) : tailrecursion.hoplon.pre.call(null,G__242844));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242843;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242842;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242841;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242840;
}})()], 0)),"",(function (){var _STAR_references_STAR_242845 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242846 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242847 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242848 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242898 = (function (){var G__242899 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__242900 = (function (){var G__242901 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__242902 = "(";
var G__242903 = (function (){var G__242924 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__242925 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242924,G__242925) : tailrecursion.hoplon.span.call(null,G__242924,G__242925));
})();
var G__242904 = "(";
var G__242905 = (function (){var G__242926 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242927 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242926,G__242927) : tailrecursion.hoplon.span.call(null,G__242926,G__242927));
})();
var G__242906 = "(";
var G__242907 = (function (){var G__242928 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242929 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242928,G__242929) : tailrecursion.hoplon.span.call(null,G__242928,G__242929));
})();
var G__242908 = (function (){var G__242930 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242931 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242930,G__242931) : tailrecursion.hoplon.span.call(null,G__242930,G__242931));
})();
var G__242909 = " ";
var G__242910 = (function (){var G__242932 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242933 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242932,G__242933) : tailrecursion.hoplon.span.call(null,G__242932,G__242933));
})();
var G__242911 = ") (";
var G__242912 = (function (){var G__242934 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242935 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242934,G__242935) : tailrecursion.hoplon.span.call(null,G__242934,G__242935));
})();
var G__242913 = (function (){var G__242936 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242937 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242936,G__242937) : tailrecursion.hoplon.span.call(null,G__242936,G__242937));
})();
var G__242914 = " (";
var G__242915 = (function (){var G__242938 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__242939 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242938,G__242939) : tailrecursion.hoplon.span.call(null,G__242938,G__242939));
})();
var G__242916 = (function (){var G__242940 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242941 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242940,G__242941) : tailrecursion.hoplon.span.call(null,G__242940,G__242941));
})();
var G__242917 = " ";
var G__242918 = (function (){var G__242942 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242943 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242942,G__242943) : tailrecursion.hoplon.span.call(null,G__242942,G__242943));
})();
var G__242919 = ")))\n    ";
var G__242920 = (function (){var G__242944 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242945 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242944,G__242945) : tailrecursion.hoplon.span.call(null,G__242944,G__242945));
})();
var G__242921 = "\n    ";
var G__242922 = (function (){var G__242946 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__242947 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__242946,G__242947) : tailrecursion.hoplon.span.call(null,G__242946,G__242947));
})();
var G__242923 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__242901,G__242902,G__242903,G__242904,G__242905,G__242906,G__242907,G__242908,G__242909,G__242910,G__242911,G__242912,G__242913,G__242914,G__242915,G__242916,G__242917,G__242918,G__242919,G__242920,G__242921,G__242922,G__242923) : tailrecursion.hoplon.pre.call(null,G__242901,G__242902,G__242903,G__242904,G__242905,G__242906,G__242907,G__242908,G__242909,G__242910,G__242911,G__242912,G__242913,G__242914,G__242915,G__242916,G__242917,G__242918,G__242919,G__242920,G__242921,G__242922,G__242923));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__242899,G__242900) : tailrecursion.hoplon.div.call(null,G__242899,G__242900));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__242898) : tailrecursion.hoplon.div.call(null,G__242898));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242848;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242847;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242846;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242845;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_242948 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242949 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242950 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242951 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__242952 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("4\n") : tailrecursion.hoplon.code.call(null,"4\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__242952) : tailrecursion.hoplon.pre.call(null,G__242952));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242951;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242950;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242949;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242948;
}})()], 0)),"",(function (){var _STAR_references_STAR_242953 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242954 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_242955 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_242956 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243014 = (function (){var G__243015 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243016 = (function (){var G__243017 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243018 = "(";
var G__243019 = (function (){var G__243044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243045 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243044,G__243045) : tailrecursion.hoplon.span.call(null,G__243044,G__243045));
})();
var G__243020 = "(";
var G__243021 = (function (){var G__243046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243047 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243046,G__243047) : tailrecursion.hoplon.span.call(null,G__243046,G__243047));
})();
var G__243022 = (function (){var G__243048 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243049 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243048,G__243049) : tailrecursion.hoplon.span.call(null,G__243048,G__243049));
})();
var G__243023 = " ";
var G__243024 = (function (){var G__243050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243051 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243050,G__243051) : tailrecursion.hoplon.span.call(null,G__243050,G__243051));
})();
var G__243025 = ") ";
var G__243026 = (function (){var G__243052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243053 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243052,G__243053) : tailrecursion.hoplon.span.call(null,G__243052,G__243053));
})();
var G__243027 = "\n      (";
var G__243028 = (function (){var G__243054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243055 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243054,G__243055) : tailrecursion.hoplon.span.call(null,G__243054,G__243055));
})();
var G__243029 = (function (){var G__243056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243057 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243056,G__243057) : tailrecursion.hoplon.span.call(null,G__243056,G__243057));
})();
var G__243030 = " ";
var G__243031 = (function (){var G__243058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243059 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243058,G__243059) : tailrecursion.hoplon.span.call(null,G__243058,G__243059));
})();
var G__243032 = ") (";
var G__243033 = (function (){var G__243060 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243061 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243060,G__243061) : tailrecursion.hoplon.span.call(null,G__243060,G__243061));
})();
var G__243034 = (function (){var G__243062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243063 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243062,G__243063) : tailrecursion.hoplon.span.call(null,G__243062,G__243063));
})();
var G__243035 = " ";
var G__243036 = (function (){var G__243064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243065 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243064,G__243065) : tailrecursion.hoplon.span.call(null,G__243064,G__243065));
})();
var G__243037 = " ";
var G__243038 = (function (){var G__243066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243067 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243066,G__243067) : tailrecursion.hoplon.span.call(null,G__243066,G__243067));
})();
var G__243039 = ")\n      ";
var G__243040 = (function (){var G__243068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243069 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243068,G__243069) : tailrecursion.hoplon.span.call(null,G__243068,G__243069));
})();
var G__243041 = " ";
var G__243042 = (function (){var G__243070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243071 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243070,G__243071) : tailrecursion.hoplon.span.call(null,G__243070,G__243071));
})();
var G__243043 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__243017,G__243018,G__243019,G__243020,G__243021,G__243022,G__243023,G__243024,G__243025,G__243026,G__243027,G__243028,G__243029,G__243030,G__243031,G__243032,G__243033,G__243034,G__243035,G__243036,G__243037,G__243038,G__243039,G__243040,G__243041,G__243042,G__243043) : tailrecursion.hoplon.pre.call(null,G__243017,G__243018,G__243019,G__243020,G__243021,G__243022,G__243023,G__243024,G__243025,G__243026,G__243027,G__243028,G__243029,G__243030,G__243031,G__243032,G__243033,G__243034,G__243035,G__243036,G__243037,G__243038,G__243039,G__243040,G__243041,G__243042,G__243043));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243015,G__243016) : tailrecursion.hoplon.div.call(null,G__243015,G__243016));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243014) : tailrecursion.hoplon.div.call(null,G__243014));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242956;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242955;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_242954;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_242953;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243072 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243073 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243074 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243075 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243076 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__243076) : tailrecursion.hoplon.pre.call(null,G__243076));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243075;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243074;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243073;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243072;
}})()], 0)),"",(function (){var _STAR_references_STAR_243077 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243078 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243079 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243080 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243115 = (function (){var G__243116 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243117 = (function (){var G__243118 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243119 = "(";
var G__243120 = (function (){var G__243134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243135 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243134,G__243135) : tailrecursion.hoplon.span.call(null,G__243134,G__243135));
})();
var G__243121 = (function (){var G__243136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243137 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243136,G__243137) : tailrecursion.hoplon.span.call(null,G__243136,G__243137));
})();
var G__243122 = " (";
var G__243123 = (function (){var G__243138 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243139 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243138,G__243139) : tailrecursion.hoplon.span.call(null,G__243138,G__243139));
})();
var G__243124 = "(";
var G__243125 = (function (){var G__243140 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243141 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243140,G__243141) : tailrecursion.hoplon.span.call(null,G__243140,G__243141));
})();
var G__243126 = (function (){var G__243142 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243143 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243142,G__243143) : tailrecursion.hoplon.span.call(null,G__243142,G__243143));
})();
var G__243127 = " ";
var G__243128 = (function (){var G__243144 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243145 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243144,G__243145) : tailrecursion.hoplon.span.call(null,G__243144,G__243145));
})();
var G__243129 = ") ";
var G__243130 = (function (){var G__243146 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243147 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243146,G__243147) : tailrecursion.hoplon.span.call(null,G__243146,G__243147));
})();
var G__243131 = " ";
var G__243132 = (function (){var G__243148 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243149 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243148,G__243149) : tailrecursion.hoplon.span.call(null,G__243148,G__243149));
})();
var G__243133 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__243118,G__243119,G__243120,G__243121,G__243122,G__243123,G__243124,G__243125,G__243126,G__243127,G__243128,G__243129,G__243130,G__243131,G__243132,G__243133) : tailrecursion.hoplon.pre.call(null,G__243118,G__243119,G__243120,G__243121,G__243122,G__243123,G__243124,G__243125,G__243126,G__243127,G__243128,G__243129,G__243130,G__243131,G__243132,G__243133));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243116,G__243117) : tailrecursion.hoplon.div.call(null,G__243116,G__243117));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243115) : tailrecursion.hoplon.div.call(null,G__243115));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243080;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243079;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243078;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243077;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243150 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243151 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243152 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243153 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243154 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("5\n") : tailrecursion.hoplon.code.call(null,"5\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__243154) : tailrecursion.hoplon.pre.call(null,G__243154));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243153;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243152;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243151;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243150;
}})()], 0)),"",(function (){var _STAR_references_STAR_243155 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243156 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243157 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243158 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243220 = (function (){var G__243221 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243222 = (function (){var G__243223 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243224 = "(";
var G__243225 = (function (){var G__243252 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243253 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243252,G__243253) : tailrecursion.hoplon.span.call(null,G__243252,G__243253));
})();
var G__243226 = "(";
var G__243227 = (function (){var G__243254 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243255 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243254,G__243255) : tailrecursion.hoplon.span.call(null,G__243254,G__243255));
})();
var G__243228 = "(";
var G__243229 = (function (){var G__243256 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243257 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243256,G__243257) : tailrecursion.hoplon.span.call(null,G__243256,G__243257));
})();
var G__243230 = (function (){var G__243258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243259 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243258,G__243259) : tailrecursion.hoplon.span.call(null,G__243258,G__243259));
})();
var G__243231 = " ";
var G__243232 = (function (){var G__243260 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243261 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243260,G__243261) : tailrecursion.hoplon.span.call(null,G__243260,G__243261));
})();
var G__243233 = ") ";
var G__243234 = (function (){var G__243262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243263 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243262,G__243263) : tailrecursion.hoplon.span.call(null,G__243262,G__243263));
})();
var G__243235 = "\n         (";
var G__243236 = (function (){var G__243264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243265 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243264,G__243265) : tailrecursion.hoplon.span.call(null,G__243264,G__243265));
})();
var G__243237 = (function (){var G__243266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243267 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243266,G__243267) : tailrecursion.hoplon.span.call(null,G__243266,G__243267));
})();
var G__243238 = " ";
var G__243239 = (function (){var G__243268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243269 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243268,G__243269) : tailrecursion.hoplon.span.call(null,G__243268,G__243269));
})();
var G__243240 = ") ";
var G__243241 = (function (){var G__243270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243271 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243270,G__243271) : tailrecursion.hoplon.span.call(null,G__243270,G__243271));
})();
var G__243242 = "\n         ";
var G__243243 = (function (){var G__243272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243273 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243272,G__243273) : tailrecursion.hoplon.span.call(null,G__243272,G__243273));
})();
var G__243244 = " ";
var G__243245 = (function (){var G__243274 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243275 = "-1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243274,G__243275) : tailrecursion.hoplon.span.call(null,G__243274,G__243275));
})();
var G__243246 = ")\n   (";
var G__243247 = (function (){var G__243276 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243277 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243276,G__243277) : tailrecursion.hoplon.span.call(null,G__243276,G__243277));
})();
var G__243248 = (function (){var G__243278 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243279 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243278,G__243279) : tailrecursion.hoplon.span.call(null,G__243278,G__243279));
})();
var G__243249 = " ";
var G__243250 = (function (){var G__243280 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243281 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243280,G__243281) : tailrecursion.hoplon.span.call(null,G__243280,G__243281));
})();
var G__243251 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__243223,G__243224,G__243225,G__243226,G__243227,G__243228,G__243229,G__243230,G__243231,G__243232,G__243233,G__243234,G__243235,G__243236,G__243237,G__243238,G__243239,G__243240,G__243241,G__243242,G__243243,G__243244,G__243245,G__243246,G__243247,G__243248,G__243249,G__243250,G__243251) : tailrecursion.hoplon.pre.call(null,G__243223,G__243224,G__243225,G__243226,G__243227,G__243228,G__243229,G__243230,G__243231,G__243232,G__243233,G__243234,G__243235,G__243236,G__243237,G__243238,G__243239,G__243240,G__243241,G__243242,G__243243,G__243244,G__243245,G__243246,G__243247,G__243248,G__243249,G__243250,G__243251));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243221,G__243222) : tailrecursion.hoplon.div.call(null,G__243221,G__243222));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243220) : tailrecursion.hoplon.div.call(null,G__243220));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243158;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243157;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243156;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243155;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243282 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243283 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243284 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243285 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243286 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__243286) : tailrecursion.hoplon.pre.call(null,G__243286));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243285;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243284;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243283;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243282;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243287 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243288 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243289 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243290 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243291 = cljs.core.PersistentArrayMap.EMPTY;
var G__243292 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Translate the following expression into prefix form $$\\frac{5+4+\\left(2-\\left(3-\\left(6+\\frac{4}{5}\\right)\\right)\\right)}{3(6-2)(2-7)}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243291,G__243292) : tailrecursion.hoplon.markdown.para_node.call(null,G__243291,G__243292));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243290;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243289;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243288;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243287;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243293 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243294 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243295 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243296 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243377 = (function (){var G__243378 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243379 = (function (){var G__243380 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243381 = "(";
var G__243382 = (function (){var G__243416 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243417 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243416,G__243417) : tailrecursion.hoplon.span.call(null,G__243416,G__243417));
})();
var G__243383 = "(";
var G__243384 = (function (){var G__243418 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243419 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243418,G__243419) : tailrecursion.hoplon.span.call(null,G__243418,G__243419));
})();
var G__243385 = (function (){var G__243420 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243421 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243420,G__243421) : tailrecursion.hoplon.span.call(null,G__243420,G__243421));
})();
var G__243386 = " ";
var G__243387 = (function (){var G__243422 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243423 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243422,G__243423) : tailrecursion.hoplon.span.call(null,G__243422,G__243423));
})();
var G__243388 = " (";
var G__243389 = (function (){var G__243424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243425 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243424,G__243425) : tailrecursion.hoplon.span.call(null,G__243424,G__243425));
})();
var G__243390 = (function (){var G__243426 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243427 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243426,G__243427) : tailrecursion.hoplon.span.call(null,G__243426,G__243427));
})();
var G__243391 = " (";
var G__243392 = (function (){var G__243428 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243429 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243428,G__243429) : tailrecursion.hoplon.span.call(null,G__243428,G__243429));
})();
var G__243393 = (function (){var G__243430 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243431 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243430,G__243431) : tailrecursion.hoplon.span.call(null,G__243430,G__243431));
})();
var G__243394 = " (";
var G__243395 = (function (){var G__243432 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243433 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243432,G__243433) : tailrecursion.hoplon.span.call(null,G__243432,G__243433));
})();
var G__243396 = (function (){var G__243434 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243435 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243434,G__243435) : tailrecursion.hoplon.span.call(null,G__243434,G__243435));
})();
var G__243397 = " (";
var G__243398 = (function (){var G__243436 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243437 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243436,G__243437) : tailrecursion.hoplon.span.call(null,G__243436,G__243437));
})();
var G__243399 = (function (){var G__243438 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243439 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243438,G__243439) : tailrecursion.hoplon.span.call(null,G__243438,G__243439));
})();
var G__243400 = " ";
var G__243401 = (function (){var G__243440 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243441 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243440,G__243441) : tailrecursion.hoplon.span.call(null,G__243440,G__243441));
})();
var G__243402 = "))))) \n   (";
var G__243403 = (function (){var G__243442 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243443 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243442,G__243443) : tailrecursion.hoplon.span.call(null,G__243442,G__243443));
})();
var G__243404 = (function (){var G__243444 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243445 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243444,G__243445) : tailrecursion.hoplon.span.call(null,G__243444,G__243445));
})();
var G__243405 = " (";
var G__243406 = (function (){var G__243446 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243447 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243446,G__243447) : tailrecursion.hoplon.span.call(null,G__243446,G__243447));
})();
var G__243407 = (function (){var G__243448 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243449 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243448,G__243449) : tailrecursion.hoplon.span.call(null,G__243448,G__243449));
})();
var G__243408 = " ";
var G__243409 = (function (){var G__243450 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243451 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243450,G__243451) : tailrecursion.hoplon.span.call(null,G__243450,G__243451));
})();
var G__243410 = ") (";
var G__243411 = (function (){var G__243452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243453 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243452,G__243453) : tailrecursion.hoplon.span.call(null,G__243452,G__243453));
})();
var G__243412 = (function (){var G__243454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243455 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243454,G__243455) : tailrecursion.hoplon.span.call(null,G__243454,G__243455));
})();
var G__243413 = " ";
var G__243414 = (function (){var G__243456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243457 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243456,G__243457) : tailrecursion.hoplon.span.call(null,G__243456,G__243457));
})();
var G__243415 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__243380,G__243381,G__243382,G__243383,G__243384,G__243385,G__243386,G__243387,G__243388,G__243389,G__243390,G__243391,G__243392,G__243393,G__243394,G__243395,G__243396,G__243397,G__243398,G__243399,G__243400,G__243401,G__243402,G__243403,G__243404,G__243405,G__243406,G__243407,G__243408,G__243409,G__243410,G__243411,G__243412,G__243413,G__243414,G__243415) : tailrecursion.hoplon.pre.call(null,G__243380,G__243381,G__243382,G__243383,G__243384,G__243385,G__243386,G__243387,G__243388,G__243389,G__243390,G__243391,G__243392,G__243393,G__243394,G__243395,G__243396,G__243397,G__243398,G__243399,G__243400,G__243401,G__243402,G__243403,G__243404,G__243405,G__243406,G__243407,G__243408,G__243409,G__243410,G__243411,G__243412,G__243413,G__243414,G__243415));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243378,G__243379) : tailrecursion.hoplon.div.call(null,G__243378,G__243379));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243377) : tailrecursion.hoplon.div.call(null,G__243377));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243296;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243295;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243294;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243293;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243458 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243459 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243460 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243461 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243462 = cljs.core.PersistentArrayMap.EMPTY;
var G__243463 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243462,G__243463) : tailrecursion.hoplon.markdown.para_node.call(null,G__243462,G__243463));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243461;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243460;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243459;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243458;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243464 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243465 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243466 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243467 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243611 = (function (){var G__243612 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243613 = (function (){var G__243614 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243615 = "(";
var G__243616 = (function (){var G__243683 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243684 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243683,G__243684) : tailrecursion.hoplon.span.call(null,G__243683,G__243684));
})();
var G__243617 = (function (){var G__243685 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243686 = "sum-of-largest-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243685,G__243686) : tailrecursion.hoplon.span.call(null,G__243685,G__243686));
})();
var G__243618 = " [";
var G__243619 = (function (){var G__243687 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243688 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243687,G__243688) : tailrecursion.hoplon.span.call(null,G__243687,G__243688));
})();
var G__243620 = " ";
var G__243621 = (function (){var G__243689 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243690 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243689,G__243690) : tailrecursion.hoplon.span.call(null,G__243689,G__243690));
})();
var G__243622 = " ";
var G__243623 = (function (){var G__243691 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243692 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243691,G__243692) : tailrecursion.hoplon.span.call(null,G__243691,G__243692));
})();
var G__243624 = "]\n  (";
var G__243625 = (function (){var G__243693 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243694 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243693,G__243694) : tailrecursion.hoplon.span.call(null,G__243693,G__243694));
})();
var G__243626 = "(";
var G__243627 = (function (){var G__243695 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243696 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243695,G__243696) : tailrecursion.hoplon.span.call(null,G__243695,G__243696));
})();
var G__243628 = "(";
var G__243629 = (function (){var G__243697 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243698 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243697,G__243698) : tailrecursion.hoplon.span.call(null,G__243697,G__243698));
})();
var G__243630 = (function (){var G__243699 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243700 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243699,G__243700) : tailrecursion.hoplon.span.call(null,G__243699,G__243700));
})();
var G__243631 = " ";
var G__243632 = (function (){var G__243701 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243702 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243701,G__243702) : tailrecursion.hoplon.span.call(null,G__243701,G__243702));
})();
var G__243633 = ") (";
var G__243634 = (function (){var G__243703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243704 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243703,G__243704) : tailrecursion.hoplon.span.call(null,G__243703,G__243704));
})();
var G__243635 = (function (){var G__243705 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243706 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243705,G__243706) : tailrecursion.hoplon.span.call(null,G__243705,G__243706));
})();
var G__243636 = " ";
var G__243637 = (function (){var G__243707 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243708 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243707,G__243708) : tailrecursion.hoplon.span.call(null,G__243707,G__243708));
})();
var G__243638 = ")) (";
var G__243639 = (function (){var G__243709 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243710 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243709,G__243710) : tailrecursion.hoplon.span.call(null,G__243709,G__243710));
})();
var G__243640 = "(";
var G__243641 = (function (){var G__243711 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243712 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243711,G__243712) : tailrecursion.hoplon.span.call(null,G__243711,G__243712));
})();
var G__243642 = " ";
var G__243643 = (function (){var G__243713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243714 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243713,G__243714) : tailrecursion.hoplon.span.call(null,G__243713,G__243714));
})();
var G__243644 = ") (";
var G__243645 = (function (){var G__243715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243716 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243715,G__243716) : tailrecursion.hoplon.span.call(null,G__243715,G__243716));
})();
var G__243646 = " ";
var G__243647 = (function (){var G__243717 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243718 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243717,G__243718) : tailrecursion.hoplon.span.call(null,G__243717,G__243718));
})();
var G__243648 = "))\n        (";
var G__243649 = (function (){var G__243719 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243720 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243719,G__243720) : tailrecursion.hoplon.span.call(null,G__243719,G__243720));
})();
var G__243650 = "(";
var G__243651 = (function (){var G__243721 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243722 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243721,G__243722) : tailrecursion.hoplon.span.call(null,G__243721,G__243722));
})();
var G__243652 = (function (){var G__243723 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243724 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243723,G__243724) : tailrecursion.hoplon.span.call(null,G__243723,G__243724));
})();
var G__243653 = " ";
var G__243654 = (function (){var G__243725 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243726 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243725,G__243726) : tailrecursion.hoplon.span.call(null,G__243725,G__243726));
})();
var G__243655 = ") (";
var G__243656 = (function (){var G__243727 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243728 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243727,G__243728) : tailrecursion.hoplon.span.call(null,G__243727,G__243728));
})();
var G__243657 = (function (){var G__243729 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243730 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243729,G__243730) : tailrecursion.hoplon.span.call(null,G__243729,G__243730));
})();
var G__243658 = " ";
var G__243659 = (function (){var G__243731 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243732 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243731,G__243732) : tailrecursion.hoplon.span.call(null,G__243731,G__243732));
})();
var G__243660 = ")) (";
var G__243661 = (function (){var G__243733 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243734 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243733,G__243734) : tailrecursion.hoplon.span.call(null,G__243733,G__243734));
})();
var G__243662 = "(";
var G__243663 = (function (){var G__243735 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243736 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243735,G__243736) : tailrecursion.hoplon.span.call(null,G__243735,G__243736));
})();
var G__243664 = " ";
var G__243665 = (function (){var G__243737 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243738 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243737,G__243738) : tailrecursion.hoplon.span.call(null,G__243737,G__243738));
})();
var G__243666 = ") (";
var G__243667 = (function (){var G__243739 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243740 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243739,G__243740) : tailrecursion.hoplon.span.call(null,G__243739,G__243740));
})();
var G__243668 = " ";
var G__243669 = (function (){var G__243741 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243742 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243741,G__243742) : tailrecursion.hoplon.span.call(null,G__243741,G__243742));
})();
var G__243670 = "))\n        ";
var G__243671 = (function (){var G__243743 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243744 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243743,G__243744) : tailrecursion.hoplon.span.call(null,G__243743,G__243744));
})();
var G__243672 = " (";
var G__243673 = (function (){var G__243745 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243746 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243745,G__243746) : tailrecursion.hoplon.span.call(null,G__243745,G__243746));
})();
var G__243674 = "(";
var G__243675 = (function (){var G__243747 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243748 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243747,G__243748) : tailrecursion.hoplon.span.call(null,G__243747,G__243748));
})();
var G__243676 = " ";
var G__243677 = (function (){var G__243749 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243750 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243749,G__243750) : tailrecursion.hoplon.span.call(null,G__243749,G__243750));
})();
var G__243678 = ") (";
var G__243679 = (function (){var G__243751 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243752 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243751,G__243752) : tailrecursion.hoplon.span.call(null,G__243751,G__243752));
})();
var G__243680 = " ";
var G__243681 = (function (){var G__243753 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243754 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243753,G__243754) : tailrecursion.hoplon.span.call(null,G__243753,G__243754));
})();
var G__243682 = "))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69(G__243614,G__243615,G__243616,G__243617,G__243618,G__243619,G__243620,G__243621,G__243622,G__243623,G__243624,G__243625,G__243626,G__243627,G__243628,G__243629,G__243630,G__243631,G__243632,G__243633,G__243634,G__243635,G__243636,G__243637,G__243638,G__243639,G__243640,G__243641,G__243642,G__243643,G__243644,G__243645,G__243646,G__243647,G__243648,G__243649,G__243650,G__243651,G__243652,G__243653,G__243654,G__243655,G__243656,G__243657,G__243658,G__243659,G__243660,G__243661,G__243662,G__243663,G__243664,G__243665,G__243666,G__243667,G__243668,G__243669,G__243670,G__243671,G__243672,G__243673,G__243674,G__243675,G__243676,G__243677,G__243678,G__243679,G__243680,G__243681,G__243682) : tailrecursion.hoplon.pre.call(null,G__243614,G__243615,G__243616,G__243617,G__243618,G__243619,G__243620,G__243621,G__243622,G__243623,G__243624,G__243625,G__243626,G__243627,G__243628,G__243629,G__243630,G__243631,G__243632,G__243633,G__243634,G__243635,G__243636,G__243637,G__243638,G__243639,G__243640,G__243641,G__243642,G__243643,G__243644,G__243645,G__243646,G__243647,G__243648,G__243649,G__243650,G__243651,G__243652,G__243653,G__243654,G__243655,G__243656,G__243657,G__243658,G__243659,G__243660,G__243661,G__243662,G__243663,G__243664,G__243665,G__243666,G__243667,G__243668,G__243669,G__243670,G__243671,G__243672,G__243673,G__243674,G__243675,G__243676,G__243677,G__243678,G__243679,G__243680,G__243681,G__243682));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243612,G__243613) : tailrecursion.hoplon.div.call(null,G__243612,G__243613));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243611) : tailrecursion.hoplon.div.call(null,G__243611));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243467;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243466;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243465;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243464;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243755 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243756 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243757 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243758 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243759 = cljs.core.PersistentArrayMap.EMPTY;
var G__243760 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243759,G__243760) : tailrecursion.hoplon.markdown.para_node.call(null,G__243759,G__243760));
})(),(function (){var G__243810 = (function (){var G__243811 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243812 = (function (){var G__243813 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243814 = "(";
var G__243815 = (function (){var G__243836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243837 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243836,G__243837) : tailrecursion.hoplon.span.call(null,G__243836,G__243837));
})();
var G__243816 = (function (){var G__243838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243839 = "a-plus-abs-b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243838,G__243839) : tailrecursion.hoplon.span.call(null,G__243838,G__243839));
})();
var G__243817 = " [";
var G__243818 = (function (){var G__243840 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243841 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243840,G__243841) : tailrecursion.hoplon.span.call(null,G__243840,G__243841));
})();
var G__243819 = " ";
var G__243820 = (function (){var G__243842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243843 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243842,G__243843) : tailrecursion.hoplon.span.call(null,G__243842,G__243843));
})();
var G__243821 = "]\n  ((";
var G__243822 = (function (){var G__243844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243845 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243844,G__243845) : tailrecursion.hoplon.span.call(null,G__243844,G__243845));
})();
var G__243823 = "(";
var G__243824 = (function (){var G__243846 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243847 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243846,G__243847) : tailrecursion.hoplon.span.call(null,G__243846,G__243847));
})();
var G__243825 = (function (){var G__243848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243849 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243848,G__243849) : tailrecursion.hoplon.span.call(null,G__243848,G__243849));
})();
var G__243826 = " ";
var G__243827 = (function (){var G__243850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__243851 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243850,G__243851) : tailrecursion.hoplon.span.call(null,G__243850,G__243851));
})();
var G__243828 = ") ";
var G__243829 = (function (){var G__243852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243853 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243852,G__243853) : tailrecursion.hoplon.span.call(null,G__243852,G__243853));
})();
var G__243830 = (function (){var G__243854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243855 = "-";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243854,G__243855) : tailrecursion.hoplon.span.call(null,G__243854,G__243855));
})();
var G__243831 = ") ";
var G__243832 = (function (){var G__243856 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243857 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243856,G__243857) : tailrecursion.hoplon.span.call(null,G__243856,G__243857));
})();
var G__243833 = " ";
var G__243834 = (function (){var G__243858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243859 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243858,G__243859) : tailrecursion.hoplon.span.call(null,G__243858,G__243859));
})();
var G__243835 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__243813,G__243814,G__243815,G__243816,G__243817,G__243818,G__243819,G__243820,G__243821,G__243822,G__243823,G__243824,G__243825,G__243826,G__243827,G__243828,G__243829,G__243830,G__243831,G__243832,G__243833,G__243834,G__243835) : tailrecursion.hoplon.pre.call(null,G__243813,G__243814,G__243815,G__243816,G__243817,G__243818,G__243819,G__243820,G__243821,G__243822,G__243823,G__243824,G__243825,G__243826,G__243827,G__243828,G__243829,G__243830,G__243831,G__243832,G__243833,G__243834,G__243835));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243811,G__243812) : tailrecursion.hoplon.div.call(null,G__243811,G__243812));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243810) : tailrecursion.hoplon.div.call(null,G__243810));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243758;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243757;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243756;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243755;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243860 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243861 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243862 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243863 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243864 = cljs.core.PersistentArrayMap.EMPTY;
var G__243865 = new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It returns ",(function (){var G__243866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__243867 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243866,G__243867) : tailrecursion.hoplon.markdown.code_node.call(null,G__243866,G__243867));
})(),". Note: if ",(function (){var G__243868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(> b 0)"], null);
var G__243869 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243868,G__243869) : tailrecursion.hoplon.markdown.code_node.call(null,G__243868,G__243869));
})(),", then ",(function (){var G__243870 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) b)"], null);
var G__243871 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243870,G__243871) : tailrecursion.hoplon.markdown.code_node.call(null,G__243870,G__243871));
})(),", so ",(function (){var G__243872 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__243873 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243872,G__243873) : tailrecursion.hoplon.markdown.code_node.call(null,G__243872,G__243873));
})()," would be ",(function (){var G__243874 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a b)"], null);
var G__243875 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243874,G__243875) : tailrecursion.hoplon.markdown.code_node.call(null,G__243874,G__243875));
})(),", just as this function gives us. Alternatively, if ",(function (){var G__243876 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(not (> b 0))"], null);
var G__243877 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243876,G__243877) : tailrecursion.hoplon.markdown.code_node.call(null,G__243876,G__243877));
})(),", then b is negative and ",(function (){var G__243878 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) (- b))"], null);
var G__243879 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243878,G__243879) : tailrecursion.hoplon.markdown.code_node.call(null,G__243878,G__243879));
})()," which means, ",(function (){var G__243880 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__243881 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243880,G__243881) : tailrecursion.hoplon.markdown.code_node.call(null,G__243880,G__243881));
})()," is ",(function (){var G__243882 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (- b))"], null);
var G__243883 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243882,G__243883) : tailrecursion.hoplon.markdown.code_node.call(null,G__243882,G__243883));
})()," which is really just ",(function (){var G__243884 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- a b)"], null);
var G__243885 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__243884,G__243885) : tailrecursion.hoplon.markdown.code_node.call(null,G__243884,G__243885));
})()," as our function above gives us."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243864,G__243865) : tailrecursion.hoplon.markdown.para_node.call(null,G__243864,G__243865));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243863;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243862;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243861;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243860;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_243886 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243887 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_243888 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_243889 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__243890 = cljs.core.PersistentArrayMap.EMPTY;
var G__243891 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243890,G__243891) : tailrecursion.hoplon.markdown.para_node.call(null,G__243890,G__243891));
})(),(function (){var G__243907 = (function (){var G__243908 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243909 = (function (){var G__243910 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243911 = "(";
var G__243912 = (function (){var G__243917 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243918 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243917,G__243918) : tailrecursion.hoplon.span.call(null,G__243917,G__243918));
})();
var G__243913 = (function (){var G__243919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243920 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243919,G__243920) : tailrecursion.hoplon.span.call(null,G__243919,G__243920));
})();
var G__243914 = " [] (";
var G__243915 = (function (){var G__243921 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__243922 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243921,G__243922) : tailrecursion.hoplon.span.call(null,G__243921,G__243922));
})();
var G__243916 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__243910,G__243911,G__243912,G__243913,G__243914,G__243915,G__243916) : tailrecursion.hoplon.pre.call(null,G__243910,G__243911,G__243912,G__243913,G__243914,G__243915,G__243916));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243908,G__243909) : tailrecursion.hoplon.div.call(null,G__243908,G__243909));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243907) : tailrecursion.hoplon.div.call(null,G__243907));
})(),(function (){var G__243923 = cljs.core.PersistentArrayMap.EMPTY;
var G__243924 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__243923,G__243924) : tailrecursion.hoplon.markdown.para_node.call(null,G__243923,G__243924));
})(),(function (){var G__243967 = (function (){var G__243968 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__243969 = (function (){var G__243970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__243971 = "(";
var G__243972 = (function (){var G__243990 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243991 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243990,G__243991) : tailrecursion.hoplon.span.call(null,G__243990,G__243991));
})();
var G__243973 = (function (){var G__243992 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__243993 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243992,G__243993) : tailrecursion.hoplon.span.call(null,G__243992,G__243993));
})();
var G__243974 = "[";
var G__243975 = (function (){var G__243994 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243995 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243994,G__243995) : tailrecursion.hoplon.span.call(null,G__243994,G__243995));
})();
var G__243976 = " ";
var G__243977 = (function (){var G__243996 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__243997 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243996,G__243997) : tailrecursion.hoplon.span.call(null,G__243996,G__243997));
})();
var G__243978 = "]\n   (";
var G__243979 = (function (){var G__243998 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__243999 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__243998,G__243999) : tailrecursion.hoplon.span.call(null,G__243998,G__243999));
})();
var G__243980 = "(";
var G__243981 = (function (){var G__244000 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244001 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244000,G__244001) : tailrecursion.hoplon.span.call(null,G__244000,G__244001));
})();
var G__243982 = (function (){var G__244002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244003 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244002,G__244003) : tailrecursion.hoplon.span.call(null,G__244002,G__244003));
})();
var G__243983 = " ";
var G__243984 = (function (){var G__244004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244005 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244004,G__244005) : tailrecursion.hoplon.span.call(null,G__244004,G__244005));
})();
var G__243985 = ")\n   ";
var G__243986 = (function (){var G__244006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244007 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244006,G__244007) : tailrecursion.hoplon.span.call(null,G__244006,G__244007));
})();
var G__243987 = "\n   ";
var G__243988 = (function (){var G__244008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244009 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244008,G__244009) : tailrecursion.hoplon.span.call(null,G__244008,G__244009));
})();
var G__243989 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__243970,G__243971,G__243972,G__243973,G__243974,G__243975,G__243976,G__243977,G__243978,G__243979,G__243980,G__243981,G__243982,G__243983,G__243984,G__243985,G__243986,G__243987,G__243988,G__243989) : tailrecursion.hoplon.pre.call(null,G__243970,G__243971,G__243972,G__243973,G__243974,G__243975,G__243976,G__243977,G__243978,G__243979,G__243980,G__243981,G__243982,G__243983,G__243984,G__243985,G__243986,G__243987,G__243988,G__243989));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__243968,G__243969) : tailrecursion.hoplon.div.call(null,G__243968,G__243969));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__243967) : tailrecursion.hoplon.div.call(null,G__243967));
})(),(function (){var G__244010 = cljs.core.PersistentArrayMap.EMPTY;
var G__244011 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then he evaluates the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244010,G__244011) : tailrecursion.hoplon.markdown.para_node.call(null,G__244010,G__244011));
})(),(function (){var G__244027 = (function (){var G__244028 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244029 = (function (){var G__244030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244031 = "(";
var G__244032 = (function (){var G__244037 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244038 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244037,G__244038) : tailrecursion.hoplon.span.call(null,G__244037,G__244038));
})();
var G__244033 = (function (){var G__244039 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244040 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244039,G__244040) : tailrecursion.hoplon.span.call(null,G__244039,G__244040));
})();
var G__244034 = " (";
var G__244035 = (function (){var G__244041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244042 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244041,G__244042) : tailrecursion.hoplon.span.call(null,G__244041,G__244042));
})();
var G__244036 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__244030,G__244031,G__244032,G__244033,G__244034,G__244035,G__244036) : tailrecursion.hoplon.pre.call(null,G__244030,G__244031,G__244032,G__244033,G__244034,G__244035,G__244036));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244028,G__244029) : tailrecursion.hoplon.div.call(null,G__244028,G__244029));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244027) : tailrecursion.hoplon.div.call(null,G__244027));
})(),(function (){var G__244043 = cljs.core.PersistentArrayMap.EMPTY;
var G__244044 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244043,G__244044) : tailrecursion.hoplon.markdown.para_node.call(null,G__244043,G__244044));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243889;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243888;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_243887;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_243886;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_244045 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_244046 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_244047 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_244048 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__244049 = cljs.core.PersistentArrayMap.EMPTY;
var G__244050 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__244051 = cljs.core.PersistentArrayMap.EMPTY;
var G__244052 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__244053 = cljs.core.PersistentArrayMap.EMPTY;
var G__244054 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With normal order evaluation it compiles just as one  might expect: first the function itself is unraveled,  finding that it is an ",(function (){var G__244055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__244056 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244055,G__244056) : tailrecursion.hoplon.markdown.code_node.call(null,G__244055,G__244056));
})()," statement, then the ",(function (){var G__244057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__244058 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__244057,G__244058) : tailrecursion.hoplon.markdown.code_node.call(null,G__244057,G__244058));
})(),"  statement is evaluated according to its own rules.  Finding that the first argument is 0, it returns 0."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244053,G__244054) : tailrecursion.hoplon.markdown.para_node.call(null,G__244053,G__244054));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__244051,G__244052) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__244051,G__244052));
})(),(function (){var G__244059 = cljs.core.PersistentArrayMap.EMPTY;
var G__244060 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_244061 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_244062 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__244063 = cljs.core.PersistentArrayMap.EMPTY;
var G__244064 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With applicative order evaluation the story is a bit more  interesting. Since the arguments to a function are always  evaluated first in applicative order evaluation, the  compiler would attempt to evaluate both the first and  second arguments and hence fall into an infinite loop  in the attempt to evaluate the second argument."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244063,G__244064) : tailrecursion.hoplon.markdown.para_node.call(null,G__244063,G__244064));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_244062;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_244061;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__244059,G__244060) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__244059,G__244060));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__244049,G__244050) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__244049,G__244050));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_244048;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_244047;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_244046;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_244045;
}})()], 0))], 0))], 0));
var G__239916 = "";
var G__239917 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Example: Square Roots by Newton's Method"], null),(function (){var _STAR_references_STAR_244065 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_244066 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_244067 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_244068 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__244069 = cljs.core.PersistentArrayMap.EMPTY;
var G__244070 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Procedures, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer procedures. Procedures must be effective. As a case in point, consider the problem of computing square roots. We can define the square-root function as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244069,G__244070) : tailrecursion.hoplon.markdown.para_node.call(null,G__244069,G__244070));
})(),(function (){var G__244071 = cljs.core.PersistentArrayMap.EMPTY;
var G__244072 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\sqrt x = \\text{ the } y \\text{ such that } y\\geq 0 \\text{ and } y^2 = x $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244071,G__244072) : tailrecursion.hoplon.markdown.para_node.call(null,G__244071,G__244072));
})(),(function (){var G__244073 = cljs.core.PersistentArrayMap.EMPTY;
var G__244074 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a procedure. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-Lisp: "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244073,G__244074) : tailrecursion.hoplon.markdown.para_node.call(null,G__244073,G__244074));
})(),(function (){var G__244129 = (function (){var G__244130 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244131 = (function (){var G__244132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244133 = "(";
var G__244134 = (function (){var G__244158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244159 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244158,G__244159) : tailrecursion.hoplon.span.call(null,G__244158,G__244159));
})();
var G__244135 = (function (){var G__244160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244161 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244160,G__244161) : tailrecursion.hoplon.span.call(null,G__244160,G__244161));
})();
var G__244136 = " [";
var G__244137 = (function (){var G__244162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244163 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244162,G__244163) : tailrecursion.hoplon.span.call(null,G__244162,G__244163));
})();
var G__244138 = "] \n  (";
var G__244139 = (function (){var G__244164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244165 = "the";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244164,G__244165) : tailrecursion.hoplon.span.call(null,G__244164,G__244165));
})();
var G__244140 = " ";
var G__244141 = (function (){var G__244166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244167 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244166,G__244167) : tailrecursion.hoplon.span.call(null,G__244166,G__244167));
})();
var G__244142 = " (";
var G__244143 = (function (){var G__244168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244169 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244168,G__244169) : tailrecursion.hoplon.span.call(null,G__244168,G__244169));
})();
var G__244144 = "(";
var G__244145 = (function (){var G__244170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244171 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244170,G__244171) : tailrecursion.hoplon.span.call(null,G__244170,G__244171));
})();
var G__244146 = (function (){var G__244172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244173 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244172,G__244173) : tailrecursion.hoplon.span.call(null,G__244172,G__244173));
})();
var G__244147 = " ";
var G__244148 = (function (){var G__244174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244175 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244174,G__244175) : tailrecursion.hoplon.span.call(null,G__244174,G__244175));
})();
var G__244149 = ") \n              (";
var G__244150 = (function (){var G__244176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244177 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244176,G__244177) : tailrecursion.hoplon.span.call(null,G__244176,G__244177));
})();
var G__244151 = "(";
var G__244152 = (function (){var G__244178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244179 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244178,G__244179) : tailrecursion.hoplon.span.call(null,G__244178,G__244179));
})();
var G__244153 = " ";
var G__244154 = (function (){var G__244180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244181 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244180,G__244181) : tailrecursion.hoplon.span.call(null,G__244180,G__244181));
})();
var G__244155 = ") ";
var G__244156 = (function (){var G__244182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244183 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244182,G__244183) : tailrecursion.hoplon.span.call(null,G__244182,G__244183));
})();
var G__244157 = ")))) \n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26(G__244132,G__244133,G__244134,G__244135,G__244136,G__244137,G__244138,G__244139,G__244140,G__244141,G__244142,G__244143,G__244144,G__244145,G__244146,G__244147,G__244148,G__244149,G__244150,G__244151,G__244152,G__244153,G__244154,G__244155,G__244156,G__244157) : tailrecursion.hoplon.pre.call(null,G__244132,G__244133,G__244134,G__244135,G__244136,G__244137,G__244138,G__244139,G__244140,G__244141,G__244142,G__244143,G__244144,G__244145,G__244146,G__244147,G__244148,G__244149,G__244150,G__244151,G__244152,G__244153,G__244154,G__244155,G__244156,G__244157));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244130,G__244131) : tailrecursion.hoplon.div.call(null,G__244130,G__244131));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244129) : tailrecursion.hoplon.div.call(null,G__244129));
})(),(function (){var G__244184 = cljs.core.PersistentArrayMap.EMPTY;
var G__244185 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This only begs the question. The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.",(function (){var G__244186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__244187 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is ",(function (){var G__244188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__244189 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["correct"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244188,G__244189) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244188,G__244189));
})()," is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given ",(function (){var G__244190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__244191 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["what is"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244190,G__244191) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244190,G__244191));
})()," knowledge specified by the programmer, they can generate ",(function (){var G__244192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__244193 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how to"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244192,G__244193) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244192,G__244193));
})()," knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in chapter 4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244186,G__244187) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244186,G__244187));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244184,G__244185) : tailrecursion.hoplon.markdown.para_node.call(null,G__244184,G__244185));
})(),(function (){var G__244194 = cljs.core.PersistentArrayMap.EMPTY;
var G__244195 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How does one compute square roots? The most common way is to use Newton",(function (){var G__244196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244197 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244196,G__244197) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244196,G__244197));
})(),"s method of successive approximations, which says that whenever we have a guess y for the value of the square root of a number x, we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging y with x/y.",(function (){var G__244198 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__244199 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This square-root algorithm is actually a special case of Newton",(function (){var G__244200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244201 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244200,G__244201) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244200,G__244201));
})(),"s method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century A.D. We will see how to express the general Newton",(function (){var G__244202 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244203 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244202,G__244203) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244202,G__244203));
})(),"s method as a Lisp procedure in section 1.3.4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244198,G__244199) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244198,G__244199));
})()," For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244194,G__244195) : tailrecursion.hoplon.markdown.para_node.call(null,G__244194,G__244195));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_244068;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_244067;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_244066;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_244065;
}})(),"",(function (){var G__244204 = cljs.core.PersistentArrayMap.EMPTY;
var G__244205 = (function (){var G__244210 = cljs.core.PersistentArrayMap.EMPTY;
var G__244211 = (function (){var G__244214 = cljs.core.PersistentArrayMap.EMPTY;
var G__244215 = "Guess ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244214,G__244215) : tailrecursion.hoplon.td.call(null,G__244214,G__244215));
})();
var G__244212 = (function (){var G__244216 = cljs.core.PersistentArrayMap.EMPTY;
var G__244217 = "Quotient ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244216,G__244217) : tailrecursion.hoplon.td.call(null,G__244216,G__244217));
})();
var G__244213 = (function (){var G__244218 = cljs.core.PersistentArrayMap.EMPTY;
var G__244219 = "Average ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244218,G__244219) : tailrecursion.hoplon.td.call(null,G__244218,G__244219));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__244210,G__244211,G__244212,G__244213) : tailrecursion.hoplon.tr.call(null,G__244210,G__244211,G__244212,G__244213));
})();
var G__244206 = (function (){var G__244220 = cljs.core.PersistentArrayMap.EMPTY;
var G__244221 = (function (){var G__244224 = cljs.core.PersistentArrayMap.EMPTY;
var G__244225 = "1 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244224,G__244225) : tailrecursion.hoplon.td.call(null,G__244224,G__244225));
})();
var G__244222 = (function (){var G__244226 = cljs.core.PersistentArrayMap.EMPTY;
var G__244227 = "(2/1) = 2 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244226,G__244227) : tailrecursion.hoplon.td.call(null,G__244226,G__244227));
})();
var G__244223 = (function (){var G__244228 = cljs.core.PersistentArrayMap.EMPTY;
var G__244229 = "((2+1)/2) = 1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244228,G__244229) : tailrecursion.hoplon.td.call(null,G__244228,G__244229));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__244220,G__244221,G__244222,G__244223) : tailrecursion.hoplon.tr.call(null,G__244220,G__244221,G__244222,G__244223));
})();
var G__244207 = (function (){var G__244230 = cljs.core.PersistentArrayMap.EMPTY;
var G__244231 = (function (){var G__244234 = cljs.core.PersistentArrayMap.EMPTY;
var G__244235 = "1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244234,G__244235) : tailrecursion.hoplon.td.call(null,G__244234,G__244235));
})();
var G__244232 = (function (){var G__244236 = cljs.core.PersistentArrayMap.EMPTY;
var G__244237 = "(2/1.5) = 1.333...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244236,G__244237) : tailrecursion.hoplon.td.call(null,G__244236,G__244237));
})();
var G__244233 = (function (){var G__244238 = cljs.core.PersistentArrayMap.EMPTY;
var G__244239 = "((1.333... + 1.5)/2) = 1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244238,G__244239) : tailrecursion.hoplon.td.call(null,G__244238,G__244239));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__244230,G__244231,G__244232,G__244233) : tailrecursion.hoplon.tr.call(null,G__244230,G__244231,G__244232,G__244233));
})();
var G__244208 = (function (){var G__244240 = cljs.core.PersistentArrayMap.EMPTY;
var G__244241 = (function (){var G__244244 = cljs.core.PersistentArrayMap.EMPTY;
var G__244245 = "1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244244,G__244245) : tailrecursion.hoplon.td.call(null,G__244244,G__244245));
})();
var G__244242 = (function (){var G__244246 = cljs.core.PersistentArrayMap.EMPTY;
var G__244247 = "(2/1.4167) = 1.4118 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244246,G__244247) : tailrecursion.hoplon.td.call(null,G__244246,G__244247));
})();
var G__244243 = (function (){var G__244248 = cljs.core.PersistentArrayMap.EMPTY;
var G__244249 = "((1.4167 + 1.4118)/2) = 1.4142 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244248,G__244249) : tailrecursion.hoplon.td.call(null,G__244248,G__244249));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__244240,G__244241,G__244242,G__244243) : tailrecursion.hoplon.tr.call(null,G__244240,G__244241,G__244242,G__244243));
})();
var G__244209 = (function (){var G__244250 = cljs.core.PersistentArrayMap.EMPTY;
var G__244251 = (function (){var G__244254 = cljs.core.PersistentArrayMap.EMPTY;
var G__244255 = "1.4142...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244254,G__244255) : tailrecursion.hoplon.td.call(null,G__244254,G__244255));
})();
var G__244252 = (function (){var G__244256 = cljs.core.PersistentArrayMap.EMPTY;
var G__244257 = "...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244256,G__244257) : tailrecursion.hoplon.td.call(null,G__244256,G__244257));
})();
var G__244253 = (function (){var G__244258 = cljs.core.PersistentArrayMap.EMPTY;
var G__244259 = "...";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__244258,G__244259) : tailrecursion.hoplon.td.call(null,G__244258,G__244259));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__244250,G__244251,G__244252,G__244253) : tailrecursion.hoplon.tr.call(null,G__244250,G__244251,G__244252,G__244253));
})();
return (tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6 ? tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6(G__244204,G__244205,G__244206,G__244207,G__244208,G__244209) : tailrecursion.hoplon.table.call(null,G__244204,G__244205,G__244206,G__244207,G__244208,G__244209));
})(),(function (){var _STAR_references_STAR_244260 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_244261 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_244262 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_244263 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__244264 = cljs.core.PersistentArrayMap.EMPTY;
var G__244265 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Continuing this process, we obtain better and better approximations to the square root. "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244264,G__244265) : tailrecursion.hoplon.markdown.para_node.call(null,G__244264,G__244265));
})(),(function (){var G__244266 = cljs.core.PersistentArrayMap.EMPTY;
var G__244267 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now let",(function (){var G__244268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244269 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244268,G__244269) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244268,G__244269));
})(),"s formalize the process in terms of procedures. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244266,G__244267) : tailrecursion.hoplon.markdown.para_node.call(null,G__244266,G__244267));
})(),(function (){var G__244329 = (function (){var G__244330 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244331 = (function (){var G__244332 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244333 = "(";
var G__244334 = (function (){var G__244361 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244362 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244361,G__244362) : tailrecursion.hoplon.span.call(null,G__244361,G__244362));
})();
var G__244335 = (function (){var G__244363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244364 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244363,G__244364) : tailrecursion.hoplon.span.call(null,G__244363,G__244364));
})();
var G__244336 = " [";
var G__244337 = (function (){var G__244365 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244366 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244365,G__244366) : tailrecursion.hoplon.span.call(null,G__244365,G__244366));
})();
var G__244338 = " ";
var G__244339 = (function (){var G__244367 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244368 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244367,G__244368) : tailrecursion.hoplon.span.call(null,G__244367,G__244368));
})();
var G__244340 = "]\n  (";
var G__244341 = (function (){var G__244369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244370 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244369,G__244370) : tailrecursion.hoplon.span.call(null,G__244369,G__244370));
})();
var G__244342 = "(";
var G__244343 = (function (){var G__244371 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244372 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244371,G__244372) : tailrecursion.hoplon.span.call(null,G__244371,G__244372));
})();
var G__244344 = " ";
var G__244345 = (function (){var G__244373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244374 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244373,G__244374) : tailrecursion.hoplon.span.call(null,G__244373,G__244374));
})();
var G__244346 = " ";
var G__244347 = (function (){var G__244375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244376 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244375,G__244376) : tailrecursion.hoplon.span.call(null,G__244375,G__244376));
})();
var G__244348 = ")\n      ";
var G__244349 = (function (){var G__244377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244378 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244377,G__244378) : tailrecursion.hoplon.span.call(null,G__244377,G__244378));
})();
var G__244350 = "\n      (";
var G__244351 = (function (){var G__244379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244380 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244379,G__244380) : tailrecursion.hoplon.span.call(null,G__244379,G__244380));
})();
var G__244352 = " (";
var G__244353 = (function (){var G__244381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244382 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244381,G__244382) : tailrecursion.hoplon.span.call(null,G__244381,G__244382));
})();
var G__244354 = " ";
var G__244355 = (function (){var G__244383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244384 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244383,G__244384) : tailrecursion.hoplon.span.call(null,G__244383,G__244384));
})();
var G__244356 = " ";
var G__244357 = (function (){var G__244385 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244386 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244385,G__244386) : tailrecursion.hoplon.span.call(null,G__244385,G__244386));
})();
var G__244358 = ")\n                 ";
var G__244359 = (function (){var G__244387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244388 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244387,G__244388) : tailrecursion.hoplon.span.call(null,G__244387,G__244388));
})();
var G__244360 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__244332,G__244333,G__244334,G__244335,G__244336,G__244337,G__244338,G__244339,G__244340,G__244341,G__244342,G__244343,G__244344,G__244345,G__244346,G__244347,G__244348,G__244349,G__244350,G__244351,G__244352,G__244353,G__244354,G__244355,G__244356,G__244357,G__244358,G__244359,G__244360) : tailrecursion.hoplon.pre.call(null,G__244332,G__244333,G__244334,G__244335,G__244336,G__244337,G__244338,G__244339,G__244340,G__244341,G__244342,G__244343,G__244344,G__244345,G__244346,G__244347,G__244348,G__244349,G__244350,G__244351,G__244352,G__244353,G__244354,G__244355,G__244356,G__244357,G__244358,G__244359,G__244360));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244330,G__244331) : tailrecursion.hoplon.div.call(null,G__244330,G__244331));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244329) : tailrecursion.hoplon.div.call(null,G__244329));
})(),(function (){var G__244389 = cljs.core.PersistentArrayMap.EMPTY;
var G__244390 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A guess is improved by averaging it with the quotient of the radicand and the old guess:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244389,G__244390) : tailrecursion.hoplon.markdown.para_node.call(null,G__244389,G__244390));
})(),(function (){var G__244429 = (function (){var G__244430 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244431 = (function (){var G__244432 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244433 = "(";
var G__244434 = (function (){var G__244450 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244451 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244450,G__244451) : tailrecursion.hoplon.span.call(null,G__244450,G__244451));
})();
var G__244435 = (function (){var G__244452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244453 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244452,G__244453) : tailrecursion.hoplon.span.call(null,G__244452,G__244453));
})();
var G__244436 = " [";
var G__244437 = (function (){var G__244454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244455 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244454,G__244455) : tailrecursion.hoplon.span.call(null,G__244454,G__244455));
})();
var G__244438 = " ";
var G__244439 = (function (){var G__244456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244457 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244456,G__244457) : tailrecursion.hoplon.span.call(null,G__244456,G__244457));
})();
var G__244440 = "]\n  (";
var G__244441 = (function (){var G__244458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244459 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244458,G__244459) : tailrecursion.hoplon.span.call(null,G__244458,G__244459));
})();
var G__244442 = " ";
var G__244443 = (function (){var G__244460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244461 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244460,G__244461) : tailrecursion.hoplon.span.call(null,G__244460,G__244461));
})();
var G__244444 = " (";
var G__244445 = (function (){var G__244462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244463 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244462,G__244463) : tailrecursion.hoplon.span.call(null,G__244462,G__244463));
})();
var G__244446 = (function (){var G__244464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244465 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244464,G__244465) : tailrecursion.hoplon.span.call(null,G__244464,G__244465));
})();
var G__244447 = " ";
var G__244448 = (function (){var G__244466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244467 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244466,G__244467) : tailrecursion.hoplon.span.call(null,G__244466,G__244467));
})();
var G__244449 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__244432,G__244433,G__244434,G__244435,G__244436,G__244437,G__244438,G__244439,G__244440,G__244441,G__244442,G__244443,G__244444,G__244445,G__244446,G__244447,G__244448,G__244449) : tailrecursion.hoplon.pre.call(null,G__244432,G__244433,G__244434,G__244435,G__244436,G__244437,G__244438,G__244439,G__244440,G__244441,G__244442,G__244443,G__244444,G__244445,G__244446,G__244447,G__244448,G__244449));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244430,G__244431) : tailrecursion.hoplon.div.call(null,G__244430,G__244431));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244429) : tailrecursion.hoplon.div.call(null,G__244429));
})(),(function (){var G__244468 = cljs.core.PersistentArrayMap.EMPTY;
var G__244469 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244468,G__244469) : tailrecursion.hoplon.markdown.para_node.call(null,G__244468,G__244469));
})(),(function (){var G__244508 = (function (){var G__244509 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244510 = (function (){var G__244511 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244512 = "(";
var G__244513 = (function (){var G__244529 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244530 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244529,G__244530) : tailrecursion.hoplon.span.call(null,G__244529,G__244530));
})();
var G__244514 = (function (){var G__244531 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244532 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244531,G__244532) : tailrecursion.hoplon.span.call(null,G__244531,G__244532));
})();
var G__244515 = " [";
var G__244516 = (function (){var G__244533 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244534 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244533,G__244534) : tailrecursion.hoplon.span.call(null,G__244533,G__244534));
})();
var G__244517 = " ";
var G__244518 = (function (){var G__244535 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244536 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244535,G__244536) : tailrecursion.hoplon.span.call(null,G__244535,G__244536));
})();
var G__244519 = "]\n  (";
var G__244520 = (function (){var G__244537 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244538 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244537,G__244538) : tailrecursion.hoplon.span.call(null,G__244537,G__244538));
})();
var G__244521 = "(";
var G__244522 = (function (){var G__244539 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244540 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244539,G__244540) : tailrecursion.hoplon.span.call(null,G__244539,G__244540));
})();
var G__244523 = (function (){var G__244541 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244542 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244541,G__244542) : tailrecursion.hoplon.span.call(null,G__244541,G__244542));
})();
var G__244524 = " ";
var G__244525 = (function (){var G__244543 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244544 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244543,G__244544) : tailrecursion.hoplon.span.call(null,G__244543,G__244544));
})();
var G__244526 = ") ";
var G__244527 = (function (){var G__244545 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244546 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244545,G__244546) : tailrecursion.hoplon.span.call(null,G__244545,G__244546));
})();
var G__244528 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__244511,G__244512,G__244513,G__244514,G__244515,G__244516,G__244517,G__244518,G__244519,G__244520,G__244521,G__244522,G__244523,G__244524,G__244525,G__244526,G__244527,G__244528) : tailrecursion.hoplon.pre.call(null,G__244511,G__244512,G__244513,G__244514,G__244515,G__244516,G__244517,G__244518,G__244519,G__244520,G__244521,G__244522,G__244523,G__244524,G__244525,G__244526,G__244527,G__244528));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244509,G__244510) : tailrecursion.hoplon.div.call(null,G__244509,G__244510));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244508) : tailrecursion.hoplon.div.call(null,G__244508));
})(),(function (){var G__244547 = cljs.core.PersistentArrayMap.EMPTY;
var G__244548 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We also have to say what we mean by ``good enough.",(function (){var G__244549 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244550 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244549,G__244550) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244549,G__244550));
})(),(function (){var G__244551 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244552 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244551,G__244552) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244551,G__244552));
})()," The following will do for illustration, but it is not really a very good test. (See exercise 1.7.) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001):",(function (){var G__244553 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__244554 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention. As far as the interpreter is concerned, the question mark is just an ordinary character."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244553,G__244554) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244553,G__244554));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244547,G__244548) : tailrecursion.hoplon.markdown.para_node.call(null,G__244547,G__244548));
})(),(function (){var G__244602 = (function (){var G__244603 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244604 = (function (){var G__244605 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244606 = "(";
var G__244607 = (function (){var G__244628 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244629 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244628,G__244629) : tailrecursion.hoplon.span.call(null,G__244628,G__244629));
})();
var G__244608 = (function (){var G__244630 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244631 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244630,G__244631) : tailrecursion.hoplon.span.call(null,G__244630,G__244631));
})();
var G__244609 = " [";
var G__244610 = (function (){var G__244632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244633 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244632,G__244633) : tailrecursion.hoplon.span.call(null,G__244632,G__244633));
})();
var G__244611 = " ";
var G__244612 = (function (){var G__244634 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244635 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244634,G__244635) : tailrecursion.hoplon.span.call(null,G__244634,G__244635));
})();
var G__244613 = "]\n  (";
var G__244614 = (function (){var G__244636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244637 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244636,G__244637) : tailrecursion.hoplon.span.call(null,G__244636,G__244637));
})();
var G__244615 = "(";
var G__244616 = (function (){var G__244638 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244639 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244638,G__244639) : tailrecursion.hoplon.span.call(null,G__244638,G__244639));
})();
var G__244617 = " (";
var G__244618 = (function (){var G__244640 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244641 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244640,G__244641) : tailrecursion.hoplon.span.call(null,G__244640,G__244641));
})();
var G__244619 = "(";
var G__244620 = (function (){var G__244642 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244643 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244642,G__244643) : tailrecursion.hoplon.span.call(null,G__244642,G__244643));
})();
var G__244621 = " ";
var G__244622 = (function (){var G__244644 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244645 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244644,G__244645) : tailrecursion.hoplon.span.call(null,G__244644,G__244645));
})();
var G__244623 = ") ";
var G__244624 = (function (){var G__244646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244647 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244646,G__244647) : tailrecursion.hoplon.span.call(null,G__244646,G__244647));
})();
var G__244625 = ")) ";
var G__244626 = (function (){var G__244648 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244649 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244648,G__244649) : tailrecursion.hoplon.span.call(null,G__244648,G__244649));
})();
var G__244627 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__244605,G__244606,G__244607,G__244608,G__244609,G__244610,G__244611,G__244612,G__244613,G__244614,G__244615,G__244616,G__244617,G__244618,G__244619,G__244620,G__244621,G__244622,G__244623,G__244624,G__244625,G__244626,G__244627) : tailrecursion.hoplon.pre.call(null,G__244605,G__244606,G__244607,G__244608,G__244609,G__244610,G__244611,G__244612,G__244613,G__244614,G__244615,G__244616,G__244617,G__244618,G__244619,G__244620,G__244621,G__244622,G__244623,G__244624,G__244625,G__244626,G__244627));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244603,G__244604) : tailrecursion.hoplon.div.call(null,G__244603,G__244604));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244602) : tailrecursion.hoplon.div.call(null,G__244602));
})(),(function (){var G__244650 = cljs.core.PersistentArrayMap.EMPTY;
var G__244651 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:",(function (){var G__244652 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__244653 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that we express our initial guess as 1.0 rather than 1. This would not make any difference in many Lisp implementations. MIT Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal. For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667. (We will learn how to implement arithmetic on rational numbers in section 2.1.1.) If we start with an initial guess of 1 in our square-root program, and \\(x\\) is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals. Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244652,G__244653) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244652,G__244653));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244650,G__244651) : tailrecursion.hoplon.markdown.para_node.call(null,G__244650,G__244651));
})(),(function (){var G__244681 = (function (){var G__244682 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244683 = (function (){var G__244684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244685 = "(";
var G__244686 = (function (){var G__244697 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244698 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244697,G__244698) : tailrecursion.hoplon.span.call(null,G__244697,G__244698));
})();
var G__244687 = (function (){var G__244699 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244700 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244699,G__244700) : tailrecursion.hoplon.span.call(null,G__244699,G__244700));
})();
var G__244688 = " [";
var G__244689 = (function (){var G__244701 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244702 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244701,G__244702) : tailrecursion.hoplon.span.call(null,G__244701,G__244702));
})();
var G__244690 = "]\n  (";
var G__244691 = (function (){var G__244703 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244704 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244703,G__244704) : tailrecursion.hoplon.span.call(null,G__244703,G__244704));
})();
var G__244692 = " ";
var G__244693 = (function (){var G__244705 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244706 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244705,G__244706) : tailrecursion.hoplon.span.call(null,G__244705,G__244706));
})();
var G__244694 = " ";
var G__244695 = (function (){var G__244707 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244708 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244707,G__244708) : tailrecursion.hoplon.span.call(null,G__244707,G__244708));
})();
var G__244696 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__244684,G__244685,G__244686,G__244687,G__244688,G__244689,G__244690,G__244691,G__244692,G__244693,G__244694,G__244695,G__244696) : tailrecursion.hoplon.pre.call(null,G__244684,G__244685,G__244686,G__244687,G__244688,G__244689,G__244690,G__244691,G__244692,G__244693,G__244694,G__244695,G__244696));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244682,G__244683) : tailrecursion.hoplon.div.call(null,G__244682,G__244683));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244681) : tailrecursion.hoplon.div.call(null,G__244681));
})(),(function (){var G__244709 = cljs.core.PersistentArrayMap.EMPTY;
var G__244710 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we type these definitions to the interpreter, we can use sqrt just as we can use any procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244709,G__244710) : tailrecursion.hoplon.markdown.para_node.call(null,G__244709,G__244710));
})(),(function (){var G__244790 = (function (){var G__244791 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244792 = (function (){var G__244793 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244794 = "(";
var G__244795 = (function (){var G__244832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244833 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244832,G__244833) : tailrecursion.hoplon.span.call(null,G__244832,G__244833));
})();
var G__244796 = " ";
var G__244797 = (function (){var G__244834 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244835 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244834,G__244835) : tailrecursion.hoplon.span.call(null,G__244834,G__244835));
})();
var G__244798 = ")\n";
var G__244799 = (function (){var G__244836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244837 = "3.00009155413138";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244836,G__244837) : tailrecursion.hoplon.span.call(null,G__244836,G__244837));
})();
var G__244800 = "\n(";
var G__244801 = (function (){var G__244838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244839 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244838,G__244839) : tailrecursion.hoplon.span.call(null,G__244838,G__244839));
})();
var G__244802 = " (";
var G__244803 = (function (){var G__244840 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244841 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244840,G__244841) : tailrecursion.hoplon.span.call(null,G__244840,G__244841));
})();
var G__244804 = (function (){var G__244842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244843 = "100";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244842,G__244843) : tailrecursion.hoplon.span.call(null,G__244842,G__244843));
})();
var G__244805 = " ";
var G__244806 = (function (){var G__244844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244845 = "37";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244844,G__244845) : tailrecursion.hoplon.span.call(null,G__244844,G__244845));
})();
var G__244807 = "))\n";
var G__244808 = (function (){var G__244846 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244847 = "11.704699917758145";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244846,G__244847) : tailrecursion.hoplon.span.call(null,G__244846,G__244847));
})();
var G__244809 = "\n(";
var G__244810 = (function (){var G__244848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244849 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244848,G__244849) : tailrecursion.hoplon.span.call(null,G__244848,G__244849));
})();
var G__244811 = " (";
var G__244812 = (function (){var G__244850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244851 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244850,G__244851) : tailrecursion.hoplon.span.call(null,G__244850,G__244851));
})();
var G__244813 = "(";
var G__244814 = (function (){var G__244852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244853 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244852,G__244853) : tailrecursion.hoplon.span.call(null,G__244852,G__244853));
})();
var G__244815 = " ";
var G__244816 = (function (){var G__244854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244855 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244854,G__244855) : tailrecursion.hoplon.span.call(null,G__244854,G__244855));
})();
var G__244817 = ") (";
var G__244818 = (function (){var G__244856 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244857 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244856,G__244857) : tailrecursion.hoplon.span.call(null,G__244856,G__244857));
})();
var G__244819 = " ";
var G__244820 = (function (){var G__244858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244859 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244858,G__244859) : tailrecursion.hoplon.span.call(null,G__244858,G__244859));
})();
var G__244821 = ")))\n";
var G__244822 = (function (){var G__244860 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244861 = "1.7739279023207892";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244860,G__244861) : tailrecursion.hoplon.span.call(null,G__244860,G__244861));
})();
var G__244823 = "\n(";
var G__244824 = (function (){var G__244862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244863 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244862,G__244863) : tailrecursion.hoplon.span.call(null,G__244862,G__244863));
})();
var G__244825 = " (";
var G__244826 = (function (){var G__244864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__244865 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244864,G__244865) : tailrecursion.hoplon.span.call(null,G__244864,G__244865));
})();
var G__244827 = " ";
var G__244828 = (function (){var G__244866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244867 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244866,G__244867) : tailrecursion.hoplon.span.call(null,G__244866,G__244867));
})();
var G__244829 = "))\n";
var G__244830 = (function (){var G__244868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__244869 = "1000.000369924366";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244868,G__244869) : tailrecursion.hoplon.span.call(null,G__244868,G__244869));
})();
var G__244831 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__244793,G__244794,G__244795,G__244796,G__244797,G__244798,G__244799,G__244800,G__244801,G__244802,G__244803,G__244804,G__244805,G__244806,G__244807,G__244808,G__244809,G__244810,G__244811,G__244812,G__244813,G__244814,G__244815,G__244816,G__244817,G__244818,G__244819,G__244820,G__244821,G__244822,G__244823,G__244824,G__244825,G__244826,G__244827,G__244828,G__244829,G__244830,G__244831) : tailrecursion.hoplon.pre.call(null,G__244793,G__244794,G__244795,G__244796,G__244797,G__244798,G__244799,G__244800,G__244801,G__244802,G__244803,G__244804,G__244805,G__244806,G__244807,G__244808,G__244809,G__244810,G__244811,G__244812,G__244813,G__244814,G__244815,G__244816,G__244817,G__244818,G__244819,G__244820,G__244821,G__244822,G__244823,G__244824,G__244825,G__244826,G__244827,G__244828,G__244829,G__244830,G__244831));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244791,G__244792) : tailrecursion.hoplon.div.call(null,G__244791,G__244792));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244790) : tailrecursion.hoplon.div.call(null,G__244790));
})(),(function (){var G__244870 = cljs.core.PersistentArrayMap.EMPTY;
var G__244871 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The sqrt program also illustrates that the simple procedural language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. Sqrt-iter, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a procedure.",(function (){var G__244872 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__244873 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on ``tail recursion",(function (){var G__244874 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244875 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244874,G__244875) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244874,G__244875));
})(),(function (){var G__244876 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244877 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244876,G__244877) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244876,G__244877));
})()," in section 1.2.1."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244872,G__244873) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244872,G__244873));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244870,G__244871) : tailrecursion.hoplon.markdown.para_node.call(null,G__244870,G__244871));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_244263;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_244262;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_244261;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_244260;
}})()], 0));
var G__239918 = "";
var G__239919 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_244878 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_244879 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_244880 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_244881 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__244882 = cljs.core.PersistentArrayMap.EMPTY;
var G__244883 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Alyssa P. Hacker doesn",(function (){var G__244884 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244885 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244884,G__244885) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244884,G__244885));
})(),"t see why if needs to be provided as a special form. ",(function (){var G__244886 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__244887 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Why can",(function (){var G__244888 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244889 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244888,G__244889) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244888,G__244889));
})(),"t I just define it as an ordinary procedure in terms of cond?"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__244886,G__244887) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__244886,G__244887));
})()," she asks. Alyssa",(function (){var G__244890 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__244891 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__244890,G__244891) : tailrecursion.hoplon.markdown.simple_node.call(null,G__244890,G__244891));
})(),"s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244882,G__244883) : tailrecursion.hoplon.markdown.para_node.call(null,G__244882,G__244883));
})(),(function (){var G__244934 = (function (){var G__244935 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__244936 = (function (){var G__244937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__244938 = "(";
var G__244939 = (function (){var G__244957 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__244958 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244957,G__244958) : tailrecursion.hoplon.span.call(null,G__244957,G__244958));
})();
var G__244940 = (function (){var G__244959 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244960 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244959,G__244960) : tailrecursion.hoplon.span.call(null,G__244959,G__244960));
})();
var G__244941 = " [";
var G__244942 = (function (){var G__244961 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244962 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244961,G__244962) : tailrecursion.hoplon.span.call(null,G__244961,G__244962));
})();
var G__244943 = " ";
var G__244944 = (function (){var G__244963 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244964 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244963,G__244964) : tailrecursion.hoplon.span.call(null,G__244963,G__244964));
})();
var G__244945 = " ";
var G__244946 = (function (){var G__244965 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244966 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244965,G__244966) : tailrecursion.hoplon.span.call(null,G__244965,G__244966));
})();
var G__244947 = "]\n  (";
var G__244948 = (function (){var G__244967 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__244968 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244967,G__244968) : tailrecursion.hoplon.span.call(null,G__244967,G__244968));
})();
var G__244949 = (function (){var G__244969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244970 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244969,G__244970) : tailrecursion.hoplon.span.call(null,G__244969,G__244970));
})();
var G__244950 = " ";
var G__244951 = (function (){var G__244971 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244972 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244971,G__244972) : tailrecursion.hoplon.span.call(null,G__244971,G__244972));
})();
var G__244952 = "\n        ";
var G__244953 = (function (){var G__244973 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244974 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244973,G__244974) : tailrecursion.hoplon.span.call(null,G__244973,G__244974));
})();
var G__244954 = " ";
var G__244955 = (function (){var G__244975 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__244976 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__244975,G__244976) : tailrecursion.hoplon.span.call(null,G__244975,G__244976));
})();
var G__244956 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__244937,G__244938,G__244939,G__244940,G__244941,G__244942,G__244943,G__244944,G__244945,G__244946,G__244947,G__244948,G__244949,G__244950,G__244951,G__244952,G__244953,G__244954,G__244955,G__244956) : tailrecursion.hoplon.pre.call(null,G__244937,G__244938,G__244939,G__244940,G__244941,G__244942,G__244943,G__244944,G__244945,G__244946,G__244947,G__244948,G__244949,G__244950,G__244951,G__244952,G__244953,G__244954,G__244955,G__244956));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__244935,G__244936) : tailrecursion.hoplon.div.call(null,G__244935,G__244936));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__244934) : tailrecursion.hoplon.div.call(null,G__244934));
})(),(function (){var G__244977 = cljs.core.PersistentArrayMap.EMPTY;
var G__244978 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Eva demonstrates the program for Alyssa:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__244977,G__244978) : tailrecursion.hoplon.markdown.para_node.call(null,G__244977,G__244978));
})(),(function (){var G__245010 = (function (){var G__245011 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245012 = (function (){var G__245013 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245014 = "(";
var G__245015 = (function (){var G__245028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245029 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245028,G__245029) : tailrecursion.hoplon.span.call(null,G__245028,G__245029));
})();
var G__245016 = " (";
var G__245017 = (function (){var G__245030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245031 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245030,G__245031) : tailrecursion.hoplon.span.call(null,G__245030,G__245031));
})();
var G__245018 = (function (){var G__245032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245033 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245032,G__245033) : tailrecursion.hoplon.span.call(null,G__245032,G__245033));
})();
var G__245019 = " ";
var G__245020 = (function (){var G__245034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245035 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245034,G__245035) : tailrecursion.hoplon.span.call(null,G__245034,G__245035));
})();
var G__245021 = ") ";
var G__245022 = (function (){var G__245036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245037 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245036,G__245037) : tailrecursion.hoplon.span.call(null,G__245036,G__245037));
})();
var G__245023 = " ";
var G__245024 = (function (){var G__245038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245039 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245038,G__245039) : tailrecursion.hoplon.span.call(null,G__245038,G__245039));
})();
var G__245025 = ")\n";
var G__245026 = (function (){var G__245040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245041 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245040,G__245041) : tailrecursion.hoplon.span.call(null,G__245040,G__245041));
})();
var G__245027 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__245013,G__245014,G__245015,G__245016,G__245017,G__245018,G__245019,G__245020,G__245021,G__245022,G__245023,G__245024,G__245025,G__245026,G__245027) : tailrecursion.hoplon.pre.call(null,G__245013,G__245014,G__245015,G__245016,G__245017,G__245018,G__245019,G__245020,G__245021,G__245022,G__245023,G__245024,G__245025,G__245026,G__245027));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245011,G__245012) : tailrecursion.hoplon.div.call(null,G__245011,G__245012));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245010) : tailrecursion.hoplon.div.call(null,G__245010));
})(),(function (){var G__245073 = (function (){var G__245074 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245075 = (function (){var G__245076 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245077 = "(";
var G__245078 = (function (){var G__245091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245092 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245091,G__245092) : tailrecursion.hoplon.span.call(null,G__245091,G__245092));
})();
var G__245079 = " (";
var G__245080 = (function (){var G__245093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245094 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245093,G__245094) : tailrecursion.hoplon.span.call(null,G__245093,G__245094));
})();
var G__245081 = (function (){var G__245095 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245096 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245095,G__245096) : tailrecursion.hoplon.span.call(null,G__245095,G__245096));
})();
var G__245082 = " ";
var G__245083 = (function (){var G__245097 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245098 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245097,G__245098) : tailrecursion.hoplon.span.call(null,G__245097,G__245098));
})();
var G__245084 = ") ";
var G__245085 = (function (){var G__245099 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245100 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245099,G__245100) : tailrecursion.hoplon.span.call(null,G__245099,G__245100));
})();
var G__245086 = " ";
var G__245087 = (function (){var G__245101 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245102 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245101,G__245102) : tailrecursion.hoplon.span.call(null,G__245101,G__245102));
})();
var G__245088 = ")\n";
var G__245089 = (function (){var G__245103 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245104 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245103,G__245104) : tailrecursion.hoplon.span.call(null,G__245103,G__245104));
})();
var G__245090 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__245076,G__245077,G__245078,G__245079,G__245080,G__245081,G__245082,G__245083,G__245084,G__245085,G__245086,G__245087,G__245088,G__245089,G__245090) : tailrecursion.hoplon.pre.call(null,G__245076,G__245077,G__245078,G__245079,G__245080,G__245081,G__245082,G__245083,G__245084,G__245085,G__245086,G__245087,G__245088,G__245089,G__245090));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245074,G__245075) : tailrecursion.hoplon.div.call(null,G__245074,G__245075));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245073) : tailrecursion.hoplon.div.call(null,G__245073));
})(),(function (){var G__245105 = cljs.core.PersistentArrayMap.EMPTY;
var G__245106 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Delighted, Alyssa now uses ",(function (){var G__245107 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__245108 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245107,G__245108) : tailrecursion.hoplon.markdown.code_node.call(null,G__245107,G__245108));
})()," to rewrite the square-root program:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245105,G__245106) : tailrecursion.hoplon.markdown.para_node.call(null,G__245105,G__245106));
})(),(function (){var G__245168 = (function (){var G__245169 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245170 = (function (){var G__245171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245172 = "(";
var G__245173 = (function (){var G__245200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__245201 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245200,G__245201) : tailrecursion.hoplon.span.call(null,G__245200,G__245201));
})();
var G__245174 = (function (){var G__245202 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245203 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245202,G__245203) : tailrecursion.hoplon.span.call(null,G__245202,G__245203));
})();
var G__245175 = " [";
var G__245176 = (function (){var G__245204 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245205 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245204,G__245205) : tailrecursion.hoplon.span.call(null,G__245204,G__245205));
})();
var G__245177 = " ";
var G__245178 = (function (){var G__245206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245207 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245206,G__245207) : tailrecursion.hoplon.span.call(null,G__245206,G__245207));
})();
var G__245179 = "]\n  (";
var G__245180 = (function (){var G__245208 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245209 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245208,G__245209) : tailrecursion.hoplon.span.call(null,G__245208,G__245209));
})();
var G__245181 = " (";
var G__245182 = (function (){var G__245210 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245211 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245210,G__245211) : tailrecursion.hoplon.span.call(null,G__245210,G__245211));
})();
var G__245183 = " ";
var G__245184 = (function (){var G__245212 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245213 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245212,G__245213) : tailrecursion.hoplon.span.call(null,G__245212,G__245213));
})();
var G__245185 = " ";
var G__245186 = (function (){var G__245214 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245215 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245214,G__245215) : tailrecursion.hoplon.span.call(null,G__245214,G__245215));
})();
var G__245187 = ")\n          ";
var G__245188 = (function (){var G__245216 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245217 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245216,G__245217) : tailrecursion.hoplon.span.call(null,G__245216,G__245217));
})();
var G__245189 = "\n          (";
var G__245190 = (function (){var G__245218 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245219 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245218,G__245219) : tailrecursion.hoplon.span.call(null,G__245218,G__245219));
})();
var G__245191 = " (";
var G__245192 = (function (){var G__245220 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245221 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245220,G__245221) : tailrecursion.hoplon.span.call(null,G__245220,G__245221));
})();
var G__245193 = " ";
var G__245194 = (function (){var G__245222 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245223 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245222,G__245223) : tailrecursion.hoplon.span.call(null,G__245222,G__245223));
})();
var G__245195 = " ";
var G__245196 = (function (){var G__245224 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245225 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245224,G__245225) : tailrecursion.hoplon.span.call(null,G__245224,G__245225));
})();
var G__245197 = ")\n                     ";
var G__245198 = (function (){var G__245226 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245227 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245226,G__245227) : tailrecursion.hoplon.span.call(null,G__245226,G__245227));
})();
var G__245199 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__245171,G__245172,G__245173,G__245174,G__245175,G__245176,G__245177,G__245178,G__245179,G__245180,G__245181,G__245182,G__245183,G__245184,G__245185,G__245186,G__245187,G__245188,G__245189,G__245190,G__245191,G__245192,G__245193,G__245194,G__245195,G__245196,G__245197,G__245198,G__245199) : tailrecursion.hoplon.pre.call(null,G__245171,G__245172,G__245173,G__245174,G__245175,G__245176,G__245177,G__245178,G__245179,G__245180,G__245181,G__245182,G__245183,G__245184,G__245185,G__245186,G__245187,G__245188,G__245189,G__245190,G__245191,G__245192,G__245193,G__245194,G__245195,G__245196,G__245197,G__245198,G__245199));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245169,G__245170) : tailrecursion.hoplon.div.call(null,G__245169,G__245170));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245168) : tailrecursion.hoplon.div.call(null,G__245168));
})(),(function (){var G__245228 = cljs.core.PersistentArrayMap.EMPTY;
var G__245229 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What happens when Alyssa attempts to use this to compute square roots? Explain."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245228,G__245229) : tailrecursion.hoplon.markdown.para_node.call(null,G__245228,G__245229));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_244881;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_244880;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_244879;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_244878;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_245230 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245231 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_245232 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245233 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__245234 = cljs.core.PersistentArrayMap.EMPTY;
var G__245235 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since ",(function (){var G__245236 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__245237 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245236,G__245237) : tailrecursion.hoplon.markdown.code_node.call(null,G__245236,G__245237));
})()," is not a special form, it will be evaluated in applicative order. Hence, when ",(function (){var G__245238 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(new-if a b c)"], null);
var G__245239 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245238,G__245239) : tailrecursion.hoplon.markdown.code_node.call(null,G__245238,G__245239));
})()," is called, a, b, and c are all evaluated before considering how they may or may not be used within the function ",(function (){var G__245240 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__245241 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245240,G__245241) : tailrecursion.hoplon.markdown.code_node.call(null,G__245240,G__245241));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245234,G__245235) : tailrecursion.hoplon.markdown.para_node.call(null,G__245234,G__245235));
})(),(function (){var G__245242 = cljs.core.PersistentArrayMap.EMPTY;
var G__245243 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So, in this particular case, let us compute the square root of 4 with our first guess being 2 (Alyssa would probably think that this would terminate immediately, but let",(function (){var G__245244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245245 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245244,G__245245) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245244,G__245245));
})(),"s see). ",(function (){var G__245246 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"clj\n(sqrt-iter 2 4) ==>\n(new-if (good-enough? 2 4) 2 (sqrt-iter (improve 2 4) 4))\n"], null);
var G__245247 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245246,G__245247) : tailrecursion.hoplon.markdown.code_node.call(null,G__245246,G__245247));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245242,G__245243) : tailrecursion.hoplon.markdown.para_node.call(null,G__245242,G__245243));
})(),(function (){var G__245248 = cljs.core.PersistentArrayMap.EMPTY;
var G__245249 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["You can see that in this example, since ",(function (){var G__245250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(improve 2 4) = 2"], null);
var G__245251 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245250,G__245251) : tailrecursion.hoplon.markdown.code_node.call(null,G__245250,G__245251));
})(),", ",(function (){var G__245252 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__245253 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245252,G__245253) : tailrecursion.hoplon.markdown.code_node.call(null,G__245252,G__245253));
})()," is going to requre us to compute ",(function (){var G__245254 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(sqrt-iter 2 4)"], null);
var G__245255 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245254,G__245255) : tailrecursion.hoplon.markdown.code_node.call(null,G__245254,G__245255));
})()," again. Then we",(function (){var G__245256 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245257 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245256,G__245257) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245256,G__245257));
})(),"ll be computing the ",(function (){var G__245258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__245259 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245258,G__245259) : tailrecursion.hoplon.markdown.code_node.call(null,G__245258,G__245259));
})()," again, and you can see the cycle that we",(function (){var G__245260 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245261 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245260,G__245261) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245260,G__245261));
})(),"ve gotten ourselves in."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245248,G__245249) : tailrecursion.hoplon.markdown.para_node.call(null,G__245248,G__245249));
})(),(function (){var G__245262 = cljs.core.PersistentArrayMap.EMPTY;
var G__245263 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Long story short, this would result in an infinite loop."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245262,G__245263) : tailrecursion.hoplon.markdown.para_node.call(null,G__245262,G__245263));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245233;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245232;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245231;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245230;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_245264 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245265 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_245266 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245267 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__245268 = cljs.core.PersistentArrayMap.EMPTY;
var G__245269 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",(function (){var G__245270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245271 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245270,G__245271) : tailrecursion.hoplon.markdown.code_node.call(null,G__245270,G__245271));
})()," test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing ",(function (){var G__245272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245273 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245272,G__245273) : tailrecursion.hoplon.markdown.code_node.call(null,G__245272,G__245273));
})()," is to watch how ",(function (){var G__245274 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__245275 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245274,G__245275) : tailrecursion.hoplon.markdown.code_node.call(null,G__245274,G__245275));
})()," changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245268,G__245269) : tailrecursion.hoplon.markdown.para_node.call(null,G__245268,G__245269));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245267;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245266;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245265;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245264;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_245276 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245277 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_245278 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245279 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__245280 = cljs.core.PersistentArrayMap.EMPTY;
var G__245281 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When finding the square root of a very small number (let",(function (){var G__245282 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245283 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245282,G__245283) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245282,G__245283));
})(),"s use 0.0000001, whose square root is 0.0001), since the answer we",(function (){var G__245284 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245285 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245284,G__245285) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245284,G__245285));
})(),"re looking for is smaller than our tollerance, you might get a zero or even a negative number as our answer! And on the other end of the spectrum, if our number is too large it would require enough calculations to make the precision larger than our tolerance. In that having a set tolerance is meaningless because our answer will be outside of that range due to the limitations of the computer!"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245280,G__245281) : tailrecursion.hoplon.markdown.para_node.call(null,G__245280,G__245281));
})(),(function (){var G__245286 = cljs.core.PersistentArrayMap.EMPTY;
var G__245287 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To avoid this problem we can set a dynamic tolerance like the exercise suggests. Let",(function (){var G__245288 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245289 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245288,G__245289) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245288,G__245289));
})(),"s say our problem allows for a 10% fractional tolerance. Then our ",(function (){var G__245290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245291 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245290,G__245291) : tailrecursion.hoplon.markdown.code_node.call(null,G__245290,G__245291));
})()," procedure would look like, "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245286,G__245287) : tailrecursion.hoplon.markdown.para_node.call(null,G__245286,G__245287));
})(),(function (){var G__245342 = (function (){var G__245343 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245344 = (function (){var G__245345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245346 = "(";
var G__245347 = (function (){var G__245369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__245370 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245369,G__245370) : tailrecursion.hoplon.span.call(null,G__245369,G__245370));
})();
var G__245348 = (function (){var G__245371 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245372 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245371,G__245372) : tailrecursion.hoplon.span.call(null,G__245371,G__245372));
})();
var G__245349 = " [";
var G__245350 = (function (){var G__245373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245374 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245373,G__245374) : tailrecursion.hoplon.span.call(null,G__245373,G__245374));
})();
var G__245351 = " ";
var G__245352 = (function (){var G__245375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245376 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245375,G__245376) : tailrecursion.hoplon.span.call(null,G__245375,G__245376));
})();
var G__245353 = "]\n  (";
var G__245354 = (function (){var G__245377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245378 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245377,G__245378) : tailrecursion.hoplon.span.call(null,G__245377,G__245378));
})();
var G__245355 = "(";
var G__245356 = (function (){var G__245379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245380 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245379,G__245380) : tailrecursion.hoplon.span.call(null,G__245379,G__245380));
})();
var G__245357 = " (";
var G__245358 = (function (){var G__245381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245382 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245381,G__245382) : tailrecursion.hoplon.span.call(null,G__245381,G__245382));
})();
var G__245359 = "(";
var G__245360 = (function (){var G__245383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245384 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245383,G__245384) : tailrecursion.hoplon.span.call(null,G__245383,G__245384));
})();
var G__245361 = (function (){var G__245385 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245386 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245385,G__245386) : tailrecursion.hoplon.span.call(null,G__245385,G__245386));
})();
var G__245362 = " ";
var G__245363 = (function (){var G__245387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245388 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245387,G__245388) : tailrecursion.hoplon.span.call(null,G__245387,G__245388));
})();
var G__245364 = ") ";
var G__245365 = (function (){var G__245389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245390 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245389,G__245390) : tailrecursion.hoplon.span.call(null,G__245389,G__245390));
})();
var G__245366 = ")) ";
var G__245367 = (function (){var G__245391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245392 = "0.1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245391,G__245392) : tailrecursion.hoplon.span.call(null,G__245391,G__245392));
})();
var G__245368 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24(G__245345,G__245346,G__245347,G__245348,G__245349,G__245350,G__245351,G__245352,G__245353,G__245354,G__245355,G__245356,G__245357,G__245358,G__245359,G__245360,G__245361,G__245362,G__245363,G__245364,G__245365,G__245366,G__245367,G__245368) : tailrecursion.hoplon.pre.call(null,G__245345,G__245346,G__245347,G__245348,G__245349,G__245350,G__245351,G__245352,G__245353,G__245354,G__245355,G__245356,G__245357,G__245358,G__245359,G__245360,G__245361,G__245362,G__245363,G__245364,G__245365,G__245366,G__245367,G__245368));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245343,G__245344) : tailrecursion.hoplon.div.call(null,G__245343,G__245344));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245342) : tailrecursion.hoplon.div.call(null,G__245342));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245279;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245278;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245277;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245276;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_245393 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245394 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_245395 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245396 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__245397 = cljs.core.PersistentArrayMap.EMPTY;
var G__245398 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Newton",(function (){var G__245399 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245400 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245399,G__245400) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245399,G__245400));
})(),"s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245397,G__245398) : tailrecursion.hoplon.markdown.para_node.call(null,G__245397,G__245398));
})(),(function (){var G__245401 = cljs.core.PersistentArrayMap.EMPTY;
var G__245402 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\frac{x/y^2 +2y}{3} $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245401,G__245402) : tailrecursion.hoplon.markdown.para_node.call(null,G__245401,G__245402));
})(),(function (){var G__245403 = cljs.core.PersistentArrayMap.EMPTY;
var G__245404 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#!/sicp/ch/1/sect/3/sub/4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.3.4"], null)], 0))," we will see how to implement Newton",(function (){var G__245405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245406 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245405,G__245406) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245405,G__245406));
})(),"s method in general as an abstraction of these square-root and cube-root procedures.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245403,G__245404) : tailrecursion.hoplon.markdown.para_node.call(null,G__245403,G__245404));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245396;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245395;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245394;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245393;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_245407 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245408 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_245409 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245410 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__245468 = (function (){var G__245469 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245470 = (function (){var G__245471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245472 = "(";
var G__245473 = (function (){var G__245498 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__245499 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245498,G__245499) : tailrecursion.hoplon.span.call(null,G__245498,G__245499));
})();
var G__245474 = (function (){var G__245500 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245501 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245500,G__245501) : tailrecursion.hoplon.span.call(null,G__245500,G__245501));
})();
var G__245475 = " [";
var G__245476 = (function (){var G__245502 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245503 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245502,G__245503) : tailrecursion.hoplon.span.call(null,G__245502,G__245503));
})();
var G__245477 = " ";
var G__245478 = (function (){var G__245504 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245505 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245504,G__245505) : tailrecursion.hoplon.span.call(null,G__245504,G__245505));
})();
var G__245479 = "]\n  (";
var G__245480 = (function (){var G__245506 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245507 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245506,G__245507) : tailrecursion.hoplon.span.call(null,G__245506,G__245507));
})();
var G__245481 = "(";
var G__245482 = (function (){var G__245508 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245509 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245508,G__245509) : tailrecursion.hoplon.span.call(null,G__245508,G__245509));
})();
var G__245483 = "(";
var G__245484 = (function (){var G__245510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245511 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245510,G__245511) : tailrecursion.hoplon.span.call(null,G__245510,G__245511));
})();
var G__245485 = (function (){var G__245512 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245513 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245512,G__245513) : tailrecursion.hoplon.span.call(null,G__245512,G__245513));
})();
var G__245486 = " (";
var G__245487 = (function (){var G__245514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245515 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245514,G__245515) : tailrecursion.hoplon.span.call(null,G__245514,G__245515));
})();
var G__245488 = " ";
var G__245489 = (function (){var G__245516 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245517 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245516,G__245517) : tailrecursion.hoplon.span.call(null,G__245516,G__245517));
})();
var G__245490 = ")) (";
var G__245491 = (function (){var G__245518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245519 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245518,G__245519) : tailrecursion.hoplon.span.call(null,G__245518,G__245519));
})();
var G__245492 = (function (){var G__245520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245521 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245520,G__245521) : tailrecursion.hoplon.span.call(null,G__245520,G__245521));
})();
var G__245493 = " ";
var G__245494 = (function (){var G__245522 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245523 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245522,G__245523) : tailrecursion.hoplon.span.call(null,G__245522,G__245523));
})();
var G__245495 = ")) ";
var G__245496 = (function (){var G__245524 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245525 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245524,G__245525) : tailrecursion.hoplon.span.call(null,G__245524,G__245525));
})();
var G__245497 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__245471,G__245472,G__245473,G__245474,G__245475,G__245476,G__245477,G__245478,G__245479,G__245480,G__245481,G__245482,G__245483,G__245484,G__245485,G__245486,G__245487,G__245488,G__245489,G__245490,G__245491,G__245492,G__245493,G__245494,G__245495,G__245496,G__245497) : tailrecursion.hoplon.pre.call(null,G__245471,G__245472,G__245473,G__245474,G__245475,G__245476,G__245477,G__245478,G__245479,G__245480,G__245481,G__245482,G__245483,G__245484,G__245485,G__245486,G__245487,G__245488,G__245489,G__245490,G__245491,G__245492,G__245493,G__245494,G__245495,G__245496,G__245497));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245469,G__245470) : tailrecursion.hoplon.div.call(null,G__245469,G__245470));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245468) : tailrecursion.hoplon.div.call(null,G__245468));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245410;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245409;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245408;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245407;
}})()], 0))], 0))], 0));
var G__239920 = "";
var G__239921 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Procedures as Black-Box Abstractions"], null),(function (){var _STAR_references_STAR_245526 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245527 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_245528 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245529 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__245530 = cljs.core.PersistentArrayMap.EMPTY;
var G__245531 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__245532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Sqrt"], null);
var G__245533 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245532,G__245533) : tailrecursion.hoplon.markdown.code_node.call(null,G__245532,G__245533));
})()," is our first example of a process defined by a set of mutually defined procedures. Notice that the definition of ",(function (){var G__245534 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__245535 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245534,G__245535) : tailrecursion.hoplon.markdown.code_node.call(null,G__245534,G__245535));
})()," is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0)),"; that is, the procedure is defined in terms of itself. The idea of being able to define a procedure in terms of itself may be disturbing; it may seem unclear how such a ",(function (){var G__245536 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__245537 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["circular"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__245536,G__245537) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__245536,G__245537));
})()," definition could make sense at all, much less specify a well-defined process to be carried out by a computer. This will be addressed more carefully in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"\"#/sicp/ch/1/sect/2/\"",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.2"], null)], 0)),". But first let",(function (){var G__245538 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245539 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245538,G__245539) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245538,G__245539));
})(),"s consider some other important points illustrated by the ",(function (){var G__245540 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__245541 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245540,G__245541) : tailrecursion.hoplon.markdown.code_node.call(null,G__245540,G__245541));
})()," example."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245530,G__245531) : tailrecursion.hoplon.markdown.para_node.call(null,G__245530,G__245531));
})(),(function (){var G__245542 = cljs.core.PersistentArrayMap.EMPTY;
var G__245543 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that the problem of computing square roots breaks up naturally into a number of subproblems: how to tell whether a guess is good enough, how to improve a guess, and so on. Each of these tasks is accomplished by a separate procedure. The entire ",(function (){var G__245544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__245545 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245544,G__245545) : tailrecursion.hoplon.markdown.code_node.call(null,G__245544,G__245545));
})()," program can be viewed as a cluster of procedures (shown in figure 1.2) that mirrors the decomposition of the problem into subproblems."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245542,G__245543) : tailrecursion.hoplon.markdown.para_node.call(null,G__245542,G__245543));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245529;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245528;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245527;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245526;
}})(),book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Procedural decomposition of the sqrt program."], null)], 0)),"",(function (){var _STAR_references_STAR_245546 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245547 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_245548 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245549 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__245550 = cljs.core.PersistentArrayMap.EMPTY;
var G__245551 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The importance of this decomposition strategy is not simply that one is dividing the program into parts. After all, we could take any large program and divide it into parts ",(function (){var G__245552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__245553 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245552,G__245553) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245552,G__245553));
})()," the first ten lines, the next ten lines, the next ten lines, and so on. Rather, it is crucial that each procedure accomplishes an identifiable task that can be used as a module in defining other procedures. For example, when we define the ",(function (){var G__245554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245555 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245554,G__245555) : tailrecursion.hoplon.markdown.code_node.call(null,G__245554,G__245555));
})()," procedure in terms of ",(function (){var G__245556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245557 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245556,G__245557) : tailrecursion.hoplon.markdown.code_node.call(null,G__245556,G__245557));
})(),", we are able to regard the ",(function (){var G__245558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245559 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245558,G__245559) : tailrecursion.hoplon.markdown.code_node.call(null,G__245558,G__245559));
})()," procedure as a ",(function (){var G__245560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__245561 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["black box."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__245560,G__245561) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__245560,G__245561));
})()," We are not at that moment concerned with ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how"], null)], 0))," the procedure computes its result, only with the fact that it computes the square. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as the ",(function (){var G__245562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245563 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245562,G__245563) : tailrecursion.hoplon.markdown.code_node.call(null,G__245562,G__245563));
})()," procedure is concerned, ",(function (){var G__245564 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245565 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245564,G__245565) : tailrecursion.hoplon.markdown.code_node.call(null,G__245564,G__245565));
})()," is not quite a procedure but rather an abstraction of a procedure, a so-called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedural abstraction"], null)], 0)),". At this level of abstraction, any procedure that computes the square is equally good."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245550,G__245551) : tailrecursion.hoplon.markdown.para_node.call(null,G__245550,G__245551));
})(),(function (){var G__245566 = cljs.core.PersistentArrayMap.EMPTY;
var G__245567 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus, considering only the values they return, the following two procedures for squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.",(function (){var G__245568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__245569 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is not even clear which of these procedures is a more efficient implementation. This depends upon the hardware available. There are machines for which the ",(function (){var G__245570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__245571 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["obvious"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__245570,G__245571) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__245570,G__245571));
})()," implementation is the less efficient one. Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__245568,G__245569) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__245568,G__245569));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245566,G__245567) : tailrecursion.hoplon.markdown.para_node.call(null,G__245566,G__245567));
})(),(function (){var G__245598 = (function (){var G__245599 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245600 = (function (){var G__245601 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245602 = "(";
var G__245603 = (function (){var G__245613 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__245614 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245613,G__245614) : tailrecursion.hoplon.span.call(null,G__245613,G__245614));
})();
var G__245604 = (function (){var G__245615 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245616 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245615,G__245616) : tailrecursion.hoplon.span.call(null,G__245615,G__245616));
})();
var G__245605 = " [";
var G__245606 = (function (){var G__245617 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245618 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245617,G__245618) : tailrecursion.hoplon.span.call(null,G__245617,G__245618));
})();
var G__245607 = "] (";
var G__245608 = (function (){var G__245619 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245620 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245619,G__245620) : tailrecursion.hoplon.span.call(null,G__245619,G__245620));
})();
var G__245609 = (function (){var G__245621 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245622 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245621,G__245622) : tailrecursion.hoplon.span.call(null,G__245621,G__245622));
})();
var G__245610 = " ";
var G__245611 = (function (){var G__245623 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245624 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245623,G__245624) : tailrecursion.hoplon.span.call(null,G__245623,G__245624));
})();
var G__245612 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__245601,G__245602,G__245603,G__245604,G__245605,G__245606,G__245607,G__245608,G__245609,G__245610,G__245611,G__245612) : tailrecursion.hoplon.pre.call(null,G__245601,G__245602,G__245603,G__245604,G__245605,G__245606,G__245607,G__245608,G__245609,G__245610,G__245611,G__245612));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245599,G__245600) : tailrecursion.hoplon.div.call(null,G__245599,G__245600));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245598) : tailrecursion.hoplon.div.call(null,G__245598));
})(),(function (){var G__245625 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn square [x] \n  (exp (double (log x))))\n") : tailrecursion.hoplon.code.call(null,"(defn square [x] \n  (exp (double (log x))))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__245625) : tailrecursion.hoplon.pre.call(null,G__245625));
})(),(function (){var G__245652 = (function (){var G__245653 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245654 = (function (){var G__245655 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245656 = "(";
var G__245657 = (function (){var G__245667 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__245668 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245667,G__245668) : tailrecursion.hoplon.span.call(null,G__245667,G__245668));
})();
var G__245658 = (function (){var G__245669 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245670 = "double ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245669,G__245670) : tailrecursion.hoplon.span.call(null,G__245669,G__245670));
})();
var G__245659 = "[";
var G__245660 = (function (){var G__245671 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245672 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245671,G__245672) : tailrecursion.hoplon.span.call(null,G__245671,G__245672));
})();
var G__245661 = "] (";
var G__245662 = (function (){var G__245673 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245674 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245673,G__245674) : tailrecursion.hoplon.span.call(null,G__245673,G__245674));
})();
var G__245663 = (function (){var G__245675 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245676 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245675,G__245676) : tailrecursion.hoplon.span.call(null,G__245675,G__245676));
})();
var G__245664 = " ";
var G__245665 = (function (){var G__245677 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245678 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245677,G__245678) : tailrecursion.hoplon.span.call(null,G__245677,G__245678));
})();
var G__245666 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__245655,G__245656,G__245657,G__245658,G__245659,G__245660,G__245661,G__245662,G__245663,G__245664,G__245665,G__245666) : tailrecursion.hoplon.pre.call(null,G__245655,G__245656,G__245657,G__245658,G__245659,G__245660,G__245661,G__245662,G__245663,G__245664,G__245665,G__245666));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245653,G__245654) : tailrecursion.hoplon.div.call(null,G__245653,G__245654));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245652) : tailrecursion.hoplon.div.call(null,G__245652));
})(),(function (){var G__245679 = cljs.core.PersistentArrayMap.EMPTY;
var G__245680 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So a procedure definition should be able to suppress detail. The users of the procedure may not have written the procedure themselves, but may have obtained it from another programmer as a black box. A user should not need to know how the procedure is implemented in order to use it."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245679,G__245680) : tailrecursion.hoplon.markdown.para_node.call(null,G__245679,G__245680));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245549;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245548;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245547;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245546;
}})()], 0));
var G__239922 = "";
var G__239923 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Local Names"], null),(function (){var _STAR_references_STAR_245681 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245682 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_245683 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_245684 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__245685 = cljs.core.PersistentArrayMap.EMPTY;
var G__245686 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One detail of a procedure",(function (){var G__245687 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245688 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245687,G__245688) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245687,G__245688));
})(),"s implementation that should not matter to the user of the procedure is the implementer",(function (){var G__245689 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245690 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245689,G__245690) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245689,G__245690));
})(),"s choice of names for the procedure",(function (){var G__245691 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245692 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245691,G__245692) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245691,G__245692));
})(),"s formal parameters. Thus, the following procedures should not be distinguishable:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245685,G__245686) : tailrecursion.hoplon.markdown.para_node.call(null,G__245685,G__245686));
})(),(function (){var G__245719 = (function (){var G__245720 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245721 = (function (){var G__245722 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245723 = "(";
var G__245724 = (function (){var G__245734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__245735 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245734,G__245735) : tailrecursion.hoplon.span.call(null,G__245734,G__245735));
})();
var G__245725 = (function (){var G__245736 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245737 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245736,G__245737) : tailrecursion.hoplon.span.call(null,G__245736,G__245737));
})();
var G__245726 = " [";
var G__245727 = (function (){var G__245738 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245739 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245738,G__245739) : tailrecursion.hoplon.span.call(null,G__245738,G__245739));
})();
var G__245728 = "] (";
var G__245729 = (function (){var G__245740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245741 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245740,G__245741) : tailrecursion.hoplon.span.call(null,G__245740,G__245741));
})();
var G__245730 = (function (){var G__245742 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245743 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245742,G__245743) : tailrecursion.hoplon.span.call(null,G__245742,G__245743));
})();
var G__245731 = " ";
var G__245732 = (function (){var G__245744 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245745 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245744,G__245745) : tailrecursion.hoplon.span.call(null,G__245744,G__245745));
})();
var G__245733 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__245722,G__245723,G__245724,G__245725,G__245726,G__245727,G__245728,G__245729,G__245730,G__245731,G__245732,G__245733) : tailrecursion.hoplon.pre.call(null,G__245722,G__245723,G__245724,G__245725,G__245726,G__245727,G__245728,G__245729,G__245730,G__245731,G__245732,G__245733));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245720,G__245721) : tailrecursion.hoplon.div.call(null,G__245720,G__245721));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245719) : tailrecursion.hoplon.div.call(null,G__245719));
})(),(function (){var G__245772 = (function (){var G__245773 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245774 = (function (){var G__245775 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245776 = "(";
var G__245777 = (function (){var G__245787 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__245788 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245787,G__245788) : tailrecursion.hoplon.span.call(null,G__245787,G__245788));
})();
var G__245778 = (function (){var G__245789 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245790 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245789,G__245790) : tailrecursion.hoplon.span.call(null,G__245789,G__245790));
})();
var G__245779 = " [";
var G__245780 = (function (){var G__245791 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245792 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245791,G__245792) : tailrecursion.hoplon.span.call(null,G__245791,G__245792));
})();
var G__245781 = "] (";
var G__245782 = (function (){var G__245793 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245794 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245793,G__245794) : tailrecursion.hoplon.span.call(null,G__245793,G__245794));
})();
var G__245783 = (function (){var G__245795 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245796 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245795,G__245796) : tailrecursion.hoplon.span.call(null,G__245795,G__245796));
})();
var G__245784 = " ";
var G__245785 = (function (){var G__245797 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245798 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245797,G__245798) : tailrecursion.hoplon.span.call(null,G__245797,G__245798));
})();
var G__245786 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__245775,G__245776,G__245777,G__245778,G__245779,G__245780,G__245781,G__245782,G__245783,G__245784,G__245785,G__245786) : tailrecursion.hoplon.pre.call(null,G__245775,G__245776,G__245777,G__245778,G__245779,G__245780,G__245781,G__245782,G__245783,G__245784,G__245785,G__245786));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245773,G__245774) : tailrecursion.hoplon.div.call(null,G__245773,G__245774));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245772) : tailrecursion.hoplon.div.call(null,G__245772));
})(),(function (){var G__245799 = cljs.core.PersistentArrayMap.EMPTY;
var G__245800 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This principle ",(function (){var G__245801 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__245802 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245801,G__245802) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245801,G__245802));
})()," that the meaning of a procedure should be independent of the parameter names used by its author ",(function (){var G__245803 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__245804 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245803,G__245804) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245803,G__245804));
})()," seems on the surface to be self-evident, but its consequences are profound. The simplest consequence is that the parameter names of a procedure must be local to the body of the procedure. For example, we used ",(function (){var G__245805 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245806 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245805,G__245806) : tailrecursion.hoplon.markdown.code_node.call(null,G__245805,G__245806));
})()," in the definition of ",(function (){var G__245807 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245808 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245807,G__245808) : tailrecursion.hoplon.markdown.code_node.call(null,G__245807,G__245808));
})()," in our square-root procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245799,G__245800) : tailrecursion.hoplon.markdown.para_node.call(null,G__245799,G__245800));
})(),(function (){var G__245856 = (function (){var G__245857 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__245858 = (function (){var G__245859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__245860 = "(";
var G__245861 = (function (){var G__245882 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__245883 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245882,G__245883) : tailrecursion.hoplon.span.call(null,G__245882,G__245883));
})();
var G__245862 = (function (){var G__245884 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245885 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245884,G__245885) : tailrecursion.hoplon.span.call(null,G__245884,G__245885));
})();
var G__245863 = " [";
var G__245864 = (function (){var G__245886 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245887 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245886,G__245887) : tailrecursion.hoplon.span.call(null,G__245886,G__245887));
})();
var G__245865 = " ";
var G__245866 = (function (){var G__245888 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245889 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245888,G__245889) : tailrecursion.hoplon.span.call(null,G__245888,G__245889));
})();
var G__245867 = "]\n  (";
var G__245868 = (function (){var G__245890 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245891 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245890,G__245891) : tailrecursion.hoplon.span.call(null,G__245890,G__245891));
})();
var G__245869 = "(";
var G__245870 = (function (){var G__245892 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245893 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245892,G__245893) : tailrecursion.hoplon.span.call(null,G__245892,G__245893));
})();
var G__245871 = " (";
var G__245872 = (function (){var G__245894 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__245895 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245894,G__245895) : tailrecursion.hoplon.span.call(null,G__245894,G__245895));
})();
var G__245873 = "(";
var G__245874 = (function (){var G__245896 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__245897 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245896,G__245897) : tailrecursion.hoplon.span.call(null,G__245896,G__245897));
})();
var G__245875 = " ";
var G__245876 = (function (){var G__245898 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245899 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245898,G__245899) : tailrecursion.hoplon.span.call(null,G__245898,G__245899));
})();
var G__245877 = ") ";
var G__245878 = (function (){var G__245900 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__245901 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245900,G__245901) : tailrecursion.hoplon.span.call(null,G__245900,G__245901));
})();
var G__245879 = ")) ";
var G__245880 = (function (){var G__245902 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__245903 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__245902,G__245903) : tailrecursion.hoplon.span.call(null,G__245902,G__245903));
})();
var G__245881 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__245859,G__245860,G__245861,G__245862,G__245863,G__245864,G__245865,G__245866,G__245867,G__245868,G__245869,G__245870,G__245871,G__245872,G__245873,G__245874,G__245875,G__245876,G__245877,G__245878,G__245879,G__245880,G__245881) : tailrecursion.hoplon.pre.call(null,G__245859,G__245860,G__245861,G__245862,G__245863,G__245864,G__245865,G__245866,G__245867,G__245868,G__245869,G__245870,G__245871,G__245872,G__245873,G__245874,G__245875,G__245876,G__245877,G__245878,G__245879,G__245880,G__245881));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__245857,G__245858) : tailrecursion.hoplon.div.call(null,G__245857,G__245858));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__245856) : tailrecursion.hoplon.div.call(null,G__245856));
})(),(function (){var G__245904 = cljs.core.PersistentArrayMap.EMPTY;
var G__245905 = cljs.core.PersistentVector.fromArray(["The intention of the author of ",(function (){var G__245906 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245907 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245906,G__245907) : tailrecursion.hoplon.markdown.code_node.call(null,G__245906,G__245907));
})()," is to determine if the square of the first argument is within a given tolerance of the second argument. We see that the author of ",(function (){var G__245908 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245909 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245908,G__245909) : tailrecursion.hoplon.markdown.code_node.call(null,G__245908,G__245909));
})()," used the name ",(function (){var G__245910 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__245911 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245910,G__245911) : tailrecursion.hoplon.markdown.code_node.call(null,G__245910,G__245911));
})()," to refer to the first argument and ",(function (){var G__245912 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245913 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245912,G__245913) : tailrecursion.hoplon.markdown.code_node.call(null,G__245912,G__245913));
})()," to refer to the second argument. The argument of ",(function (){var G__245914 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245915 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245914,G__245915) : tailrecursion.hoplon.markdown.code_node.call(null,G__245914,G__245915));
})()," is ",(function (){var G__245916 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__245917 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245916,G__245917) : tailrecursion.hoplon.markdown.code_node.call(null,G__245916,G__245917));
})(),". If the author of ",(function (){var G__245918 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245919 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245918,G__245919) : tailrecursion.hoplon.markdown.code_node.call(null,G__245918,G__245919));
})()," used ",(function (){var G__245920 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245921 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245920,G__245921) : tailrecursion.hoplon.markdown.code_node.call(null,G__245920,G__245921));
})()," (as above) to refer to that argument, we see that the ",(function (){var G__245922 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245923 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245922,G__245923) : tailrecursion.hoplon.markdown.code_node.call(null,G__245922,G__245923));
})()," in ",(function (){var G__245924 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245925 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245924,G__245925) : tailrecursion.hoplon.markdown.code_node.call(null,G__245924,G__245925));
})()," must be a different ",(function (){var G__245926 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245927 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245926,G__245927) : tailrecursion.hoplon.markdown.code_node.call(null,G__245926,G__245927));
})()," than the one in ",(function (){var G__245928 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245929 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245928,G__245929) : tailrecursion.hoplon.markdown.code_node.call(null,G__245928,G__245929));
})(),". Running the procedure ",(function (){var G__245930 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245931 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245930,G__245931) : tailrecursion.hoplon.markdown.code_node.call(null,G__245930,G__245931));
})()," must not affect the value of ",(function (){var G__245932 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245933 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245932,G__245933) : tailrecursion.hoplon.markdown.code_node.call(null,G__245932,G__245933));
})()," that is used by ",(function (){var G__245934 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245935 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245934,G__245935) : tailrecursion.hoplon.markdown.code_node.call(null,G__245934,G__245935));
})(),", because that value of ",(function (){var G__245936 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245937 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245936,G__245937) : tailrecursion.hoplon.markdown.code_node.call(null,G__245936,G__245937));
})()," may be needed by ",(function (){var G__245938 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245939 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245938,G__245939) : tailrecursion.hoplon.markdown.code_node.call(null,G__245938,G__245939));
})()," after ",(function (){var G__245940 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245941 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245940,G__245941) : tailrecursion.hoplon.markdown.code_node.call(null,G__245940,G__245941));
})()," is done computing."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245904,G__245905) : tailrecursion.hoplon.markdown.para_node.call(null,G__245904,G__245905));
})(),(function (){var G__245942 = cljs.core.PersistentArrayMap.EMPTY;
var G__245943 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If the parameters were not local to the bodies of their respective procedures, then the parameter ",(function (){var G__245944 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245945 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245944,G__245945) : tailrecursion.hoplon.markdown.code_node.call(null,G__245944,G__245945));
})()," in ",(function (){var G__245946 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245947 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245946,G__245947) : tailrecursion.hoplon.markdown.code_node.call(null,G__245946,G__245947));
})()," could be confused with the parameter ",(function (){var G__245948 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245949 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245948,G__245949) : tailrecursion.hoplon.markdown.code_node.call(null,G__245948,G__245949));
})()," in ",(function (){var G__245950 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245951 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245950,G__245951) : tailrecursion.hoplon.markdown.code_node.call(null,G__245950,G__245951));
})(),", and the behavior of ",(function (){var G__245952 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245953 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245952,G__245953) : tailrecursion.hoplon.markdown.code_node.call(null,G__245952,G__245953));
})()," would depend upon which version of ",(function (){var G__245954 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245955 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245954,G__245955) : tailrecursion.hoplon.markdown.code_node.call(null,G__245954,G__245955));
})()," we used. Thus, ",(function (){var G__245956 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245957 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245956,G__245957) : tailrecursion.hoplon.markdown.code_node.call(null,G__245956,G__245957));
})()," would not be the black box we desired."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245942,G__245943) : tailrecursion.hoplon.markdown.para_node.call(null,G__245942,G__245943));
})(),(function (){var G__245958 = cljs.core.PersistentArrayMap.EMPTY;
var G__245959 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A formal parameter of a procedure has a very special role in the procedure definition, in that it doesn",(function (){var G__245960 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__245961 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__245960,G__245961) : tailrecursion.hoplon.markdown.simple_node.call(null,G__245960,G__245961));
})(),"t matter what name the formal parameter has. Such a name is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["bound variable"], null)], 0)),", and we say that the procedure definition ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["binds"], null)], 0))," its formal parameters. The meaning of a procedure definition is unchanged if a bound variable is consistently renamed throughout the definition.",(function (){var G__245962 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__245963 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The concept of consistent renaming is actually subtle and difficult to define formally. Famous logicians have made embarrassing errors here."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__245962,G__245963) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__245962,G__245963));
})()," If a variable is not bound, we say that it is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["free"], null)], 0)),". The set of expressions for which a binding defines a name is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["scope"], null)], 0))," of that name. In a procedure definition, the bound variables declared as the formal parameters of the procedure have the body of the procedure as their scope."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245958,G__245959) : tailrecursion.hoplon.markdown.para_node.call(null,G__245958,G__245959));
})(),(function (){var G__245964 = cljs.core.PersistentArrayMap.EMPTY;
var G__245965 = cljs.core.PersistentVector.fromArray(["In the definition of ",(function (){var G__245966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245967 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245966,G__245967) : tailrecursion.hoplon.markdown.code_node.call(null,G__245966,G__245967));
})()," above, ",(function (){var G__245968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__245969 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245968,G__245969) : tailrecursion.hoplon.markdown.code_node.call(null,G__245968,G__245969));
})()," and ",(function (){var G__245970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245971 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245970,G__245971) : tailrecursion.hoplon.markdown.code_node.call(null,G__245970,G__245971));
})()," are bound variables but ",(function (){var G__245972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__245973 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245972,G__245973) : tailrecursion.hoplon.markdown.code_node.call(null,G__245972,G__245973));
})(),", ",(function (){var G__245974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__245975 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245974,G__245975) : tailrecursion.hoplon.markdown.code_node.call(null,G__245974,G__245975));
})(),", ",(function (){var G__245976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__245977 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245976,G__245977) : tailrecursion.hoplon.markdown.code_node.call(null,G__245976,G__245977));
})(),", and ",(function (){var G__245978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245979 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245978,G__245979) : tailrecursion.hoplon.markdown.code_node.call(null,G__245978,G__245979));
})()," are free. The meaning of ",(function (){var G__245980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__245981 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245980,G__245981) : tailrecursion.hoplon.markdown.code_node.call(null,G__245980,G__245981));
})()," should be independent of the names we choose for ",(function (){var G__245982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__245983 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245982,G__245983) : tailrecursion.hoplon.markdown.code_node.call(null,G__245982,G__245983));
})()," and ",(function (){var G__245984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__245985 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245984,G__245985) : tailrecursion.hoplon.markdown.code_node.call(null,G__245984,G__245985));
})()," so long as they are distinct and different from ",(function (){var G__245986 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__245987 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245986,G__245987) : tailrecursion.hoplon.markdown.code_node.call(null,G__245986,G__245987));
})(),", ",(function (){var G__245988 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__245989 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245988,G__245989) : tailrecursion.hoplon.markdown.code_node.call(null,G__245988,G__245989));
})(),", ",(function (){var G__245990 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__245991 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245990,G__245991) : tailrecursion.hoplon.markdown.code_node.call(null,G__245990,G__245991));
})(),", and ",(function (){var G__245992 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__245993 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245992,G__245993) : tailrecursion.hoplon.markdown.code_node.call(null,G__245992,G__245993));
})(),". (If we renamed ",(function (){var G__245994 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__245995 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245994,G__245995) : tailrecursion.hoplon.markdown.code_node.call(null,G__245994,G__245995));
})()," to ",(function (){var G__245996 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__245997 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245996,G__245997) : tailrecursion.hoplon.markdown.code_node.call(null,G__245996,G__245997));
})()," we would have introduced a bug by ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["capturing"], null)], 0))," the variable ",(function (){var G__245998 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__245999 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__245998,G__245999) : tailrecursion.hoplon.markdown.code_node.call(null,G__245998,G__245999));
})(),". It would have changed from free to bound.) The meaning of ",(function (){var G__246000 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__246001 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246000,G__246001) : tailrecursion.hoplon.markdown.code_node.call(null,G__246000,G__246001));
})()," is not independent of the names of its free variables, however. It surely depends upon the fact (external to this definition) that the symbol ",(function (){var G__246002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__246003 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246002,G__246003) : tailrecursion.hoplon.markdown.code_node.call(null,G__246002,G__246003));
})()," names a procedure for computing the absolute value of a number. ",(function (){var G__246004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Good-enough?"], null);
var G__246005 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246004,G__246005) : tailrecursion.hoplon.markdown.code_node.call(null,G__246004,G__246005));
})()," will compute a different function if we substitute ",(function (){var G__246006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cos"], null);
var G__246007 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246006,G__246007) : tailrecursion.hoplon.markdown.code_node.call(null,G__246006,G__246007));
})()," for ",(function (){var G__246008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__246009 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246008,G__246009) : tailrecursion.hoplon.markdown.code_node.call(null,G__246008,G__246009));
})()," in its definition."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__245964,G__245965) : tailrecursion.hoplon.markdown.para_node.call(null,G__245964,G__245965));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245684;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245683;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_245682;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_245681;
}})()], 0));
var G__239924 = "";
var G__239925 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Internal Definitions and Block Structures"], null),(function (){var _STAR_references_STAR_246010 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_246011 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_246012 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_246013 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__246014 = cljs.core.PersistentArrayMap.EMPTY;
var G__246015 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is instructive to note that the rest of this section does not work as well in Clojure. The reason is that ",(function (){var G__246016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__246017 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246016,G__246017) : tailrecursion.hoplon.markdown.code_node.call(null,G__246016,G__246017));
})(),", ",(function (){var G__246018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__246019 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246018,G__246019) : tailrecursion.hoplon.markdown.code_node.call(null,G__246018,G__246019));
})()," and all other defining forms define things in the global environment directly (no matter where they are called). If this does not make sense to you just yet, don",(function (){var G__246020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__246021 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__246020,G__246021) : tailrecursion.hoplon.markdown.simple_node.call(null,G__246020,G__246021));
})(),"t worry: it should by the end of this section."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__246014,G__246015) : tailrecursion.hoplon.markdown.para_node.call(null,G__246014,G__246015));
})(),(function (){var G__246022 = cljs.core.PersistentArrayMap.EMPTY;
var G__246023 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have one kind of name isolation available to us so far: The formal parameters of a procedure are local to the body of the procedure. The square-root program illustrates another way in which we would like to control the use of names. The existing program consists of separate procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__246022,G__246023) : tailrecursion.hoplon.markdown.para_node.call(null,G__246022,G__246023));
})(),(function (){var G__246183 = (function (){var G__246184 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__246185 = (function (){var G__246186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__246187 = "(";
var G__246188 = (function (){var G__246263 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246264 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246263,G__246264) : tailrecursion.hoplon.span.call(null,G__246263,G__246264));
})();
var G__246189 = (function (){var G__246265 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246266 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246265,G__246266) : tailrecursion.hoplon.span.call(null,G__246265,G__246266));
})();
var G__246190 = " [";
var G__246191 = (function (){var G__246267 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246268 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246267,G__246268) : tailrecursion.hoplon.span.call(null,G__246267,G__246268));
})();
var G__246192 = "]\n  (";
var G__246193 = (function (){var G__246269 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246270 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246269,G__246270) : tailrecursion.hoplon.span.call(null,G__246269,G__246270));
})();
var G__246194 = " ";
var G__246195 = (function (){var G__246271 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__246272 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246271,G__246272) : tailrecursion.hoplon.span.call(null,G__246271,G__246272));
})();
var G__246196 = " ";
var G__246197 = (function (){var G__246273 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246274 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246273,G__246274) : tailrecursion.hoplon.span.call(null,G__246273,G__246274));
})();
var G__246198 = "))\n(";
var G__246199 = (function (){var G__246275 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246276 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246275,G__246276) : tailrecursion.hoplon.span.call(null,G__246275,G__246276));
})();
var G__246200 = (function (){var G__246277 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246278 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246277,G__246278) : tailrecursion.hoplon.span.call(null,G__246277,G__246278));
})();
var G__246201 = " [";
var G__246202 = (function (){var G__246279 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246280 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246279,G__246280) : tailrecursion.hoplon.span.call(null,G__246279,G__246280));
})();
var G__246203 = " ";
var G__246204 = (function (){var G__246281 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246282 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246281,G__246282) : tailrecursion.hoplon.span.call(null,G__246281,G__246282));
})();
var G__246205 = "]\n  (";
var G__246206 = (function (){var G__246283 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246284 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246283,G__246284) : tailrecursion.hoplon.span.call(null,G__246283,G__246284));
})();
var G__246207 = "(";
var G__246208 = (function (){var G__246285 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246286 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246285,G__246286) : tailrecursion.hoplon.span.call(null,G__246285,G__246286));
})();
var G__246209 = " ";
var G__246210 = (function (){var G__246287 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246288 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246287,G__246288) : tailrecursion.hoplon.span.call(null,G__246287,G__246288));
})();
var G__246211 = " ";
var G__246212 = (function (){var G__246289 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246290 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246289,G__246290) : tailrecursion.hoplon.span.call(null,G__246289,G__246290));
})();
var G__246213 = ")\n      ";
var G__246214 = (function (){var G__246291 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246292 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246291,G__246292) : tailrecursion.hoplon.span.call(null,G__246291,G__246292));
})();
var G__246215 = "\n      (";
var G__246216 = (function (){var G__246293 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246294 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246293,G__246294) : tailrecursion.hoplon.span.call(null,G__246293,G__246294));
})();
var G__246217 = " (";
var G__246218 = (function (){var G__246295 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246296 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246295,G__246296) : tailrecursion.hoplon.span.call(null,G__246295,G__246296));
})();
var G__246219 = " ";
var G__246220 = (function (){var G__246297 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246298 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246297,G__246298) : tailrecursion.hoplon.span.call(null,G__246297,G__246298));
})();
var G__246221 = " ";
var G__246222 = (function (){var G__246299 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246300 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246299,G__246300) : tailrecursion.hoplon.span.call(null,G__246299,G__246300));
})();
var G__246223 = ") ";
var G__246224 = (function (){var G__246301 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246302 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246301,G__246302) : tailrecursion.hoplon.span.call(null,G__246301,G__246302));
})();
var G__246225 = ")))\n(";
var G__246226 = (function (){var G__246303 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246304 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246303,G__246304) : tailrecursion.hoplon.span.call(null,G__246303,G__246304));
})();
var G__246227 = (function (){var G__246305 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246306 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246305,G__246306) : tailrecursion.hoplon.span.call(null,G__246305,G__246306));
})();
var G__246228 = " [";
var G__246229 = (function (){var G__246307 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246308 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246307,G__246308) : tailrecursion.hoplon.span.call(null,G__246307,G__246308));
})();
var G__246230 = " ";
var G__246231 = (function (){var G__246309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246310 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246309,G__246310) : tailrecursion.hoplon.span.call(null,G__246309,G__246310));
})();
var G__246232 = "]\n  (";
var G__246233 = (function (){var G__246311 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__246312 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246311,G__246312) : tailrecursion.hoplon.span.call(null,G__246311,G__246312));
})();
var G__246234 = "(";
var G__246235 = (function (){var G__246313 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246314 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246313,G__246314) : tailrecursion.hoplon.span.call(null,G__246313,G__246314));
})();
var G__246236 = " (";
var G__246237 = (function (){var G__246315 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__246316 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246315,G__246316) : tailrecursion.hoplon.span.call(null,G__246315,G__246316));
})();
var G__246238 = "(";
var G__246239 = (function (){var G__246317 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246318 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246317,G__246318) : tailrecursion.hoplon.span.call(null,G__246317,G__246318));
})();
var G__246240 = " ";
var G__246241 = (function (){var G__246319 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246320 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246319,G__246320) : tailrecursion.hoplon.span.call(null,G__246319,G__246320));
})();
var G__246242 = ") ";
var G__246243 = (function (){var G__246321 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246322 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246321,G__246322) : tailrecursion.hoplon.span.call(null,G__246321,G__246322));
})();
var G__246244 = ")) ";
var G__246245 = (function (){var G__246323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__246324 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246323,G__246324) : tailrecursion.hoplon.span.call(null,G__246323,G__246324));
})();
var G__246246 = "))\n(";
var G__246247 = (function (){var G__246325 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246326 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246325,G__246326) : tailrecursion.hoplon.span.call(null,G__246325,G__246326));
})();
var G__246248 = (function (){var G__246327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246328 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246327,G__246328) : tailrecursion.hoplon.span.call(null,G__246327,G__246328));
})();
var G__246249 = " [";
var G__246250 = (function (){var G__246329 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246330 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246329,G__246330) : tailrecursion.hoplon.span.call(null,G__246329,G__246330));
})();
var G__246251 = " ";
var G__246252 = (function (){var G__246331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246332 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246331,G__246332) : tailrecursion.hoplon.span.call(null,G__246331,G__246332));
})();
var G__246253 = "]\n  (";
var G__246254 = (function (){var G__246333 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246334 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246333,G__246334) : tailrecursion.hoplon.span.call(null,G__246333,G__246334));
})();
var G__246255 = " ";
var G__246256 = (function (){var G__246335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246336 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246335,G__246336) : tailrecursion.hoplon.span.call(null,G__246335,G__246336));
})();
var G__246257 = " (";
var G__246258 = (function (){var G__246337 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__246338 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246337,G__246338) : tailrecursion.hoplon.span.call(null,G__246337,G__246338));
})();
var G__246259 = (function (){var G__246339 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246340 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246339,G__246340) : tailrecursion.hoplon.span.call(null,G__246339,G__246340));
})();
var G__246260 = " ";
var G__246261 = (function (){var G__246341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246342 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246341,G__246342) : tailrecursion.hoplon.span.call(null,G__246341,G__246342));
})();
var G__246262 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77(G__246186,G__246187,G__246188,G__246189,G__246190,G__246191,G__246192,G__246193,G__246194,G__246195,G__246196,G__246197,G__246198,G__246199,G__246200,G__246201,G__246202,G__246203,G__246204,G__246205,G__246206,G__246207,G__246208,G__246209,G__246210,G__246211,G__246212,G__246213,G__246214,G__246215,G__246216,G__246217,G__246218,G__246219,G__246220,G__246221,G__246222,G__246223,G__246224,G__246225,G__246226,G__246227,G__246228,G__246229,G__246230,G__246231,G__246232,G__246233,G__246234,G__246235,G__246236,G__246237,G__246238,G__246239,G__246240,G__246241,G__246242,G__246243,G__246244,G__246245,G__246246,G__246247,G__246248,G__246249,G__246250,G__246251,G__246252,G__246253,G__246254,G__246255,G__246256,G__246257,G__246258,G__246259,G__246260,G__246261,G__246262) : tailrecursion.hoplon.pre.call(null,G__246186,G__246187,G__246188,G__246189,G__246190,G__246191,G__246192,G__246193,G__246194,G__246195,G__246196,G__246197,G__246198,G__246199,G__246200,G__246201,G__246202,G__246203,G__246204,G__246205,G__246206,G__246207,G__246208,G__246209,G__246210,G__246211,G__246212,G__246213,G__246214,G__246215,G__246216,G__246217,G__246218,G__246219,G__246220,G__246221,G__246222,G__246223,G__246224,G__246225,G__246226,G__246227,G__246228,G__246229,G__246230,G__246231,G__246232,G__246233,G__246234,G__246235,G__246236,G__246237,G__246238,G__246239,G__246240,G__246241,G__246242,G__246243,G__246244,G__246245,G__246246,G__246247,G__246248,G__246249,G__246250,G__246251,G__246252,G__246253,G__246254,G__246255,G__246256,G__246257,G__246258,G__246259,G__246260,G__246261,G__246262));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__246184,G__246185) : tailrecursion.hoplon.div.call(null,G__246184,G__246185));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__246183) : tailrecursion.hoplon.div.call(null,G__246183));
})(),(function (){var G__246343 = cljs.core.PersistentArrayMap.EMPTY;
var G__246344 = new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The problem with this program is that the only procedure that is important to users of ",(function (){var G__246345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__246346 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246345,G__246346) : tailrecursion.hoplon.markdown.code_node.call(null,G__246345,G__246346));
})()," is ",(function (){var G__246347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__246348 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246347,G__246348) : tailrecursion.hoplon.markdown.code_node.call(null,G__246347,G__246348));
})(),". The other procedures (",(function (){var G__246349 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__246350 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246349,G__246350) : tailrecursion.hoplon.markdown.code_node.call(null,G__246349,G__246350));
})(),", ",(function (){var G__246351 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__246352 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246351,G__246352) : tailrecursion.hoplon.markdown.code_node.call(null,G__246351,G__246352));
})(),", and ",(function (){var G__246353 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__246354 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246353,G__246354) : tailrecursion.hoplon.markdown.code_node.call(null,G__246353,G__246354));
})(),") only clutter up their minds. They may not define any other procedure called ",(function (){var G__246355 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__246356 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246355,G__246356) : tailrecursion.hoplon.markdown.code_node.call(null,G__246355,G__246356));
})()," as part of another program to work together with the square-root program, because ",(function (){var G__246357 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__246358 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246357,G__246358) : tailrecursion.hoplon.markdown.code_node.call(null,G__246357,G__246358));
})()," needs it. The problem is especially severe in the construction of large systems by many separate programmers. For example, in the construction of a large library of numerical procedures, many numerical functions are computed as successive approximations and thus might have procedures named ",(function (){var G__246359 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__246360 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246359,G__246360) : tailrecursion.hoplon.markdown.code_node.call(null,G__246359,G__246360));
})()," and ",(function (){var G__246361 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__246362 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246361,G__246362) : tailrecursion.hoplon.markdown.code_node.call(null,G__246361,G__246362));
})()," as auxiliary procedures. We would like to localize the subprocedures, hiding them inside ",(function (){var G__246363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__246364 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246363,G__246364) : tailrecursion.hoplon.markdown.code_node.call(null,G__246363,G__246364));
})()," so that ",(function (){var G__246365 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__246366 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246365,G__246366) : tailrecursion.hoplon.markdown.code_node.call(null,G__246365,G__246366));
})()," could coexist with other successive approximations, each having its own private ",(function (){var G__246367 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__246368 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246367,G__246368) : tailrecursion.hoplon.markdown.code_node.call(null,G__246367,G__246368));
})()," procedure. To make this possible, we allow a procedure to have internal definitions that are local to that procedure. For example, in the ",(function (){var G__246369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square-root"], null);
var G__246370 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246369,G__246370) : tailrecursion.hoplon.markdown.code_node.call(null,G__246369,G__246370));
})()," problem we can write"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__246343,G__246344) : tailrecursion.hoplon.markdown.para_node.call(null,G__246343,G__246344));
})(),(function (){var G__246533 = (function (){var G__246534 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__246535 = (function (){var G__246536 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__246537 = "(";
var G__246538 = (function (){var G__246616 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246617 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246616,G__246617) : tailrecursion.hoplon.span.call(null,G__246616,G__246617));
})();
var G__246539 = "(";
var G__246540 = (function (){var G__246618 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__246619 = "sqrt ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246618,G__246619) : tailrecursion.hoplon.span.call(null,G__246618,G__246619));
})();
var G__246541 = (function (){var G__246620 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246621 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246620,G__246621) : tailrecursion.hoplon.span.call(null,G__246620,G__246621));
})();
var G__246542 = ")\n  (";
var G__246543 = (function (){var G__246622 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246623 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246622,G__246623) : tailrecursion.hoplon.span.call(null,G__246622,G__246623));
})();
var G__246544 = "(";
var G__246545 = (function (){var G__246624 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246625 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246624,G__246625) : tailrecursion.hoplon.span.call(null,G__246624,G__246625));
})();
var G__246546 = " ";
var G__246547 = (function (){var G__246626 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246627 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246626,G__246627) : tailrecursion.hoplon.span.call(null,G__246626,G__246627));
})();
var G__246548 = " ";
var G__246549 = (function (){var G__246628 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246629 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246628,G__246629) : tailrecursion.hoplon.span.call(null,G__246628,G__246629));
})();
var G__246550 = ")\n    (";
var G__246551 = (function (){var G__246630 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__246631 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246630,G__246631) : tailrecursion.hoplon.span.call(null,G__246630,G__246631));
})();
var G__246552 = "(";
var G__246553 = (function (){var G__246632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__246633 = "abs ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246632,G__246633) : tailrecursion.hoplon.span.call(null,G__246632,G__246633));
})();
var G__246554 = "(";
var G__246555 = (function (){var G__246634 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__246635 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246634,G__246635) : tailrecursion.hoplon.span.call(null,G__246634,G__246635));
})();
var G__246556 = "(";
var G__246557 = (function (){var G__246636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246637 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246636,G__246637) : tailrecursion.hoplon.span.call(null,G__246636,G__246637));
})();
var G__246558 = " ";
var G__246559 = (function (){var G__246638 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246639 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246638,G__246639) : tailrecursion.hoplon.span.call(null,G__246638,G__246639));
})();
var G__246560 = ") ";
var G__246561 = (function (){var G__246640 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246641 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246640,G__246641) : tailrecursion.hoplon.span.call(null,G__246640,G__246641));
})();
var G__246562 = ")) ";
var G__246563 = (function (){var G__246642 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__246643 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246642,G__246643) : tailrecursion.hoplon.span.call(null,G__246642,G__246643));
})();
var G__246564 = "))\n  (";
var G__246565 = (function (){var G__246644 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246645 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246644,G__246645) : tailrecursion.hoplon.span.call(null,G__246644,G__246645));
})();
var G__246566 = "(";
var G__246567 = (function (){var G__246646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246647 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246646,G__246647) : tailrecursion.hoplon.span.call(null,G__246646,G__246647));
})();
var G__246568 = " ";
var G__246569 = (function (){var G__246648 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246649 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246648,G__246649) : tailrecursion.hoplon.span.call(null,G__246648,G__246649));
})();
var G__246570 = " ";
var G__246571 = (function (){var G__246650 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246651 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246650,G__246651) : tailrecursion.hoplon.span.call(null,G__246650,G__246651));
})();
var G__246572 = ")\n    (";
var G__246573 = (function (){var G__246652 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246653 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246652,G__246653) : tailrecursion.hoplon.span.call(null,G__246652,G__246653));
})();
var G__246574 = " ";
var G__246575 = (function (){var G__246654 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246655 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246654,G__246655) : tailrecursion.hoplon.span.call(null,G__246654,G__246655));
})();
var G__246576 = " (";
var G__246577 = (function (){var G__246656 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__246657 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246656,G__246657) : tailrecursion.hoplon.span.call(null,G__246656,G__246657));
})();
var G__246578 = (function (){var G__246658 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246659 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246658,G__246659) : tailrecursion.hoplon.span.call(null,G__246658,G__246659));
})();
var G__246579 = " ";
var G__246580 = (function (){var G__246660 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246661 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246660,G__246661) : tailrecursion.hoplon.span.call(null,G__246660,G__246661));
})();
var G__246581 = ")))\n  (";
var G__246582 = (function (){var G__246662 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246663 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246662,G__246663) : tailrecursion.hoplon.span.call(null,G__246662,G__246663));
})();
var G__246583 = "(";
var G__246584 = (function (){var G__246664 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246665 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246664,G__246665) : tailrecursion.hoplon.span.call(null,G__246664,G__246665));
})();
var G__246585 = " ";
var G__246586 = (function (){var G__246666 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246667 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246666,G__246667) : tailrecursion.hoplon.span.call(null,G__246666,G__246667));
})();
var G__246587 = " ";
var G__246588 = (function (){var G__246668 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246669 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246668,G__246669) : tailrecursion.hoplon.span.call(null,G__246668,G__246669));
})();
var G__246589 = ")\n    (";
var G__246590 = (function (){var G__246670 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246671 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246670,G__246671) : tailrecursion.hoplon.span.call(null,G__246670,G__246671));
})();
var G__246591 = "(";
var G__246592 = (function (){var G__246672 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246673 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246672,G__246673) : tailrecursion.hoplon.span.call(null,G__246672,G__246673));
})();
var G__246593 = " ";
var G__246594 = (function (){var G__246674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246675 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246674,G__246675) : tailrecursion.hoplon.span.call(null,G__246674,G__246675));
})();
var G__246595 = " ";
var G__246596 = (function (){var G__246676 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246677 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246676,G__246677) : tailrecursion.hoplon.span.call(null,G__246676,G__246677));
})();
var G__246597 = ")\n        ";
var G__246598 = (function (){var G__246678 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246679 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246678,G__246679) : tailrecursion.hoplon.span.call(null,G__246678,G__246679));
})();
var G__246599 = "\n        (";
var G__246600 = (function (){var G__246680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246681 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246680,G__246681) : tailrecursion.hoplon.span.call(null,G__246680,G__246681));
})();
var G__246601 = " (";
var G__246602 = (function (){var G__246682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246683 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246682,G__246683) : tailrecursion.hoplon.span.call(null,G__246682,G__246683));
})();
var G__246603 = " ";
var G__246604 = (function (){var G__246684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246685 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246684,G__246685) : tailrecursion.hoplon.span.call(null,G__246684,G__246685));
})();
var G__246605 = " ";
var G__246606 = (function (){var G__246686 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246687 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246686,G__246687) : tailrecursion.hoplon.span.call(null,G__246686,G__246687));
})();
var G__246607 = ") ";
var G__246608 = (function (){var G__246688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246689 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246688,G__246689) : tailrecursion.hoplon.span.call(null,G__246688,G__246689));
})();
var G__246609 = ")))\n  (";
var G__246610 = (function (){var G__246690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246691 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246690,G__246691) : tailrecursion.hoplon.span.call(null,G__246690,G__246691));
})();
var G__246611 = " ";
var G__246612 = (function (){var G__246692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__246693 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246692,G__246693) : tailrecursion.hoplon.span.call(null,G__246692,G__246693));
})();
var G__246613 = " ";
var G__246614 = (function (){var G__246694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246695 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246694,G__246695) : tailrecursion.hoplon.span.call(null,G__246694,G__246695));
})();
var G__246615 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80(G__246536,G__246537,G__246538,G__246539,G__246540,G__246541,G__246542,G__246543,G__246544,G__246545,G__246546,G__246547,G__246548,G__246549,G__246550,G__246551,G__246552,G__246553,G__246554,G__246555,G__246556,G__246557,G__246558,G__246559,G__246560,G__246561,G__246562,G__246563,G__246564,G__246565,G__246566,G__246567,G__246568,G__246569,G__246570,G__246571,G__246572,G__246573,G__246574,G__246575,G__246576,G__246577,G__246578,G__246579,G__246580,G__246581,G__246582,G__246583,G__246584,G__246585,G__246586,G__246587,G__246588,G__246589,G__246590,G__246591,G__246592,G__246593,G__246594,G__246595,G__246596,G__246597,G__246598,G__246599,G__246600,G__246601,G__246602,G__246603,G__246604,G__246605,G__246606,G__246607,G__246608,G__246609,G__246610,G__246611,G__246612,G__246613,G__246614,G__246615) : tailrecursion.hoplon.pre.call(null,G__246536,G__246537,G__246538,G__246539,G__246540,G__246541,G__246542,G__246543,G__246544,G__246545,G__246546,G__246547,G__246548,G__246549,G__246550,G__246551,G__246552,G__246553,G__246554,G__246555,G__246556,G__246557,G__246558,G__246559,G__246560,G__246561,G__246562,G__246563,G__246564,G__246565,G__246566,G__246567,G__246568,G__246569,G__246570,G__246571,G__246572,G__246573,G__246574,G__246575,G__246576,G__246577,G__246578,G__246579,G__246580,G__246581,G__246582,G__246583,G__246584,G__246585,G__246586,G__246587,G__246588,G__246589,G__246590,G__246591,G__246592,G__246593,G__246594,G__246595,G__246596,G__246597,G__246598,G__246599,G__246600,G__246601,G__246602,G__246603,G__246604,G__246605,G__246606,G__246607,G__246608,G__246609,G__246610,G__246611,G__246612,G__246613,G__246614,G__246615));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__246534,G__246535) : tailrecursion.hoplon.div.call(null,G__246534,G__246535));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__246533) : tailrecursion.hoplon.div.call(null,G__246533));
})(),(function (){var G__246696 = cljs.core.PersistentArrayMap.EMPTY;
var G__246697 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note: This approach does not solve our problem in Clojure. In Clojure, whenever ",(function (){var G__246698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__246699 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246698,G__246699) : tailrecursion.hoplon.markdown.code_node.call(null,G__246698,G__246699));
})()," or ",(function (){var G__246700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__246701 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246700,G__246701) : tailrecursion.hoplon.markdown.code_node.call(null,G__246700,G__246701));
})()," are used, they add the definitions to the global environment. What that means is, every time you run the ",(function (){var G__246702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__246703 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246702,G__246703) : tailrecursion.hoplon.markdown.code_node.call(null,G__246702,G__246703));
})()," procedure, you would end up redefining ",(function (){var G__246704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__246705 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246704,G__246705) : tailrecursion.hoplon.markdown.code_node.call(null,G__246704,G__246705));
})()," for every program that uses it. Now, if every program that uses ",(function (){var G__246706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__246707 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246706,G__246707) : tailrecursion.hoplon.markdown.code_node.call(null,G__246706,G__246707));
})()," redefines ",(function (){var G__246708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__246709 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246708,G__246709) : tailrecursion.hoplon.markdown.code_node.call(null,G__246708,G__246709));
})(),", then you might not run into any problems; but either way, there is a better alternative: we could use what",(function (){var G__246710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__246711 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__246710,G__246711) : tailrecursion.hoplon.markdown.simple_node.call(null,G__246710,G__246711));
})(),"s called a ",(function (){var G__246712 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"let"], null);
var G__246713 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246712,G__246713) : tailrecursion.hoplon.markdown.code_node.call(null,G__246712,G__246713));
})()," binding, but we",(function (){var G__246714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__246715 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__246714,G__246715) : tailrecursion.hoplon.markdown.simple_node.call(null,G__246714,G__246715));
})(),"ll learn about those a little later."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__246696,G__246697) : tailrecursion.hoplon.markdown.para_node.call(null,G__246696,G__246697));
})(),(function (){var G__246716 = cljs.core.PersistentArrayMap.EMPTY;
var G__246717 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The thing to remember is the evaluation model. When the compiler is given a symbol, it has a set procedure for determining what this symbol means: first it looks to see if the symbol is a special form (like ",(function (){var G__246718 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__246719 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246718,G__246719) : tailrecursion.hoplon.markdown.code_node.call(null,G__246718,G__246719));
})(),"), if it",(function (){var G__246720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__246721 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__246720,G__246721) : tailrecursion.hoplon.markdown.simple_node.call(null,G__246720,G__246721));
})(),"s not, then it checks each successive nested local environment until it reaches the global environment. The point is, in Scheme, ",(function (){var G__246722 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__246723 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246722,G__246723) : tailrecursion.hoplon.markdown.code_node.call(null,G__246722,G__246723));
})()," only mutates the local environment, whatever that may be; the same is not true in Clojure. Defining forms mutate the global environment directly, so using ",(function (){var G__246724 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__246725 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246724,G__246725) : tailrecursion.hoplon.markdown.code_node.call(null,G__246724,G__246725));
})()," to change the definition of a function in one place changes it in all places."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__246716,G__246717) : tailrecursion.hoplon.markdown.para_node.call(null,G__246716,G__246717));
})(),(function (){var G__246726 = cljs.core.PersistentArrayMap.EMPTY;
var G__246727 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Luckily, Cloure has a built in pair of functions ",(function (){var G__246728 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__246729 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246728,G__246729) : tailrecursion.hoplon.markdown.code_node.call(null,G__246728,G__246729));
})()," and ",(function (){var G__246730 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__246731 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246730,G__246731) : tailrecursion.hoplon.markdown.code_node.call(null,G__246730,G__246731));
})()," that do help us a bit. We can replace the ",(function (){var G__246732 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"iter"], null);
var G__246733 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246732,G__246733) : tailrecursion.hoplon.markdown.code_node.call(null,G__246732,G__246733));
})()," definition with this ",(function (){var G__246734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__246735 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246734,G__246735) : tailrecursion.hoplon.markdown.code_node.call(null,G__246734,G__246735));
})()," ",(function (){var G__246736 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__246737 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246736,G__246737) : tailrecursion.hoplon.markdown.code_node.call(null,G__246736,G__246737));
})()," business thusly (assuming ",(function (){var G__246738 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough"], null);
var G__246739 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246738,G__246739) : tailrecursion.hoplon.markdown.code_node.call(null,G__246738,G__246739));
})()," and ",(function (){var G__246740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__246741 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__246740,G__246741) : tailrecursion.hoplon.markdown.code_node.call(null,G__246740,G__246741));
})()," were already defined):"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__246726,G__246727) : tailrecursion.hoplon.markdown.para_node.call(null,G__246726,G__246727));
})(),(function (){var G__246805 = (function (){var G__246806 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__246807 = (function (){var G__246808 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__246809 = "(";
var G__246810 = (function (){var G__246839 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246840 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246839,G__246840) : tailrecursion.hoplon.span.call(null,G__246839,G__246840));
})();
var G__246811 = (function (){var G__246841 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246842 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246841,G__246842) : tailrecursion.hoplon.span.call(null,G__246841,G__246842));
})();
var G__246812 = " [";
var G__246813 = (function (){var G__246843 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246844 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246843,G__246844) : tailrecursion.hoplon.span.call(null,G__246843,G__246844));
})();
var G__246814 = "]\n  (";
var G__246815 = (function (){var G__246845 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246846 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246845,G__246846) : tailrecursion.hoplon.span.call(null,G__246845,G__246846));
})();
var G__246816 = "[";
var G__246817 = (function (){var G__246847 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246848 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246847,G__246848) : tailrecursion.hoplon.span.call(null,G__246847,G__246848));
})();
var G__246818 = " ";
var G__246819 = (function (){var G__246849 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__246850 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246849,G__246850) : tailrecursion.hoplon.span.call(null,G__246849,G__246850));
})();
var G__246820 = "]\n    (";
var G__246821 = (function (){var G__246851 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__246852 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246851,G__246852) : tailrecursion.hoplon.span.call(null,G__246851,G__246852));
})();
var G__246822 = "(";
var G__246823 = (function (){var G__246853 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246854 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246853,G__246854) : tailrecursion.hoplon.span.call(null,G__246853,G__246854));
})();
var G__246824 = " ";
var G__246825 = (function (){var G__246855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246856 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246855,G__246856) : tailrecursion.hoplon.span.call(null,G__246855,G__246856));
})();
var G__246826 = " ";
var G__246827 = (function (){var G__246857 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246858 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246857,G__246858) : tailrecursion.hoplon.span.call(null,G__246857,G__246858));
})();
var G__246828 = ")\n        ";
var G__246829 = (function (){var G__246859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246860 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246859,G__246860) : tailrecursion.hoplon.span.call(null,G__246859,G__246860));
})();
var G__246830 = "\n        (";
var G__246831 = (function (){var G__246861 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246862 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246861,G__246862) : tailrecursion.hoplon.span.call(null,G__246861,G__246862));
})();
var G__246832 = " (";
var G__246833 = (function (){var G__246863 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__246864 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246863,G__246864) : tailrecursion.hoplon.span.call(null,G__246863,G__246864));
})();
var G__246834 = " ";
var G__246835 = (function (){var G__246865 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246866 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246865,G__246866) : tailrecursion.hoplon.span.call(null,G__246865,G__246866));
})();
var G__246836 = " ";
var G__246837 = (function (){var G__246867 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__246868 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__246867,G__246868) : tailrecursion.hoplon.span.call(null,G__246867,G__246868));
})();
var G__246838 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31(G__246808,G__246809,G__246810,G__246811,G__246812,G__246813,G__246814,G__246815,G__246816,G__246817,G__246818,G__246819,G__246820,G__246821,G__246822,G__246823,G__246824,G__246825,G__246826,G__246827,G__246828,G__246829,G__246830,G__246831,G__246832,G__246833,G__246834,G__246835,G__246836,G__246837,G__246838) : tailrecursion.hoplon.pre.call(null,G__246808,G__246809,G__246810,G__246811,G__246812,G__246813,G__246814,G__246815,G__246816,G__246817,G__246818,G__246819,G__246820,G__246821,G__246822,G__246823,G__246824,G__246825,G__246826,G__246827,G__246828,G__246829,G__246830,G__246831,G__246832,G__246833,G__246834,G__246835,G__246836,G__246837,G__246838));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__246806,G__246807) : tailrecursion.hoplon.div.call(null,G__246806,G__246807));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__246805) : tailrecursion.hoplon.div.call(null,G__246805));
})(),(function (){var G__246869 = cljs.core.PersistentArrayMap.EMPTY;
var G__246870 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The genearl format for these will be,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__246869,G__246870) : tailrecursion.hoplon.markdown.para_node.call(null,G__246869,G__246870));
})(),(function (){var G__246966 = (function (){var G__246967 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__246968 = (function (){var G__246969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__246970 = "(";
var G__246971 = (function (){var G__247014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__247015 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247014,G__247015) : tailrecursion.hoplon.span.call(null,G__247014,G__247015));
})();
var G__246972 = (function (){var G__247016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247017 = "function";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247016,G__247017) : tailrecursion.hoplon.span.call(null,G__247016,G__247017));
})();
var G__246973 = " [";
var G__246974 = (function (){var G__247018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247019 = "arguments";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247018,G__247019) : tailrecursion.hoplon.span.call(null,G__247018,G__247019));
})();
var G__246975 = "]\n  (";
var G__246976 = (function (){var G__247020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__247021 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247020,G__247021) : tailrecursion.hoplon.span.call(null,G__247020,G__247021));
})();
var G__246977 = "[";
var G__246978 = (function (){var G__247022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247023 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247022,G__247023) : tailrecursion.hoplon.span.call(null,G__247022,G__247023));
})();
var G__246979 = " ";
var G__246980 = (function (){var G__247024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247025 = "initial-value1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247024,G__247025) : tailrecursion.hoplon.span.call(null,G__247024,G__247025));
})();
var G__246981 = "\n         ";
var G__246982 = (function (){var G__247026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247027 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247026,G__247027) : tailrecursion.hoplon.span.call(null,G__247026,G__247027));
})();
var G__246983 = " ";
var G__246984 = (function (){var G__247028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247029 = "initial-value2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247028,G__247029) : tailrecursion.hoplon.span.call(null,G__247028,G__247029));
})();
var G__246985 = "\n         ";
var G__246986 = (function (){var G__247030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247031 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247030,G__247031) : tailrecursion.hoplon.span.call(null,G__247030,G__247031));
})();
var G__246987 = "\n         ";
var G__246988 = (function (){var G__247032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247033 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247032,G__247033) : tailrecursion.hoplon.span.call(null,G__247032,G__247033));
})();
var G__246989 = " ";
var G__246990 = (function (){var G__247034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247035 = "initial-valuen";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247034,G__247035) : tailrecursion.hoplon.span.call(null,G__247034,G__247035));
})();
var G__246991 = "]\n    (";
var G__246992 = (function (){var G__247036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__247037 = "<if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247036,G__247037) : tailrecursion.hoplon.span.call(null,G__247036,G__247037));
})();
var G__246993 = " ";
var G__246994 = (function (){var G__247038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__247039 = "or cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247038,G__247039) : tailrecursion.hoplon.span.call(null,G__247038,G__247039));
})();
var G__246995 = (function (){var G__247040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247041 = "can";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247040,G__247041) : tailrecursion.hoplon.span.call(null,G__247040,G__247041));
})();
var G__246996 = " ";
var G__246997 = (function (){var G__247042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247043 = "go";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247042,G__247043) : tailrecursion.hoplon.span.call(null,G__247042,G__247043));
})();
var G__246998 = " ";
var G__246999 = (function (){var G__247044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247045 = "here>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247044,G__247045) : tailrecursion.hoplon.span.call(null,G__247044,G__247045));
})();
var G__247000 = " (";
var G__247001 = (function (){var G__247046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__247047 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247046,G__247047) : tailrecursion.hoplon.span.call(null,G__247046,G__247047));
})();
var G__247002 = " (";
var G__247003 = (function (){var G__247048 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__247049 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247048,G__247049) : tailrecursion.hoplon.span.call(null,G__247048,G__247049));
})();
var G__247004 = (function (){var G__247050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247051 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247050,G__247051) : tailrecursion.hoplon.span.call(null,G__247050,G__247051));
})();
var G__247005 = ") (";
var G__247006 = (function (){var G__247052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__247053 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247052,G__247053) : tailrecursion.hoplon.span.call(null,G__247052,G__247053));
})();
var G__247007 = (function (){var G__247054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247055 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247054,G__247055) : tailrecursion.hoplon.span.call(null,G__247054,G__247055));
})();
var G__247008 = ")";
var G__247009 = (function (){var G__247056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247057 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247056,G__247057) : tailrecursion.hoplon.span.call(null,G__247056,G__247057));
})();
var G__247010 = "(";
var G__247011 = (function (){var G__247058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__247059 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247058,G__247059) : tailrecursion.hoplon.span.call(null,G__247058,G__247059));
})();
var G__247012 = (function (){var G__247060 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247061 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247060,G__247061) : tailrecursion.hoplon.span.call(null,G__247060,G__247061));
})();
var G__247013 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45(G__246969,G__246970,G__246971,G__246972,G__246973,G__246974,G__246975,G__246976,G__246977,G__246978,G__246979,G__246980,G__246981,G__246982,G__246983,G__246984,G__246985,G__246986,G__246987,G__246988,G__246989,G__246990,G__246991,G__246992,G__246993,G__246994,G__246995,G__246996,G__246997,G__246998,G__246999,G__247000,G__247001,G__247002,G__247003,G__247004,G__247005,G__247006,G__247007,G__247008,G__247009,G__247010,G__247011,G__247012,G__247013) : tailrecursion.hoplon.pre.call(null,G__246969,G__246970,G__246971,G__246972,G__246973,G__246974,G__246975,G__246976,G__246977,G__246978,G__246979,G__246980,G__246981,G__246982,G__246983,G__246984,G__246985,G__246986,G__246987,G__246988,G__246989,G__246990,G__246991,G__246992,G__246993,G__246994,G__246995,G__246996,G__246997,G__246998,G__246999,G__247000,G__247001,G__247002,G__247003,G__247004,G__247005,G__247006,G__247007,G__247008,G__247009,G__247010,G__247011,G__247012,G__247013));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__246967,G__246968) : tailrecursion.hoplon.div.call(null,G__246967,G__246968));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__246966) : tailrecursion.hoplon.div.call(null,G__246966));
})(),(function (){var G__247062 = cljs.core.PersistentArrayMap.EMPTY;
var G__247063 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This ",(function (){var G__247064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[thing1 intial-value1]"], null);
var G__247065 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247064,G__247065) : tailrecursion.hoplon.markdown.code_node.call(null,G__247064,G__247065));
})()," defines ",(function (){var G__247066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"thing1"], null);
var G__247067 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247066,G__247067) : tailrecursion.hoplon.markdown.code_node.call(null,G__247066,G__247067));
})()," to be ",(function (){var G__247068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"value1"], null);
var G__247069 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247068,G__247069) : tailrecursion.hoplon.markdown.code_node.call(null,G__247068,G__247069));
})()," for the first iteration, then when you call ",(function (){var G__247070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__247071 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247070,G__247071) : tailrecursion.hoplon.markdown.code_node.call(null,G__247070,G__247071));
})(),", it goes back to loop with the new values given (in the same order they appear in the ",(function (){var G__247072 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__247073 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247072,G__247073) : tailrecursion.hoplon.markdown.code_node.call(null,G__247072,G__247073));
})()," bindings)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__247062,G__247063) : tailrecursion.hoplon.markdown.para_node.call(null,G__247062,G__247063));
})(),(function (){var G__247074 = cljs.core.PersistentArrayMap.EMPTY;
var G__247075 = new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such nesting of definitions, called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["block structure"], null)], 0)),", is basically the right solution to the simplest name-packaging problem. But there is a better idea lurking here. In addition to internalizing the definitions of the auxiliary procedures, we can simplify them. Since ",(function (){var G__247076 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__247077 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247076,G__247077) : tailrecursion.hoplon.markdown.code_node.call(null,G__247076,G__247077));
})()," is bound in the definition of ",(function (){var G__247078 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__247079 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247078,G__247079) : tailrecursion.hoplon.markdown.code_node.call(null,G__247078,G__247079));
})(),", the procedures ",(function (){var G__247080 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__247081 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247080,G__247081) : tailrecursion.hoplon.markdown.code_node.call(null,G__247080,G__247081));
})(),", ",(function (){var G__247082 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__247083 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247082,G__247083) : tailrecursion.hoplon.markdown.code_node.call(null,G__247082,G__247083));
})(),", and ",(function (){var G__247084 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__247085 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247084,G__247085) : tailrecursion.hoplon.markdown.code_node.call(null,G__247084,G__247085));
})(),", which are defined internally to ",(function (){var G__247086 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__247087 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247086,G__247087) : tailrecursion.hoplon.markdown.code_node.call(null,G__247086,G__247087));
})(),", are in the scope of ",(function (){var G__247088 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__247089 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247088,G__247089) : tailrecursion.hoplon.markdown.code_node.call(null,G__247088,G__247089));
})(),". Thus, it is not necessary to pass ",(function (){var G__247090 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__247091 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247090,G__247091) : tailrecursion.hoplon.markdown.code_node.call(null,G__247090,G__247091));
})()," explicitly to each of these procedures. Instead, we allow ",(function (){var G__247092 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__247093 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247092,G__247093) : tailrecursion.hoplon.markdown.code_node.call(null,G__247092,G__247093));
})()," to be a free variable in the internal definitions, as shown below. Then ",(function (){var G__247094 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__247095 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247094,G__247095) : tailrecursion.hoplon.markdown.code_node.call(null,G__247094,G__247095));
})()," gets its value from the argument with which the enclosing procedure ",(function (){var G__247096 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__247097 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__247096,G__247097) : tailrecursion.hoplon.markdown.code_node.call(null,G__247096,G__247097));
})()," is called. This discipline is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["lexical scoping"], null)], 0)),".",(function (){var G__247098 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__247099 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lexical scoping dictates that free variables in a procedure are taken to refer to bindings made by enclosing procedure definitions; that is, they are looked up in the environment in which the procedure was defined. We will see how this works in detail in chapter 3 when we study environments and the detailed behavior of the interpreter."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__247098,G__247099) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__247098,G__247099));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__247074,G__247075) : tailrecursion.hoplon.markdown.para_node.call(null,G__247074,G__247075));
})(),(function (){var G__247100 = cljs.core.PersistentArrayMap.EMPTY;
var G__247101 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__247102 = cljs.core.PersistentArrayMap.EMPTY;
var G__247103 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This would still work in Clojure, if one were so inclined, it would just define all of these functions globally (as is explained above)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__247102,G__247103) : tailrecursion.hoplon.markdown.para_node.call(null,G__247102,G__247103));
})()], null);
return (tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2(G__247100,G__247101) : tailrecursion.hoplon.markdown.block_quote_node.call(null,G__247100,G__247101));
})(),(function (){var G__247235 = (function (){var G__247236 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__247237 = (function (){var G__247238 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__247239 = "(";
var G__247240 = (function (){var G__247301 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__247302 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247301,G__247302) : tailrecursion.hoplon.span.call(null,G__247301,G__247302));
})();
var G__247241 = (function (){var G__247303 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247304 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247303,G__247304) : tailrecursion.hoplon.span.call(null,G__247303,G__247304));
})();
var G__247242 = " [";
var G__247243 = (function (){var G__247305 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247306 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247305,G__247306) : tailrecursion.hoplon.span.call(null,G__247305,G__247306));
})();
var G__247244 = "]\n  (";
var G__247245 = (function (){var G__247307 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__247308 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247307,G__247308) : tailrecursion.hoplon.span.call(null,G__247307,G__247308));
})();
var G__247246 = (function (){var G__247309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247310 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247309,G__247310) : tailrecursion.hoplon.span.call(null,G__247309,G__247310));
})();
var G__247247 = " [";
var G__247248 = (function (){var G__247311 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247312 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247311,G__247312) : tailrecursion.hoplon.span.call(null,G__247311,G__247312));
})();
var G__247249 = "]\n    (";
var G__247250 = (function (){var G__247313 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__247314 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247313,G__247314) : tailrecursion.hoplon.span.call(null,G__247313,G__247314));
})();
var G__247251 = "(";
var G__247252 = (function (){var G__247315 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__247316 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247315,G__247316) : tailrecursion.hoplon.span.call(null,G__247315,G__247316));
})();
var G__247253 = " (";
var G__247254 = (function (){var G__247317 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__247318 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247317,G__247318) : tailrecursion.hoplon.span.call(null,G__247317,G__247318));
})();
var G__247255 = "(";
var G__247256 = (function (){var G__247319 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__247320 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247319,G__247320) : tailrecursion.hoplon.span.call(null,G__247319,G__247320));
})();
var G__247257 = " ";
var G__247258 = (function (){var G__247321 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247322 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247321,G__247322) : tailrecursion.hoplon.span.call(null,G__247321,G__247322));
})();
var G__247259 = ") ";
var G__247260 = (function (){var G__247323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247324 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247323,G__247324) : tailrecursion.hoplon.span.call(null,G__247323,G__247324));
})();
var G__247261 = ")) ";
var G__247262 = (function (){var G__247325 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__247326 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247325,G__247326) : tailrecursion.hoplon.span.call(null,G__247325,G__247326));
})();
var G__247263 = "))\n  (";
var G__247264 = (function (){var G__247327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__247328 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247327,G__247328) : tailrecursion.hoplon.span.call(null,G__247327,G__247328));
})();
var G__247265 = (function (){var G__247329 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247330 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247329,G__247330) : tailrecursion.hoplon.span.call(null,G__247329,G__247330));
})();
var G__247266 = " [";
var G__247267 = (function (){var G__247331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247332 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247331,G__247332) : tailrecursion.hoplon.span.call(null,G__247331,G__247332));
})();
var G__247268 = "]\n    (";
var G__247269 = (function (){var G__247333 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__247334 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247333,G__247334) : tailrecursion.hoplon.span.call(null,G__247333,G__247334));
})();
var G__247270 = " ";
var G__247271 = (function (){var G__247335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247336 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247335,G__247336) : tailrecursion.hoplon.span.call(null,G__247335,G__247336));
})();
var G__247272 = " (";
var G__247273 = (function (){var G__247337 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__247338 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247337,G__247338) : tailrecursion.hoplon.span.call(null,G__247337,G__247338));
})();
var G__247274 = (function (){var G__247339 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247340 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247339,G__247340) : tailrecursion.hoplon.span.call(null,G__247339,G__247340));
})();
var G__247275 = " ";
var G__247276 = (function (){var G__247341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247342 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247341,G__247342) : tailrecursion.hoplon.span.call(null,G__247341,G__247342));
})();
var G__247277 = ")))\n  (";
var G__247278 = (function (){var G__247343 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__247344 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247343,G__247344) : tailrecursion.hoplon.span.call(null,G__247343,G__247344));
})();
var G__247279 = (function (){var G__247345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247346 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247345,G__247346) : tailrecursion.hoplon.span.call(null,G__247345,G__247346));
})();
var G__247280 = " [";
var G__247281 = (function (){var G__247347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247348 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247347,G__247348) : tailrecursion.hoplon.span.call(null,G__247347,G__247348));
})();
var G__247282 = "]\n    (";
var G__247283 = (function (){var G__247349 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__247350 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247349,G__247350) : tailrecursion.hoplon.span.call(null,G__247349,G__247350));
})();
var G__247284 = "(";
var G__247285 = (function (){var G__247351 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__247352 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247351,G__247352) : tailrecursion.hoplon.span.call(null,G__247351,G__247352));
})();
var G__247286 = " ";
var G__247287 = (function (){var G__247353 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247354 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247353,G__247354) : tailrecursion.hoplon.span.call(null,G__247353,G__247354));
})();
var G__247288 = ")\n        ";
var G__247289 = (function (){var G__247355 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247356 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247355,G__247356) : tailrecursion.hoplon.span.call(null,G__247355,G__247356));
})();
var G__247290 = "\n        (";
var G__247291 = (function (){var G__247357 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__247358 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247357,G__247358) : tailrecursion.hoplon.span.call(null,G__247357,G__247358));
})();
var G__247292 = " (";
var G__247293 = (function (){var G__247359 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__247360 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247359,G__247360) : tailrecursion.hoplon.span.call(null,G__247359,G__247360));
})();
var G__247294 = " ";
var G__247295 = (function (){var G__247361 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__247362 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247361,G__247362) : tailrecursion.hoplon.span.call(null,G__247361,G__247362));
})();
var G__247296 = "))))\n  (";
var G__247297 = (function (){var G__247363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__247364 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247363,G__247364) : tailrecursion.hoplon.span.call(null,G__247363,G__247364));
})();
var G__247298 = " ";
var G__247299 = (function (){var G__247365 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__247366 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__247365,G__247366) : tailrecursion.hoplon.span.call(null,G__247365,G__247366));
})();
var G__247300 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63(G__247238,G__247239,G__247240,G__247241,G__247242,G__247243,G__247244,G__247245,G__247246,G__247247,G__247248,G__247249,G__247250,G__247251,G__247252,G__247253,G__247254,G__247255,G__247256,G__247257,G__247258,G__247259,G__247260,G__247261,G__247262,G__247263,G__247264,G__247265,G__247266,G__247267,G__247268,G__247269,G__247270,G__247271,G__247272,G__247273,G__247274,G__247275,G__247276,G__247277,G__247278,G__247279,G__247280,G__247281,G__247282,G__247283,G__247284,G__247285,G__247286,G__247287,G__247288,G__247289,G__247290,G__247291,G__247292,G__247293,G__247294,G__247295,G__247296,G__247297,G__247298,G__247299,G__247300) : tailrecursion.hoplon.pre.call(null,G__247238,G__247239,G__247240,G__247241,G__247242,G__247243,G__247244,G__247245,G__247246,G__247247,G__247248,G__247249,G__247250,G__247251,G__247252,G__247253,G__247254,G__247255,G__247256,G__247257,G__247258,G__247259,G__247260,G__247261,G__247262,G__247263,G__247264,G__247265,G__247266,G__247267,G__247268,G__247269,G__247270,G__247271,G__247272,G__247273,G__247274,G__247275,G__247276,G__247277,G__247278,G__247279,G__247280,G__247281,G__247282,G__247283,G__247284,G__247285,G__247286,G__247287,G__247288,G__247289,G__247290,G__247291,G__247292,G__247293,G__247294,G__247295,G__247296,G__247297,G__247298,G__247299,G__247300));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__247236,G__247237) : tailrecursion.hoplon.div.call(null,G__247236,G__247237));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__247235) : tailrecursion.hoplon.div.call(null,G__247235));
})(),(function (){var G__247367 = cljs.core.PersistentArrayMap.EMPTY;
var G__247368 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will use block structure extensively to help us break up large programs into tractable pieces.",(function (){var G__247369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__247370 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Embedded definitions must come first in a procedure body. The management is not responsible for the consequences of running programs that intertwine definition and use."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__247369,G__247370) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__247369,G__247370));
})()," The idea of block structure originated with the programming language Algol 60. It appears in most advanced programming languages and is an important tool for helping to organize the construction of large programs."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__247367,G__247368) : tailrecursion.hoplon.markdown.para_node.call(null,G__247367,G__247368));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_246013;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_246012;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_246011;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_246010;
}})()], 0));
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27(G__239899,G__239900,G__239901,G__239902,G__239903,G__239904,G__239905,G__239906,G__239907,G__239908,G__239909,G__239910,G__239911,G__239912,G__239913,G__239914,G__239915,G__239916,G__239917,G__239918,G__239919,G__239920,G__239921,G__239922,G__239923,G__239924,G__239925) : tailrecursion.hoplon.div.call(null,G__239899,G__239900,G__239901,G__239902,G__239903,G__239904,G__239905,G__239906,G__239907,G__239908,G__239909,G__239910,G__239911,G__239912,G__239913,G__239914,G__239915,G__239916,G__239917,G__239918,G__239919,G__239920,G__239921,G__239922,G__239923,G__239924,G__239925));
};
var book$sicp$texts$ch1sect1$content = function (var_args){
var args__8262__auto__ = null;
if (arguments.length > 0) {
var G__247371__i = 0, G__247371__a = new Array(arguments.length -  0);
while (G__247371__i < G__247371__a.length) {G__247371__a[G__247371__i] = arguments[G__247371__i + 0]; ++G__247371__i;}
  args__8262__auto__ = new cljs.core.IndexedSeq(G__247371__a,0);
} 
return book$sicp$texts$ch1sect1$content__delegate.call(this,args__8262__auto__);};
book$sicp$texts$ch1sect1$content.cljs$lang$maxFixedArity = 0;
book$sicp$texts$ch1sect1$content.cljs$lang$applyTo = (function (arglist__247372){
var args__8262__auto__ = cljs.core.seq(arglist__247372);
return book$sicp$texts$ch1sect1$content__delegate(args__8262__auto__);
});
book$sicp$texts$ch1sect1$content.cljs$core$IFn$_invoke$arity$variadic = book$sicp$texts$ch1sect1$content__delegate;
return book$sicp$texts$ch1sect1$content;
})()
;
