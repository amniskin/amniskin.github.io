(ns tailrecursion.hoplon.app-pages._book_SLASH_sicp_SLASH_index_DOT_html (:require [general.bootstrap :as bootstrap] [general.sections :as sections] [general.navbar :as nav] [general.footer :as footer] [general.head :as head] [book.sicp.book-data :as data] [book.sicp.texts.about :as about] [book.sicp.texts.ch1 :as ch1] [book.sicp.texts.ch1sect1 :as ch1sect1] [book.sicp.texts.ch1sect2 :as ch1sect2] [book.sicp.texts.ch1sect3 :as ch1sect3] [book.sicp.texts.ch2 :as ch2] [book.sicp.texts.ch2sect1 :as ch2sect1] [book.sicp.texts.ch2sect2 :as ch2sect2] [book.sicp.texts.ch2sect3 :as ch2sect3] [book.sicp.texts.ch2sect4 :as ch2sect4] [tailrecursion.hoplon :refer [form audio input hgroup do! timeout $text base h1 embed h3 body keygen on-append! progress main cite on-page-load object i p nav ruby check-val! a menu blockquote img $comment span track seq?* data u dl select html thead del eventsource append-child fieldset aside figure figcaption sentinel q on! bdi video address caption parse-args dd rp hr tbody table acronym frame applet html-var add-initfn! pre ul dir html-time add-attributes! html-map sup dfn sub mark script big button wbr strong li dt frameset td tr section th optgroup iframe legend em kbd spliced article isindex abbr command <!-- source output basefont route-cell header datalist tfoot s ins footer title is-ie8 h5 canvas param font div option summary samp center small style textarea loop-tpl* strike h4 tt head add-children! ol details col vector?* label rt when-dom h6 link page-load colgroup meter html-meta text-val! bdo --> b code node? noframes replace-children! noscript safe-nth h2 area br]] [tailrecursion.javelin :refer [input? cell cell? destroy-cell! ^{:private true} last-rank ^{:deprecated true} lift lens? set-formula! cell-doseq* ^{:dynamic true, :private true} *tx* deref* set-cell! lens formula? alts! dosync* cell-map formula]]) (:require-macros [tailrecursion.hoplon :refer [text with-timeout sexp defelem def-values with-page-load with-dom loop-tpl with-interval with-init!]] [tailrecursion.javelin :refer [with-let mx2 dosync cell= set-cell!= prop-cell cell-doseq defc cell-let-1 defc= macroexpand-all mx cell-let]]))

(html (head (title "SICP... Now in Clojure!") (html-meta :name "keywords" :content "Aaron, Niskin, Clojure, SICP, Structure and Interpretation of Computer Programs, Functional, programming, computing, learn") (html-meta :name "description" :content "SICP translated into Clojure and augmented by the introduction of Clojure core functions in appropriate locations. All exercises have solutions.") (head/bootstrap) (head/viewport) (head/google-analytics) (head/mathjax)) (body (nav/fixed) (bootstrap/container (sections/sidebar (data/toc)) (sections/content-with-sidebar (data/content (about/content) (ch1/content) (ch1sect1/content) (ch1sect2/content) (ch1sect3/content) (ch2/content) (ch2sect1/content) (ch2sect2/content) (ch2sect3/content) (ch2sect4/content) (footer/content))))))
