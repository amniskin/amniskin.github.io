// Compiled by ClojureScript 1.7.48 {:static-fns true, :optimize-constants true}
goog.provide('book.sicp.texts.ch1sect1');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('book.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
book.sicp.texts.ch1sect1.content = (function() { 
var book$sicp$texts$ch1sect1$content__delegate = function (args__8262__auto__){
var vec__216574 = tailrecursion.hoplon.parse_args(args__8262__auto__);
var attr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__216574,(0),null);
var kids = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__216574,(1),null);
var G__216575 = cljs.core.PersistentArrayMap.EMPTY;
var G__216576 = book.sicp.book_data.sect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Elements of Programming"], null),(function (){var _STAR_references_STAR_216602 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_216603 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_216604 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_216605 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__216606 = cljs.core.PersistentArrayMap.EMPTY;
var G__216607 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes. Thus, when we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three mechanisms for accomplishing this:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216606,G__216607) : tailrecursion.hoplon.markdown.para_node.call(null,G__216606,G__216607));
})(),(function (){var G__216608 = cljs.core.PersistentArrayMap.EMPTY;
var G__216609 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__216610 = cljs.core.PersistentArrayMap.EMPTY;
var G__216611 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__216612 = cljs.core.PersistentArrayMap.EMPTY;
var G__216613 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["primitive expressions"], null)], 0)),", which represent the simplest entities the language is concerned with,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216612,G__216613) : tailrecursion.hoplon.markdown.para_node.call(null,G__216612,G__216613));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__216610,G__216611) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__216610,G__216611));
})(),(function (){var G__216614 = cljs.core.PersistentArrayMap.EMPTY;
var G__216615 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_216616 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_216617 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__216618 = cljs.core.PersistentArrayMap.EMPTY;
var G__216619 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of combination"], null)], 0)),", by which compound elements are built from simpler ones, and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216618,G__216619) : tailrecursion.hoplon.markdown.para_node.call(null,G__216618,G__216619));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_216617;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_216616;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__216614,G__216615) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__216614,G__216615));
})(),(function (){var G__216620 = cljs.core.PersistentArrayMap.EMPTY;
var G__216621 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_216622 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_216623 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__216624 = cljs.core.PersistentArrayMap.EMPTY;
var G__216625 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"**",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of abstraction"], null)], 0)),", by which compound elements can be named and manipulated as units."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216624,G__216625) : tailrecursion.hoplon.markdown.para_node.call(null,G__216624,G__216625));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_216623;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_216622;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__216620,G__216621) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__216620,G__216621));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__216608,G__216609) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__216608,G__216609));
})(),(function (){var G__216626 = cljs.core.PersistentArrayMap.EMPTY;
var G__216627 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In programming, we deal with two kinds of elements: procedures and data. (Later we will discover that they are really not so distinct.) Informally, data is ``stuff",(function (){var G__216628 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__216629 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__216628,G__216629) : tailrecursion.hoplon.markdown.simple_node.call(null,G__216628,G__216629));
})(),(function (){var G__216630 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__216631 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__216630,G__216631) : tailrecursion.hoplon.markdown.simple_node.call(null,G__216630,G__216631));
})()," that we want to manipulate, and procedures are descriptions of the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive procedures and should have methods for combining and abstracting procedures and data."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216626,G__216627) : tailrecursion.hoplon.markdown.para_node.call(null,G__216626,G__216627));
})(),(function (){var G__216632 = cljs.core.PersistentArrayMap.EMPTY;
var G__216633 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this chapter we will deal only with simple numerical data so that we can focus on the rules for building procedures.",(function (){var G__216634 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__216635 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The characterization of numbers as ",(function (){var G__216636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__216637 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["simple data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__216636,G__216637) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__216636,G__216637));
})()," is a barefaced bluff. In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language. Some typical issues involved are these: Some computer systems distinguish ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["integers"], null)], 0)),", such as 2, from ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["real numbers"], null)], 0)),", such as 2.71. Is the real number 2.00 different from the integer 2? Are the arithmetic operations used for integers the same as the operations used for real numbers? Does 6 divided by 2 produce 3, or 3.0? How large a number can we represent? How many decimal places of accuracy can we represent? Is the range of integers the same as the range of real numbers? Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors ",(function (){var G__216638 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__216639 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__216638,G__216639) : tailrecursion.hoplon.markdown.simple_node.call(null,G__216638,G__216639));
})()," the entire science of numerical analysis. Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems. The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__216634,G__216635) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__216634,G__216635));
})()," In later chapters we will see that these same rules allow us to build procedures to manipulate compound data as well."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216632,G__216633) : tailrecursion.hoplon.markdown.para_node.call(null,G__216632,G__216633));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_216605;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_216604;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_216603;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_216602;
}})()], 0));
var G__216577 = "";
var G__216578 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Expressions"], null),(function (){var _STAR_references_STAR_216640 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_216641 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_216642 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_216643 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 24, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__216644 = cljs.core.PersistentArrayMap.EMPTY;
var G__216645 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One easy way to get started at programming is to examine some typical interactions with an interpreter for the Scheme dialect of Lisp. Imagine that you are sitting at a computer terminal. You type an ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["expression"], null)], 0)),", and the interpreter responds by displaying the result of its evaluating that expression."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216644,G__216645) : tailrecursion.hoplon.markdown.para_node.call(null,G__216644,G__216645));
})(),(function (){var G__216646 = cljs.core.PersistentArrayMap.EMPTY;
var G__216647 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One kind of primitive expression you might type is a number. (More precisely, the expression that you type consists of the numerals that represent the number in base 10.) If you present Lisp with a number"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216646,G__216647) : tailrecursion.hoplon.markdown.para_node.call(null,G__216646,G__216647));
})(),(function (){var G__216648 = cljs.core.PersistentArrayMap.EMPTY;
var G__216649 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216648,G__216649) : tailrecursion.hoplon.markdown.para_node.call(null,G__216648,G__216649));
})(),(function (){var G__216650 = cljs.core.PersistentArrayMap.EMPTY;
var G__216651 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the interpreter will respond by printing",(function (){var G__216652 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__216653 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, when we wish to emphasize the distinction between the input typed by the user and the response printed by the interpreter, we will show the latter in slanted characters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__216652,G__216653) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__216652,G__216653));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216650,G__216651) : tailrecursion.hoplon.markdown.para_node.call(null,G__216650,G__216651));
})(),(function (){var G__216654 = cljs.core.PersistentArrayMap.EMPTY;
var G__216655 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216654,G__216655) : tailrecursion.hoplon.markdown.para_node.call(null,G__216654,G__216655));
})(),(function (){var G__216656 = cljs.core.PersistentArrayMap.EMPTY;
var G__216657 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions representing numbers may be combined with an expression representing a primitive procedure (such as + or ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,false,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [") to form a compound expression that represents the application of the procedure to those numbers. For example:"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216656,G__216657) : tailrecursion.hoplon.markdown.para_node.call(null,G__216656,G__216657));
})(),(function (){var G__216677 = (function (){var G__216678 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__216679 = (function (){var G__216680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__216681 = "(";
var G__216682 = (function (){var G__216689 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__216690 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216689,G__216690) : tailrecursion.hoplon.span.call(null,G__216689,G__216690));
})();
var G__216683 = (function (){var G__216691 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216692 = "137";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216691,G__216692) : tailrecursion.hoplon.span.call(null,G__216691,G__216692));
})();
var G__216684 = " ";
var G__216685 = (function (){var G__216693 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216694 = "349";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216693,G__216694) : tailrecursion.hoplon.span.call(null,G__216693,G__216694));
})();
var G__216686 = ")\n";
var G__216687 = (function (){var G__216695 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216696 = "486";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216695,G__216696) : tailrecursion.hoplon.span.call(null,G__216695,G__216696));
})();
var G__216688 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__216680,G__216681,G__216682,G__216683,G__216684,G__216685,G__216686,G__216687,G__216688) : tailrecursion.hoplon.pre.call(null,G__216680,G__216681,G__216682,G__216683,G__216684,G__216685,G__216686,G__216687,G__216688));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__216678,G__216679) : tailrecursion.hoplon.div.call(null,G__216678,G__216679));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__216677) : tailrecursion.hoplon.div.call(null,G__216677));
})(),(function (){var G__216716 = (function (){var G__216717 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__216718 = (function (){var G__216719 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__216720 = "(";
var G__216721 = (function (){var G__216728 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__216729 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216728,G__216729) : tailrecursion.hoplon.span.call(null,G__216728,G__216729));
})();
var G__216722 = (function (){var G__216730 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216731 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216730,G__216731) : tailrecursion.hoplon.span.call(null,G__216730,G__216731));
})();
var G__216723 = " ";
var G__216724 = (function (){var G__216732 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216733 = "334";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216732,G__216733) : tailrecursion.hoplon.span.call(null,G__216732,G__216733));
})();
var G__216725 = ")\n";
var G__216726 = (function (){var G__216734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216735 = "666";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216734,G__216735) : tailrecursion.hoplon.span.call(null,G__216734,G__216735));
})();
var G__216727 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__216719,G__216720,G__216721,G__216722,G__216723,G__216724,G__216725,G__216726,G__216727) : tailrecursion.hoplon.pre.call(null,G__216719,G__216720,G__216721,G__216722,G__216723,G__216724,G__216725,G__216726,G__216727));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__216717,G__216718) : tailrecursion.hoplon.div.call(null,G__216717,G__216718));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__216716) : tailrecursion.hoplon.div.call(null,G__216716));
})(),(function (){var G__216755 = (function (){var G__216756 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__216757 = (function (){var G__216758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__216759 = "(";
var G__216760 = (function (){var G__216767 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__216768 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216767,G__216768) : tailrecursion.hoplon.span.call(null,G__216767,G__216768));
})();
var G__216761 = (function (){var G__216769 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216770 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216769,G__216770) : tailrecursion.hoplon.span.call(null,G__216769,G__216770));
})();
var G__216762 = " ";
var G__216763 = (function (){var G__216771 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216772 = "99";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216771,G__216772) : tailrecursion.hoplon.span.call(null,G__216771,G__216772));
})();
var G__216764 = ")\n";
var G__216765 = (function (){var G__216773 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216774 = "495";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216773,G__216774) : tailrecursion.hoplon.span.call(null,G__216773,G__216774));
})();
var G__216766 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__216758,G__216759,G__216760,G__216761,G__216762,G__216763,G__216764,G__216765,G__216766) : tailrecursion.hoplon.pre.call(null,G__216758,G__216759,G__216760,G__216761,G__216762,G__216763,G__216764,G__216765,G__216766));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__216756,G__216757) : tailrecursion.hoplon.div.call(null,G__216756,G__216757));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__216755) : tailrecursion.hoplon.div.call(null,G__216755));
})(),(function (){var G__216794 = (function (){var G__216795 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__216796 = (function (){var G__216797 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__216798 = "(";
var G__216799 = (function (){var G__216806 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__216807 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216806,G__216807) : tailrecursion.hoplon.span.call(null,G__216806,G__216807));
})();
var G__216800 = (function (){var G__216808 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216809 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216808,G__216809) : tailrecursion.hoplon.span.call(null,G__216808,G__216809));
})();
var G__216801 = " ";
var G__216802 = (function (){var G__216810 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216811 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216810,G__216811) : tailrecursion.hoplon.span.call(null,G__216810,G__216811));
})();
var G__216803 = ")\n";
var G__216804 = (function (){var G__216812 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216813 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216812,G__216813) : tailrecursion.hoplon.span.call(null,G__216812,G__216813));
})();
var G__216805 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__216797,G__216798,G__216799,G__216800,G__216801,G__216802,G__216803,G__216804,G__216805) : tailrecursion.hoplon.pre.call(null,G__216797,G__216798,G__216799,G__216800,G__216801,G__216802,G__216803,G__216804,G__216805));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__216795,G__216796) : tailrecursion.hoplon.div.call(null,G__216795,G__216796));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__216794) : tailrecursion.hoplon.div.call(null,G__216794));
})(),(function (){var G__216833 = (function (){var G__216834 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__216835 = (function (){var G__216836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__216837 = "(";
var G__216838 = (function (){var G__216845 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__216846 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216845,G__216846) : tailrecursion.hoplon.span.call(null,G__216845,G__216846));
})();
var G__216839 = (function (){var G__216847 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216848 = "2.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216847,G__216848) : tailrecursion.hoplon.span.call(null,G__216847,G__216848));
})();
var G__216840 = " ";
var G__216841 = (function (){var G__216849 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216850 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216849,G__216850) : tailrecursion.hoplon.span.call(null,G__216849,G__216850));
})();
var G__216842 = ")\n";
var G__216843 = (function (){var G__216851 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216852 = "12.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216851,G__216852) : tailrecursion.hoplon.span.call(null,G__216851,G__216852));
})();
var G__216844 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__216836,G__216837,G__216838,G__216839,G__216840,G__216841,G__216842,G__216843,G__216844) : tailrecursion.hoplon.pre.call(null,G__216836,G__216837,G__216838,G__216839,G__216840,G__216841,G__216842,G__216843,G__216844));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__216834,G__216835) : tailrecursion.hoplon.div.call(null,G__216834,G__216835));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__216833) : tailrecursion.hoplon.div.call(null,G__216833));
})(),(function (){var G__216853 = cljs.core.PersistentArrayMap.EMPTY;
var G__216854 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions such as these, formed by delimiting a list of expressions within parentheses in order to denote procedure application, are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["combinations"], null)], 0)),". The leftmost element in the list is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operator"], null)], 0)),", and the other elements are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operands"], null)], 0)),". The value of a combination is obtained by applying the procedure specified by the operator to the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["arguments"], null)], 0))," that are the values of the operands."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216853,G__216854) : tailrecursion.hoplon.markdown.para_node.call(null,G__216853,G__216854));
})(),(function (){var G__216855 = cljs.core.PersistentArrayMap.EMPTY;
var G__216856 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The convention of placing the operator to the left of the operands is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["prefix notation"], null)], 0)),", and it may be somewhat confusing at first because it departs significantly from the customary mathematical convention. Prefix notation has several advantages, however. One of them is that it can accommodate procedures that may take an arbitrary number of arguments, as in the following examples:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216855,G__216856) : tailrecursion.hoplon.markdown.para_node.call(null,G__216855,G__216856));
})(),(function (){var G__216884 = (function (){var G__216885 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__216886 = (function (){var G__216887 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__216888 = "(";
var G__216889 = (function (){var G__216900 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__216901 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216900,G__216901) : tailrecursion.hoplon.span.call(null,G__216900,G__216901));
})();
var G__216890 = (function (){var G__216902 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216903 = "21";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216902,G__216903) : tailrecursion.hoplon.span.call(null,G__216902,G__216903));
})();
var G__216891 = " ";
var G__216892 = (function (){var G__216904 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216905 = "35";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216904,G__216905) : tailrecursion.hoplon.span.call(null,G__216904,G__216905));
})();
var G__216893 = " ";
var G__216894 = (function (){var G__216906 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216907 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216906,G__216907) : tailrecursion.hoplon.span.call(null,G__216906,G__216907));
})();
var G__216895 = " ";
var G__216896 = (function (){var G__216908 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216909 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216908,G__216909) : tailrecursion.hoplon.span.call(null,G__216908,G__216909));
})();
var G__216897 = ")\n";
var G__216898 = (function (){var G__216910 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216911 = "75";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216910,G__216911) : tailrecursion.hoplon.span.call(null,G__216910,G__216911));
})();
var G__216899 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__216887,G__216888,G__216889,G__216890,G__216891,G__216892,G__216893,G__216894,G__216895,G__216896,G__216897,G__216898,G__216899) : tailrecursion.hoplon.pre.call(null,G__216887,G__216888,G__216889,G__216890,G__216891,G__216892,G__216893,G__216894,G__216895,G__216896,G__216897,G__216898,G__216899));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__216885,G__216886) : tailrecursion.hoplon.div.call(null,G__216885,G__216886));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__216884) : tailrecursion.hoplon.div.call(null,G__216884));
})(),(function (){var G__216935 = (function (){var G__216936 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__216937 = (function (){var G__216938 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__216939 = "(";
var G__216940 = (function (){var G__216949 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__216950 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216949,G__216950) : tailrecursion.hoplon.span.call(null,G__216949,G__216950));
})();
var G__216941 = (function (){var G__216951 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216952 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216951,G__216952) : tailrecursion.hoplon.span.call(null,G__216951,G__216952));
})();
var G__216942 = " ";
var G__216943 = (function (){var G__216953 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216954 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216953,G__216954) : tailrecursion.hoplon.span.call(null,G__216953,G__216954));
})();
var G__216944 = " ";
var G__216945 = (function (){var G__216955 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216956 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216955,G__216956) : tailrecursion.hoplon.span.call(null,G__216955,G__216956));
})();
var G__216946 = ")\n";
var G__216947 = (function (){var G__216957 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__216958 = "1200";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__216957,G__216958) : tailrecursion.hoplon.span.call(null,G__216957,G__216958));
})();
var G__216948 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__216938,G__216939,G__216940,G__216941,G__216942,G__216943,G__216944,G__216945,G__216946,G__216947,G__216948) : tailrecursion.hoplon.pre.call(null,G__216938,G__216939,G__216940,G__216941,G__216942,G__216943,G__216944,G__216945,G__216946,G__216947,G__216948));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__216936,G__216937) : tailrecursion.hoplon.div.call(null,G__216936,G__216937));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__216935) : tailrecursion.hoplon.div.call(null,G__216935));
})(),(function (){var G__216959 = cljs.core.PersistentArrayMap.EMPTY;
var G__216960 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["No ambiguity can arise, because the operator is always the leftmost element and the entire combination is delimited by the parentheses."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216959,G__216960) : tailrecursion.hoplon.markdown.para_node.call(null,G__216959,G__216960));
})(),(function (){var G__216961 = cljs.core.PersistentArrayMap.EMPTY;
var G__216962 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A second advantage of prefix notation is that it extends in a straightforward way to allow combinations to be ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["nested"], null)], 0)),", that is, to have combinations whose elements are themselves combinations:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__216961,G__216962) : tailrecursion.hoplon.markdown.para_node.call(null,G__216961,G__216962));
})(),(function (){var G__216997 = (function (){var G__216998 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__216999 = (function (){var G__217000 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217001 = "(";
var G__217002 = (function (){var G__217016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217017 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217016,G__217017) : tailrecursion.hoplon.span.call(null,G__217016,G__217017));
})();
var G__217003 = "(";
var G__217004 = (function (){var G__217018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217019 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217018,G__217019) : tailrecursion.hoplon.span.call(null,G__217018,G__217019));
})();
var G__217005 = (function (){var G__217020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217021 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217020,G__217021) : tailrecursion.hoplon.span.call(null,G__217020,G__217021));
})();
var G__217006 = " ";
var G__217007 = (function (){var G__217022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217023 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217022,G__217023) : tailrecursion.hoplon.span.call(null,G__217022,G__217023));
})();
var G__217008 = ") (";
var G__217009 = (function (){var G__217024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217025 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217024,G__217025) : tailrecursion.hoplon.span.call(null,G__217024,G__217025));
})();
var G__217010 = (function (){var G__217026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217027 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217026,G__217027) : tailrecursion.hoplon.span.call(null,G__217026,G__217027));
})();
var G__217011 = " ";
var G__217012 = (function (){var G__217028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217029 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217028,G__217029) : tailrecursion.hoplon.span.call(null,G__217028,G__217029));
})();
var G__217013 = "))\n";
var G__217014 = (function (){var G__217030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217031 = "19";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217030,G__217031) : tailrecursion.hoplon.span.call(null,G__217030,G__217031));
})();
var G__217015 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__217000,G__217001,G__217002,G__217003,G__217004,G__217005,G__217006,G__217007,G__217008,G__217009,G__217010,G__217011,G__217012,G__217013,G__217014,G__217015) : tailrecursion.hoplon.pre.call(null,G__217000,G__217001,G__217002,G__217003,G__217004,G__217005,G__217006,G__217007,G__217008,G__217009,G__217010,G__217011,G__217012,G__217013,G__217014,G__217015));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__216998,G__216999) : tailrecursion.hoplon.div.call(null,G__216998,G__216999));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__216997) : tailrecursion.hoplon.div.call(null,G__216997));
})(),(function (){var G__217032 = cljs.core.PersistentArrayMap.EMPTY;
var G__217033 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the Lisp interpreter can evaluate. It is we humans who get confused by still relatively simple expressions such as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217032,G__217033) : tailrecursion.hoplon.markdown.para_node.call(null,G__217032,G__217033));
})(),(function (){var G__217094 = (function (){var G__217095 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217096 = (function (){var G__217097 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217098 = "(";
var G__217099 = (function (){var G__217125 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217126 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217125,G__217126) : tailrecursion.hoplon.span.call(null,G__217125,G__217126));
})();
var G__217100 = "(";
var G__217101 = (function (){var G__217127 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217128 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217127,G__217128) : tailrecursion.hoplon.span.call(null,G__217127,G__217128));
})();
var G__217102 = (function (){var G__217129 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217130 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217129,G__217130) : tailrecursion.hoplon.span.call(null,G__217129,G__217130));
})();
var G__217103 = " (";
var G__217104 = (function (){var G__217131 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217132 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217131,G__217132) : tailrecursion.hoplon.span.call(null,G__217131,G__217132));
})();
var G__217105 = "(";
var G__217106 = (function (){var G__217133 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217134 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217133,G__217134) : tailrecursion.hoplon.span.call(null,G__217133,G__217134));
})();
var G__217107 = (function (){var G__217135 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217136 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217135,G__217136) : tailrecursion.hoplon.span.call(null,G__217135,G__217136));
})();
var G__217108 = " ";
var G__217109 = (function (){var G__217137 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217138 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217137,G__217138) : tailrecursion.hoplon.span.call(null,G__217137,G__217138));
})();
var G__217110 = ") (";
var G__217111 = (function (){var G__217139 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217140 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217139,G__217140) : tailrecursion.hoplon.span.call(null,G__217139,G__217140));
})();
var G__217112 = (function (){var G__217141 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217142 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217141,G__217142) : tailrecursion.hoplon.span.call(null,G__217141,G__217142));
})();
var G__217113 = " ";
var G__217114 = (function (){var G__217143 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217144 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217143,G__217144) : tailrecursion.hoplon.span.call(null,G__217143,G__217144));
})();
var G__217115 = "))) (";
var G__217116 = (function (){var G__217145 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217146 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217145,G__217146) : tailrecursion.hoplon.span.call(null,G__217145,G__217146));
})();
var G__217117 = "(";
var G__217118 = (function (){var G__217147 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217148 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217147,G__217148) : tailrecursion.hoplon.span.call(null,G__217147,G__217148));
})();
var G__217119 = (function (){var G__217149 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217150 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217149,G__217150) : tailrecursion.hoplon.span.call(null,G__217149,G__217150));
})();
var G__217120 = " ";
var G__217121 = (function (){var G__217151 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217152 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217151,G__217152) : tailrecursion.hoplon.span.call(null,G__217151,G__217152));
})();
var G__217122 = ") ";
var G__217123 = (function (){var G__217153 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217154 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217153,G__217154) : tailrecursion.hoplon.span.call(null,G__217153,G__217154));
})();
var G__217124 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__217097,G__217098,G__217099,G__217100,G__217101,G__217102,G__217103,G__217104,G__217105,G__217106,G__217107,G__217108,G__217109,G__217110,G__217111,G__217112,G__217113,G__217114,G__217115,G__217116,G__217117,G__217118,G__217119,G__217120,G__217121,G__217122,G__217123,G__217124) : tailrecursion.hoplon.pre.call(null,G__217097,G__217098,G__217099,G__217100,G__217101,G__217102,G__217103,G__217104,G__217105,G__217106,G__217107,G__217108,G__217109,G__217110,G__217111,G__217112,G__217113,G__217114,G__217115,G__217116,G__217117,G__217118,G__217119,G__217120,G__217121,G__217122,G__217123,G__217124));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217095,G__217096) : tailrecursion.hoplon.div.call(null,G__217095,G__217096));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217094) : tailrecursion.hoplon.div.call(null,G__217094));
})(),(function (){var G__217155 = cljs.core.PersistentArrayMap.EMPTY;
var G__217156 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which the interpreter would readily evaluate to be 57. We can help ourselves by writing such an expression in the form"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217155,G__217156) : tailrecursion.hoplon.markdown.para_node.call(null,G__217155,G__217156));
})(),(function (){var G__217217 = (function (){var G__217218 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217219 = (function (){var G__217220 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217221 = "(";
var G__217222 = (function (){var G__217248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217249 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217248,G__217249) : tailrecursion.hoplon.span.call(null,G__217248,G__217249));
})();
var G__217223 = "(";
var G__217224 = (function (){var G__217250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217251 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217250,G__217251) : tailrecursion.hoplon.span.call(null,G__217250,G__217251));
})();
var G__217225 = (function (){var G__217252 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217253 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217252,G__217253) : tailrecursion.hoplon.span.call(null,G__217252,G__217253));
})();
var G__217226 = "\n      (";
var G__217227 = (function (){var G__217254 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217255 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217254,G__217255) : tailrecursion.hoplon.span.call(null,G__217254,G__217255));
})();
var G__217228 = "(";
var G__217229 = (function (){var G__217256 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217257 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217256,G__217257) : tailrecursion.hoplon.span.call(null,G__217256,G__217257));
})();
var G__217230 = (function (){var G__217258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217259 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217258,G__217259) : tailrecursion.hoplon.span.call(null,G__217258,G__217259));
})();
var G__217231 = " ";
var G__217232 = (function (){var G__217260 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217261 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217260,G__217261) : tailrecursion.hoplon.span.call(null,G__217260,G__217261));
})();
var G__217233 = ")\n         (";
var G__217234 = (function (){var G__217262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217263 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217262,G__217263) : tailrecursion.hoplon.span.call(null,G__217262,G__217263));
})();
var G__217235 = (function (){var G__217264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217265 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217264,G__217265) : tailrecursion.hoplon.span.call(null,G__217264,G__217265));
})();
var G__217236 = " ";
var G__217237 = (function (){var G__217266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217267 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217266,G__217267) : tailrecursion.hoplon.span.call(null,G__217266,G__217267));
})();
var G__217238 = ")))\n   (";
var G__217239 = (function (){var G__217268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217269 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217268,G__217269) : tailrecursion.hoplon.span.call(null,G__217268,G__217269));
})();
var G__217240 = "(";
var G__217241 = (function (){var G__217270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217271 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217270,G__217271) : tailrecursion.hoplon.span.call(null,G__217270,G__217271));
})();
var G__217242 = (function (){var G__217272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217273 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217272,G__217273) : tailrecursion.hoplon.span.call(null,G__217272,G__217273));
})();
var G__217243 = " ";
var G__217244 = (function (){var G__217274 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217275 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217274,G__217275) : tailrecursion.hoplon.span.call(null,G__217274,G__217275));
})();
var G__217245 = ")\n      ";
var G__217246 = (function (){var G__217276 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217277 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217276,G__217277) : tailrecursion.hoplon.span.call(null,G__217276,G__217277));
})();
var G__217247 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__217220,G__217221,G__217222,G__217223,G__217224,G__217225,G__217226,G__217227,G__217228,G__217229,G__217230,G__217231,G__217232,G__217233,G__217234,G__217235,G__217236,G__217237,G__217238,G__217239,G__217240,G__217241,G__217242,G__217243,G__217244,G__217245,G__217246,G__217247) : tailrecursion.hoplon.pre.call(null,G__217220,G__217221,G__217222,G__217223,G__217224,G__217225,G__217226,G__217227,G__217228,G__217229,G__217230,G__217231,G__217232,G__217233,G__217234,G__217235,G__217236,G__217237,G__217238,G__217239,G__217240,G__217241,G__217242,G__217243,G__217244,G__217245,G__217246,G__217247));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217218,G__217219) : tailrecursion.hoplon.div.call(null,G__217218,G__217219));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217217) : tailrecursion.hoplon.div.call(null,G__217217));
})(),(function (){var G__217278 = cljs.core.PersistentArrayMap.EMPTY;
var G__217279 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["following a formatting convention known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["pretty-printing"], null)], 0)),", in which each long combination is written so that the operands are aligned vertically. The resulting indentations display clearly the structure of the expression.",(function (){var G__217280 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__217281 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp systems typically provide features to aid the user in formatting expressions. Two especially useful features are one that automatically indents to the proper pretty-print position whenever a new line is started and one that highlights the matching left parenthesis whenever a right parenthesis is typed."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217280,G__217281) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217280,G__217281));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217278,G__217279) : tailrecursion.hoplon.markdown.para_node.call(null,G__217278,G__217279));
})(),(function (){var G__217282 = cljs.core.PersistentArrayMap.EMPTY;
var G__217283 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even with complex expressions, the interpreter always operates in the same basic cycle: It reads an expression from the terminal, evaluates the expression, and prints the result. This mode of operation is often expressed by saying that the interpreter runs in a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["read-eval-print loop"], null)], 0)),". Observe in particular that it is not necessary to explicitly instruct the interpreter to print the value of the expression.",(function (){var G__217284 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__217285 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp obeys the convention that every expression has a value. This convention, together with the old reputation of Lisp as an inefficient language, is the source of the quip by Alan Perlis (paraphrasing Oscar Wilde) that ",(function (){var G__217286 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__217287 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp programmers know the value of everything but the cost of nothing."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217286,G__217287) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217286,G__217287));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217284,G__217285) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217284,G__217285));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217282,G__217283) : tailrecursion.hoplon.markdown.para_node.call(null,G__217282,G__217283));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_216643;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_216642;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_216641;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_216640;
}})()], 0));
var G__216579 = "";
var G__216580 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Naming and the Environment"], null),(function (){var _STAR_references_STAR_217288 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217289 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_217290 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217291 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217292 = cljs.core.PersistentArrayMap.EMPTY;
var G__217293 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A critical aspect of a programming language is the means it provides for using names to refer to computational objects. We say that the name identifies a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["variable"], null)], 0))," whose ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["value"], null)], 0))," is the object."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217292,G__217293) : tailrecursion.hoplon.markdown.para_node.call(null,G__217292,G__217293));
})(),(function (){var G__217294 = cljs.core.PersistentArrayMap.EMPTY;
var G__217295 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In the Scheme dialect of Lisp, we name things with ",(function (){var G__217296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__217297 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217296,G__217297) : tailrecursion.hoplon.markdown.code_node.call(null,G__217296,G__217297));
})(),". Typing"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217294,G__217295) : tailrecursion.hoplon.markdown.para_node.call(null,G__217294,G__217295));
})(),(function (){var G__217313 = (function (){var G__217314 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217315 = (function (){var G__217316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217317 = "(";
var G__217318 = (function (){var G__217323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__217324 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217323,G__217324) : tailrecursion.hoplon.span.call(null,G__217323,G__217324));
})();
var G__217319 = (function (){var G__217325 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217326 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217325,G__217326) : tailrecursion.hoplon.span.call(null,G__217325,G__217326));
})();
var G__217320 = " ";
var G__217321 = (function (){var G__217327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217328 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217327,G__217328) : tailrecursion.hoplon.span.call(null,G__217327,G__217328));
})();
var G__217322 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__217316,G__217317,G__217318,G__217319,G__217320,G__217321,G__217322) : tailrecursion.hoplon.pre.call(null,G__217316,G__217317,G__217318,G__217319,G__217320,G__217321,G__217322));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217314,G__217315) : tailrecursion.hoplon.div.call(null,G__217314,G__217315));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217313) : tailrecursion.hoplon.div.call(null,G__217313));
})(),(function (){var G__217329 = cljs.core.PersistentArrayMap.EMPTY;
var G__217330 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["causes the interpreter to associate the value 2 with the name size.",(function (){var G__217331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__217332 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this book, we do not show the interpreter",(function (){var G__217333 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__217334 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__217333,G__217334) : tailrecursion.hoplon.markdown.simple_node.call(null,G__217333,G__217334));
})(),"s response to evaluating definitions, since this is highly implementation-dependent."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217331,G__217332) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217331,G__217332));
})()," In Clojure we would use ",(function (){var G__217335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__217336 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217335,G__217336) : tailrecursion.hoplon.markdown.code_node.call(null,G__217335,G__217336));
})()," to accomplish the same goal. i.e."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217329,G__217330) : tailrecursion.hoplon.markdown.para_node.call(null,G__217329,G__217330));
})(),(function (){var G__217352 = (function (){var G__217353 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217354 = (function (){var G__217355 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217356 = "(";
var G__217357 = (function (){var G__217362 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__217363 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217362,G__217363) : tailrecursion.hoplon.span.call(null,G__217362,G__217363));
})();
var G__217358 = (function (){var G__217364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217365 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217364,G__217365) : tailrecursion.hoplon.span.call(null,G__217364,G__217365));
})();
var G__217359 = " ";
var G__217360 = (function (){var G__217366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217367 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217366,G__217367) : tailrecursion.hoplon.span.call(null,G__217366,G__217367));
})();
var G__217361 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__217355,G__217356,G__217357,G__217358,G__217359,G__217360,G__217361) : tailrecursion.hoplon.pre.call(null,G__217355,G__217356,G__217357,G__217358,G__217359,G__217360,G__217361));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217353,G__217354) : tailrecursion.hoplon.div.call(null,G__217353,G__217354));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217352) : tailrecursion.hoplon.div.call(null,G__217352));
})(),(function (){var G__217368 = cljs.core.PersistentArrayMap.EMPTY;
var G__217369 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and the interpreter will now associate the value 2 with the name size. Once the name size has been associated with the number 2, we can refer to the value 2 by name:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217368,G__217369) : tailrecursion.hoplon.markdown.para_node.call(null,G__217368,G__217369));
})(),(function (){var G__217381 = (function (){var G__217382 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217383 = (function (){var G__217384 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217385 = (function (){var G__217389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217390 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217389,G__217390) : tailrecursion.hoplon.span.call(null,G__217389,G__217390));
})();
var G__217386 = "\n";
var G__217387 = (function (){var G__217391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217392 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217391,G__217392) : tailrecursion.hoplon.span.call(null,G__217391,G__217392));
})();
var G__217388 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5(G__217384,G__217385,G__217386,G__217387,G__217388) : tailrecursion.hoplon.pre.call(null,G__217384,G__217385,G__217386,G__217387,G__217388));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217382,G__217383) : tailrecursion.hoplon.div.call(null,G__217382,G__217383));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217381) : tailrecursion.hoplon.div.call(null,G__217381));
})(),(function (){var G__217412 = (function (){var G__217413 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217414 = (function (){var G__217415 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217416 = "(";
var G__217417 = (function (){var G__217424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217425 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217424,G__217425) : tailrecursion.hoplon.span.call(null,G__217424,G__217425));
})();
var G__217418 = (function (){var G__217426 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217427 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217426,G__217427) : tailrecursion.hoplon.span.call(null,G__217426,G__217427));
})();
var G__217419 = " ";
var G__217420 = (function (){var G__217428 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217429 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217428,G__217429) : tailrecursion.hoplon.span.call(null,G__217428,G__217429));
})();
var G__217421 = ")\n";
var G__217422 = (function (){var G__217430 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217431 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217430,G__217431) : tailrecursion.hoplon.span.call(null,G__217430,G__217431));
})();
var G__217423 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__217415,G__217416,G__217417,G__217418,G__217419,G__217420,G__217421,G__217422,G__217423) : tailrecursion.hoplon.pre.call(null,G__217415,G__217416,G__217417,G__217418,G__217419,G__217420,G__217421,G__217422,G__217423));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217413,G__217414) : tailrecursion.hoplon.div.call(null,G__217413,G__217414));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217412) : tailrecursion.hoplon.div.call(null,G__217412));
})(),(function (){var G__217432 = cljs.core.PersistentArrayMap.EMPTY;
var G__217433 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here are further examples of the use of ",(function (){var G__217434 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__217435 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217434,G__217435) : tailrecursion.hoplon.markdown.code_node.call(null,G__217434,G__217435));
})(),":"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217432,G__217433) : tailrecursion.hoplon.markdown.para_node.call(null,G__217432,G__217433));
})(),(function (){var G__217514 = (function (){var G__217515 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217516 = (function (){var G__217517 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217518 = "(";
var G__217519 = (function (){var G__217553 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__217554 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217553,G__217554) : tailrecursion.hoplon.span.call(null,G__217553,G__217554));
})();
var G__217520 = (function (){var G__217555 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217556 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217555,G__217556) : tailrecursion.hoplon.span.call(null,G__217555,G__217556));
})();
var G__217521 = " ";
var G__217522 = (function (){var G__217557 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217558 = "3.14159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217557,G__217558) : tailrecursion.hoplon.span.call(null,G__217557,G__217558));
})();
var G__217523 = ")\n(";
var G__217524 = (function (){var G__217559 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__217560 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217559,G__217560) : tailrecursion.hoplon.span.call(null,G__217559,G__217560));
})();
var G__217525 = (function (){var G__217561 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217562 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217561,G__217562) : tailrecursion.hoplon.span.call(null,G__217561,G__217562));
})();
var G__217526 = " ";
var G__217527 = (function (){var G__217563 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217564 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217563,G__217564) : tailrecursion.hoplon.span.call(null,G__217563,G__217564));
})();
var G__217528 = ")\n(";
var G__217529 = (function (){var G__217565 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217566 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217565,G__217566) : tailrecursion.hoplon.span.call(null,G__217565,G__217566));
})();
var G__217530 = (function (){var G__217567 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217568 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217567,G__217568) : tailrecursion.hoplon.span.call(null,G__217567,G__217568));
})();
var G__217531 = " (";
var G__217532 = (function (){var G__217569 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217570 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217569,G__217570) : tailrecursion.hoplon.span.call(null,G__217569,G__217570));
})();
var G__217533 = (function (){var G__217571 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217572 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217571,G__217572) : tailrecursion.hoplon.span.call(null,G__217571,G__217572));
})();
var G__217534 = " ";
var G__217535 = (function (){var G__217573 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217574 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217573,G__217574) : tailrecursion.hoplon.span.call(null,G__217573,G__217574));
})();
var G__217536 = "))\n";
var G__217537 = (function (){var G__217575 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217576 = "314.159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217575,G__217576) : tailrecursion.hoplon.span.call(null,G__217575,G__217576));
})();
var G__217538 = "\n(";
var G__217539 = (function (){var G__217577 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__217578 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217577,G__217578) : tailrecursion.hoplon.span.call(null,G__217577,G__217578));
})();
var G__217540 = (function (){var G__217579 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217580 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217579,G__217580) : tailrecursion.hoplon.span.call(null,G__217579,G__217580));
})();
var G__217541 = " (";
var G__217542 = (function (){var G__217581 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217582 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217581,G__217582) : tailrecursion.hoplon.span.call(null,G__217581,G__217582));
})();
var G__217543 = (function (){var G__217583 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217584 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217583,G__217584) : tailrecursion.hoplon.span.call(null,G__217583,G__217584));
})();
var G__217544 = " ";
var G__217545 = (function (){var G__217585 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217586 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217585,G__217586) : tailrecursion.hoplon.span.call(null,G__217585,G__217586));
})();
var G__217546 = " ";
var G__217547 = (function (){var G__217587 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217588 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217587,G__217588) : tailrecursion.hoplon.span.call(null,G__217587,G__217588));
})();
var G__217548 = "))\n";
var G__217549 = (function (){var G__217589 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217590 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217589,G__217590) : tailrecursion.hoplon.span.call(null,G__217589,G__217590));
})();
var G__217550 = "\n";
var G__217551 = (function (){var G__217591 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217592 = "62.8318";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217591,G__217592) : tailrecursion.hoplon.span.call(null,G__217591,G__217592));
})();
var G__217552 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__217517,G__217518,G__217519,G__217520,G__217521,G__217522,G__217523,G__217524,G__217525,G__217526,G__217527,G__217528,G__217529,G__217530,G__217531,G__217532,G__217533,G__217534,G__217535,G__217536,G__217537,G__217538,G__217539,G__217540,G__217541,G__217542,G__217543,G__217544,G__217545,G__217546,G__217547,G__217548,G__217549,G__217550,G__217551,G__217552) : tailrecursion.hoplon.pre.call(null,G__217517,G__217518,G__217519,G__217520,G__217521,G__217522,G__217523,G__217524,G__217525,G__217526,G__217527,G__217528,G__217529,G__217530,G__217531,G__217532,G__217533,G__217534,G__217535,G__217536,G__217537,G__217538,G__217539,G__217540,G__217541,G__217542,G__217543,G__217544,G__217545,G__217546,G__217547,G__217548,G__217549,G__217550,G__217551,G__217552));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217515,G__217516) : tailrecursion.hoplon.div.call(null,G__217515,G__217516));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217514) : tailrecursion.hoplon.div.call(null,G__217514));
})(),(function (){var G__217593 = cljs.core.PersistentArrayMap.EMPTY;
var G__217594 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217595 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__217596 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217595,G__217596) : tailrecursion.hoplon.markdown.code_node.call(null,G__217595,G__217596));
})()," is our language",(function (){var G__217597 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__217598 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__217597,G__217598) : tailrecursion.hoplon.markdown.simple_node.call(null,G__217597,G__217598));
})(),"s simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the ",(function (){var G__217599 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"circumference"], null);
var G__217600 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217599,G__217600) : tailrecursion.hoplon.markdown.code_node.call(null,G__217599,G__217600));
})()," computed above. In general, computational objects may have very complex structures, and it would be extremely inconvenient to have to remember and repeat their details each time we want to use them. Indeed, complex programs are constructed by building, step by step, computational objects of increasing complexity. The interpreter makes this step-by-step program construction particularly convenient because name-object associations can be created incrementally in successive interactions. This feature encourages the incremental development and testing of programs and is largely responsible for the fact that a Lisp program usually consists of a large number of relatively simple procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217593,G__217594) : tailrecursion.hoplon.markdown.para_node.call(null,G__217593,G__217594));
})(),(function (){var G__217601 = cljs.core.PersistentArrayMap.EMPTY;
var G__217602 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It should be clear that the possibility of associating values with symbols and later retrieving them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. This memory is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["environment"], null)], 0))," (more precisely the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["global environment"], null)], 0)),", since we will see later that a computation may involve a number of different environments).",(function (){var G__217603 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__217604 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Chapter 3 will show that this notion of environment is crucial, both for understanding how the interpreter works and for implementing interpreters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217603,G__217604) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217603,G__217604));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217601,G__217602) : tailrecursion.hoplon.markdown.para_node.call(null,G__217601,G__217602));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217291;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217290;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217289;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217288;
}})()], 0));
var G__216581 = " ";
var G__216582 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Evaluating Combinations"], null),(function (){var _STAR_references_STAR_217605 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217606 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_217607 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217608 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217609 = cljs.core.PersistentArrayMap.EMPTY;
var G__217610 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating combinations, the interpreter is itself following a procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217609,G__217610) : tailrecursion.hoplon.markdown.para_node.call(null,G__217609,G__217610));
})(),(function (){var G__217611 = cljs.core.PersistentArrayMap.EMPTY;
var G__217612 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217613 = cljs.core.PersistentArrayMap.EMPTY;
var G__217614 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217615 = cljs.core.PersistentArrayMap.EMPTY;
var G__217616 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination, do the following:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217615,G__217616) : tailrecursion.hoplon.markdown.para_node.call(null,G__217615,G__217616));
})(),(function (){var _STAR_references_STAR_217617 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217618 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217619 = cljs.core.PersistentArrayMap.EMPTY;
var G__217620 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217621 = cljs.core.PersistentArrayMap.EMPTY;
var G__217622 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_217623 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217624 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Evaluate the subexpressions of the combination."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217624;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217623;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__217621,G__217622) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__217621,G__217622));
})(),(function (){var G__217625 = cljs.core.PersistentArrayMap.EMPTY;
var G__217626 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_217627 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217628 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands)."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217628;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217627;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__217625,G__217626) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__217625,G__217626));
})()], null);
return (tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2(G__217619,G__217620) : tailrecursion.hoplon.markdown.ordered_list_node.call(null,G__217619,G__217620));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217618;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217617;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__217613,G__217614) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__217613,G__217614));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__217611,G__217612) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__217611,G__217612));
})(),(function (){var G__217629 = cljs.core.PersistentArrayMap.EMPTY;
var G__217630 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even this simple rule illustrates some important points about processes in general. First, observe that the first step dictates that in order to accomplish the evaluation process for a combination we must first perform the evaluation process on each element of the combination. Thus, the evaluation rule is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0))," in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.",(function (){var G__217631 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__217632 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It may seem strange that the evaluation rule says, as part of the first step, that we should evaluate the leftmost element of a combination, since at this point that can only be an operator such as ",(function (){var G__217633 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__217634 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217633,G__217634) : tailrecursion.hoplon.markdown.code_node.call(null,G__217633,G__217634));
})()," or ",(function (){var G__217635 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__217636 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217635,G__217636) : tailrecursion.hoplon.markdown.code_node.call(null,G__217635,G__217636));
})()," representing a built-in primitive procedure such as addition or multiplication. We will see later that it is useful to be able to work with combinations whose operators are themselves compound expressions."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217631,G__217632) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217631,G__217632));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217629,G__217630) : tailrecursion.hoplon.markdown.para_node.call(null,G__217629,G__217630));
})(),(function (){var G__217637 = cljs.core.PersistentArrayMap.EMPTY;
var G__217638 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice how succinctly the idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process. For example, evaluating"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217637,G__217638) : tailrecursion.hoplon.markdown.para_node.call(null,G__217637,G__217638));
})(),(function (){var G__217680 = (function (){var G__217681 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217682 = (function (){var G__217683 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217684 = "(";
var G__217685 = (function (){var G__217702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217703 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217702,G__217703) : tailrecursion.hoplon.span.call(null,G__217702,G__217703));
})();
var G__217686 = "(";
var G__217687 = (function (){var G__217704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217705 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217704,G__217705) : tailrecursion.hoplon.span.call(null,G__217704,G__217705));
})();
var G__217688 = (function (){var G__217706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217707 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217706,G__217707) : tailrecursion.hoplon.span.call(null,G__217706,G__217707));
})();
var G__217689 = " (";
var G__217690 = (function (){var G__217708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217709 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217708,G__217709) : tailrecursion.hoplon.span.call(null,G__217708,G__217709));
})();
var G__217691 = (function (){var G__217710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217711 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217710,G__217711) : tailrecursion.hoplon.span.call(null,G__217710,G__217711));
})();
var G__217692 = " ";
var G__217693 = (function (){var G__217712 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217713 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217712,G__217713) : tailrecursion.hoplon.span.call(null,G__217712,G__217713));
})();
var G__217694 = "))\n   (";
var G__217695 = (function (){var G__217714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217715 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217714,G__217715) : tailrecursion.hoplon.span.call(null,G__217714,G__217715));
})();
var G__217696 = (function (){var G__217716 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217717 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217716,G__217717) : tailrecursion.hoplon.span.call(null,G__217716,G__217717));
})();
var G__217697 = " ";
var G__217698 = (function (){var G__217718 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217719 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217718,G__217719) : tailrecursion.hoplon.span.call(null,G__217718,G__217719));
})();
var G__217699 = " ";
var G__217700 = (function (){var G__217720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__217721 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217720,G__217721) : tailrecursion.hoplon.span.call(null,G__217720,G__217721));
})();
var G__217701 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__217683,G__217684,G__217685,G__217686,G__217687,G__217688,G__217689,G__217690,G__217691,G__217692,G__217693,G__217694,G__217695,G__217696,G__217697,G__217698,G__217699,G__217700,G__217701) : tailrecursion.hoplon.pre.call(null,G__217683,G__217684,G__217685,G__217686,G__217687,G__217688,G__217689,G__217690,G__217691,G__217692,G__217693,G__217694,G__217695,G__217696,G__217697,G__217698,G__217699,G__217700,G__217701));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217681,G__217682) : tailrecursion.hoplon.div.call(null,G__217681,G__217682));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217680) : tailrecursion.hoplon.div.call(null,G__217680));
})(),(function (){var G__217722 = cljs.core.PersistentArrayMap.EMPTY;
var G__217723 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["requires that the evaluation rule be applied to four different combinations. We can obtain a picture of this process by representing the combination in the form of a tree, as shown in figure 1.1. Each combination is represented by a node with branches corresponding to the operator and the operands of the combination stemming from it. The terminal nodes (that is, nodes with no branches stemming from them) represent either operators or numbers. Viewing evaluation in terms of the tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels. In general, we shall see that recursion is a very powerful technique for dealing with hierarchical, treelike objects. In fact, the ``percolate values upward",(function (){var G__217724 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__217725 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__217724,G__217725) : tailrecursion.hoplon.markdown.simple_node.call(null,G__217724,G__217725));
})(),(function (){var G__217726 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__217727 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__217726,G__217727) : tailrecursion.hoplon.markdown.simple_node.call(null,G__217726,G__217727));
})()," form of the evaluation rule is an example of a general kind of process known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["tree accumulation"], null)], 0)),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217722,G__217723) : tailrecursion.hoplon.markdown.para_node.call(null,G__217722,G__217723));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217608;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217607;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217606;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217605;
}})(),"",book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Tree representation, showing the value of each subcombination."], null)], 0)),(function (){var _STAR_references_STAR_217728 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217729 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_217730 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217731 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217732 = cljs.core.PersistentArrayMap.EMPTY;
var G__217733 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not combinations, but primitive expressions such as numerals, built-in operators, or other names. We take care of the primitive cases by stipulating that"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217732,G__217733) : tailrecursion.hoplon.markdown.para_node.call(null,G__217732,G__217733));
})(),(function (){var G__217734 = cljs.core.PersistentArrayMap.EMPTY;
var G__217735 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217736 = cljs.core.PersistentArrayMap.EMPTY;
var G__217737 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_217738 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217739 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of numerals are the numbers that they name,"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217739;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217738;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__217736,G__217737) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__217736,G__217737));
})(),(function (){var G__217740 = cljs.core.PersistentArrayMap.EMPTY;
var G__217741 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_217742 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217743 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of built-in operators are the machine  instruction sequences that carry out the corresponding operations, and"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217743;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217742;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__217740,G__217741) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__217740,G__217741));
})(),(function (){var G__217744 = cljs.core.PersistentArrayMap.EMPTY;
var G__217745 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_217746 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217747 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of other names are the objects associated with  those names in the environment."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217747;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217746;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__217744,G__217745) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__217744,G__217745));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__217734,G__217735) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__217734,G__217735));
})(),(function (){var G__217748 = cljs.core.PersistentArrayMap.EMPTY;
var G__217749 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We may regard the second rule as a special case of the third one by stipulating that symbols such as + and * are also included in the global environment, and are associated with the sequences of machine instructions that are their ",(function (){var G__217750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__217751 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["values."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217750,G__217751) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217750,G__217751));
})()," The key point to notice is the role of the environment in determining the meaning of the symbols in expressions. In an interactive language such as Lisp, it is meaningless to speak of the value of an expression such as ",(function (){var G__217752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+\nx 1)"], null);
var G__217753 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217752,G__217753) : tailrecursion.hoplon.markdown.code_node.call(null,G__217752,G__217753));
})()," without specifying any information about the environment that would provide a meaning for the symbol ",(function (){var G__217754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__217755 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217754,G__217755) : tailrecursion.hoplon.markdown.code_node.call(null,G__217754,G__217755));
})()," (or even for the symbol ",(function (){var G__217756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__217757 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217756,G__217757) : tailrecursion.hoplon.markdown.code_node.call(null,G__217756,G__217757));
})(),"). As we shall see in chapter 3, the general notion of the environment as providing a context in which evaluation takes place will play an important role in our understanding of program execution."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217748,G__217749) : tailrecursion.hoplon.markdown.para_node.call(null,G__217748,G__217749));
})(),(function (){var G__217758 = cljs.core.PersistentArrayMap.EMPTY;
var G__217759 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that the evaluation rule given above does not handle definitions. For instance, evaluating ",(function (){var G__217760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x 3)"], null);
var G__217761 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217760,G__217761) : tailrecursion.hoplon.markdown.code_node.call(null,G__217760,G__217761));
})()," does not apply ",(function (){var G__217762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__217763 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217762,G__217763) : tailrecursion.hoplon.markdown.code_node.call(null,G__217762,G__217763));
})()," to two arguments, one of which is the value of the symbol ",(function (){var G__217764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__217765 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217764,G__217765) : tailrecursion.hoplon.markdown.code_node.call(null,G__217764,G__217765));
})()," and the other of which is 3, since the purpose of the define is precisely to associate ",(function (){var G__217766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__217767 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217766,G__217767) : tailrecursion.hoplon.markdown.code_node.call(null,G__217766,G__217767));
})()," with a value. (That is, ",(function (){var G__217768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(def x\n3)"], null);
var G__217769 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217768,G__217769) : tailrecursion.hoplon.markdown.code_node.call(null,G__217768,G__217769));
})()," is not a combination.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217758,G__217759) : tailrecursion.hoplon.markdown.para_node.call(null,G__217758,G__217759));
})(),(function (){var G__217770 = cljs.core.PersistentArrayMap.EMPTY;
var G__217771 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such exceptions to the general evaluation rule are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["special forms"], null)], 0)),". ",(function (){var G__217772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Def"], null);
var G__217773 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__217772,G__217773) : tailrecursion.hoplon.markdown.code_node.call(null,G__217772,G__217773));
})()," is the only example of a special form that we have seen so far, but we will meet others shortly. Each special form has its own evaluation rule. The various kinds of expressions (each with its associated evaluation rule) constitute the syntax of the programming language. In comparison with most other programming languages, Lisp has a very simple syntax; that is, the evaluation rule for expressions can be described by a simple general rule together with specialized rules for a small number of special forms.",(function (){var G__217774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__217775 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Special syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["syntactic sugar"], null)], 0)),", to use a phrase coined by Peter Landin. In comparison with users of other languages, Lisp programmers, as a rule, are less concerned with matters of syntax. (By contrast, examine any Pascal manual and notice how much of it is devoted to descriptions of syntax.) This disdain for syntax is due partly to the flexibility of Lisp, which makes it easy to change surface syntax, and partly to the observation that many ",(function (){var G__217776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__217777 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["convenient"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217776,G__217777) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217776,G__217777));
})()," syntactic constructs, which make the language less uniform, end up causing more trouble than they are worth when programs become large and complex. In the words of Alan Perlis, ",(function (){var G__217778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__217779 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Syntactic sugar causes cancer of the semicolon."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217778,G__217779) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217778,G__217779));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217774,G__217775) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217774,G__217775));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217770,G__217771) : tailrecursion.hoplon.markdown.para_node.call(null,G__217770,G__217771));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217731;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217730;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217729;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217728;
}})()], 0));
var G__216583 = "";
var G__216584 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Compound Procedures"], null),(function (){var _STAR_references_STAR_217780 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217781 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_217782 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217783 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217784 = cljs.core.PersistentArrayMap.EMPTY;
var G__217785 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have identified in Lisp some of the elements that must appear in any powerful programming language:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217784,G__217785) : tailrecursion.hoplon.markdown.para_node.call(null,G__217784,G__217785));
})(),(function (){var G__217786 = cljs.core.PersistentArrayMap.EMPTY;
var G__217787 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217788 = cljs.core.PersistentArrayMap.EMPTY;
var G__217789 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217790 = cljs.core.PersistentArrayMap.EMPTY;
var G__217791 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Numbers and arithmetic operations are primitive data and procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217790,G__217791) : tailrecursion.hoplon.markdown.para_node.call(null,G__217790,G__217791));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__217788,G__217789) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__217788,G__217789));
})(),(function (){var G__217792 = cljs.core.PersistentArrayMap.EMPTY;
var G__217793 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_217794 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217795 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217796 = cljs.core.PersistentArrayMap.EMPTY;
var G__217797 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Nesting of combinations provides a means of combining operations."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217796,G__217797) : tailrecursion.hoplon.markdown.para_node.call(null,G__217796,G__217797));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217795;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217794;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__217792,G__217793) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__217792,G__217793));
})(),(function (){var G__217798 = cljs.core.PersistentArrayMap.EMPTY;
var G__217799 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_217800 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_217801 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__217802 = cljs.core.PersistentArrayMap.EMPTY;
var G__217803 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Definitions that associate names with values provide a  limited means of abstraction."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217802,G__217803) : tailrecursion.hoplon.markdown.para_node.call(null,G__217802,G__217803));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217801;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217800;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__217798,G__217799) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__217798,G__217799));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__217786,G__217787) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__217786,G__217787));
})(),(function (){var G__217804 = cljs.core.PersistentArrayMap.EMPTY;
var G__217805 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we will learn about ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedure definitions"], null)], 0)),", a much more powerful abstraction technique by which a compound operation can be given a name and then referred to as a unit."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217804,G__217805) : tailrecursion.hoplon.markdown.para_node.call(null,G__217804,G__217805));
})(),(function (){var G__217806 = cljs.core.PersistentArrayMap.EMPTY;
var G__217807 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We begin by examining how to express the idea of ",(function (){var G__217808 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__217809 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["squaring."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217808,G__217809) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217808,G__217809));
})()," We might say, ",(function (){var G__217810 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__217811 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To square something, multiply it by itself."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__217810,G__217811) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__217810,G__217811));
})()," This is expressed in scheme as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217806,G__217807) : tailrecursion.hoplon.markdown.para_node.call(null,G__217806,G__217807));
})(),(function (){var G__217839 = (function (){var G__217840 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217841 = (function (){var G__217842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217843 = "(";
var G__217844 = (function (){var G__217855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__217856 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217855,G__217856) : tailrecursion.hoplon.span.call(null,G__217855,G__217856));
})();
var G__217845 = "(";
var G__217846 = (function (){var G__217857 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__217858 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217857,G__217858) : tailrecursion.hoplon.span.call(null,G__217857,G__217858));
})();
var G__217847 = " ";
var G__217848 = (function (){var G__217859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217860 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217859,G__217860) : tailrecursion.hoplon.span.call(null,G__217859,G__217860));
})();
var G__217849 = ") (";
var G__217850 = (function (){var G__217861 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217862 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217861,G__217862) : tailrecursion.hoplon.span.call(null,G__217861,G__217862));
})();
var G__217851 = (function (){var G__217863 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217864 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217863,G__217864) : tailrecursion.hoplon.span.call(null,G__217863,G__217864));
})();
var G__217852 = " ";
var G__217853 = (function (){var G__217865 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217866 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217865,G__217866) : tailrecursion.hoplon.span.call(null,G__217865,G__217866));
})();
var G__217854 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__217842,G__217843,G__217844,G__217845,G__217846,G__217847,G__217848,G__217849,G__217850,G__217851,G__217852,G__217853,G__217854) : tailrecursion.hoplon.pre.call(null,G__217842,G__217843,G__217844,G__217845,G__217846,G__217847,G__217848,G__217849,G__217850,G__217851,G__217852,G__217853,G__217854));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217840,G__217841) : tailrecursion.hoplon.div.call(null,G__217840,G__217841));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217839) : tailrecursion.hoplon.div.call(null,G__217839));
})(),(function (){var G__217867 = cljs.core.PersistentArrayMap.EMPTY;
var G__217868 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["but in Clojure, we would write that as,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217867,G__217868) : tailrecursion.hoplon.markdown.para_node.call(null,G__217867,G__217868));
})(),(function (){var G__217895 = (function (){var G__217896 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__217897 = (function (){var G__217898 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__217899 = "(";
var G__217900 = (function (){var G__217910 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__217911 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217910,G__217911) : tailrecursion.hoplon.span.call(null,G__217910,G__217911));
})();
var G__217901 = (function (){var G__217912 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217913 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217912,G__217913) : tailrecursion.hoplon.span.call(null,G__217912,G__217913));
})();
var G__217902 = " [";
var G__217903 = (function (){var G__217914 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217915 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217914,G__217915) : tailrecursion.hoplon.span.call(null,G__217914,G__217915));
})();
var G__217904 = "] (";
var G__217905 = (function (){var G__217916 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__217917 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217916,G__217917) : tailrecursion.hoplon.span.call(null,G__217916,G__217917));
})();
var G__217906 = (function (){var G__217918 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217919 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217918,G__217919) : tailrecursion.hoplon.span.call(null,G__217918,G__217919));
})();
var G__217907 = " ";
var G__217908 = (function (){var G__217920 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__217921 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__217920,G__217921) : tailrecursion.hoplon.span.call(null,G__217920,G__217921));
})();
var G__217909 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__217898,G__217899,G__217900,G__217901,G__217902,G__217903,G__217904,G__217905,G__217906,G__217907,G__217908,G__217909) : tailrecursion.hoplon.pre.call(null,G__217898,G__217899,G__217900,G__217901,G__217902,G__217903,G__217904,G__217905,G__217906,G__217907,G__217908,G__217909));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__217896,G__217897) : tailrecursion.hoplon.div.call(null,G__217896,G__217897));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__217895) : tailrecursion.hoplon.div.call(null,G__217895));
})(),(function (){var G__217922 = cljs.core.PersistentArrayMap.EMPTY;
var G__217923 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note that Clojure differentiates between definining an atom and defining a procedure! We can understand this in the following way:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__217922,G__217923) : tailrecursion.hoplon.markdown.para_node.call(null,G__217922,G__217923));
})(),(function (){var G__218003 = (function (){var G__218004 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__218005 = (function (){var G__218006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__218007 = "(";
var G__218008 = (function (){var G__218045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__218046 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218045,G__218046) : tailrecursion.hoplon.span.call(null,G__218045,G__218046));
})();
var G__218009 = (function (){var G__218047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218048 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218047,G__218048) : tailrecursion.hoplon.span.call(null,G__218047,G__218048));
})();
var G__218010 = "      [";
var G__218011 = (function (){var G__218049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218050 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218049,G__218050) : tailrecursion.hoplon.span.call(null,G__218049,G__218050));
})();
var G__218012 = "]      (";
var G__218013 = (function (){var G__218051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218052 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218051,G__218052) : tailrecursion.hoplon.span.call(null,G__218051,G__218052));
})();
var G__218014 = "     ";
var G__218015 = (function (){var G__218053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218054 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218053,G__218054) : tailrecursion.hoplon.span.call(null,G__218053,G__218054));
})();
var G__218016 = "      ";
var G__218017 = (function (){var G__218055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218056 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218055,G__218056) : tailrecursion.hoplon.span.call(null,G__218055,G__218056));
})();
var G__218018 = "))\n  ";
var G__218019 = (function (){var G__218057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__218058 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218057,G__218058) : tailrecursion.hoplon.span.call(null,G__218057,G__218058));
})();
var G__218020 = "    ";
var G__218021 = (function (){var G__218059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__218060 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218059,G__218060) : tailrecursion.hoplon.span.call(null,G__218059,G__218060));
})();
var G__218022 = "          ";
var G__218023 = (function (){var G__218061 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__218062 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218061,G__218062) : tailrecursion.hoplon.span.call(null,G__218061,G__218062));
})();
var G__218024 = "        ";
var G__218025 = (function (){var G__218063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__218064 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218063,G__218064) : tailrecursion.hoplon.span.call(null,G__218063,G__218064));
})();
var G__218026 = "     ";
var G__218027 = (function (){var G__218065 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__218066 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218065,G__218066) : tailrecursion.hoplon.span.call(null,G__218065,G__218066));
})();
var G__218028 = "      ";
var G__218029 = (function (){var G__218067 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"border: 1px solid #FF0000"], null);
var G__218068 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218067,G__218068) : tailrecursion.hoplon.span.call(null,G__218067,G__218068));
})();
var G__218030 = "\n ";
var G__218031 = (function (){var G__218069 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218070 = "to";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218069,G__218070) : tailrecursion.hoplon.span.call(null,G__218069,G__218070));
})();
var G__218032 = "  ";
var G__218033 = (function (){var G__218071 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #BA2121"], null);
var G__218072 = "\"square\"";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218071,G__218072) : tailrecursion.hoplon.span.call(null,G__218071,G__218072));
})();
var G__218034 = " ";
var G__218035 = (function (){var G__218073 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218074 = "something";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218073,G__218074) : tailrecursion.hoplon.span.call(null,G__218073,G__218074));
})();
var G__218036 = ", ";
var G__218037 = (function (){var G__218075 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218076 = "multiply";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218075,G__218076) : tailrecursion.hoplon.span.call(null,G__218075,G__218076));
})();
var G__218038 = " ";
var G__218039 = (function (){var G__218077 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218078 = "it";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218077,G__218078) : tailrecursion.hoplon.span.call(null,G__218077,G__218078));
})();
var G__218040 = " ";
var G__218041 = (function (){var G__218079 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218080 = "by";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218079,G__218080) : tailrecursion.hoplon.span.call(null,G__218079,G__218080));
})();
var G__218042 = " ";
var G__218043 = (function (){var G__218081 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218082 = "itself.";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218081,G__218082) : tailrecursion.hoplon.span.call(null,G__218081,G__218082));
})();
var G__218044 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__218006,G__218007,G__218008,G__218009,G__218010,G__218011,G__218012,G__218013,G__218014,G__218015,G__218016,G__218017,G__218018,G__218019,G__218020,G__218021,G__218022,G__218023,G__218024,G__218025,G__218026,G__218027,G__218028,G__218029,G__218030,G__218031,G__218032,G__218033,G__218034,G__218035,G__218036,G__218037,G__218038,G__218039,G__218040,G__218041,G__218042,G__218043,G__218044) : tailrecursion.hoplon.pre.call(null,G__218006,G__218007,G__218008,G__218009,G__218010,G__218011,G__218012,G__218013,G__218014,G__218015,G__218016,G__218017,G__218018,G__218019,G__218020,G__218021,G__218022,G__218023,G__218024,G__218025,G__218026,G__218027,G__218028,G__218029,G__218030,G__218031,G__218032,G__218033,G__218034,G__218035,G__218036,G__218037,G__218038,G__218039,G__218040,G__218041,G__218042,G__218043,G__218044));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__218004,G__218005) : tailrecursion.hoplon.div.call(null,G__218004,G__218005));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__218003) : tailrecursion.hoplon.div.call(null,G__218003));
})(),(function (){var G__218083 = cljs.core.PersistentArrayMap.EMPTY;
var G__218084 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have here a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["compound procedure"], null)], 0)),", which has been given the name ",(function (){var G__218085 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__218086 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218085,G__218086) : tailrecursion.hoplon.markdown.code_node.call(null,G__218085,G__218086));
})(),". The procedure represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, x, which plays the same role that a pronoun plays in natural language. Evaluating the definition creates this compound procedure and associates it with the name square.",(function (){var G__218087 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__218088 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that there are two different operations being combined here: we are creating the procedure, and we are giving it the name ",(function (){var G__218089 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__218090 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218089,G__218090) : tailrecursion.hoplon.markdown.code_node.call(null,G__218089,G__218090));
})(),". It is possible, indeed important, to be able to separate these two notions ",(function (){var G__218091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__218092 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218091,G__218092) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218091,G__218092));
})()," to create procedures without naming them, and to give names to procedures that have already been created. We will see how to do this in section 1.3.2."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218087,G__218088) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218087,G__218088));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218083,G__218084) : tailrecursion.hoplon.markdown.para_node.call(null,G__218083,G__218084));
})(),(function (){var G__218093 = cljs.core.PersistentArrayMap.EMPTY;
var G__218094 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a procedure definition is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218093,G__218094) : tailrecursion.hoplon.markdown.para_node.call(null,G__218093,G__218094));
})(),(function (){var G__218118 = (function (){var G__218119 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__218120 = (function (){var G__218121 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__218122 = "(";
var G__218123 = (function (){var G__218132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__218133 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218132,G__218133) : tailrecursion.hoplon.span.call(null,G__218132,G__218133));
})();
var G__218124 = (function (){var G__218134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218135 = "<name>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218134,G__218135) : tailrecursion.hoplon.span.call(null,G__218134,G__218135));
})();
var G__218125 = " [";
var G__218126 = (function (){var G__218136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218137 = "<formal";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218136,G__218137) : tailrecursion.hoplon.span.call(null,G__218136,G__218137));
})();
var G__218127 = " ";
var G__218128 = (function (){var G__218138 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218139 = "parameters>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218138,G__218139) : tailrecursion.hoplon.span.call(null,G__218138,G__218139));
})();
var G__218129 = "] ";
var G__218130 = (function (){var G__218140 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218141 = "<body>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218140,G__218141) : tailrecursion.hoplon.span.call(null,G__218140,G__218141));
})();
var G__218131 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__218121,G__218122,G__218123,G__218124,G__218125,G__218126,G__218127,G__218128,G__218129,G__218130,G__218131) : tailrecursion.hoplon.pre.call(null,G__218121,G__218122,G__218123,G__218124,G__218125,G__218126,G__218127,G__218128,G__218129,G__218130,G__218131));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__218119,G__218120) : tailrecursion.hoplon.div.call(null,G__218119,G__218120));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__218118) : tailrecursion.hoplon.div.call(null,G__218118));
})(),(function (){var G__218142 = cljs.core.PersistentArrayMap.EMPTY;
var G__218143 = new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Just in case you end up reading from the original SICP, let",(function (){var G__218144 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218145 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218144,G__218145) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218144,G__218145));
})(),"s take a moment to note the differences between the Scheme method of defining compound procedures, and the Clojure method. The Scheme method ",(function (){var G__218146 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(define\n(<name> <formal parameters>) <body>)"], null);
var G__218147 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218146,G__218147) : tailrecursion.hoplon.markdown.code_node.call(null,G__218146,G__218147));
})()," is very straight forward: it defines the first form to be the second. In this way, we can see ",(function (){var G__218148 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__218149 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218148,G__218149) : tailrecursion.hoplon.markdown.code_node.call(null,G__218148,G__218149));
})()," to be a procedure that takes two arguments. The procedure ",(function (){var G__218150 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__218151 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218150,G__218151) : tailrecursion.hoplon.markdown.code_node.call(null,G__218150,G__218151));
})()," in Clojure takes three arguments: the first being the name of the intended procedure (in our example ",(function (){var G__218152 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218153 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218154 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__218155 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218154,G__218155) : tailrecursion.hoplon.markdown.code_node.call(null,G__218154,G__218155));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218152,G__218153) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218152,G__218153));
})(),"), the second is a list of all the arguments (we",(function (){var G__218156 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218157 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218156,G__218157) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218156,G__218157));
})(),"ll cover lists later, but in our example it was ",(function (){var G__218158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[x]"], null);
var G__218159 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218158,G__218159) : tailrecursion.hoplon.markdown.code_node.call(null,G__218158,G__218159));
})(),"), and the third is the intended procedure or the body (in our example it was ",(function (){var G__218160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* x x)"], null);
var G__218161 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218160,G__218161) : tailrecursion.hoplon.markdown.code_node.call(null,G__218160,G__218161));
})(),")."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218142,G__218143) : tailrecursion.hoplon.markdown.para_node.call(null,G__218142,G__218143));
})(),(function (){var G__218162 = cljs.core.PersistentArrayMap.EMPTY;
var G__218163 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The <name> is a symbol to be associated with the procedure definition in the environment.",(function (){var G__218164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__218165 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, we will describe the general syntax of expressions by using italic symbols delimited by angle brackets ",(function (){var G__218166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__218167 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218166,G__218167) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218166,G__218167));
})()," e.g., ",(function (){var G__218168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<name>"], null);
var G__218169 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218168,G__218169) : tailrecursion.hoplon.markdown.code_node.call(null,G__218168,G__218169));
})()," ",(function (){var G__218170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__218171 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218170,G__218171) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218170,G__218171));
})()," to denote the ",(function (){var G__218172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218173 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["slots"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218172,G__218173) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218172,G__218173));
})()," in the expression to be filled in when such an expression is actually used."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218164,G__218165) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218164,G__218165));
})()," The <formal\nparameters> are the names used within the body of the procedure to refer to the corresponding arguments of the procedure. The <body> is an expression that will yield the value of the procedure application when the formal parameters are replaced by the actual arguments to which the procedure is applied.",(function (){var G__218174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__218175 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["More generally, the body of the procedure can be a sequence of expressions. In this case, the interpreter evaluates each expression in the sequence in turn and returns the value of the final expression as the value of the procedure application."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218174,G__218175) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218174,G__218175));
})()," In Scheme, the <name> and the <formal parameters> are grouped within parentheses, just as they would be in an actual call to the procedure being defined, but in Clojure they are not."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218162,G__218163) : tailrecursion.hoplon.markdown.para_node.call(null,G__218162,G__218163));
})(),(function (){var G__218176 = cljs.core.PersistentArrayMap.EMPTY;
var G__218177 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Having defined square, we can now use it:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218176,G__218177) : tailrecursion.hoplon.markdown.para_node.call(null,G__218176,G__218177));
})(),(function (){var G__218178 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square 21)\n441\n") : tailrecursion.hoplon.code.call(null,"(square 21)\n441\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218178) : tailrecursion.hoplon.pre.call(null,G__218178));
})(),(function (){var G__218179 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (+ 2 5))\n49\n") : tailrecursion.hoplon.code.call(null,"(square (+ 2 5))\n49\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218179) : tailrecursion.hoplon.pre.call(null,G__218179));
})(),(function (){var G__218180 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(square (square 3))\n81\n") : tailrecursion.hoplon.code.call(null,"(square (square 3))\n81\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218180) : tailrecursion.hoplon.pre.call(null,G__218180));
})(),(function (){var G__218181 = cljs.core.PersistentArrayMap.EMPTY;
var G__218182 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can also use square as a building block in defining other procedures. For example, \\(x^2 + y^2\\) can be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218181,G__218182) : tailrecursion.hoplon.markdown.para_node.call(null,G__218181,G__218182));
})(),(function (){var G__218183 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square x) (square y))\n") : tailrecursion.hoplon.code.call(null,"(+ (square x) (square y))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218183) : tailrecursion.hoplon.pre.call(null,G__218183));
})(),(function (){var G__218184 = cljs.core.PersistentArrayMap.EMPTY;
var G__218185 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can easily define a procedure sum-of-squares that, given any two numbers as arguments, produces the sum of their squares:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218184,G__218185) : tailrecursion.hoplon.markdown.para_node.call(null,G__218184,G__218185));
})(),(function (){var G__218225 = (function (){var G__218226 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__218227 = (function (){var G__218228 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__218229 = "(";
var G__218230 = (function (){var G__218247 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__218248 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218247,G__218248) : tailrecursion.hoplon.span.call(null,G__218247,G__218248));
})();
var G__218231 = (function (){var G__218249 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218250 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218249,G__218250) : tailrecursion.hoplon.span.call(null,G__218249,G__218250));
})();
var G__218232 = " [";
var G__218233 = (function (){var G__218251 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218252 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218251,G__218252) : tailrecursion.hoplon.span.call(null,G__218251,G__218252));
})();
var G__218234 = " ";
var G__218235 = (function (){var G__218253 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218254 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218253,G__218254) : tailrecursion.hoplon.span.call(null,G__218253,G__218254));
})();
var G__218236 = "]\n  (";
var G__218237 = (function (){var G__218255 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218256 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218255,G__218256) : tailrecursion.hoplon.span.call(null,G__218255,G__218256));
})();
var G__218238 = "(";
var G__218239 = (function (){var G__218257 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__218258 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218257,G__218258) : tailrecursion.hoplon.span.call(null,G__218257,G__218258));
})();
var G__218240 = " ";
var G__218241 = (function (){var G__218259 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218260 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218259,G__218260) : tailrecursion.hoplon.span.call(null,G__218259,G__218260));
})();
var G__218242 = ") (";
var G__218243 = (function (){var G__218261 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__218262 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218261,G__218262) : tailrecursion.hoplon.span.call(null,G__218261,G__218262));
})();
var G__218244 = " ";
var G__218245 = (function (){var G__218263 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218264 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218263,G__218264) : tailrecursion.hoplon.span.call(null,G__218263,G__218264));
})();
var G__218246 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__218228,G__218229,G__218230,G__218231,G__218232,G__218233,G__218234,G__218235,G__218236,G__218237,G__218238,G__218239,G__218240,G__218241,G__218242,G__218243,G__218244,G__218245,G__218246) : tailrecursion.hoplon.pre.call(null,G__218228,G__218229,G__218230,G__218231,G__218232,G__218233,G__218234,G__218235,G__218236,G__218237,G__218238,G__218239,G__218240,G__218241,G__218242,G__218243,G__218244,G__218245,G__218246));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__218226,G__218227) : tailrecursion.hoplon.div.call(null,G__218226,G__218227));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__218225) : tailrecursion.hoplon.div.call(null,G__218225));
})(),(function (){var G__218265 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares 3 4)\n25\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares 3 4)\n25\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218265) : tailrecursion.hoplon.pre.call(null,G__218265));
})(),(function (){var G__218266 = cljs.core.PersistentArrayMap.EMPTY;
var G__218267 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we can use sum-of-squares as a building block in constructing further procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218266,G__218267) : tailrecursion.hoplon.markdown.para_node.call(null,G__218266,G__218267));
})(),(function (){var G__218309 = (function (){var G__218310 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__218311 = (function (){var G__218312 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__218313 = "(";
var G__218314 = (function (){var G__218331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__218332 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218331,G__218332) : tailrecursion.hoplon.span.call(null,G__218331,G__218332));
})();
var G__218315 = (function (){var G__218333 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218334 = "f";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218333,G__218334) : tailrecursion.hoplon.span.call(null,G__218333,G__218334));
})();
var G__218316 = " [";
var G__218317 = (function (){var G__218335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218336 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218335,G__218336) : tailrecursion.hoplon.span.call(null,G__218335,G__218336));
})();
var G__218318 = "]\n  (";
var G__218319 = (function (){var G__218337 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__218338 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218337,G__218338) : tailrecursion.hoplon.span.call(null,G__218337,G__218338));
})();
var G__218320 = " (";
var G__218321 = (function (){var G__218339 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218340 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218339,G__218340) : tailrecursion.hoplon.span.call(null,G__218339,G__218340));
})();
var G__218322 = (function (){var G__218341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218342 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218341,G__218342) : tailrecursion.hoplon.span.call(null,G__218341,G__218342));
})();
var G__218323 = " ";
var G__218324 = (function (){var G__218343 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__218344 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218343,G__218344) : tailrecursion.hoplon.span.call(null,G__218343,G__218344));
})();
var G__218325 = ") (";
var G__218326 = (function (){var G__218345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218346 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218345,G__218346) : tailrecursion.hoplon.span.call(null,G__218345,G__218346));
})();
var G__218327 = (function (){var G__218347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218348 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218347,G__218348) : tailrecursion.hoplon.span.call(null,G__218347,G__218348));
})();
var G__218328 = " ";
var G__218329 = (function (){var G__218349 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__218350 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218349,G__218350) : tailrecursion.hoplon.span.call(null,G__218349,G__218350));
})();
var G__218330 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__218312,G__218313,G__218314,G__218315,G__218316,G__218317,G__218318,G__218319,G__218320,G__218321,G__218322,G__218323,G__218324,G__218325,G__218326,G__218327,G__218328,G__218329,G__218330) : tailrecursion.hoplon.pre.call(null,G__218312,G__218313,G__218314,G__218315,G__218316,G__218317,G__218318,G__218319,G__218320,G__218321,G__218322,G__218323,G__218324,G__218325,G__218326,G__218327,G__218328,G__218329,G__218330));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__218310,G__218311) : tailrecursion.hoplon.div.call(null,G__218310,G__218311));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__218309) : tailrecursion.hoplon.div.call(null,G__218309));
})(),(function (){var G__218351 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n136\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218351) : tailrecursion.hoplon.pre.call(null,G__218351));
})(),(function (){var G__218352 = cljs.core.PersistentArrayMap.EMPTY;
var G__218353 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Compound procedures are used in exactly the same way as primitive procedures. Indeed, one could not tell by looking at the definition of ",(function (){var G__218354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__218355 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218354,G__218355) : tailrecursion.hoplon.markdown.code_node.call(null,G__218354,G__218355));
})()," given above whether ",(function (){var G__218356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__218357 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218356,G__218357) : tailrecursion.hoplon.markdown.code_node.call(null,G__218356,G__218357));
})()," was built into the interpreter, like ",(function (){var G__218358 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"+"], null);
var G__218359 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218358,G__218359) : tailrecursion.hoplon.markdown.code_node.call(null,G__218358,G__218359));
})()," and ",(function (){var G__218360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"*"], null);
var G__218361 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218360,G__218361) : tailrecursion.hoplon.markdown.code_node.call(null,G__218360,G__218361));
})(),", or defined as a compound procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218352,G__218353) : tailrecursion.hoplon.markdown.para_node.call(null,G__218352,G__218353));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217783;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217782;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_217781;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_217780;
}})()], 0));
var G__216585 = "";
var G__216586 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"The Substitution Model for Procedure Application"], null),(function (){var _STAR_references_STAR_218362 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218363 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_218364 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218365 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218366 = cljs.core.PersistentArrayMap.EMPTY;
var G__218367 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination whose operator names a compound procedure, the interpreter follows much the same process as for combinations whose operators name primitive procedures, which we described in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),". That is, the interpreter evaluates the elements of the combination and applies the procedure (which is the value of the operator of the combination) to the arguments (which are the values of the operands of the combination)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218366,G__218367) : tailrecursion.hoplon.markdown.para_node.call(null,G__218366,G__218367));
})(),(function (){var G__218368 = cljs.core.PersistentArrayMap.EMPTY;
var G__218369 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can assume that the mechanism for applying primitive procedures to arguments is built into the interpreter. For compound procedures, the application process is as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218368,G__218369) : tailrecursion.hoplon.markdown.para_node.call(null,G__218368,G__218369));
})(),(function (){var G__218370 = cljs.core.PersistentArrayMap.EMPTY;
var G__218371 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218372 = cljs.core.PersistentArrayMap.EMPTY;
var G__218373 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_218374 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218375 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218375;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218374;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__218372,G__218373) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__218372,G__218373));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__218370,G__218371) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__218370,G__218371));
})(),(function (){var G__218376 = cljs.core.PersistentArrayMap.EMPTY;
var G__218377 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To illustrate this process, let",(function (){var G__218378 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218379 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218378,G__218379) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218378,G__218379));
})(),"s evaluate the combination"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218376,G__218377) : tailrecursion.hoplon.markdown.para_node.call(null,G__218376,G__218377));
})(),(function (){var G__218380 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218380) : tailrecursion.hoplon.pre.call(null,G__218380));
})(),(function (){var G__218381 = cljs.core.PersistentArrayMap.EMPTY;
var G__218382 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where f is the procedure defined in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.4"], null)], 0)),". We begin by retrieving the body of f:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218381,G__218382) : tailrecursion.hoplon.markdown.para_node.call(null,G__218381,G__218382));
})(),(function (){var G__218383 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ a 1) (* a 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ a 1) (* a 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218383) : tailrecursion.hoplon.pre.call(null,G__218383));
})(),(function (){var G__218384 = cljs.core.PersistentArrayMap.EMPTY;
var G__218385 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then we replace the formal parameter a by the argument 5:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218384,G__218385) : tailrecursion.hoplon.markdown.para_node.call(null,G__218384,G__218385));
})(),(function (){var G__218386 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218386) : tailrecursion.hoplon.pre.call(null,G__218386));
})(),(function (){var G__218387 = cljs.core.PersistentArrayMap.EMPTY;
var G__218388 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus the problem reduces to the evaluation of a combination with two operands and an operator ",(function (){var G__218389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__218390 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218389,G__218390) : tailrecursion.hoplon.markdown.code_node.call(null,G__218389,G__218390));
})(),". Evaluating this combination involves three subproblems. We must evaluate the operator to get the procedure to be applied, and we must evaluate the operands to get the arguments. Now ",(function (){var G__218391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__218392 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218391,G__218392) : tailrecursion.hoplon.markdown.code_node.call(null,G__218391,G__218392));
})()," produces 6 and ",(function (){var G__218393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__218394 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218393,G__218394) : tailrecursion.hoplon.markdown.code_node.call(null,G__218393,G__218394));
})()," produces 10, so we must apply the ",(function (){var G__218395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__218396 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218395,G__218396) : tailrecursion.hoplon.markdown.code_node.call(null,G__218395,G__218396));
})()," procedure to 6 and 10. These values are substituted for the formal parameters ",(function (){var G__218397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__218398 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218397,G__218398) : tailrecursion.hoplon.markdown.code_node.call(null,G__218397,G__218398));
})()," and ",(function (){var G__218399 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"y"], null);
var G__218400 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218399,G__218400) : tailrecursion.hoplon.markdown.code_node.call(null,G__218399,G__218400));
})()," in the body of ",(function (){var G__218401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sum-of-squares"], null);
var G__218402 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218401,G__218402) : tailrecursion.hoplon.markdown.code_node.call(null,G__218401,G__218402));
})(),", reducing the expression to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218387,G__218388) : tailrecursion.hoplon.markdown.para_node.call(null,G__218387,G__218388));
})(),(function (){var G__218403 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (square 6) (square 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (square 6) (square 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218403) : tailrecursion.hoplon.pre.call(null,G__218403));
})(),(function (){var G__218404 = cljs.core.PersistentArrayMap.EMPTY;
var G__218405 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we use the definition of ",(function (){var G__218406 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__218407 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218406,G__218407) : tailrecursion.hoplon.markdown.code_node.call(null,G__218406,G__218407));
})(),", this reduces to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218404,G__218405) : tailrecursion.hoplon.markdown.para_node.call(null,G__218404,G__218405));
})(),(function (){var G__218408 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218408) : tailrecursion.hoplon.pre.call(null,G__218408));
})(),(function (){var G__218409 = cljs.core.PersistentArrayMap.EMPTY;
var G__218410 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which reduces by multiplication to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218409,G__218410) : tailrecursion.hoplon.markdown.para_node.call(null,G__218409,G__218410));
})(),(function (){var G__218411 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ 36 100)\n") : tailrecursion.hoplon.code.call(null,"(+ 36 100)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218411) : tailrecursion.hoplon.pre.call(null,G__218411));
})(),(function (){var G__218412 = cljs.core.PersistentArrayMap.EMPTY;
var G__218413 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and finally to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218412,G__218413) : tailrecursion.hoplon.markdown.para_node.call(null,G__218412,G__218413));
})(),(function (){var G__218414 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("136\n") : tailrecursion.hoplon.code.call(null,"136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218414) : tailrecursion.hoplon.pre.call(null,G__218414));
})(),(function (){var G__218415 = cljs.core.PersistentArrayMap.EMPTY;
var G__218416 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The process we have just described is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution model"], null)], 0))," for procedure application. It can be taken as a model that determines the ",(function (){var G__218417 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218418 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["meaning"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218417,G__218418) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218417,G__218418));
})()," of procedure application, insofar as the procedures in this chapter are concerned. However, there are two points that should be stressed:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218415,G__218416) : tailrecursion.hoplon.markdown.para_node.call(null,G__218415,G__218416));
})(),(function (){var G__218419 = cljs.core.PersistentArrayMap.EMPTY;
var G__218420 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218421 = cljs.core.PersistentArrayMap.EMPTY;
var G__218422 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218423 = cljs.core.PersistentArrayMap.EMPTY;
var G__218424 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The purpose of the substitution is to help us think about procedure application, not to provide a description of how the interpreter really works. Typical interpreters do not evaluate procedure applications by manipulating the text of a procedure to substitute values for the formal parameters. In practice, the ",(function (){var G__218425 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218426 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218425,G__218426) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218425,G__218426));
})()," is accomplished by using a local environment for the formal parameters. We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218423,G__218424) : tailrecursion.hoplon.markdown.para_node.call(null,G__218423,G__218424));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__218421,G__218422) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__218421,G__218422));
})(),(function (){var G__218427 = cljs.core.PersistentArrayMap.EMPTY;
var G__218428 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_218429 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218430 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218431 = cljs.core.PersistentArrayMap.EMPTY;
var G__218432 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Over the course of this book, we will present a sequence of increasingly elaborate models of how interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. The substitution model is only the first of these models ",(function (){var G__218433 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__218434 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218433,G__218434) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218433,G__218434));
})()," a way to get started thinking formally about the evaluation process. In general, when modeling phenomena in science and engineering, we begin with simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate and must be replaced by more refined models. The substitution model is no exception. In particular, when we address in chapter 3 the use of procedures with ",(function (){var G__218435 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218436 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mutable data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218435,G__218436) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218435,G__218436));
})(),", we will see that the substitution model breaks down and must be replaced by a more complicated model of procedure application.",(function (){var G__218437 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__218438 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process. The problem arises from the possibility of confusion between the names used for the formal parameters of a procedure and the (possibly identical) names used in the expressions to which the procedure may be applied. Indeed, there is a long history of erroneous definitions of substitution in the literature of logic and programming semantics. See Stoy 1977 for a careful discussion of substitution."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218437,G__218438) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218437,G__218438));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218431,G__218432) : tailrecursion.hoplon.markdown.para_node.call(null,G__218431,G__218432));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218430;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218429;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__218427,G__218428) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__218427,G__218428));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__218419,G__218420) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__218419,G__218420));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218365;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218364;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218363;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218362;
}})()], 0));
var G__216587 = "";
var G__216588 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Applicative Order vs Normal Order"], null),(function (){var _STAR_references_STAR_218439 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218440 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_218441 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218442 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218443 = cljs.core.PersistentArrayMap.EMPTY;
var G__218444 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["According to the description of evaluation given in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#section-1.1.3",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),", the interpreter first evaluates the operator and operands and then applies the resulting procedure to the resulting arguments. This is not the only way to perform evaluation. An alternative evaluation model would not evaluate the operands until their values were needed. Instead it would first substitute operand expressions for parameters until it obtained an expression involving only primitive operators, and would then perform the evaluation. If we used this method, the evaluation of"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218443,G__218444) : tailrecursion.hoplon.markdown.para_node.call(null,G__218443,G__218444));
})(),(function (){var G__218445 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(f 5)\n") : tailrecursion.hoplon.code.call(null,"(f 5)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218445) : tailrecursion.hoplon.pre.call(null,G__218445));
})(),(function (){var G__218446 = cljs.core.PersistentArrayMap.EMPTY;
var G__218447 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["would proceed according to the sequence of expansions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218446,G__218447) : tailrecursion.hoplon.markdown.para_node.call(null,G__218446,G__218447));
})(),(function (){var G__218448 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(sum-of-squares (+ 5 1) (* 5 2))\n") : tailrecursion.hoplon.code.call(null,"(sum-of-squares (+ 5 1) (* 5 2))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218448) : tailrecursion.hoplon.pre.call(null,G__218448));
})(),(function (){var G__218449 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (square (+ 5 1))      (square (* 5 2))  )\n") : tailrecursion.hoplon.code.call(null,"(+    (square (+ 5 1))      (square (* 5 2))  )\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218449) : tailrecursion.hoplon.pre.call(null,G__218449));
})(),(function (){var G__218450 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n") : tailrecursion.hoplon.code.call(null,"(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218450) : tailrecursion.hoplon.pre.call(null,G__218450));
})(),(function (){var G__218451 = cljs.core.PersistentArrayMap.EMPTY;
var G__218452 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["followed by the reductions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218451,G__218452) : tailrecursion.hoplon.markdown.para_node.call(null,G__218451,G__218452));
})(),(function (){var G__218453 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n") : tailrecursion.hoplon.code.call(null,"(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218453) : tailrecursion.hoplon.pre.call(null,G__218453));
})(),(function (){var G__218454 = cljs.core.PersistentArrayMap.EMPTY;
var G__218455 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This gives the same answer as our previous evaluation model, but the process is different. In particular, the evaluations of ",(function (){var G__218456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__218457 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218456,G__218457) : tailrecursion.hoplon.markdown.code_node.call(null,G__218456,G__218457));
})()," and ",(function (){var G__218458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__218459 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218458,G__218459) : tailrecursion.hoplon.markdown.code_node.call(null,G__218458,G__218459));
})()," are each performed twice here, corresponding to the reduction of the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218454,G__218455) : tailrecursion.hoplon.markdown.para_node.call(null,G__218454,G__218455));
})(),(function (){var G__218460 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(* x x)\n") : tailrecursion.hoplon.code.call(null,"(* x x)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218460) : tailrecursion.hoplon.pre.call(null,G__218460));
})(),(function (){var G__218461 = cljs.core.PersistentArrayMap.EMPTY;
var G__218462 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["with ",(function (){var G__218463 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__218464 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218463,G__218464) : tailrecursion.hoplon.markdown.code_node.call(null,G__218463,G__218464));
})()," replaced respectively by ",(function (){var G__218465 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__218466 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218465,G__218466) : tailrecursion.hoplon.markdown.code_node.call(null,G__218465,G__218466));
})()," and ",(function (){var G__218467 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__218468 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218467,G__218468) : tailrecursion.hoplon.markdown.code_node.call(null,G__218467,G__218468));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218461,G__218462) : tailrecursion.hoplon.markdown.para_node.call(null,G__218461,G__218462));
})(),(function (){var G__218469 = cljs.core.PersistentArrayMap.EMPTY;
var G__218470 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This alternative ",(function (){var G__218471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218472 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["fully expand and then reduce"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218471,G__218472) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218471,G__218472));
})()," evaluation method is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["normal-order evaluation"], null)], 0)),", in contrast to the ",(function (){var G__218473 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218474 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["evaluate the arguments and then apply"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218473,G__218474) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218473,G__218474));
})()," method that the interpreter actually uses, which is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["applicative-order evaluation"], null)], 0)),". It can be shown that, for procedure applications that can be modeled using substitution (including all the procedures in the first two chapters of this book) and that yield legitimate values, normal-order and applicative-order evaluation produce the same value. (See ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#q1.5",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.5"], null)], 0))," for an instance of an ",(function (){var G__218475 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218476 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["illegitimate"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218475,G__218476) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218475,G__218476));
})()," value where normal-order and applicative-order evaluation do not give the same result.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218469,G__218470) : tailrecursion.hoplon.markdown.para_node.call(null,G__218469,G__218470));
})(),(function (){var G__218477 = cljs.core.PersistentArrayMap.EMPTY;
var G__218478 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp uses applicative-order evaluation, partly because of the additional efficiency obtained from avoiding multiple evaluations of expressions such as those illustrated with ",(function (){var G__218479 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ 5 1)"], null);
var G__218480 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218479,G__218480) : tailrecursion.hoplon.markdown.code_node.call(null,G__218479,G__218480));
})()," and ",(function (){var G__218481 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(* 5 2)"], null);
var G__218482 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218481,G__218482) : tailrecursion.hoplon.markdown.code_node.call(null,G__218481,G__218482));
})()," above and, more significantly, because normal-order evaluation becomes much more complicated to deal with when we leave the realm of procedures that can be modeled by substitution. On the other hand, normal-order evaluation can be an extremely valuable tool, and we will investigate some of its implications in chapters 3 and 4.",(function (){var G__218483 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__218484 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In chapter 3 we will introduce ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["stream processing"], null)], 0)),", which is a way of handling apparently ",(function (){var G__218485 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218486 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["infinite"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218485,G__218486) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218485,G__218486));
})()," data structures by incorporating a limited form of normal-order evaluation. In section 4.2 we will modify the Scheme interpreter to produce a normal-order variant of Scheme."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218483,G__218484) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218483,G__218484));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218477,G__218478) : tailrecursion.hoplon.markdown.para_node.call(null,G__218477,G__218478));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218442;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218441;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218440;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218439;
}})()], 0));
var G__216589 = "";
var G__216590 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Conditional Expressions and Predicates"], null),(function (){var _STAR_references_STAR_218487 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218488 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_218489 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218490 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 31, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218491 = cljs.core.PersistentArrayMap.EMPTY;
var G__218492 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The expressive power of the class of procedures that we can define at this point is very limited, because we have no way to make tests and to perform different operations depending on the result of a test. For instance, we cannot define a procedure that computes the absolute value of a number by testing whether the number is positive, negative, or zero and taking different actions in the different cases according to the rule"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218491,G__218492) : tailrecursion.hoplon.markdown.para_node.call(null,G__218491,G__218492));
})(),(function (){var G__218493 = cljs.core.PersistentArrayMap.EMPTY;
var G__218494 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$| x |= \\begin{cases} x &\\mbox{if } x > 0 \\cr 0 &\\mbox{if } x = 0 \\cr -x &\\mbox{if } x < 0 \\end{cases}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218493,G__218494) : tailrecursion.hoplon.markdown.para_node.call(null,G__218493,G__218494));
})(),(function (){var G__218495 = cljs.core.PersistentArrayMap.EMPTY;
var G__218496 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This construct is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["case analysis"], null)], 0)),", and there is a special form in Lisp for notating such a case analysis. It is called ",(function (){var G__218497 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__218498 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218497,G__218498) : tailrecursion.hoplon.markdown.code_node.call(null,G__218497,G__218498));
})()," (which stands for ",(function (){var G__218499 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218500 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["conditional"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218499,G__218500) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218499,G__218500));
})(),"), and it is used as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218495,G__218496) : tailrecursion.hoplon.markdown.para_node.call(null,G__218495,G__218496));
})(),(function (){var G__218501 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n") : tailrecursion.hoplon.code.call(null,"(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218501) : tailrecursion.hoplon.pre.call(null,G__218501));
})(),(function (){var G__218502 = cljs.core.PersistentArrayMap.EMPTY;
var G__218503 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a conditional expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218502,G__218503) : tailrecursion.hoplon.markdown.para_node.call(null,G__218502,G__218503));
})(),(function (){var G__218504 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n") : tailrecursion.hoplon.code.call(null,"(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__218504) : tailrecursion.hoplon.pre.call(null,G__218504));
})(),(function (){var G__218505 = cljs.core.PersistentArrayMap.EMPTY;
var G__218506 = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consisting of the symbol cond followed by pairs of expressions <p> <e> called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clauses"], null)], 0)),". The first expression in each pair is a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," ",(function (){var G__218507 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__218508 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218507,G__218508) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218507,G__218508));
})()," that is, an expression whose value is interpreted as either ",(function (){var G__218509 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__218510 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218509,G__218510) : tailrecursion.hoplon.markdown.code_node.call(null,G__218509,G__218510));
})()," or ",(function (){var G__218511 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__218512 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218511,G__218512) : tailrecursion.hoplon.markdown.code_node.call(null,G__218511,G__218512));
})(),".",(function (){var G__218513 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__218514 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218515 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218516 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Interpreted as either true or false"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218515,G__218516) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218515,G__218516));
})()," means this: In Scheme, there are two distinguished values that are denoted by the constants ",(function (){var G__218517 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__218518 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218517,G__218518) : tailrecursion.hoplon.markdown.code_node.call(null,G__218517,G__218518));
})()," and ",(function (){var G__218519 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__218520 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218519,G__218520) : tailrecursion.hoplon.markdown.code_node.call(null,G__218519,G__218520));
})(),". When the interpreter checks a predicate",(function (){var G__218521 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218522 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218521,G__218522) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218521,G__218522));
})(),"s value, it interprets",(function (){var G__218523 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__218524 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218523,G__218524) : tailrecursion.hoplon.markdown.code_node.call(null,G__218523,G__218524));
})()," and ",(function (){var G__218525 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"nil"], null);
var G__218526 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218525,G__218526) : tailrecursion.hoplon.markdown.code_node.call(null,G__218525,G__218526));
})()," as false. Any other value is treated as true. (Thus, providing ",(function (){var G__218527 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__218528 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218527,G__218528) : tailrecursion.hoplon.markdown.code_node.call(null,G__218527,G__218528));
})()," is logically unnecessary, but it is convenient.)"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218513,G__218514) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218513,G__218514));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218505,G__218506) : tailrecursion.hoplon.markdown.para_node.call(null,G__218505,G__218506));
})(),(function (){var G__218529 = cljs.core.PersistentArrayMap.EMPTY;
var G__218530 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Conditional expressions are evaluated as follows. The predicate <p1> is evaluated first. If its value is false, then <p2> is evaluated. If <p2>",(function (){var G__218531 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218532 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218531,G__218532) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218531,G__218532));
})(),"s value is also false, then <p3> is evaluated. This process continues until a predicate is found whose value is true, in which case the interpreter returns the value of the corresponding ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consequent expression"], null)], 0))," <e> of the clause as the value of the conditional expression. If none of the <p>",(function (){var G__218533 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218534 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218533,G__218534) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218533,G__218534));
})(),"s is found to be true, the value of the ",(function (){var G__218535 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__218536 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218535,G__218536) : tailrecursion.hoplon.markdown.code_node.call(null,G__218535,G__218536));
})()," is undefined."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218529,G__218530) : tailrecursion.hoplon.markdown.para_node.call(null,G__218529,G__218530));
})(),(function (){var G__218537 = cljs.core.PersistentArrayMap.EMPTY;
var G__218538 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The word ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," is used for procedures that return ",(function (){var G__218539 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__218540 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218539,G__218540) : tailrecursion.hoplon.markdown.code_node.call(null,G__218539,G__218540));
})()," or ",(function (){var G__218541 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__218542 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218541,G__218542) : tailrecursion.hoplon.markdown.code_node.call(null,G__218541,G__218542));
})(),", as well as for expressions that evaluate to ",(function (){var G__218543 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"true"], null);
var G__218544 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218543,G__218544) : tailrecursion.hoplon.markdown.code_node.call(null,G__218543,G__218544));
})()," or ",(function (){var G__218545 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"false"], null);
var G__218546 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218545,G__218546) : tailrecursion.hoplon.markdown.code_node.call(null,G__218545,G__218546));
})(),". The absolute-value procedure ",(function (){var G__218547 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__218548 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218547,G__218548) : tailrecursion.hoplon.markdown.code_node.call(null,G__218547,G__218548));
})()," makes use of the primitive predicates >, <, and =.",(function (){var G__218549 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__218550 = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218551 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Abs"], null);
var G__218552 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218551,G__218552) : tailrecursion.hoplon.markdown.code_node.call(null,G__218551,G__218552));
})()," also uses the ",(function (){var G__218553 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218554 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["minus"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218553,G__218554) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218553,G__218554));
})()," operator ",(function (){var G__218555 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__218556 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218555,G__218556) : tailrecursion.hoplon.markdown.code_node.call(null,G__218555,G__218556));
})(),", which, when used with a single operand, as in ",(function (){var G__218557 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- x)"], null);
var G__218558 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218557,G__218558) : tailrecursion.hoplon.markdown.code_node.call(null,G__218557,G__218558));
})(),", indicates negation."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218549,G__218550) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218549,G__218550));
})()," These take two numbers as arguments and test whether the first number is, respectively, greater than, less than, or equal to the second number, returning true or false accordingly."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218537,G__218538) : tailrecursion.hoplon.markdown.para_node.call(null,G__218537,G__218538));
})(),(function (){var G__218559 = cljs.core.PersistentArrayMap.EMPTY;
var G__218560 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Another way to write the absolute-value procedure is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218559,G__218560) : tailrecursion.hoplon.markdown.para_node.call(null,G__218559,G__218560));
})(),(function (){var G__218606 = (function (){var G__218607 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__218608 = (function (){var G__218609 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__218610 = "(";
var G__218611 = (function (){var G__218630 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__218631 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218630,G__218631) : tailrecursion.hoplon.span.call(null,G__218630,G__218631));
})();
var G__218612 = (function (){var G__218632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218633 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218632,G__218633) : tailrecursion.hoplon.span.call(null,G__218632,G__218633));
})();
var G__218613 = " [";
var G__218614 = (function (){var G__218634 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218635 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218634,G__218635) : tailrecursion.hoplon.span.call(null,G__218634,G__218635));
})();
var G__218615 = "]\n  (";
var G__218616 = (function (){var G__218636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218637 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218636,G__218637) : tailrecursion.hoplon.span.call(null,G__218636,G__218637));
})();
var G__218617 = "(";
var G__218618 = (function (){var G__218638 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218639 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218638,G__218639) : tailrecursion.hoplon.span.call(null,G__218638,G__218639));
})();
var G__218619 = (function (){var G__218640 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218641 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218640,G__218641) : tailrecursion.hoplon.span.call(null,G__218640,G__218641));
})();
var G__218620 = " ";
var G__218621 = (function (){var G__218642 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__218643 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218642,G__218643) : tailrecursion.hoplon.span.call(null,G__218642,G__218643));
})();
var G__218622 = ") (";
var G__218623 = (function (){var G__218644 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218645 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218644,G__218645) : tailrecursion.hoplon.span.call(null,G__218644,G__218645));
})();
var G__218624 = (function (){var G__218646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218647 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218646,G__218647) : tailrecursion.hoplon.span.call(null,G__218646,G__218647));
})();
var G__218625 = ")\n        ";
var G__218626 = (function (){var G__218648 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218649 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218648,G__218649) : tailrecursion.hoplon.span.call(null,G__218648,G__218649));
})();
var G__218627 = " ";
var G__218628 = (function (){var G__218650 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218651 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218650,G__218651) : tailrecursion.hoplon.span.call(null,G__218650,G__218651));
})();
var G__218629 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__218609,G__218610,G__218611,G__218612,G__218613,G__218614,G__218615,G__218616,G__218617,G__218618,G__218619,G__218620,G__218621,G__218622,G__218623,G__218624,G__218625,G__218626,G__218627,G__218628,G__218629) : tailrecursion.hoplon.pre.call(null,G__218609,G__218610,G__218611,G__218612,G__218613,G__218614,G__218615,G__218616,G__218617,G__218618,G__218619,G__218620,G__218621,G__218622,G__218623,G__218624,G__218625,G__218626,G__218627,G__218628,G__218629));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__218607,G__218608) : tailrecursion.hoplon.div.call(null,G__218607,G__218608));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__218606) : tailrecursion.hoplon.div.call(null,G__218606));
})(),(function (){var G__218652 = cljs.core.PersistentArrayMap.EMPTY;
var G__218653 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which could be expressed in English as ",(function (){var G__218654 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__218655 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If x is less than zero return - x; otherwise return x."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218654,G__218655) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218654,G__218655));
})()," ",(function (){var G__218656 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,":else"], null);
var G__218657 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218656,G__218657) : tailrecursion.hoplon.markdown.code_node.call(null,G__218656,G__218657));
})()," is a special symbol that can be used in place of the <p> in the final clause of a ",(function (){var G__218658 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__218659 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218658,G__218659) : tailrecursion.hoplon.markdown.code_node.call(null,G__218658,G__218659));
})(),". This causes the ",(function (){var G__218660 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__218661 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218660,G__218661) : tailrecursion.hoplon.markdown.code_node.call(null,G__218660,G__218661));
})()," to return as its value the value of the corresponding <e> whenever all previous clauses have been bypassed. In fact, any expression that always evaluates to a true value could be used as the <p> here."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218652,G__218653) : tailrecursion.hoplon.markdown.para_node.call(null,G__218652,G__218653));
})(),(function (){var G__218662 = cljs.core.PersistentArrayMap.EMPTY;
var G__218663 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here is yet another way to write the absolute-value procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218662,G__218663) : tailrecursion.hoplon.markdown.para_node.call(null,G__218662,G__218663));
})(),(function (){var G__218705 = (function (){var G__218706 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__218707 = (function (){var G__218708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__218709 = "(";
var G__218710 = (function (){var G__218727 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__218728 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218727,G__218728) : tailrecursion.hoplon.span.call(null,G__218727,G__218728));
})();
var G__218711 = (function (){var G__218729 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218730 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218729,G__218730) : tailrecursion.hoplon.span.call(null,G__218729,G__218730));
})();
var G__218712 = " [";
var G__218713 = (function (){var G__218731 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218732 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218731,G__218732) : tailrecursion.hoplon.span.call(null,G__218731,G__218732));
})();
var G__218714 = "]\n  (";
var G__218715 = (function (){var G__218733 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__218734 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218733,G__218734) : tailrecursion.hoplon.span.call(null,G__218733,G__218734));
})();
var G__218716 = "(";
var G__218717 = (function (){var G__218735 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218736 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218735,G__218736) : tailrecursion.hoplon.span.call(null,G__218735,G__218736));
})();
var G__218718 = (function (){var G__218737 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218738 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218737,G__218738) : tailrecursion.hoplon.span.call(null,G__218737,G__218738));
})();
var G__218719 = " ";
var G__218720 = (function (){var G__218739 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__218740 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218739,G__218740) : tailrecursion.hoplon.span.call(null,G__218739,G__218740));
})();
var G__218721 = ")\n      (";
var G__218722 = (function (){var G__218741 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218742 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218741,G__218742) : tailrecursion.hoplon.span.call(null,G__218741,G__218742));
})();
var G__218723 = (function (){var G__218743 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218744 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218743,G__218744) : tailrecursion.hoplon.span.call(null,G__218743,G__218744));
})();
var G__218724 = ")\n      ";
var G__218725 = (function (){var G__218745 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218746 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218745,G__218746) : tailrecursion.hoplon.span.call(null,G__218745,G__218746));
})();
var G__218726 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__218708,G__218709,G__218710,G__218711,G__218712,G__218713,G__218714,G__218715,G__218716,G__218717,G__218718,G__218719,G__218720,G__218721,G__218722,G__218723,G__218724,G__218725,G__218726) : tailrecursion.hoplon.pre.call(null,G__218708,G__218709,G__218710,G__218711,G__218712,G__218713,G__218714,G__218715,G__218716,G__218717,G__218718,G__218719,G__218720,G__218721,G__218722,G__218723,G__218724,G__218725,G__218726));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__218706,G__218707) : tailrecursion.hoplon.div.call(null,G__218706,G__218707));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__218705) : tailrecursion.hoplon.div.call(null,G__218705));
})(),(function (){var G__218747 = cljs.core.PersistentArrayMap.EMPTY;
var G__218748 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This uses the special form ",(function (){var G__218749 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__218750 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218749,G__218750) : tailrecursion.hoplon.markdown.code_node.call(null,G__218749,G__218750));
})(),", a restricted type of conditional that can be used when there are precisely two cases in the case analysis. The general form of an ",(function (){var G__218751 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__218752 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218751,G__218752) : tailrecursion.hoplon.markdown.code_node.call(null,G__218751,G__218752));
})()," expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218747,G__218748) : tailrecursion.hoplon.markdown.para_node.call(null,G__218747,G__218748));
})(),(function (){var G__218772 = (function (){var G__218773 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__218774 = (function (){var G__218775 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__218776 = "(";
var G__218777 = (function (){var G__218784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__218785 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218784,G__218785) : tailrecursion.hoplon.span.call(null,G__218784,G__218785));
})();
var G__218778 = (function (){var G__218786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218787 = "<predicate>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218786,G__218787) : tailrecursion.hoplon.span.call(null,G__218786,G__218787));
})();
var G__218779 = " ";
var G__218780 = (function (){var G__218788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218789 = "<consequent>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218788,G__218789) : tailrecursion.hoplon.span.call(null,G__218788,G__218789));
})();
var G__218781 = " ";
var G__218782 = (function (){var G__218790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218791 = "<alternative>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218790,G__218791) : tailrecursion.hoplon.span.call(null,G__218790,G__218791));
})();
var G__218783 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__218775,G__218776,G__218777,G__218778,G__218779,G__218780,G__218781,G__218782,G__218783) : tailrecursion.hoplon.pre.call(null,G__218775,G__218776,G__218777,G__218778,G__218779,G__218780,G__218781,G__218782,G__218783));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__218773,G__218774) : tailrecursion.hoplon.div.call(null,G__218773,G__218774));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__218772) : tailrecursion.hoplon.div.call(null,G__218772));
})(),(function (){var G__218792 = cljs.core.PersistentArrayMap.EMPTY;
var G__218793 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate an ",(function (){var G__218794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__218795 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218794,G__218795) : tailrecursion.hoplon.markdown.code_node.call(null,G__218794,G__218795));
})()," expression, the interpreter starts by evaluating the <predicate> part of the expression. If the <predicate> evaluates to a true value, the interpreter then evaluates the <consequent> and returns its value. Otherwise it evaluates the <alternative> and returns its value.",(function (){var G__218796 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__218797 = new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In Scheme, a minor difference between ",(function (){var G__218798 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__218799 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218798,G__218799) : tailrecursion.hoplon.markdown.code_node.call(null,G__218798,G__218799));
})()," and ",(function (){var G__218800 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__218801 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218800,G__218801) : tailrecursion.hoplon.markdown.code_node.call(null,G__218800,G__218801));
})()," is that the ",(function (){var G__218802 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__218803 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218802,G__218803) : tailrecursion.hoplon.markdown.code_node.call(null,G__218802,G__218803));
})()," part of each ",(function (){var G__218804 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__218805 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218804,G__218805) : tailrecursion.hoplon.markdown.code_node.call(null,G__218804,G__218805));
})()," clause may be a sequence of expressions. If the corresponding ",(function (){var G__218806 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<p>"], null);
var G__218807 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218806,G__218807) : tailrecursion.hoplon.markdown.code_node.call(null,G__218806,G__218807));
})()," is found to be true, the expressions ",(function (){var G__218808 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<e>"], null);
var G__218809 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218808,G__218809) : tailrecursion.hoplon.markdown.code_node.call(null,G__218808,G__218809));
})()," are evaluated in sequence and the value of the final expression in the sequence is returned as the value of the ",(function (){var G__218810 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cond"], null);
var G__218811 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218810,G__218811) : tailrecursion.hoplon.markdown.code_node.call(null,G__218810,G__218811));
})(),". In an ",(function (){var G__218812 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__218813 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218812,G__218813) : tailrecursion.hoplon.markdown.code_node.call(null,G__218812,G__218813));
})()," expression, however, the ",(function (){var G__218814 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<consequent>"], null);
var G__218815 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218814,G__218815) : tailrecursion.hoplon.markdown.code_node.call(null,G__218814,G__218815));
})()," and ",(function (){var G__218816 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<alternative>"], null);
var G__218817 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218816,G__218817) : tailrecursion.hoplon.markdown.code_node.call(null,G__218816,G__218817));
})()," must be single expressions. In Clojure, however, these must all be single expressioins. To get a similar functionality one could use ",(function (){var G__218818 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"do"], null);
var G__218819 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218818,G__218819) : tailrecursion.hoplon.markdown.code_node.call(null,G__218818,G__218819));
})(),"."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__218796,G__218797) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__218796,G__218797));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218792,G__218793) : tailrecursion.hoplon.markdown.para_node.call(null,G__218792,G__218793));
})(),(function (){var G__218820 = cljs.core.PersistentArrayMap.EMPTY;
var G__218821 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In addition to primitive predicates such as <, =, and >, there are logical composition operations, which enable us to construct compound predicates. The three most frequently used are these:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218820,G__218821) : tailrecursion.hoplon.markdown.para_node.call(null,G__218820,G__218821));
})(),(function (){var G__218822 = cljs.core.PersistentArrayMap.EMPTY;
var G__218823 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218824 = cljs.core.PersistentArrayMap.EMPTY;
var G__218825 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_218826 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218827 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__218828 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (and <e1> ... <en>)\n"], null);
var G__218829 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218828,G__218829) : tailrecursion.hoplon.markdown.code_node.call(null,G__218828,G__218829));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218827;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218826;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__218824,G__218825) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__218824,G__218825));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__218822,G__218823) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__218822,G__218823));
})(),(function (){var G__218830 = cljs.core.PersistentArrayMap.EMPTY;
var G__218831 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to false, the value of the  ",(function (){var G__218832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__218833 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218832,G__218833) : tailrecursion.hoplon.markdown.code_node.call(null,G__218832,G__218833));
})()," expression is false, and the rest of the <e>",(function (){var G__218834 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218835 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218834,G__218835) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218834,G__218835));
})(),"s are not  evaluated. If all <e>",(function (){var G__218836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218837 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218836,G__218837) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218836,G__218837));
})(),"s evaluate to true values, the value of the and  expression is the value of the last one."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218830,G__218831) : tailrecursion.hoplon.markdown.para_node.call(null,G__218830,G__218831));
})(),(function (){var G__218838 = cljs.core.PersistentArrayMap.EMPTY;
var G__218839 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218840 = cljs.core.PersistentArrayMap.EMPTY;
var G__218841 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_218842 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218843 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__218844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (or <e1> ... <en>)\n"], null);
var G__218845 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218844,G__218845) : tailrecursion.hoplon.markdown.code_node.call(null,G__218844,G__218845));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218843;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218842;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__218840,G__218841) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__218840,G__218841));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__218838,G__218839) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__218838,G__218839));
})(),(function (){var G__218846 = cljs.core.PersistentArrayMap.EMPTY;
var G__218847 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to a true value, that value  is returned as the value of the or expression, and the rest of the  <e>",(function (){var G__218848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218849 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218848,G__218849) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218848,G__218849));
})(),"s are not evaluated. If all <e>",(function (){var G__218850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__218851 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__218850,G__218851) : tailrecursion.hoplon.markdown.simple_node.call(null,G__218850,G__218851));
})(),"s evaluate to false, the value of  the ",(function (){var G__218852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__218853 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218852,G__218853) : tailrecursion.hoplon.markdown.code_node.call(null,G__218852,G__218853));
})()," expression is false."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218846,G__218847) : tailrecursion.hoplon.markdown.para_node.call(null,G__218846,G__218847));
})(),(function (){var G__218854 = cljs.core.PersistentArrayMap.EMPTY;
var G__218855 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__218856 = cljs.core.PersistentArrayMap.EMPTY;
var G__218857 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_218858 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_218859 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__218860 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"\n  (not <e>)\n"], null);
var G__218861 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218860,G__218861) : tailrecursion.hoplon.markdown.code_node.call(null,G__218860,G__218861));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218859;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218858;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__218856,G__218857) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__218856,G__218857));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__218854,G__218855) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__218854,G__218855));
})(),(function (){var G__218862 = cljs.core.PersistentArrayMap.EMPTY;
var G__218863 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The value of a ",(function (){var G__218864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__218865 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218864,G__218865) : tailrecursion.hoplon.markdown.code_node.call(null,G__218864,G__218865));
})()," expression is true when the expression <e>  evaluates to false, and false otherwise."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218862,G__218863) : tailrecursion.hoplon.markdown.para_node.call(null,G__218862,G__218863));
})(),(function (){var G__218866 = cljs.core.PersistentArrayMap.EMPTY;
var G__218867 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that ",(function (){var G__218868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"and"], null);
var G__218869 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218868,G__218869) : tailrecursion.hoplon.markdown.code_node.call(null,G__218868,G__218869));
})()," and ",(function (){var G__218870 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"or"], null);
var G__218871 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218870,G__218871) : tailrecursion.hoplon.markdown.code_node.call(null,G__218870,G__218871));
})()," are special forms, not procedures, because the subexpressions are not necessarily all evaluated. ",(function (){var G__218872 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"not"], null);
var G__218873 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__218872,G__218873) : tailrecursion.hoplon.markdown.code_node.call(null,G__218872,G__218873));
})()," is an ordinary procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218866,G__218867) : tailrecursion.hoplon.markdown.para_node.call(null,G__218866,G__218867));
})(),(function (){var G__218874 = cljs.core.PersistentArrayMap.EMPTY;
var G__218875 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As an example of how these are used, the condition that a number x be in the range \\(5 \\lt x \\lt 10\\) may be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218874,G__218875) : tailrecursion.hoplon.markdown.para_node.call(null,G__218874,G__218875));
})(),(function (){var G__218906 = (function (){var G__218907 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__218908 = (function (){var G__218909 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__218910 = "(";
var G__218911 = (function (){var G__218923 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218924 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218923,G__218924) : tailrecursion.hoplon.span.call(null,G__218923,G__218924));
})();
var G__218912 = "(";
var G__218913 = (function (){var G__218925 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218926 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218925,G__218926) : tailrecursion.hoplon.span.call(null,G__218925,G__218926));
})();
var G__218914 = (function (){var G__218927 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218928 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218927,G__218928) : tailrecursion.hoplon.span.call(null,G__218927,G__218928));
})();
var G__218915 = " ";
var G__218916 = (function (){var G__218929 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__218930 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218929,G__218930) : tailrecursion.hoplon.span.call(null,G__218929,G__218930));
})();
var G__218917 = ") (";
var G__218918 = (function (){var G__218931 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__218932 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218931,G__218932) : tailrecursion.hoplon.span.call(null,G__218931,G__218932));
})();
var G__218919 = (function (){var G__218933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__218934 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218933,G__218934) : tailrecursion.hoplon.span.call(null,G__218933,G__218934));
})();
var G__218920 = " ";
var G__218921 = (function (){var G__218935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__218936 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__218935,G__218936) : tailrecursion.hoplon.span.call(null,G__218935,G__218936));
})();
var G__218922 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__218909,G__218910,G__218911,G__218912,G__218913,G__218914,G__218915,G__218916,G__218917,G__218918,G__218919,G__218920,G__218921,G__218922) : tailrecursion.hoplon.pre.call(null,G__218909,G__218910,G__218911,G__218912,G__218913,G__218914,G__218915,G__218916,G__218917,G__218918,G__218919,G__218920,G__218921,G__218922));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__218907,G__218908) : tailrecursion.hoplon.div.call(null,G__218907,G__218908));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__218906) : tailrecursion.hoplon.div.call(null,G__218906));
})(),(function (){var G__218937 = cljs.core.PersistentArrayMap.EMPTY;
var G__218938 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As another example, we can define a predicate to test whether one number is greater than or equal to another as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__218937,G__218938) : tailrecursion.hoplon.markdown.para_node.call(null,G__218937,G__218938));
})(),(function (){var G__218984 = (function (){var G__218985 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__218986 = (function (){var G__218987 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__218988 = "(";
var G__218989 = (function (){var G__219008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__219009 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219008,G__219009) : tailrecursion.hoplon.span.call(null,G__219008,G__219009));
})();
var G__218990 = (function (){var G__219010 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219011 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219010,G__219011) : tailrecursion.hoplon.span.call(null,G__219010,G__219011));
})();
var G__218991 = "[";
var G__218992 = (function (){var G__219012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219013 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219012,G__219013) : tailrecursion.hoplon.span.call(null,G__219012,G__219013));
})();
var G__218993 = " ";
var G__218994 = (function (){var G__219014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219015 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219014,G__219015) : tailrecursion.hoplon.span.call(null,G__219014,G__219015));
})();
var G__218995 = "] \n  (";
var G__218996 = (function (){var G__219016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219017 = "or ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219016,G__219017) : tailrecursion.hoplon.span.call(null,G__219016,G__219017));
})();
var G__218997 = "(";
var G__218998 = (function (){var G__219018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219019 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219018,G__219019) : tailrecursion.hoplon.span.call(null,G__219018,G__219019));
})();
var G__218999 = (function (){var G__219020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219021 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219020,G__219021) : tailrecursion.hoplon.span.call(null,G__219020,G__219021));
})();
var G__219000 = " ";
var G__219001 = (function (){var G__219022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219023 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219022,G__219023) : tailrecursion.hoplon.span.call(null,G__219022,G__219023));
})();
var G__219002 = ") (";
var G__219003 = (function (){var G__219024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219025 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219024,G__219025) : tailrecursion.hoplon.span.call(null,G__219024,G__219025));
})();
var G__219004 = (function (){var G__219026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219027 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219026,G__219027) : tailrecursion.hoplon.span.call(null,G__219026,G__219027));
})();
var G__219005 = " ";
var G__219006 = (function (){var G__219028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219029 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219028,G__219029) : tailrecursion.hoplon.span.call(null,G__219028,G__219029));
})();
var G__219007 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__218987,G__218988,G__218989,G__218990,G__218991,G__218992,G__218993,G__218994,G__218995,G__218996,G__218997,G__218998,G__218999,G__219000,G__219001,G__219002,G__219003,G__219004,G__219005,G__219006,G__219007) : tailrecursion.hoplon.pre.call(null,G__218987,G__218988,G__218989,G__218990,G__218991,G__218992,G__218993,G__218994,G__218995,G__218996,G__218997,G__218998,G__218999,G__219000,G__219001,G__219002,G__219003,G__219004,G__219005,G__219006,G__219007));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__218985,G__218986) : tailrecursion.hoplon.div.call(null,G__218985,G__218986));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__218984) : tailrecursion.hoplon.div.call(null,G__218984));
})(),(function (){var G__219030 = cljs.core.PersistentArrayMap.EMPTY;
var G__219031 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["or alternatively as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__219030,G__219031) : tailrecursion.hoplon.markdown.para_node.call(null,G__219030,G__219031));
})(),(function (){var G__219066 = (function (){var G__219067 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219068 = (function (){var G__219069 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219070 = "(";
var G__219071 = (function (){var G__219085 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__219086 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219085,G__219086) : tailrecursion.hoplon.span.call(null,G__219085,G__219086));
})();
var G__219072 = (function (){var G__219087 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219088 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219087,G__219088) : tailrecursion.hoplon.span.call(null,G__219087,G__219088));
})();
var G__219073 = "[";
var G__219074 = (function (){var G__219089 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219090 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219089,G__219090) : tailrecursion.hoplon.span.call(null,G__219089,G__219090));
})();
var G__219075 = " ";
var G__219076 = (function (){var G__219091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219092 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219091,G__219092) : tailrecursion.hoplon.span.call(null,G__219091,G__219092));
})();
var G__219077 = "]\n  (";
var G__219078 = (function (){var G__219093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219094 = "not ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219093,G__219094) : tailrecursion.hoplon.span.call(null,G__219093,G__219094));
})();
var G__219079 = "(";
var G__219080 = (function (){var G__219095 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219096 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219095,G__219096) : tailrecursion.hoplon.span.call(null,G__219095,G__219096));
})();
var G__219081 = (function (){var G__219097 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219098 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219097,G__219098) : tailrecursion.hoplon.span.call(null,G__219097,G__219098));
})();
var G__219082 = " ";
var G__219083 = (function (){var G__219099 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219100 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219099,G__219100) : tailrecursion.hoplon.span.call(null,G__219099,G__219100));
})();
var G__219084 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__219069,G__219070,G__219071,G__219072,G__219073,G__219074,G__219075,G__219076,G__219077,G__219078,G__219079,G__219080,G__219081,G__219082,G__219083,G__219084) : tailrecursion.hoplon.pre.call(null,G__219069,G__219070,G__219071,G__219072,G__219073,G__219074,G__219075,G__219076,G__219077,G__219078,G__219079,G__219080,G__219081,G__219082,G__219083,G__219084));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219067,G__219068) : tailrecursion.hoplon.div.call(null,G__219067,G__219068));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219066) : tailrecursion.hoplon.div.call(null,G__219066));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218490;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218489;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_218488;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_218487;
}})()], 0));
var G__216591 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219101 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219102 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219103 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219104 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219105 = cljs.core.PersistentArrayMap.EMPTY;
var G__219106 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__219105,G__219106) : tailrecursion.hoplon.markdown.para_node.call(null,G__219105,G__219106));
})(),(function (){var G__219114 = (function (){var G__219115 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219116 = (function (){var G__219117 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219118 = (function (){var G__219120 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219121 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219120,G__219121) : tailrecursion.hoplon.span.call(null,G__219120,G__219121));
})();
var G__219119 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3(G__219117,G__219118,G__219119) : tailrecursion.hoplon.pre.call(null,G__219117,G__219118,G__219119));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219115,G__219116) : tailrecursion.hoplon.div.call(null,G__219115,G__219116));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219114) : tailrecursion.hoplon.div.call(null,G__219114));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219104;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219103;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219102;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219101;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219122 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219123 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219124 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219125 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219126 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("10\n") : tailrecursion.hoplon.code.call(null,"10\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219126) : tailrecursion.hoplon.pre.call(null,G__219126));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219125;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219124;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219123;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219122;
}})()], 0)),"",(function (){var _STAR_references_STAR_219127 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219128 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219129 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219130 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219150 = (function (){var G__219151 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219152 = (function (){var G__219153 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219154 = "(";
var G__219155 = (function (){var G__219162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219163 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219162,G__219163) : tailrecursion.hoplon.span.call(null,G__219162,G__219163));
})();
var G__219156 = (function (){var G__219164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219165 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219164,G__219165) : tailrecursion.hoplon.span.call(null,G__219164,G__219165));
})();
var G__219157 = " ";
var G__219158 = (function (){var G__219166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219167 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219166,G__219167) : tailrecursion.hoplon.span.call(null,G__219166,G__219167));
})();
var G__219159 = " ";
var G__219160 = (function (){var G__219168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219169 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219168,G__219169) : tailrecursion.hoplon.span.call(null,G__219168,G__219169));
})();
var G__219161 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__219153,G__219154,G__219155,G__219156,G__219157,G__219158,G__219159,G__219160,G__219161) : tailrecursion.hoplon.pre.call(null,G__219153,G__219154,G__219155,G__219156,G__219157,G__219158,G__219159,G__219160,G__219161));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219151,G__219152) : tailrecursion.hoplon.div.call(null,G__219151,G__219152));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219150) : tailrecursion.hoplon.div.call(null,G__219150));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219130;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219129;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219128;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219127;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219170 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219171 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219172 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219173 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219174 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("12\n") : tailrecursion.hoplon.code.call(null,"12\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219174) : tailrecursion.hoplon.pre.call(null,G__219174));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219173;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219172;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219171;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219170;
}})()], 0)),"",(function (){var _STAR_references_STAR_219175 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219176 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219177 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219178 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219194 = (function (){var G__219195 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219196 = (function (){var G__219197 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219198 = "(";
var G__219199 = (function (){var G__219204 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219205 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219204,G__219205) : tailrecursion.hoplon.span.call(null,G__219204,G__219205));
})();
var G__219200 = (function (){var G__219206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219207 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219206,G__219207) : tailrecursion.hoplon.span.call(null,G__219206,G__219207));
})();
var G__219201 = " ";
var G__219202 = (function (){var G__219208 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219209 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219208,G__219209) : tailrecursion.hoplon.span.call(null,G__219208,G__219209));
})();
var G__219203 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__219197,G__219198,G__219199,G__219200,G__219201,G__219202,G__219203) : tailrecursion.hoplon.pre.call(null,G__219197,G__219198,G__219199,G__219200,G__219201,G__219202,G__219203));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219195,G__219196) : tailrecursion.hoplon.div.call(null,G__219195,G__219196));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219194) : tailrecursion.hoplon.div.call(null,G__219194));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219178;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219177;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219176;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219175;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219210 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219211 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219212 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219213 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219214 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("8\n") : tailrecursion.hoplon.code.call(null,"8\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219214) : tailrecursion.hoplon.pre.call(null,G__219214));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219213;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219212;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219211;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219210;
}})()], 0)),"",(function (){var _STAR_references_STAR_219215 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219216 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219217 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219218 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219234 = (function (){var G__219235 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219236 = (function (){var G__219237 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219238 = "(";
var G__219239 = (function (){var G__219244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219245 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219244,G__219245) : tailrecursion.hoplon.span.call(null,G__219244,G__219245));
})();
var G__219240 = (function (){var G__219246 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219247 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219246,G__219247) : tailrecursion.hoplon.span.call(null,G__219246,G__219247));
})();
var G__219241 = " ";
var G__219242 = (function (){var G__219248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219249 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219248,G__219249) : tailrecursion.hoplon.span.call(null,G__219248,G__219249));
})();
var G__219243 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__219237,G__219238,G__219239,G__219240,G__219241,G__219242,G__219243) : tailrecursion.hoplon.pre.call(null,G__219237,G__219238,G__219239,G__219240,G__219241,G__219242,G__219243));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219235,G__219236) : tailrecursion.hoplon.div.call(null,G__219235,G__219236));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219234) : tailrecursion.hoplon.div.call(null,G__219234));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219218;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219217;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219216;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219215;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219250 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219251 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219252 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219253 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219254 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("3\n") : tailrecursion.hoplon.code.call(null,"3\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219254) : tailrecursion.hoplon.pre.call(null,G__219254));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219253;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219252;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219251;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219250;
}})()], 0)),"",(function (){var _STAR_references_STAR_219255 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219256 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219257 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219258 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219289 = (function (){var G__219290 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219291 = (function (){var G__219292 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219293 = "(";
var G__219294 = (function (){var G__219306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219307 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219306,G__219307) : tailrecursion.hoplon.span.call(null,G__219306,G__219307));
})();
var G__219295 = "(";
var G__219296 = (function (){var G__219308 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219309 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219308,G__219309) : tailrecursion.hoplon.span.call(null,G__219308,G__219309));
})();
var G__219297 = (function (){var G__219310 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219311 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219310,G__219311) : tailrecursion.hoplon.span.call(null,G__219310,G__219311));
})();
var G__219298 = " ";
var G__219299 = (function (){var G__219312 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219313 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219312,G__219313) : tailrecursion.hoplon.span.call(null,G__219312,G__219313));
})();
var G__219300 = ") (";
var G__219301 = (function (){var G__219314 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219315 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219314,G__219315) : tailrecursion.hoplon.span.call(null,G__219314,G__219315));
})();
var G__219302 = (function (){var G__219316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219317 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219316,G__219317) : tailrecursion.hoplon.span.call(null,G__219316,G__219317));
})();
var G__219303 = " ";
var G__219304 = (function (){var G__219318 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219319 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219318,G__219319) : tailrecursion.hoplon.span.call(null,G__219318,G__219319));
})();
var G__219305 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__219292,G__219293,G__219294,G__219295,G__219296,G__219297,G__219298,G__219299,G__219300,G__219301,G__219302,G__219303,G__219304,G__219305) : tailrecursion.hoplon.pre.call(null,G__219292,G__219293,G__219294,G__219295,G__219296,G__219297,G__219298,G__219299,G__219300,G__219301,G__219302,G__219303,G__219304,G__219305));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219290,G__219291) : tailrecursion.hoplon.div.call(null,G__219290,G__219291));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219289) : tailrecursion.hoplon.div.call(null,G__219289));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219258;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219257;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219256;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219255;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219320 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219321 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219322 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219323 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219324 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("6\n") : tailrecursion.hoplon.code.call(null,"6\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219324) : tailrecursion.hoplon.pre.call(null,G__219324));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219323;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219322;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219321;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219320;
}})()], 0)),"",(function (){var _STAR_references_STAR_219325 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219326 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219327 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219328 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219344 = (function (){var G__219345 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219346 = (function (){var G__219347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219348 = "(";
var G__219349 = (function (){var G__219354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__219355 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219354,G__219355) : tailrecursion.hoplon.span.call(null,G__219354,G__219355));
})();
var G__219350 = (function (){var G__219356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219357 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219356,G__219357) : tailrecursion.hoplon.span.call(null,G__219356,G__219357));
})();
var G__219351 = " ";
var G__219352 = (function (){var G__219358 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219359 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219358,G__219359) : tailrecursion.hoplon.span.call(null,G__219358,G__219359));
})();
var G__219353 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__219347,G__219348,G__219349,G__219350,G__219351,G__219352,G__219353) : tailrecursion.hoplon.pre.call(null,G__219347,G__219348,G__219349,G__219350,G__219351,G__219352,G__219353));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219345,G__219346) : tailrecursion.hoplon.div.call(null,G__219345,G__219346));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219344) : tailrecursion.hoplon.div.call(null,G__219344));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219328;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219327;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219326;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219325;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219360 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219361 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219362 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219363 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219364 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("a\n") : tailrecursion.hoplon.code.call(null,"a\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219364) : tailrecursion.hoplon.pre.call(null,G__219364));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219363;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219362;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219361;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219360;
}})()], 0)),"",(function (){var _STAR_references_STAR_219365 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219366 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219367 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219368 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219391 = (function (){var G__219392 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219393 = (function (){var G__219394 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219395 = "(";
var G__219396 = (function (){var G__219404 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__219405 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219404,G__219405) : tailrecursion.hoplon.span.call(null,G__219404,G__219405));
})();
var G__219397 = (function (){var G__219406 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219407 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219406,G__219407) : tailrecursion.hoplon.span.call(null,G__219406,G__219407));
})();
var G__219398 = " (";
var G__219399 = (function (){var G__219408 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219409 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219408,G__219409) : tailrecursion.hoplon.span.call(null,G__219408,G__219409));
})();
var G__219400 = (function (){var G__219410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219411 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219410,G__219411) : tailrecursion.hoplon.span.call(null,G__219410,G__219411));
})();
var G__219401 = " ";
var G__219402 = (function (){var G__219412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219413 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219412,G__219413) : tailrecursion.hoplon.span.call(null,G__219412,G__219413));
})();
var G__219403 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10(G__219394,G__219395,G__219396,G__219397,G__219398,G__219399,G__219400,G__219401,G__219402,G__219403) : tailrecursion.hoplon.pre.call(null,G__219394,G__219395,G__219396,G__219397,G__219398,G__219399,G__219400,G__219401,G__219402,G__219403));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219392,G__219393) : tailrecursion.hoplon.div.call(null,G__219392,G__219393));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219391) : tailrecursion.hoplon.div.call(null,G__219391));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219368;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219367;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219366;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219365;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219414 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219415 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219416 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219417 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219418 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("b\n") : tailrecursion.hoplon.code.call(null,"b\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219418) : tailrecursion.hoplon.pre.call(null,G__219418));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219417;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219416;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219415;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219414;
}})()], 0)),"",(function (){var _STAR_references_STAR_219419 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219420 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219421 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219422 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219449 = (function (){var G__219450 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219451 = (function (){var G__219452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219453 = "(";
var G__219454 = (function (){var G__219464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219465 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219464,G__219465) : tailrecursion.hoplon.span.call(null,G__219464,G__219465));
})();
var G__219455 = (function (){var G__219466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219467 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219466,G__219467) : tailrecursion.hoplon.span.call(null,G__219466,G__219467));
})();
var G__219456 = " ";
var G__219457 = (function (){var G__219468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219469 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219468,G__219469) : tailrecursion.hoplon.span.call(null,G__219468,G__219469));
})();
var G__219458 = " (";
var G__219459 = (function (){var G__219470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219471 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219470,G__219471) : tailrecursion.hoplon.span.call(null,G__219470,G__219471));
})();
var G__219460 = (function (){var G__219472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219473 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219472,G__219473) : tailrecursion.hoplon.span.call(null,G__219472,G__219473));
})();
var G__219461 = " ";
var G__219462 = (function (){var G__219474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219475 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219474,G__219475) : tailrecursion.hoplon.span.call(null,G__219474,G__219475));
})();
var G__219463 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__219452,G__219453,G__219454,G__219455,G__219456,G__219457,G__219458,G__219459,G__219460,G__219461,G__219462,G__219463) : tailrecursion.hoplon.pre.call(null,G__219452,G__219453,G__219454,G__219455,G__219456,G__219457,G__219458,G__219459,G__219460,G__219461,G__219462,G__219463));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219450,G__219451) : tailrecursion.hoplon.div.call(null,G__219450,G__219451));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219449) : tailrecursion.hoplon.div.call(null,G__219449));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219422;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219421;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219420;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219419;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219476 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219477 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219478 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219479 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219480 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("19\n") : tailrecursion.hoplon.code.call(null,"19\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219480) : tailrecursion.hoplon.pre.call(null,G__219480));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219479;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219478;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219477;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219476;
}})()], 0)),"",(function (){var _STAR_references_STAR_219481 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219482 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219483 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219484 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219500 = (function (){var G__219501 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219502 = (function (){var G__219503 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219504 = "(";
var G__219505 = (function (){var G__219510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219511 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219510,G__219511) : tailrecursion.hoplon.span.call(null,G__219510,G__219511));
})();
var G__219506 = (function (){var G__219512 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219513 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219512,G__219513) : tailrecursion.hoplon.span.call(null,G__219512,G__219513));
})();
var G__219507 = " ";
var G__219508 = (function (){var G__219514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219515 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219514,G__219515) : tailrecursion.hoplon.span.call(null,G__219514,G__219515));
})();
var G__219509 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__219503,G__219504,G__219505,G__219506,G__219507,G__219508,G__219509) : tailrecursion.hoplon.pre.call(null,G__219503,G__219504,G__219505,G__219506,G__219507,G__219508,G__219509));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219501,G__219502) : tailrecursion.hoplon.div.call(null,G__219501,G__219502));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219500) : tailrecursion.hoplon.div.call(null,G__219500));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219484;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219483;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219482;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219481;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219516 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219517 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219518 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219519 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219520 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("false\n") : tailrecursion.hoplon.code.call(null,"false\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219520) : tailrecursion.hoplon.pre.call(null,G__219520));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219519;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219518;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219517;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219516;
}})()], 0)),"",(function (){var _STAR_references_STAR_219521 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219522 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219523 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219524 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219574 = (function (){var G__219575 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219576 = (function (){var G__219577 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219578 = "(";
var G__219579 = (function (){var G__219600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__219601 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219600,G__219601) : tailrecursion.hoplon.span.call(null,G__219600,G__219601));
})();
var G__219580 = "(";
var G__219581 = (function (){var G__219602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219603 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219602,G__219603) : tailrecursion.hoplon.span.call(null,G__219602,G__219603));
})();
var G__219582 = "(";
var G__219583 = (function (){var G__219604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219605 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219604,G__219605) : tailrecursion.hoplon.span.call(null,G__219604,G__219605));
})();
var G__219584 = (function (){var G__219606 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219607 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219606,G__219607) : tailrecursion.hoplon.span.call(null,G__219606,G__219607));
})();
var G__219585 = " ";
var G__219586 = (function (){var G__219608 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219609 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219608,G__219609) : tailrecursion.hoplon.span.call(null,G__219608,G__219609));
})();
var G__219587 = ") (";
var G__219588 = (function (){var G__219610 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219611 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219610,G__219611) : tailrecursion.hoplon.span.call(null,G__219610,G__219611));
})();
var G__219589 = (function (){var G__219612 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219613 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219612,G__219613) : tailrecursion.hoplon.span.call(null,G__219612,G__219613));
})();
var G__219590 = " (";
var G__219591 = (function (){var G__219614 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219615 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219614,G__219615) : tailrecursion.hoplon.span.call(null,G__219614,G__219615));
})();
var G__219592 = (function (){var G__219616 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219617 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219616,G__219617) : tailrecursion.hoplon.span.call(null,G__219616,G__219617));
})();
var G__219593 = " ";
var G__219594 = (function (){var G__219618 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219619 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219618,G__219619) : tailrecursion.hoplon.span.call(null,G__219618,G__219619));
})();
var G__219595 = ")))\n    ";
var G__219596 = (function (){var G__219620 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219621 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219620,G__219621) : tailrecursion.hoplon.span.call(null,G__219620,G__219621));
})();
var G__219597 = "\n    ";
var G__219598 = (function (){var G__219622 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219623 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219622,G__219623) : tailrecursion.hoplon.span.call(null,G__219622,G__219623));
})();
var G__219599 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__219577,G__219578,G__219579,G__219580,G__219581,G__219582,G__219583,G__219584,G__219585,G__219586,G__219587,G__219588,G__219589,G__219590,G__219591,G__219592,G__219593,G__219594,G__219595,G__219596,G__219597,G__219598,G__219599) : tailrecursion.hoplon.pre.call(null,G__219577,G__219578,G__219579,G__219580,G__219581,G__219582,G__219583,G__219584,G__219585,G__219586,G__219587,G__219588,G__219589,G__219590,G__219591,G__219592,G__219593,G__219594,G__219595,G__219596,G__219597,G__219598,G__219599));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219575,G__219576) : tailrecursion.hoplon.div.call(null,G__219575,G__219576));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219574) : tailrecursion.hoplon.div.call(null,G__219574));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219524;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219523;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219522;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219521;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219624 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219625 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219626 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219627 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219628 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("4\n") : tailrecursion.hoplon.code.call(null,"4\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219628) : tailrecursion.hoplon.pre.call(null,G__219628));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219627;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219626;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219625;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219624;
}})()], 0)),"",(function (){var _STAR_references_STAR_219629 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219630 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219631 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219632 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219690 = (function (){var G__219691 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219692 = (function (){var G__219693 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219694 = "(";
var G__219695 = (function (){var G__219720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219721 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219720,G__219721) : tailrecursion.hoplon.span.call(null,G__219720,G__219721));
})();
var G__219696 = "(";
var G__219697 = (function (){var G__219722 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219723 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219722,G__219723) : tailrecursion.hoplon.span.call(null,G__219722,G__219723));
})();
var G__219698 = (function (){var G__219724 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219725 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219724,G__219725) : tailrecursion.hoplon.span.call(null,G__219724,G__219725));
})();
var G__219699 = " ";
var G__219700 = (function (){var G__219726 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219727 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219726,G__219727) : tailrecursion.hoplon.span.call(null,G__219726,G__219727));
})();
var G__219701 = ") ";
var G__219702 = (function (){var G__219728 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219729 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219728,G__219729) : tailrecursion.hoplon.span.call(null,G__219728,G__219729));
})();
var G__219703 = "\n      (";
var G__219704 = (function (){var G__219730 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219731 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219730,G__219731) : tailrecursion.hoplon.span.call(null,G__219730,G__219731));
})();
var G__219705 = (function (){var G__219732 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219733 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219732,G__219733) : tailrecursion.hoplon.span.call(null,G__219732,G__219733));
})();
var G__219706 = " ";
var G__219707 = (function (){var G__219734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219735 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219734,G__219735) : tailrecursion.hoplon.span.call(null,G__219734,G__219735));
})();
var G__219708 = ") (";
var G__219709 = (function (){var G__219736 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219737 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219736,G__219737) : tailrecursion.hoplon.span.call(null,G__219736,G__219737));
})();
var G__219710 = (function (){var G__219738 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219739 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219738,G__219739) : tailrecursion.hoplon.span.call(null,G__219738,G__219739));
})();
var G__219711 = " ";
var G__219712 = (function (){var G__219740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219741 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219740,G__219741) : tailrecursion.hoplon.span.call(null,G__219740,G__219741));
})();
var G__219713 = " ";
var G__219714 = (function (){var G__219742 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219743 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219742,G__219743) : tailrecursion.hoplon.span.call(null,G__219742,G__219743));
})();
var G__219715 = ")\n      ";
var G__219716 = (function (){var G__219744 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219745 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219744,G__219745) : tailrecursion.hoplon.span.call(null,G__219744,G__219745));
})();
var G__219717 = " ";
var G__219718 = (function (){var G__219746 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219747 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219746,G__219747) : tailrecursion.hoplon.span.call(null,G__219746,G__219747));
})();
var G__219719 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__219693,G__219694,G__219695,G__219696,G__219697,G__219698,G__219699,G__219700,G__219701,G__219702,G__219703,G__219704,G__219705,G__219706,G__219707,G__219708,G__219709,G__219710,G__219711,G__219712,G__219713,G__219714,G__219715,G__219716,G__219717,G__219718,G__219719) : tailrecursion.hoplon.pre.call(null,G__219693,G__219694,G__219695,G__219696,G__219697,G__219698,G__219699,G__219700,G__219701,G__219702,G__219703,G__219704,G__219705,G__219706,G__219707,G__219708,G__219709,G__219710,G__219711,G__219712,G__219713,G__219714,G__219715,G__219716,G__219717,G__219718,G__219719));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219691,G__219692) : tailrecursion.hoplon.div.call(null,G__219691,G__219692));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219690) : tailrecursion.hoplon.div.call(null,G__219690));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219632;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219631;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219630;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219629;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219748 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219749 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219750 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219751 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219752 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219752) : tailrecursion.hoplon.pre.call(null,G__219752));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219751;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219750;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219749;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219748;
}})()], 0)),"",(function (){var _STAR_references_STAR_219753 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219754 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219755 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219756 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219791 = (function (){var G__219792 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219793 = (function (){var G__219794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219795 = "(";
var G__219796 = (function (){var G__219810 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219811 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219810,G__219811) : tailrecursion.hoplon.span.call(null,G__219810,G__219811));
})();
var G__219797 = (function (){var G__219812 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219813 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219812,G__219813) : tailrecursion.hoplon.span.call(null,G__219812,G__219813));
})();
var G__219798 = " (";
var G__219799 = (function (){var G__219814 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__219815 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219814,G__219815) : tailrecursion.hoplon.span.call(null,G__219814,G__219815));
})();
var G__219800 = "(";
var G__219801 = (function (){var G__219816 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219817 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219816,G__219817) : tailrecursion.hoplon.span.call(null,G__219816,G__219817));
})();
var G__219802 = (function (){var G__219818 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219819 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219818,G__219819) : tailrecursion.hoplon.span.call(null,G__219818,G__219819));
})();
var G__219803 = " ";
var G__219804 = (function (){var G__219820 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219821 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219820,G__219821) : tailrecursion.hoplon.span.call(null,G__219820,G__219821));
})();
var G__219805 = ") ";
var G__219806 = (function (){var G__219822 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219823 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219822,G__219823) : tailrecursion.hoplon.span.call(null,G__219822,G__219823));
})();
var G__219807 = " ";
var G__219808 = (function (){var G__219824 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219825 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219824,G__219825) : tailrecursion.hoplon.span.call(null,G__219824,G__219825));
})();
var G__219809 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__219794,G__219795,G__219796,G__219797,G__219798,G__219799,G__219800,G__219801,G__219802,G__219803,G__219804,G__219805,G__219806,G__219807,G__219808,G__219809) : tailrecursion.hoplon.pre.call(null,G__219794,G__219795,G__219796,G__219797,G__219798,G__219799,G__219800,G__219801,G__219802,G__219803,G__219804,G__219805,G__219806,G__219807,G__219808,G__219809));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219792,G__219793) : tailrecursion.hoplon.div.call(null,G__219792,G__219793));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219791) : tailrecursion.hoplon.div.call(null,G__219791));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219756;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219755;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219754;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219753;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219826 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219827 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219828 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219829 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219830 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("5\n") : tailrecursion.hoplon.code.call(null,"5\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219830) : tailrecursion.hoplon.pre.call(null,G__219830));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219829;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219828;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219827;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219826;
}})()], 0)),"",(function (){var _STAR_references_STAR_219831 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219832 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219833 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219834 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219896 = (function (){var G__219897 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__219898 = (function (){var G__219899 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__219900 = "(";
var G__219901 = (function (){var G__219928 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219929 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219928,G__219929) : tailrecursion.hoplon.span.call(null,G__219928,G__219929));
})();
var G__219902 = "(";
var G__219903 = (function (){var G__219930 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219931 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219930,G__219931) : tailrecursion.hoplon.span.call(null,G__219930,G__219931));
})();
var G__219904 = "(";
var G__219905 = (function (){var G__219932 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219933 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219932,G__219933) : tailrecursion.hoplon.span.call(null,G__219932,G__219933));
})();
var G__219906 = (function (){var G__219934 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219935 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219934,G__219935) : tailrecursion.hoplon.span.call(null,G__219934,G__219935));
})();
var G__219907 = " ";
var G__219908 = (function (){var G__219936 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219937 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219936,G__219937) : tailrecursion.hoplon.span.call(null,G__219936,G__219937));
})();
var G__219909 = ") ";
var G__219910 = (function (){var G__219938 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219939 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219938,G__219939) : tailrecursion.hoplon.span.call(null,G__219938,G__219939));
})();
var G__219911 = "\n         (";
var G__219912 = (function (){var G__219940 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219941 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219940,G__219941) : tailrecursion.hoplon.span.call(null,G__219940,G__219941));
})();
var G__219913 = (function (){var G__219942 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219943 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219942,G__219943) : tailrecursion.hoplon.span.call(null,G__219942,G__219943));
})();
var G__219914 = " ";
var G__219915 = (function (){var G__219944 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219945 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219944,G__219945) : tailrecursion.hoplon.span.call(null,G__219944,G__219945));
})();
var G__219916 = ") ";
var G__219917 = (function (){var G__219946 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219947 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219946,G__219947) : tailrecursion.hoplon.span.call(null,G__219946,G__219947));
})();
var G__219918 = "\n         ";
var G__219919 = (function (){var G__219948 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219949 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219948,G__219949) : tailrecursion.hoplon.span.call(null,G__219948,G__219949));
})();
var G__219920 = " ";
var G__219921 = (function (){var G__219950 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219951 = "-1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219950,G__219951) : tailrecursion.hoplon.span.call(null,G__219950,G__219951));
})();
var G__219922 = ")\n   (";
var G__219923 = (function (){var G__219952 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__219953 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219952,G__219953) : tailrecursion.hoplon.span.call(null,G__219952,G__219953));
})();
var G__219924 = (function (){var G__219954 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__219955 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219954,G__219955) : tailrecursion.hoplon.span.call(null,G__219954,G__219955));
})();
var G__219925 = " ";
var G__219926 = (function (){var G__219956 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__219957 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__219956,G__219957) : tailrecursion.hoplon.span.call(null,G__219956,G__219957));
})();
var G__219927 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__219899,G__219900,G__219901,G__219902,G__219903,G__219904,G__219905,G__219906,G__219907,G__219908,G__219909,G__219910,G__219911,G__219912,G__219913,G__219914,G__219915,G__219916,G__219917,G__219918,G__219919,G__219920,G__219921,G__219922,G__219923,G__219924,G__219925,G__219926,G__219927) : tailrecursion.hoplon.pre.call(null,G__219899,G__219900,G__219901,G__219902,G__219903,G__219904,G__219905,G__219906,G__219907,G__219908,G__219909,G__219910,G__219911,G__219912,G__219913,G__219914,G__219915,G__219916,G__219917,G__219918,G__219919,G__219920,G__219921,G__219922,G__219923,G__219924,G__219925,G__219926,G__219927));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__219897,G__219898) : tailrecursion.hoplon.div.call(null,G__219897,G__219898));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__219896) : tailrecursion.hoplon.div.call(null,G__219896));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219834;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219833;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219832;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219831;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219958 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219959 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219960 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219961 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219962 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("16\n") : tailrecursion.hoplon.code.call(null,"16\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__219962) : tailrecursion.hoplon.pre.call(null,G__219962));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219961;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219960;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219959;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219958;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219963 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219964 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219965 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219966 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__219967 = cljs.core.PersistentArrayMap.EMPTY;
var G__219968 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Translate the following expression into prefix form $$\\frac{5+4+\\left(2-\\left(3-\\left(6+\\frac{4}{5}\\right)\\right)\\right)}{3(6-2)(2-7)}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__219967,G__219968) : tailrecursion.hoplon.markdown.para_node.call(null,G__219967,G__219968));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219966;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219965;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219964;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219963;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_219969 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219970 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_219971 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_219972 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220053 = (function (){var G__220054 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__220055 = (function (){var G__220056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__220057 = "(";
var G__220058 = (function (){var G__220092 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220093 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220092,G__220093) : tailrecursion.hoplon.span.call(null,G__220092,G__220093));
})();
var G__220059 = "(";
var G__220060 = (function (){var G__220094 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220095 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220094,G__220095) : tailrecursion.hoplon.span.call(null,G__220094,G__220095));
})();
var G__220061 = (function (){var G__220096 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220097 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220096,G__220097) : tailrecursion.hoplon.span.call(null,G__220096,G__220097));
})();
var G__220062 = " ";
var G__220063 = (function (){var G__220098 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220099 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220098,G__220099) : tailrecursion.hoplon.span.call(null,G__220098,G__220099));
})();
var G__220064 = " (";
var G__220065 = (function (){var G__220100 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220101 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220100,G__220101) : tailrecursion.hoplon.span.call(null,G__220100,G__220101));
})();
var G__220066 = (function (){var G__220102 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220103 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220102,G__220103) : tailrecursion.hoplon.span.call(null,G__220102,G__220103));
})();
var G__220067 = " (";
var G__220068 = (function (){var G__220104 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220105 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220104,G__220105) : tailrecursion.hoplon.span.call(null,G__220104,G__220105));
})();
var G__220069 = (function (){var G__220106 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220107 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220106,G__220107) : tailrecursion.hoplon.span.call(null,G__220106,G__220107));
})();
var G__220070 = " (";
var G__220071 = (function (){var G__220108 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220109 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220108,G__220109) : tailrecursion.hoplon.span.call(null,G__220108,G__220109));
})();
var G__220072 = (function (){var G__220110 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220111 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220110,G__220111) : tailrecursion.hoplon.span.call(null,G__220110,G__220111));
})();
var G__220073 = " (";
var G__220074 = (function (){var G__220112 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220113 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220112,G__220113) : tailrecursion.hoplon.span.call(null,G__220112,G__220113));
})();
var G__220075 = (function (){var G__220114 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220115 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220114,G__220115) : tailrecursion.hoplon.span.call(null,G__220114,G__220115));
})();
var G__220076 = " ";
var G__220077 = (function (){var G__220116 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220117 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220116,G__220117) : tailrecursion.hoplon.span.call(null,G__220116,G__220117));
})();
var G__220078 = "))))) \n   (";
var G__220079 = (function (){var G__220118 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220119 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220118,G__220119) : tailrecursion.hoplon.span.call(null,G__220118,G__220119));
})();
var G__220080 = (function (){var G__220120 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220121 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220120,G__220121) : tailrecursion.hoplon.span.call(null,G__220120,G__220121));
})();
var G__220081 = " (";
var G__220082 = (function (){var G__220122 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220123 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220122,G__220123) : tailrecursion.hoplon.span.call(null,G__220122,G__220123));
})();
var G__220083 = (function (){var G__220124 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220125 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220124,G__220125) : tailrecursion.hoplon.span.call(null,G__220124,G__220125));
})();
var G__220084 = " ";
var G__220085 = (function (){var G__220126 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220127 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220126,G__220127) : tailrecursion.hoplon.span.call(null,G__220126,G__220127));
})();
var G__220086 = ") (";
var G__220087 = (function (){var G__220128 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220129 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220128,G__220129) : tailrecursion.hoplon.span.call(null,G__220128,G__220129));
})();
var G__220088 = (function (){var G__220130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220131 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220130,G__220131) : tailrecursion.hoplon.span.call(null,G__220130,G__220131));
})();
var G__220089 = " ";
var G__220090 = (function (){var G__220132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220133 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220132,G__220133) : tailrecursion.hoplon.span.call(null,G__220132,G__220133));
})();
var G__220091 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__220056,G__220057,G__220058,G__220059,G__220060,G__220061,G__220062,G__220063,G__220064,G__220065,G__220066,G__220067,G__220068,G__220069,G__220070,G__220071,G__220072,G__220073,G__220074,G__220075,G__220076,G__220077,G__220078,G__220079,G__220080,G__220081,G__220082,G__220083,G__220084,G__220085,G__220086,G__220087,G__220088,G__220089,G__220090,G__220091) : tailrecursion.hoplon.pre.call(null,G__220056,G__220057,G__220058,G__220059,G__220060,G__220061,G__220062,G__220063,G__220064,G__220065,G__220066,G__220067,G__220068,G__220069,G__220070,G__220071,G__220072,G__220073,G__220074,G__220075,G__220076,G__220077,G__220078,G__220079,G__220080,G__220081,G__220082,G__220083,G__220084,G__220085,G__220086,G__220087,G__220088,G__220089,G__220090,G__220091));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__220054,G__220055) : tailrecursion.hoplon.div.call(null,G__220054,G__220055));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__220053) : tailrecursion.hoplon.div.call(null,G__220053));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219972;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219971;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_219970;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_219969;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_220134 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220135 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_220136 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220137 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220138 = cljs.core.PersistentArrayMap.EMPTY;
var G__220139 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220138,G__220139) : tailrecursion.hoplon.markdown.para_node.call(null,G__220138,G__220139));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220137;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220136;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220135;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220134;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_220140 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220141 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_220142 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220143 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220287 = (function (){var G__220288 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__220289 = (function (){var G__220290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__220291 = "(";
var G__220292 = (function (){var G__220359 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__220360 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220359,G__220360) : tailrecursion.hoplon.span.call(null,G__220359,G__220360));
})();
var G__220293 = (function (){var G__220361 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220362 = "sum-of-largest-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220361,G__220362) : tailrecursion.hoplon.span.call(null,G__220361,G__220362));
})();
var G__220294 = " [";
var G__220295 = (function (){var G__220363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220364 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220363,G__220364) : tailrecursion.hoplon.span.call(null,G__220363,G__220364));
})();
var G__220296 = " ";
var G__220297 = (function (){var G__220365 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220366 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220365,G__220366) : tailrecursion.hoplon.span.call(null,G__220365,G__220366));
})();
var G__220298 = " ";
var G__220299 = (function (){var G__220367 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220368 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220367,G__220368) : tailrecursion.hoplon.span.call(null,G__220367,G__220368));
})();
var G__220300 = "]\n  (";
var G__220301 = (function (){var G__220369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220370 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220369,G__220370) : tailrecursion.hoplon.span.call(null,G__220369,G__220370));
})();
var G__220302 = "(";
var G__220303 = (function (){var G__220371 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220372 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220371,G__220372) : tailrecursion.hoplon.span.call(null,G__220371,G__220372));
})();
var G__220304 = "(";
var G__220305 = (function (){var G__220373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220374 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220373,G__220374) : tailrecursion.hoplon.span.call(null,G__220373,G__220374));
})();
var G__220306 = (function (){var G__220375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220376 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220375,G__220376) : tailrecursion.hoplon.span.call(null,G__220375,G__220376));
})();
var G__220307 = " ";
var G__220308 = (function (){var G__220377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220378 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220377,G__220378) : tailrecursion.hoplon.span.call(null,G__220377,G__220378));
})();
var G__220309 = ") (";
var G__220310 = (function (){var G__220379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220380 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220379,G__220380) : tailrecursion.hoplon.span.call(null,G__220379,G__220380));
})();
var G__220311 = (function (){var G__220381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220382 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220381,G__220382) : tailrecursion.hoplon.span.call(null,G__220381,G__220382));
})();
var G__220312 = " ";
var G__220313 = (function (){var G__220383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220384 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220383,G__220384) : tailrecursion.hoplon.span.call(null,G__220383,G__220384));
})();
var G__220314 = ")) (";
var G__220315 = (function (){var G__220385 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220386 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220385,G__220386) : tailrecursion.hoplon.span.call(null,G__220385,G__220386));
})();
var G__220316 = "(";
var G__220317 = (function (){var G__220387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220388 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220387,G__220388) : tailrecursion.hoplon.span.call(null,G__220387,G__220388));
})();
var G__220318 = " ";
var G__220319 = (function (){var G__220389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220390 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220389,G__220390) : tailrecursion.hoplon.span.call(null,G__220389,G__220390));
})();
var G__220320 = ") (";
var G__220321 = (function (){var G__220391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220392 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220391,G__220392) : tailrecursion.hoplon.span.call(null,G__220391,G__220392));
})();
var G__220322 = " ";
var G__220323 = (function (){var G__220393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220394 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220393,G__220394) : tailrecursion.hoplon.span.call(null,G__220393,G__220394));
})();
var G__220324 = "))\n        (";
var G__220325 = (function (){var G__220395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220396 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220395,G__220396) : tailrecursion.hoplon.span.call(null,G__220395,G__220396));
})();
var G__220326 = "(";
var G__220327 = (function (){var G__220397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220398 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220397,G__220398) : tailrecursion.hoplon.span.call(null,G__220397,G__220398));
})();
var G__220328 = (function (){var G__220399 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220400 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220399,G__220400) : tailrecursion.hoplon.span.call(null,G__220399,G__220400));
})();
var G__220329 = " ";
var G__220330 = (function (){var G__220401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220402 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220401,G__220402) : tailrecursion.hoplon.span.call(null,G__220401,G__220402));
})();
var G__220331 = ") (";
var G__220332 = (function (){var G__220403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220404 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220403,G__220404) : tailrecursion.hoplon.span.call(null,G__220403,G__220404));
})();
var G__220333 = (function (){var G__220405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220406 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220405,G__220406) : tailrecursion.hoplon.span.call(null,G__220405,G__220406));
})();
var G__220334 = " ";
var G__220335 = (function (){var G__220407 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220408 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220407,G__220408) : tailrecursion.hoplon.span.call(null,G__220407,G__220408));
})();
var G__220336 = ")) (";
var G__220337 = (function (){var G__220409 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220410 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220409,G__220410) : tailrecursion.hoplon.span.call(null,G__220409,G__220410));
})();
var G__220338 = "(";
var G__220339 = (function (){var G__220411 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220412 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220411,G__220412) : tailrecursion.hoplon.span.call(null,G__220411,G__220412));
})();
var G__220340 = " ";
var G__220341 = (function (){var G__220413 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220414 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220413,G__220414) : tailrecursion.hoplon.span.call(null,G__220413,G__220414));
})();
var G__220342 = ") (";
var G__220343 = (function (){var G__220415 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220416 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220415,G__220416) : tailrecursion.hoplon.span.call(null,G__220415,G__220416));
})();
var G__220344 = " ";
var G__220345 = (function (){var G__220417 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220418 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220417,G__220418) : tailrecursion.hoplon.span.call(null,G__220417,G__220418));
})();
var G__220346 = "))\n        ";
var G__220347 = (function (){var G__220419 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220420 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220419,G__220420) : tailrecursion.hoplon.span.call(null,G__220419,G__220420));
})();
var G__220348 = " (";
var G__220349 = (function (){var G__220421 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220422 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220421,G__220422) : tailrecursion.hoplon.span.call(null,G__220421,G__220422));
})();
var G__220350 = "(";
var G__220351 = (function (){var G__220423 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220424 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220423,G__220424) : tailrecursion.hoplon.span.call(null,G__220423,G__220424));
})();
var G__220352 = " ";
var G__220353 = (function (){var G__220425 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220426 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220425,G__220426) : tailrecursion.hoplon.span.call(null,G__220425,G__220426));
})();
var G__220354 = ") (";
var G__220355 = (function (){var G__220427 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220428 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220427,G__220428) : tailrecursion.hoplon.span.call(null,G__220427,G__220428));
})();
var G__220356 = " ";
var G__220357 = (function (){var G__220429 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220430 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220429,G__220430) : tailrecursion.hoplon.span.call(null,G__220429,G__220430));
})();
var G__220358 = "))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69(G__220290,G__220291,G__220292,G__220293,G__220294,G__220295,G__220296,G__220297,G__220298,G__220299,G__220300,G__220301,G__220302,G__220303,G__220304,G__220305,G__220306,G__220307,G__220308,G__220309,G__220310,G__220311,G__220312,G__220313,G__220314,G__220315,G__220316,G__220317,G__220318,G__220319,G__220320,G__220321,G__220322,G__220323,G__220324,G__220325,G__220326,G__220327,G__220328,G__220329,G__220330,G__220331,G__220332,G__220333,G__220334,G__220335,G__220336,G__220337,G__220338,G__220339,G__220340,G__220341,G__220342,G__220343,G__220344,G__220345,G__220346,G__220347,G__220348,G__220349,G__220350,G__220351,G__220352,G__220353,G__220354,G__220355,G__220356,G__220357,G__220358) : tailrecursion.hoplon.pre.call(null,G__220290,G__220291,G__220292,G__220293,G__220294,G__220295,G__220296,G__220297,G__220298,G__220299,G__220300,G__220301,G__220302,G__220303,G__220304,G__220305,G__220306,G__220307,G__220308,G__220309,G__220310,G__220311,G__220312,G__220313,G__220314,G__220315,G__220316,G__220317,G__220318,G__220319,G__220320,G__220321,G__220322,G__220323,G__220324,G__220325,G__220326,G__220327,G__220328,G__220329,G__220330,G__220331,G__220332,G__220333,G__220334,G__220335,G__220336,G__220337,G__220338,G__220339,G__220340,G__220341,G__220342,G__220343,G__220344,G__220345,G__220346,G__220347,G__220348,G__220349,G__220350,G__220351,G__220352,G__220353,G__220354,G__220355,G__220356,G__220357,G__220358));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__220288,G__220289) : tailrecursion.hoplon.div.call(null,G__220288,G__220289));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__220287) : tailrecursion.hoplon.div.call(null,G__220287));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220143;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220142;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220141;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220140;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_220431 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220432 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_220433 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220434 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220435 = cljs.core.PersistentArrayMap.EMPTY;
var G__220436 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220435,G__220436) : tailrecursion.hoplon.markdown.para_node.call(null,G__220435,G__220436));
})(),(function (){var G__220486 = (function (){var G__220487 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__220488 = (function (){var G__220489 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__220490 = "(";
var G__220491 = (function (){var G__220512 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__220513 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220512,G__220513) : tailrecursion.hoplon.span.call(null,G__220512,G__220513));
})();
var G__220492 = (function (){var G__220514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220515 = "a-plus-abs-b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220514,G__220515) : tailrecursion.hoplon.span.call(null,G__220514,G__220515));
})();
var G__220493 = " [";
var G__220494 = (function (){var G__220516 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220517 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220516,G__220517) : tailrecursion.hoplon.span.call(null,G__220516,G__220517));
})();
var G__220495 = " ";
var G__220496 = (function (){var G__220518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220519 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220518,G__220519) : tailrecursion.hoplon.span.call(null,G__220518,G__220519));
})();
var G__220497 = "]\n  ((";
var G__220498 = (function (){var G__220520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__220521 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220520,G__220521) : tailrecursion.hoplon.span.call(null,G__220520,G__220521));
})();
var G__220499 = "(";
var G__220500 = (function (){var G__220522 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220523 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220522,G__220523) : tailrecursion.hoplon.span.call(null,G__220522,G__220523));
})();
var G__220501 = (function (){var G__220524 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220525 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220524,G__220525) : tailrecursion.hoplon.span.call(null,G__220524,G__220525));
})();
var G__220502 = " ";
var G__220503 = (function (){var G__220526 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220527 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220526,G__220527) : tailrecursion.hoplon.span.call(null,G__220526,G__220527));
})();
var G__220504 = ") ";
var G__220505 = (function (){var G__220528 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220529 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220528,G__220529) : tailrecursion.hoplon.span.call(null,G__220528,G__220529));
})();
var G__220506 = (function (){var G__220530 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220531 = "-";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220530,G__220531) : tailrecursion.hoplon.span.call(null,G__220530,G__220531));
})();
var G__220507 = ") ";
var G__220508 = (function (){var G__220532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220533 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220532,G__220533) : tailrecursion.hoplon.span.call(null,G__220532,G__220533));
})();
var G__220509 = " ";
var G__220510 = (function (){var G__220534 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220535 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220534,G__220535) : tailrecursion.hoplon.span.call(null,G__220534,G__220535));
})();
var G__220511 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__220489,G__220490,G__220491,G__220492,G__220493,G__220494,G__220495,G__220496,G__220497,G__220498,G__220499,G__220500,G__220501,G__220502,G__220503,G__220504,G__220505,G__220506,G__220507,G__220508,G__220509,G__220510,G__220511) : tailrecursion.hoplon.pre.call(null,G__220489,G__220490,G__220491,G__220492,G__220493,G__220494,G__220495,G__220496,G__220497,G__220498,G__220499,G__220500,G__220501,G__220502,G__220503,G__220504,G__220505,G__220506,G__220507,G__220508,G__220509,G__220510,G__220511));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__220487,G__220488) : tailrecursion.hoplon.div.call(null,G__220487,G__220488));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__220486) : tailrecursion.hoplon.div.call(null,G__220486));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220434;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220433;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220432;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220431;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_220536 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220537 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_220538 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220539 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220540 = cljs.core.PersistentArrayMap.EMPTY;
var G__220541 = new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It returns ",(function (){var G__220542 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__220543 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220542,G__220543) : tailrecursion.hoplon.markdown.code_node.call(null,G__220542,G__220543));
})(),". Note: if ",(function (){var G__220544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(> b 0)"], null);
var G__220545 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220544,G__220545) : tailrecursion.hoplon.markdown.code_node.call(null,G__220544,G__220545));
})(),", then ",(function (){var G__220546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) b)"], null);
var G__220547 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220546,G__220547) : tailrecursion.hoplon.markdown.code_node.call(null,G__220546,G__220547));
})(),", so ",(function (){var G__220548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__220549 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220548,G__220549) : tailrecursion.hoplon.markdown.code_node.call(null,G__220548,G__220549));
})()," would be ",(function (){var G__220550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a b)"], null);
var G__220551 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220550,G__220551) : tailrecursion.hoplon.markdown.code_node.call(null,G__220550,G__220551));
})(),", just as this function gives us. Alternatively, if ",(function (){var G__220552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(not (> b 0))"], null);
var G__220553 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220552,G__220553) : tailrecursion.hoplon.markdown.code_node.call(null,G__220552,G__220553));
})(),", then b is negative and ",(function (){var G__220554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(= (abs b) (- b))"], null);
var G__220555 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220554,G__220555) : tailrecursion.hoplon.markdown.code_node.call(null,G__220554,G__220555));
})()," which means, ",(function (){var G__220556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (abs b))"], null);
var G__220557 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220556,G__220557) : tailrecursion.hoplon.markdown.code_node.call(null,G__220556,G__220557));
})()," is ",(function (){var G__220558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(+ a (- b))"], null);
var G__220559 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220558,G__220559) : tailrecursion.hoplon.markdown.code_node.call(null,G__220558,G__220559));
})()," which is really just ",(function (){var G__220560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(- a b)"], null);
var G__220561 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220560,G__220561) : tailrecursion.hoplon.markdown.code_node.call(null,G__220560,G__220561));
})()," as our function above gives us."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220540,G__220541) : tailrecursion.hoplon.markdown.para_node.call(null,G__220540,G__220541));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220539;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220538;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220537;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220536;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_220562 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220563 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_220564 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220565 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220566 = cljs.core.PersistentArrayMap.EMPTY;
var G__220567 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220566,G__220567) : tailrecursion.hoplon.markdown.para_node.call(null,G__220566,G__220567));
})(),(function (){var G__220583 = (function (){var G__220584 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__220585 = (function (){var G__220586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__220587 = "(";
var G__220588 = (function (){var G__220593 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__220594 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220593,G__220594) : tailrecursion.hoplon.span.call(null,G__220593,G__220594));
})();
var G__220589 = (function (){var G__220595 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220596 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220595,G__220596) : tailrecursion.hoplon.span.call(null,G__220595,G__220596));
})();
var G__220590 = " [] (";
var G__220591 = (function (){var G__220597 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220598 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220597,G__220598) : tailrecursion.hoplon.span.call(null,G__220597,G__220598));
})();
var G__220592 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__220586,G__220587,G__220588,G__220589,G__220590,G__220591,G__220592) : tailrecursion.hoplon.pre.call(null,G__220586,G__220587,G__220588,G__220589,G__220590,G__220591,G__220592));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__220584,G__220585) : tailrecursion.hoplon.div.call(null,G__220584,G__220585));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__220583) : tailrecursion.hoplon.div.call(null,G__220583));
})(),(function (){var G__220599 = cljs.core.PersistentArrayMap.EMPTY;
var G__220600 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220599,G__220600) : tailrecursion.hoplon.markdown.para_node.call(null,G__220599,G__220600));
})(),(function (){var G__220643 = (function (){var G__220644 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__220645 = (function (){var G__220646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__220647 = "(";
var G__220648 = (function (){var G__220666 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__220667 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220666,G__220667) : tailrecursion.hoplon.span.call(null,G__220666,G__220667));
})();
var G__220649 = (function (){var G__220668 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220669 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220668,G__220669) : tailrecursion.hoplon.span.call(null,G__220668,G__220669));
})();
var G__220650 = "[";
var G__220651 = (function (){var G__220670 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220671 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220670,G__220671) : tailrecursion.hoplon.span.call(null,G__220670,G__220671));
})();
var G__220652 = " ";
var G__220653 = (function (){var G__220672 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220673 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220672,G__220673) : tailrecursion.hoplon.span.call(null,G__220672,G__220673));
})();
var G__220654 = "]\n   (";
var G__220655 = (function (){var G__220674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__220675 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220674,G__220675) : tailrecursion.hoplon.span.call(null,G__220674,G__220675));
})();
var G__220656 = "(";
var G__220657 = (function (){var G__220676 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220677 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220676,G__220677) : tailrecursion.hoplon.span.call(null,G__220676,G__220677));
})();
var G__220658 = (function (){var G__220678 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220679 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220678,G__220679) : tailrecursion.hoplon.span.call(null,G__220678,G__220679));
})();
var G__220659 = " ";
var G__220660 = (function (){var G__220680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220681 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220680,G__220681) : tailrecursion.hoplon.span.call(null,G__220680,G__220681));
})();
var G__220661 = ")\n   ";
var G__220662 = (function (){var G__220682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220683 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220682,G__220683) : tailrecursion.hoplon.span.call(null,G__220682,G__220683));
})();
var G__220663 = "\n   ";
var G__220664 = (function (){var G__220684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220685 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220684,G__220685) : tailrecursion.hoplon.span.call(null,G__220684,G__220685));
})();
var G__220665 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__220646,G__220647,G__220648,G__220649,G__220650,G__220651,G__220652,G__220653,G__220654,G__220655,G__220656,G__220657,G__220658,G__220659,G__220660,G__220661,G__220662,G__220663,G__220664,G__220665) : tailrecursion.hoplon.pre.call(null,G__220646,G__220647,G__220648,G__220649,G__220650,G__220651,G__220652,G__220653,G__220654,G__220655,G__220656,G__220657,G__220658,G__220659,G__220660,G__220661,G__220662,G__220663,G__220664,G__220665));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__220644,G__220645) : tailrecursion.hoplon.div.call(null,G__220644,G__220645));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__220643) : tailrecursion.hoplon.div.call(null,G__220643));
})(),(function (){var G__220686 = cljs.core.PersistentArrayMap.EMPTY;
var G__220687 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then he evaluates the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220686,G__220687) : tailrecursion.hoplon.markdown.para_node.call(null,G__220686,G__220687));
})(),(function (){var G__220703 = (function (){var G__220704 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__220705 = (function (){var G__220706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__220707 = "(";
var G__220708 = (function (){var G__220713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220714 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220713,G__220714) : tailrecursion.hoplon.span.call(null,G__220713,G__220714));
})();
var G__220709 = (function (){var G__220715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220716 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220715,G__220716) : tailrecursion.hoplon.span.call(null,G__220715,G__220716));
})();
var G__220710 = " (";
var G__220711 = (function (){var G__220717 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220718 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220717,G__220718) : tailrecursion.hoplon.span.call(null,G__220717,G__220718));
})();
var G__220712 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__220706,G__220707,G__220708,G__220709,G__220710,G__220711,G__220712) : tailrecursion.hoplon.pre.call(null,G__220706,G__220707,G__220708,G__220709,G__220710,G__220711,G__220712));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__220704,G__220705) : tailrecursion.hoplon.div.call(null,G__220704,G__220705));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__220703) : tailrecursion.hoplon.div.call(null,G__220703));
})(),(function (){var G__220719 = cljs.core.PersistentArrayMap.EMPTY;
var G__220720 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220719,G__220720) : tailrecursion.hoplon.markdown.para_node.call(null,G__220719,G__220720));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220565;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220564;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220563;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220562;
}})(),book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_220721 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220722 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_220723 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220724 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220725 = cljs.core.PersistentArrayMap.EMPTY;
var G__220726 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220727 = cljs.core.PersistentArrayMap.EMPTY;
var G__220728 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220729 = cljs.core.PersistentArrayMap.EMPTY;
var G__220730 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With normal order evaluation it compiles just as one  might expect: first the function itself is unraveled,  finding that it is an ",(function (){var G__220731 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__220732 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220731,G__220732) : tailrecursion.hoplon.markdown.code_node.call(null,G__220731,G__220732));
})()," statement, then the ",(function (){var G__220733 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__220734 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__220733,G__220734) : tailrecursion.hoplon.markdown.code_node.call(null,G__220733,G__220734));
})(),"  statement is evaluated according to its own rules.  Finding that the first argument is 0, it returns 0."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220729,G__220730) : tailrecursion.hoplon.markdown.para_node.call(null,G__220729,G__220730));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__220727,G__220728) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__220727,G__220728));
})(),(function (){var G__220735 = cljs.core.PersistentArrayMap.EMPTY;
var G__220736 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_220737 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220738 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220739 = cljs.core.PersistentArrayMap.EMPTY;
var G__220740 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With applicative order evaluation the story is a bit more  interesting. Since the arguments to a function are always  evaluated first in applicative order evaluation, the  compiler would attempt to evaluate both the first and  second arguments and hence fall into an infinite loop  in the attempt to evaluate the second argument."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220739,G__220740) : tailrecursion.hoplon.markdown.para_node.call(null,G__220739,G__220740));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220738;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220737;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__220735,G__220736) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__220735,G__220736));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__220725,G__220726) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__220725,G__220726));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220724;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220723;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220722;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220721;
}})()], 0))], 0))], 0));
var G__216592 = "";
var G__216593 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Example: Square Roots by Newton's Method"], null),(function (){var _STAR_references_STAR_220741 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220742 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_220743 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220744 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220745 = cljs.core.PersistentArrayMap.EMPTY;
var G__220746 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Procedures, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer procedures. Procedures must be effective. As a case in point, consider the problem of computing square roots. We can define the square-root function as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220745,G__220746) : tailrecursion.hoplon.markdown.para_node.call(null,G__220745,G__220746));
})(),(function (){var G__220747 = cljs.core.PersistentArrayMap.EMPTY;
var G__220748 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\sqrt x = \\text{ the } y \\text{ such that } y\\geq 0 \\text{ and } y^2 = x $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220747,G__220748) : tailrecursion.hoplon.markdown.para_node.call(null,G__220747,G__220748));
})(),(function (){var G__220749 = cljs.core.PersistentArrayMap.EMPTY;
var G__220750 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a procedure. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-Lisp: "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220749,G__220750) : tailrecursion.hoplon.markdown.para_node.call(null,G__220749,G__220750));
})(),(function (){var G__220805 = (function (){var G__220806 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__220807 = (function (){var G__220808 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__220809 = "(";
var G__220810 = (function (){var G__220834 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__220835 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220834,G__220835) : tailrecursion.hoplon.span.call(null,G__220834,G__220835));
})();
var G__220811 = (function (){var G__220836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220837 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220836,G__220837) : tailrecursion.hoplon.span.call(null,G__220836,G__220837));
})();
var G__220812 = " [";
var G__220813 = (function (){var G__220838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220839 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220838,G__220839) : tailrecursion.hoplon.span.call(null,G__220838,G__220839));
})();
var G__220814 = "] \n  (";
var G__220815 = (function (){var G__220840 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220841 = "the";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220840,G__220841) : tailrecursion.hoplon.span.call(null,G__220840,G__220841));
})();
var G__220816 = " ";
var G__220817 = (function (){var G__220842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220843 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220842,G__220843) : tailrecursion.hoplon.span.call(null,G__220842,G__220843));
})();
var G__220818 = " (";
var G__220819 = (function (){var G__220844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220845 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220844,G__220845) : tailrecursion.hoplon.span.call(null,G__220844,G__220845));
})();
var G__220820 = "(";
var G__220821 = (function (){var G__220846 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220847 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220846,G__220847) : tailrecursion.hoplon.span.call(null,G__220846,G__220847));
})();
var G__220822 = (function (){var G__220848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220849 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220848,G__220849) : tailrecursion.hoplon.span.call(null,G__220848,G__220849));
})();
var G__220823 = " ";
var G__220824 = (function (){var G__220850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__220851 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220850,G__220851) : tailrecursion.hoplon.span.call(null,G__220850,G__220851));
})();
var G__220825 = ") \n              (";
var G__220826 = (function (){var G__220852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__220853 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220852,G__220853) : tailrecursion.hoplon.span.call(null,G__220852,G__220853));
})();
var G__220827 = "(";
var G__220828 = (function (){var G__220854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__220855 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220854,G__220855) : tailrecursion.hoplon.span.call(null,G__220854,G__220855));
})();
var G__220829 = " ";
var G__220830 = (function (){var G__220856 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220857 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220856,G__220857) : tailrecursion.hoplon.span.call(null,G__220856,G__220857));
})();
var G__220831 = ") ";
var G__220832 = (function (){var G__220858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__220859 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__220858,G__220859) : tailrecursion.hoplon.span.call(null,G__220858,G__220859));
})();
var G__220833 = ")))) \n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26(G__220808,G__220809,G__220810,G__220811,G__220812,G__220813,G__220814,G__220815,G__220816,G__220817,G__220818,G__220819,G__220820,G__220821,G__220822,G__220823,G__220824,G__220825,G__220826,G__220827,G__220828,G__220829,G__220830,G__220831,G__220832,G__220833) : tailrecursion.hoplon.pre.call(null,G__220808,G__220809,G__220810,G__220811,G__220812,G__220813,G__220814,G__220815,G__220816,G__220817,G__220818,G__220819,G__220820,G__220821,G__220822,G__220823,G__220824,G__220825,G__220826,G__220827,G__220828,G__220829,G__220830,G__220831,G__220832,G__220833));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__220806,G__220807) : tailrecursion.hoplon.div.call(null,G__220806,G__220807));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__220805) : tailrecursion.hoplon.div.call(null,G__220805));
})(),(function (){var G__220860 = cljs.core.PersistentArrayMap.EMPTY;
var G__220861 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This only begs the question. The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.",(function (){var G__220862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__220863 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is ",(function (){var G__220864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__220865 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["correct"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__220864,G__220865) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__220864,G__220865));
})()," is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given ",(function (){var G__220866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__220867 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["what is"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__220866,G__220867) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__220866,G__220867));
})()," knowledge specified by the programmer, they can generate ",(function (){var G__220868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__220869 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how to"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__220868,G__220869) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__220868,G__220869));
})()," knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in chapter 4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__220862,G__220863) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__220862,G__220863));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220860,G__220861) : tailrecursion.hoplon.markdown.para_node.call(null,G__220860,G__220861));
})(),(function (){var G__220870 = cljs.core.PersistentArrayMap.EMPTY;
var G__220871 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How does one compute square roots? The most common way is to use Newton",(function (){var G__220872 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__220873 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__220872,G__220873) : tailrecursion.hoplon.markdown.simple_node.call(null,G__220872,G__220873));
})(),"s method of successive approximations, which says that whenever we have a guess y for the value of the square root of a number x, we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging y with x/y.",(function (){var G__220874 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__220875 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This square-root algorithm is actually a special case of Newton",(function (){var G__220876 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__220877 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__220876,G__220877) : tailrecursion.hoplon.markdown.simple_node.call(null,G__220876,G__220877));
})(),"s method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century A.D. We will see how to express the general Newton",(function (){var G__220878 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__220879 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__220878,G__220879) : tailrecursion.hoplon.markdown.simple_node.call(null,G__220878,G__220879));
})(),"s method as a Lisp procedure in section 1.3.4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__220874,G__220875) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__220874,G__220875));
})()," For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220870,G__220871) : tailrecursion.hoplon.markdown.para_node.call(null,G__220870,G__220871));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220744;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220743;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220742;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220741;
}})(),"",(function (){var G__220880 = cljs.core.PersistentArrayMap.EMPTY;
var G__220881 = (function (){var G__220886 = cljs.core.PersistentArrayMap.EMPTY;
var G__220887 = (function (){var G__220890 = cljs.core.PersistentArrayMap.EMPTY;
var G__220891 = "Guess ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220890,G__220891) : tailrecursion.hoplon.td.call(null,G__220890,G__220891));
})();
var G__220888 = (function (){var G__220892 = cljs.core.PersistentArrayMap.EMPTY;
var G__220893 = "Quotient ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220892,G__220893) : tailrecursion.hoplon.td.call(null,G__220892,G__220893));
})();
var G__220889 = (function (){var G__220894 = cljs.core.PersistentArrayMap.EMPTY;
var G__220895 = "Average ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220894,G__220895) : tailrecursion.hoplon.td.call(null,G__220894,G__220895));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__220886,G__220887,G__220888,G__220889) : tailrecursion.hoplon.tr.call(null,G__220886,G__220887,G__220888,G__220889));
})();
var G__220882 = (function (){var G__220896 = cljs.core.PersistentArrayMap.EMPTY;
var G__220897 = (function (){var G__220900 = cljs.core.PersistentArrayMap.EMPTY;
var G__220901 = "1 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220900,G__220901) : tailrecursion.hoplon.td.call(null,G__220900,G__220901));
})();
var G__220898 = (function (){var G__220902 = cljs.core.PersistentArrayMap.EMPTY;
var G__220903 = "(2/1) = 2 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220902,G__220903) : tailrecursion.hoplon.td.call(null,G__220902,G__220903));
})();
var G__220899 = (function (){var G__220904 = cljs.core.PersistentArrayMap.EMPTY;
var G__220905 = "((2+1)/2) = 1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220904,G__220905) : tailrecursion.hoplon.td.call(null,G__220904,G__220905));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__220896,G__220897,G__220898,G__220899) : tailrecursion.hoplon.tr.call(null,G__220896,G__220897,G__220898,G__220899));
})();
var G__220883 = (function (){var G__220906 = cljs.core.PersistentArrayMap.EMPTY;
var G__220907 = (function (){var G__220910 = cljs.core.PersistentArrayMap.EMPTY;
var G__220911 = "1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220910,G__220911) : tailrecursion.hoplon.td.call(null,G__220910,G__220911));
})();
var G__220908 = (function (){var G__220912 = cljs.core.PersistentArrayMap.EMPTY;
var G__220913 = "(2/1.5) = 1.333...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220912,G__220913) : tailrecursion.hoplon.td.call(null,G__220912,G__220913));
})();
var G__220909 = (function (){var G__220914 = cljs.core.PersistentArrayMap.EMPTY;
var G__220915 = "((1.333... + 1.5)/2) = 1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220914,G__220915) : tailrecursion.hoplon.td.call(null,G__220914,G__220915));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__220906,G__220907,G__220908,G__220909) : tailrecursion.hoplon.tr.call(null,G__220906,G__220907,G__220908,G__220909));
})();
var G__220884 = (function (){var G__220916 = cljs.core.PersistentArrayMap.EMPTY;
var G__220917 = (function (){var G__220920 = cljs.core.PersistentArrayMap.EMPTY;
var G__220921 = "1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220920,G__220921) : tailrecursion.hoplon.td.call(null,G__220920,G__220921));
})();
var G__220918 = (function (){var G__220922 = cljs.core.PersistentArrayMap.EMPTY;
var G__220923 = "(2/1.4167) = 1.4118 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220922,G__220923) : tailrecursion.hoplon.td.call(null,G__220922,G__220923));
})();
var G__220919 = (function (){var G__220924 = cljs.core.PersistentArrayMap.EMPTY;
var G__220925 = "((1.4167 + 1.4118)/2) = 1.4142 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220924,G__220925) : tailrecursion.hoplon.td.call(null,G__220924,G__220925));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__220916,G__220917,G__220918,G__220919) : tailrecursion.hoplon.tr.call(null,G__220916,G__220917,G__220918,G__220919));
})();
var G__220885 = (function (){var G__220926 = cljs.core.PersistentArrayMap.EMPTY;
var G__220927 = (function (){var G__220930 = cljs.core.PersistentArrayMap.EMPTY;
var G__220931 = "1.4142...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220930,G__220931) : tailrecursion.hoplon.td.call(null,G__220930,G__220931));
})();
var G__220928 = (function (){var G__220932 = cljs.core.PersistentArrayMap.EMPTY;
var G__220933 = "...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220932,G__220933) : tailrecursion.hoplon.td.call(null,G__220932,G__220933));
})();
var G__220929 = (function (){var G__220934 = cljs.core.PersistentArrayMap.EMPTY;
var G__220935 = "...";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__220934,G__220935) : tailrecursion.hoplon.td.call(null,G__220934,G__220935));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__220926,G__220927,G__220928,G__220929) : tailrecursion.hoplon.tr.call(null,G__220926,G__220927,G__220928,G__220929));
})();
return (tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6 ? tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6(G__220880,G__220881,G__220882,G__220883,G__220884,G__220885) : tailrecursion.hoplon.table.call(null,G__220880,G__220881,G__220882,G__220883,G__220884,G__220885));
})(),(function (){var _STAR_references_STAR_220936 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220937 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_220938 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_220939 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__220940 = cljs.core.PersistentArrayMap.EMPTY;
var G__220941 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Continuing this process, we obtain better and better approximations to the square root. "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220940,G__220941) : tailrecursion.hoplon.markdown.para_node.call(null,G__220940,G__220941));
})(),(function (){var G__220942 = cljs.core.PersistentArrayMap.EMPTY;
var G__220943 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now let",(function (){var G__220944 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__220945 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__220944,G__220945) : tailrecursion.hoplon.markdown.simple_node.call(null,G__220944,G__220945));
})(),"s formalize the process in terms of procedures. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__220942,G__220943) : tailrecursion.hoplon.markdown.para_node.call(null,G__220942,G__220943));
})(),(function (){var G__221005 = (function (){var G__221006 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221007 = (function (){var G__221008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221009 = "(";
var G__221010 = (function (){var G__221037 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__221038 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221037,G__221038) : tailrecursion.hoplon.span.call(null,G__221037,G__221038));
})();
var G__221011 = (function (){var G__221039 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221040 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221039,G__221040) : tailrecursion.hoplon.span.call(null,G__221039,G__221040));
})();
var G__221012 = " [";
var G__221013 = (function (){var G__221041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221042 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221041,G__221042) : tailrecursion.hoplon.span.call(null,G__221041,G__221042));
})();
var G__221014 = " ";
var G__221015 = (function (){var G__221043 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221044 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221043,G__221044) : tailrecursion.hoplon.span.call(null,G__221043,G__221044));
})();
var G__221016 = "]\n  (";
var G__221017 = (function (){var G__221045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__221046 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221045,G__221046) : tailrecursion.hoplon.span.call(null,G__221045,G__221046));
})();
var G__221018 = "(";
var G__221019 = (function (){var G__221047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221048 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221047,G__221048) : tailrecursion.hoplon.span.call(null,G__221047,G__221048));
})();
var G__221020 = " ";
var G__221021 = (function (){var G__221049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221050 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221049,G__221050) : tailrecursion.hoplon.span.call(null,G__221049,G__221050));
})();
var G__221022 = " ";
var G__221023 = (function (){var G__221051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221052 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221051,G__221052) : tailrecursion.hoplon.span.call(null,G__221051,G__221052));
})();
var G__221024 = ")\n      ";
var G__221025 = (function (){var G__221053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221054 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221053,G__221054) : tailrecursion.hoplon.span.call(null,G__221053,G__221054));
})();
var G__221026 = "\n      (";
var G__221027 = (function (){var G__221055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221056 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221055,G__221056) : tailrecursion.hoplon.span.call(null,G__221055,G__221056));
})();
var G__221028 = " (";
var G__221029 = (function (){var G__221057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221058 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221057,G__221058) : tailrecursion.hoplon.span.call(null,G__221057,G__221058));
})();
var G__221030 = " ";
var G__221031 = (function (){var G__221059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221060 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221059,G__221060) : tailrecursion.hoplon.span.call(null,G__221059,G__221060));
})();
var G__221032 = " ";
var G__221033 = (function (){var G__221061 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221062 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221061,G__221062) : tailrecursion.hoplon.span.call(null,G__221061,G__221062));
})();
var G__221034 = ")\n                 ";
var G__221035 = (function (){var G__221063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221064 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221063,G__221064) : tailrecursion.hoplon.span.call(null,G__221063,G__221064));
})();
var G__221036 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__221008,G__221009,G__221010,G__221011,G__221012,G__221013,G__221014,G__221015,G__221016,G__221017,G__221018,G__221019,G__221020,G__221021,G__221022,G__221023,G__221024,G__221025,G__221026,G__221027,G__221028,G__221029,G__221030,G__221031,G__221032,G__221033,G__221034,G__221035,G__221036) : tailrecursion.hoplon.pre.call(null,G__221008,G__221009,G__221010,G__221011,G__221012,G__221013,G__221014,G__221015,G__221016,G__221017,G__221018,G__221019,G__221020,G__221021,G__221022,G__221023,G__221024,G__221025,G__221026,G__221027,G__221028,G__221029,G__221030,G__221031,G__221032,G__221033,G__221034,G__221035,G__221036));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221006,G__221007) : tailrecursion.hoplon.div.call(null,G__221006,G__221007));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221005) : tailrecursion.hoplon.div.call(null,G__221005));
})(),(function (){var G__221065 = cljs.core.PersistentArrayMap.EMPTY;
var G__221066 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A guess is improved by averaging it with the quotient of the radicand and the old guess:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221065,G__221066) : tailrecursion.hoplon.markdown.para_node.call(null,G__221065,G__221066));
})(),(function (){var G__221105 = (function (){var G__221106 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221107 = (function (){var G__221108 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221109 = "(";
var G__221110 = (function (){var G__221126 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__221127 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221126,G__221127) : tailrecursion.hoplon.span.call(null,G__221126,G__221127));
})();
var G__221111 = (function (){var G__221128 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221129 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221128,G__221129) : tailrecursion.hoplon.span.call(null,G__221128,G__221129));
})();
var G__221112 = " [";
var G__221113 = (function (){var G__221130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221131 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221130,G__221131) : tailrecursion.hoplon.span.call(null,G__221130,G__221131));
})();
var G__221114 = " ";
var G__221115 = (function (){var G__221132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221133 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221132,G__221133) : tailrecursion.hoplon.span.call(null,G__221132,G__221133));
})();
var G__221116 = "]\n  (";
var G__221117 = (function (){var G__221134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221135 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221134,G__221135) : tailrecursion.hoplon.span.call(null,G__221134,G__221135));
})();
var G__221118 = " ";
var G__221119 = (function (){var G__221136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221137 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221136,G__221137) : tailrecursion.hoplon.span.call(null,G__221136,G__221137));
})();
var G__221120 = " (";
var G__221121 = (function (){var G__221138 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221139 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221138,G__221139) : tailrecursion.hoplon.span.call(null,G__221138,G__221139));
})();
var G__221122 = (function (){var G__221140 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221141 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221140,G__221141) : tailrecursion.hoplon.span.call(null,G__221140,G__221141));
})();
var G__221123 = " ";
var G__221124 = (function (){var G__221142 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221143 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221142,G__221143) : tailrecursion.hoplon.span.call(null,G__221142,G__221143));
})();
var G__221125 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__221108,G__221109,G__221110,G__221111,G__221112,G__221113,G__221114,G__221115,G__221116,G__221117,G__221118,G__221119,G__221120,G__221121,G__221122,G__221123,G__221124,G__221125) : tailrecursion.hoplon.pre.call(null,G__221108,G__221109,G__221110,G__221111,G__221112,G__221113,G__221114,G__221115,G__221116,G__221117,G__221118,G__221119,G__221120,G__221121,G__221122,G__221123,G__221124,G__221125));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221106,G__221107) : tailrecursion.hoplon.div.call(null,G__221106,G__221107));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221105) : tailrecursion.hoplon.div.call(null,G__221105));
})(),(function (){var G__221144 = cljs.core.PersistentArrayMap.EMPTY;
var G__221145 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221144,G__221145) : tailrecursion.hoplon.markdown.para_node.call(null,G__221144,G__221145));
})(),(function (){var G__221184 = (function (){var G__221185 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221186 = (function (){var G__221187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221188 = "(";
var G__221189 = (function (){var G__221205 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__221206 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221205,G__221206) : tailrecursion.hoplon.span.call(null,G__221205,G__221206));
})();
var G__221190 = (function (){var G__221207 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221208 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221207,G__221208) : tailrecursion.hoplon.span.call(null,G__221207,G__221208));
})();
var G__221191 = " [";
var G__221192 = (function (){var G__221209 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221210 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221209,G__221210) : tailrecursion.hoplon.span.call(null,G__221209,G__221210));
})();
var G__221193 = " ";
var G__221194 = (function (){var G__221211 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221212 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221211,G__221212) : tailrecursion.hoplon.span.call(null,G__221211,G__221212));
})();
var G__221195 = "]\n  (";
var G__221196 = (function (){var G__221213 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221214 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221213,G__221214) : tailrecursion.hoplon.span.call(null,G__221213,G__221214));
})();
var G__221197 = "(";
var G__221198 = (function (){var G__221215 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221216 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221215,G__221216) : tailrecursion.hoplon.span.call(null,G__221215,G__221216));
})();
var G__221199 = (function (){var G__221217 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221218 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221217,G__221218) : tailrecursion.hoplon.span.call(null,G__221217,G__221218));
})();
var G__221200 = " ";
var G__221201 = (function (){var G__221219 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221220 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221219,G__221220) : tailrecursion.hoplon.span.call(null,G__221219,G__221220));
})();
var G__221202 = ") ";
var G__221203 = (function (){var G__221221 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221222 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221221,G__221222) : tailrecursion.hoplon.span.call(null,G__221221,G__221222));
})();
var G__221204 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__221187,G__221188,G__221189,G__221190,G__221191,G__221192,G__221193,G__221194,G__221195,G__221196,G__221197,G__221198,G__221199,G__221200,G__221201,G__221202,G__221203,G__221204) : tailrecursion.hoplon.pre.call(null,G__221187,G__221188,G__221189,G__221190,G__221191,G__221192,G__221193,G__221194,G__221195,G__221196,G__221197,G__221198,G__221199,G__221200,G__221201,G__221202,G__221203,G__221204));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221185,G__221186) : tailrecursion.hoplon.div.call(null,G__221185,G__221186));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221184) : tailrecursion.hoplon.div.call(null,G__221184));
})(),(function (){var G__221223 = cljs.core.PersistentArrayMap.EMPTY;
var G__221224 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We also have to say what we mean by ``good enough.",(function (){var G__221225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221226 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221225,G__221226) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221225,G__221226));
})(),(function (){var G__221227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221228 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221227,G__221228) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221227,G__221228));
})()," The following will do for illustration, but it is not really a very good test. (See exercise 1.7.) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001):",(function (){var G__221229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__221230 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention. As far as the interpreter is concerned, the question mark is just an ordinary character."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__221229,G__221230) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__221229,G__221230));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221223,G__221224) : tailrecursion.hoplon.markdown.para_node.call(null,G__221223,G__221224));
})(),(function (){var G__221278 = (function (){var G__221279 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221280 = (function (){var G__221281 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221282 = "(";
var G__221283 = (function (){var G__221304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__221305 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221304,G__221305) : tailrecursion.hoplon.span.call(null,G__221304,G__221305));
})();
var G__221284 = (function (){var G__221306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221307 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221306,G__221307) : tailrecursion.hoplon.span.call(null,G__221306,G__221307));
})();
var G__221285 = " [";
var G__221286 = (function (){var G__221308 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221309 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221308,G__221309) : tailrecursion.hoplon.span.call(null,G__221308,G__221309));
})();
var G__221287 = " ";
var G__221288 = (function (){var G__221310 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221311 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221310,G__221311) : tailrecursion.hoplon.span.call(null,G__221310,G__221311));
})();
var G__221289 = "]\n  (";
var G__221290 = (function (){var G__221312 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221313 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221312,G__221313) : tailrecursion.hoplon.span.call(null,G__221312,G__221313));
})();
var G__221291 = "(";
var G__221292 = (function (){var G__221314 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221315 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221314,G__221315) : tailrecursion.hoplon.span.call(null,G__221314,G__221315));
})();
var G__221293 = " (";
var G__221294 = (function (){var G__221316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221317 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221316,G__221317) : tailrecursion.hoplon.span.call(null,G__221316,G__221317));
})();
var G__221295 = "(";
var G__221296 = (function (){var G__221318 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221319 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221318,G__221319) : tailrecursion.hoplon.span.call(null,G__221318,G__221319));
})();
var G__221297 = " ";
var G__221298 = (function (){var G__221320 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221321 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221320,G__221321) : tailrecursion.hoplon.span.call(null,G__221320,G__221321));
})();
var G__221299 = ") ";
var G__221300 = (function (){var G__221322 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221323 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221322,G__221323) : tailrecursion.hoplon.span.call(null,G__221322,G__221323));
})();
var G__221301 = ")) ";
var G__221302 = (function (){var G__221324 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221325 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221324,G__221325) : tailrecursion.hoplon.span.call(null,G__221324,G__221325));
})();
var G__221303 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__221281,G__221282,G__221283,G__221284,G__221285,G__221286,G__221287,G__221288,G__221289,G__221290,G__221291,G__221292,G__221293,G__221294,G__221295,G__221296,G__221297,G__221298,G__221299,G__221300,G__221301,G__221302,G__221303) : tailrecursion.hoplon.pre.call(null,G__221281,G__221282,G__221283,G__221284,G__221285,G__221286,G__221287,G__221288,G__221289,G__221290,G__221291,G__221292,G__221293,G__221294,G__221295,G__221296,G__221297,G__221298,G__221299,G__221300,G__221301,G__221302,G__221303));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221279,G__221280) : tailrecursion.hoplon.div.call(null,G__221279,G__221280));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221278) : tailrecursion.hoplon.div.call(null,G__221278));
})(),(function (){var G__221326 = cljs.core.PersistentArrayMap.EMPTY;
var G__221327 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:",(function (){var G__221328 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__221329 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that we express our initial guess as 1.0 rather than 1. This would not make any difference in many Lisp implementations. MIT Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal. For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667. (We will learn how to implement arithmetic on rational numbers in section 2.1.1.) If we start with an initial guess of 1 in our square-root program, and \\(x\\) is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals. Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__221328,G__221329) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__221328,G__221329));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221326,G__221327) : tailrecursion.hoplon.markdown.para_node.call(null,G__221326,G__221327));
})(),(function (){var G__221357 = (function (){var G__221358 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221359 = (function (){var G__221360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221361 = "(";
var G__221362 = (function (){var G__221373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__221374 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221373,G__221374) : tailrecursion.hoplon.span.call(null,G__221373,G__221374));
})();
var G__221363 = (function (){var G__221375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221376 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221375,G__221376) : tailrecursion.hoplon.span.call(null,G__221375,G__221376));
})();
var G__221364 = " [";
var G__221365 = (function (){var G__221377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221378 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221377,G__221378) : tailrecursion.hoplon.span.call(null,G__221377,G__221378));
})();
var G__221366 = "]\n  (";
var G__221367 = (function (){var G__221379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221380 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221379,G__221380) : tailrecursion.hoplon.span.call(null,G__221379,G__221380));
})();
var G__221368 = " ";
var G__221369 = (function (){var G__221381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221382 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221381,G__221382) : tailrecursion.hoplon.span.call(null,G__221381,G__221382));
})();
var G__221370 = " ";
var G__221371 = (function (){var G__221383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221384 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221383,G__221384) : tailrecursion.hoplon.span.call(null,G__221383,G__221384));
})();
var G__221372 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__221360,G__221361,G__221362,G__221363,G__221364,G__221365,G__221366,G__221367,G__221368,G__221369,G__221370,G__221371,G__221372) : tailrecursion.hoplon.pre.call(null,G__221360,G__221361,G__221362,G__221363,G__221364,G__221365,G__221366,G__221367,G__221368,G__221369,G__221370,G__221371,G__221372));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221358,G__221359) : tailrecursion.hoplon.div.call(null,G__221358,G__221359));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221357) : tailrecursion.hoplon.div.call(null,G__221357));
})(),(function (){var G__221385 = cljs.core.PersistentArrayMap.EMPTY;
var G__221386 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we type these definitions to the interpreter, we can use sqrt just as we can use any procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221385,G__221386) : tailrecursion.hoplon.markdown.para_node.call(null,G__221385,G__221386));
})(),(function (){var G__221466 = (function (){var G__221467 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221468 = (function (){var G__221469 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221470 = "(";
var G__221471 = (function (){var G__221508 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221509 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221508,G__221509) : tailrecursion.hoplon.span.call(null,G__221508,G__221509));
})();
var G__221472 = " ";
var G__221473 = (function (){var G__221510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221511 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221510,G__221511) : tailrecursion.hoplon.span.call(null,G__221510,G__221511));
})();
var G__221474 = ")\n";
var G__221475 = (function (){var G__221512 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221513 = "3.00009155413138";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221512,G__221513) : tailrecursion.hoplon.span.call(null,G__221512,G__221513));
})();
var G__221476 = "\n(";
var G__221477 = (function (){var G__221514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221515 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221514,G__221515) : tailrecursion.hoplon.span.call(null,G__221514,G__221515));
})();
var G__221478 = " (";
var G__221479 = (function (){var G__221516 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221517 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221516,G__221517) : tailrecursion.hoplon.span.call(null,G__221516,G__221517));
})();
var G__221480 = (function (){var G__221518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221519 = "100";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221518,G__221519) : tailrecursion.hoplon.span.call(null,G__221518,G__221519));
})();
var G__221481 = " ";
var G__221482 = (function (){var G__221520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221521 = "37";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221520,G__221521) : tailrecursion.hoplon.span.call(null,G__221520,G__221521));
})();
var G__221483 = "))\n";
var G__221484 = (function (){var G__221522 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221523 = "11.704699917758145";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221522,G__221523) : tailrecursion.hoplon.span.call(null,G__221522,G__221523));
})();
var G__221485 = "\n(";
var G__221486 = (function (){var G__221524 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221525 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221524,G__221525) : tailrecursion.hoplon.span.call(null,G__221524,G__221525));
})();
var G__221487 = " (";
var G__221488 = (function (){var G__221526 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221527 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221526,G__221527) : tailrecursion.hoplon.span.call(null,G__221526,G__221527));
})();
var G__221489 = "(";
var G__221490 = (function (){var G__221528 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221529 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221528,G__221529) : tailrecursion.hoplon.span.call(null,G__221528,G__221529));
})();
var G__221491 = " ";
var G__221492 = (function (){var G__221530 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221531 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221530,G__221531) : tailrecursion.hoplon.span.call(null,G__221530,G__221531));
})();
var G__221493 = ") (";
var G__221494 = (function (){var G__221532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221533 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221532,G__221533) : tailrecursion.hoplon.span.call(null,G__221532,G__221533));
})();
var G__221495 = " ";
var G__221496 = (function (){var G__221534 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221535 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221534,G__221535) : tailrecursion.hoplon.span.call(null,G__221534,G__221535));
})();
var G__221497 = ")))\n";
var G__221498 = (function (){var G__221536 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221537 = "1.7739279023207892";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221536,G__221537) : tailrecursion.hoplon.span.call(null,G__221536,G__221537));
})();
var G__221499 = "\n(";
var G__221500 = (function (){var G__221538 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221539 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221538,G__221539) : tailrecursion.hoplon.span.call(null,G__221538,G__221539));
})();
var G__221501 = " (";
var G__221502 = (function (){var G__221540 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221541 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221540,G__221541) : tailrecursion.hoplon.span.call(null,G__221540,G__221541));
})();
var G__221503 = " ";
var G__221504 = (function (){var G__221542 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221543 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221542,G__221543) : tailrecursion.hoplon.span.call(null,G__221542,G__221543));
})();
var G__221505 = "))\n";
var G__221506 = (function (){var G__221544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221545 = "1000.000369924366";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221544,G__221545) : tailrecursion.hoplon.span.call(null,G__221544,G__221545));
})();
var G__221507 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__221469,G__221470,G__221471,G__221472,G__221473,G__221474,G__221475,G__221476,G__221477,G__221478,G__221479,G__221480,G__221481,G__221482,G__221483,G__221484,G__221485,G__221486,G__221487,G__221488,G__221489,G__221490,G__221491,G__221492,G__221493,G__221494,G__221495,G__221496,G__221497,G__221498,G__221499,G__221500,G__221501,G__221502,G__221503,G__221504,G__221505,G__221506,G__221507) : tailrecursion.hoplon.pre.call(null,G__221469,G__221470,G__221471,G__221472,G__221473,G__221474,G__221475,G__221476,G__221477,G__221478,G__221479,G__221480,G__221481,G__221482,G__221483,G__221484,G__221485,G__221486,G__221487,G__221488,G__221489,G__221490,G__221491,G__221492,G__221493,G__221494,G__221495,G__221496,G__221497,G__221498,G__221499,G__221500,G__221501,G__221502,G__221503,G__221504,G__221505,G__221506,G__221507));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221467,G__221468) : tailrecursion.hoplon.div.call(null,G__221467,G__221468));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221466) : tailrecursion.hoplon.div.call(null,G__221466));
})(),(function (){var G__221546 = cljs.core.PersistentArrayMap.EMPTY;
var G__221547 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The sqrt program also illustrates that the simple procedural language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. Sqrt-iter, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a procedure.",(function (){var G__221548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__221549 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on ``tail recursion",(function (){var G__221550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221551 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221550,G__221551) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221550,G__221551));
})(),(function (){var G__221552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221553 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221552,G__221553) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221552,G__221553));
})()," in section 1.2.1."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__221548,G__221549) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__221548,G__221549));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221546,G__221547) : tailrecursion.hoplon.markdown.para_node.call(null,G__221546,G__221547));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220939;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220938;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_220937;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_220936;
}})()], 0));
var G__216594 = "";
var G__216595 = book.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_221554 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_221555 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_221556 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_221557 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__221558 = cljs.core.PersistentArrayMap.EMPTY;
var G__221559 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Alyssa P. Hacker doesn",(function (){var G__221560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221561 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221560,G__221561) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221560,G__221561));
})(),"t see why if needs to be provided as a special form. ",(function (){var G__221562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__221563 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Why can",(function (){var G__221564 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221565 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221564,G__221565) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221564,G__221565));
})(),"t I just define it as an ordinary procedure in terms of cond?"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__221562,G__221563) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__221562,G__221563));
})()," she asks. Alyssa",(function (){var G__221566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221567 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221566,G__221567) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221566,G__221567));
})(),"s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221558,G__221559) : tailrecursion.hoplon.markdown.para_node.call(null,G__221558,G__221559));
})(),(function (){var G__221610 = (function (){var G__221611 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221612 = (function (){var G__221613 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221614 = "(";
var G__221615 = (function (){var G__221633 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__221634 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221633,G__221634) : tailrecursion.hoplon.span.call(null,G__221633,G__221634));
})();
var G__221616 = (function (){var G__221635 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221636 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221635,G__221636) : tailrecursion.hoplon.span.call(null,G__221635,G__221636));
})();
var G__221617 = " [";
var G__221618 = (function (){var G__221637 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221638 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221637,G__221638) : tailrecursion.hoplon.span.call(null,G__221637,G__221638));
})();
var G__221619 = " ";
var G__221620 = (function (){var G__221639 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221640 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221639,G__221640) : tailrecursion.hoplon.span.call(null,G__221639,G__221640));
})();
var G__221621 = " ";
var G__221622 = (function (){var G__221641 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221642 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221641,G__221642) : tailrecursion.hoplon.span.call(null,G__221641,G__221642));
})();
var G__221623 = "]\n  (";
var G__221624 = (function (){var G__221643 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221644 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221643,G__221644) : tailrecursion.hoplon.span.call(null,G__221643,G__221644));
})();
var G__221625 = (function (){var G__221645 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221646 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221645,G__221646) : tailrecursion.hoplon.span.call(null,G__221645,G__221646));
})();
var G__221626 = " ";
var G__221627 = (function (){var G__221647 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221648 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221647,G__221648) : tailrecursion.hoplon.span.call(null,G__221647,G__221648));
})();
var G__221628 = "\n        ";
var G__221629 = (function (){var G__221649 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221650 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221649,G__221650) : tailrecursion.hoplon.span.call(null,G__221649,G__221650));
})();
var G__221630 = " ";
var G__221631 = (function (){var G__221651 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221652 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221651,G__221652) : tailrecursion.hoplon.span.call(null,G__221651,G__221652));
})();
var G__221632 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__221613,G__221614,G__221615,G__221616,G__221617,G__221618,G__221619,G__221620,G__221621,G__221622,G__221623,G__221624,G__221625,G__221626,G__221627,G__221628,G__221629,G__221630,G__221631,G__221632) : tailrecursion.hoplon.pre.call(null,G__221613,G__221614,G__221615,G__221616,G__221617,G__221618,G__221619,G__221620,G__221621,G__221622,G__221623,G__221624,G__221625,G__221626,G__221627,G__221628,G__221629,G__221630,G__221631,G__221632));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221611,G__221612) : tailrecursion.hoplon.div.call(null,G__221611,G__221612));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221610) : tailrecursion.hoplon.div.call(null,G__221610));
})(),(function (){var G__221653 = cljs.core.PersistentArrayMap.EMPTY;
var G__221654 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Eva demonstrates the program for Alyssa:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221653,G__221654) : tailrecursion.hoplon.markdown.para_node.call(null,G__221653,G__221654));
})(),(function (){var G__221686 = (function (){var G__221687 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221688 = (function (){var G__221689 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221690 = "(";
var G__221691 = (function (){var G__221704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221705 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221704,G__221705) : tailrecursion.hoplon.span.call(null,G__221704,G__221705));
})();
var G__221692 = " (";
var G__221693 = (function (){var G__221706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221707 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221706,G__221707) : tailrecursion.hoplon.span.call(null,G__221706,G__221707));
})();
var G__221694 = (function (){var G__221708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221709 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221708,G__221709) : tailrecursion.hoplon.span.call(null,G__221708,G__221709));
})();
var G__221695 = " ";
var G__221696 = (function (){var G__221710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221711 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221710,G__221711) : tailrecursion.hoplon.span.call(null,G__221710,G__221711));
})();
var G__221697 = ") ";
var G__221698 = (function (){var G__221712 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221713 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221712,G__221713) : tailrecursion.hoplon.span.call(null,G__221712,G__221713));
})();
var G__221699 = " ";
var G__221700 = (function (){var G__221714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221715 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221714,G__221715) : tailrecursion.hoplon.span.call(null,G__221714,G__221715));
})();
var G__221701 = ")\n";
var G__221702 = (function (){var G__221716 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221717 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221716,G__221717) : tailrecursion.hoplon.span.call(null,G__221716,G__221717));
})();
var G__221703 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__221689,G__221690,G__221691,G__221692,G__221693,G__221694,G__221695,G__221696,G__221697,G__221698,G__221699,G__221700,G__221701,G__221702,G__221703) : tailrecursion.hoplon.pre.call(null,G__221689,G__221690,G__221691,G__221692,G__221693,G__221694,G__221695,G__221696,G__221697,G__221698,G__221699,G__221700,G__221701,G__221702,G__221703));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221687,G__221688) : tailrecursion.hoplon.div.call(null,G__221687,G__221688));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221686) : tailrecursion.hoplon.div.call(null,G__221686));
})(),(function (){var G__221749 = (function (){var G__221750 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221751 = (function (){var G__221752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221753 = "(";
var G__221754 = (function (){var G__221767 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221768 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221767,G__221768) : tailrecursion.hoplon.span.call(null,G__221767,G__221768));
})();
var G__221755 = " (";
var G__221756 = (function (){var G__221769 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__221770 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221769,G__221770) : tailrecursion.hoplon.span.call(null,G__221769,G__221770));
})();
var G__221757 = (function (){var G__221771 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221772 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221771,G__221772) : tailrecursion.hoplon.span.call(null,G__221771,G__221772));
})();
var G__221758 = " ";
var G__221759 = (function (){var G__221773 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221774 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221773,G__221774) : tailrecursion.hoplon.span.call(null,G__221773,G__221774));
})();
var G__221760 = ") ";
var G__221761 = (function (){var G__221775 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221776 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221775,G__221776) : tailrecursion.hoplon.span.call(null,G__221775,G__221776));
})();
var G__221762 = " ";
var G__221763 = (function (){var G__221777 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221778 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221777,G__221778) : tailrecursion.hoplon.span.call(null,G__221777,G__221778));
})();
var G__221764 = ")\n";
var G__221765 = (function (){var G__221779 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__221780 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221779,G__221780) : tailrecursion.hoplon.span.call(null,G__221779,G__221780));
})();
var G__221766 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__221752,G__221753,G__221754,G__221755,G__221756,G__221757,G__221758,G__221759,G__221760,G__221761,G__221762,G__221763,G__221764,G__221765,G__221766) : tailrecursion.hoplon.pre.call(null,G__221752,G__221753,G__221754,G__221755,G__221756,G__221757,G__221758,G__221759,G__221760,G__221761,G__221762,G__221763,G__221764,G__221765,G__221766));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221750,G__221751) : tailrecursion.hoplon.div.call(null,G__221750,G__221751));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221749) : tailrecursion.hoplon.div.call(null,G__221749));
})(),(function (){var G__221781 = cljs.core.PersistentArrayMap.EMPTY;
var G__221782 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Delighted, Alyssa now uses ",(function (){var G__221783 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__221784 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221783,G__221784) : tailrecursion.hoplon.markdown.code_node.call(null,G__221783,G__221784));
})()," to rewrite the square-root program:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221781,G__221782) : tailrecursion.hoplon.markdown.para_node.call(null,G__221781,G__221782));
})(),(function (){var G__221844 = (function (){var G__221845 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__221846 = (function (){var G__221847 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__221848 = "(";
var G__221849 = (function (){var G__221876 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__221877 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221876,G__221877) : tailrecursion.hoplon.span.call(null,G__221876,G__221877));
})();
var G__221850 = (function (){var G__221878 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221879 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221878,G__221879) : tailrecursion.hoplon.span.call(null,G__221878,G__221879));
})();
var G__221851 = " [";
var G__221852 = (function (){var G__221880 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221881 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221880,G__221881) : tailrecursion.hoplon.span.call(null,G__221880,G__221881));
})();
var G__221853 = " ";
var G__221854 = (function (){var G__221882 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221883 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221882,G__221883) : tailrecursion.hoplon.span.call(null,G__221882,G__221883));
})();
var G__221855 = "]\n  (";
var G__221856 = (function (){var G__221884 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221885 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221884,G__221885) : tailrecursion.hoplon.span.call(null,G__221884,G__221885));
})();
var G__221857 = " (";
var G__221858 = (function (){var G__221886 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221887 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221886,G__221887) : tailrecursion.hoplon.span.call(null,G__221886,G__221887));
})();
var G__221859 = " ";
var G__221860 = (function (){var G__221888 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221889 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221888,G__221889) : tailrecursion.hoplon.span.call(null,G__221888,G__221889));
})();
var G__221861 = " ";
var G__221862 = (function (){var G__221890 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221891 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221890,G__221891) : tailrecursion.hoplon.span.call(null,G__221890,G__221891));
})();
var G__221863 = ")\n          ";
var G__221864 = (function (){var G__221892 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221893 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221892,G__221893) : tailrecursion.hoplon.span.call(null,G__221892,G__221893));
})();
var G__221865 = "\n          (";
var G__221866 = (function (){var G__221894 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221895 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221894,G__221895) : tailrecursion.hoplon.span.call(null,G__221894,G__221895));
})();
var G__221867 = " (";
var G__221868 = (function (){var G__221896 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__221897 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221896,G__221897) : tailrecursion.hoplon.span.call(null,G__221896,G__221897));
})();
var G__221869 = " ";
var G__221870 = (function (){var G__221898 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221899 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221898,G__221899) : tailrecursion.hoplon.span.call(null,G__221898,G__221899));
})();
var G__221871 = " ";
var G__221872 = (function (){var G__221900 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221901 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221900,G__221901) : tailrecursion.hoplon.span.call(null,G__221900,G__221901));
})();
var G__221873 = ")\n                     ";
var G__221874 = (function (){var G__221902 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__221903 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__221902,G__221903) : tailrecursion.hoplon.span.call(null,G__221902,G__221903));
})();
var G__221875 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__221847,G__221848,G__221849,G__221850,G__221851,G__221852,G__221853,G__221854,G__221855,G__221856,G__221857,G__221858,G__221859,G__221860,G__221861,G__221862,G__221863,G__221864,G__221865,G__221866,G__221867,G__221868,G__221869,G__221870,G__221871,G__221872,G__221873,G__221874,G__221875) : tailrecursion.hoplon.pre.call(null,G__221847,G__221848,G__221849,G__221850,G__221851,G__221852,G__221853,G__221854,G__221855,G__221856,G__221857,G__221858,G__221859,G__221860,G__221861,G__221862,G__221863,G__221864,G__221865,G__221866,G__221867,G__221868,G__221869,G__221870,G__221871,G__221872,G__221873,G__221874,G__221875));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__221845,G__221846) : tailrecursion.hoplon.div.call(null,G__221845,G__221846));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__221844) : tailrecursion.hoplon.div.call(null,G__221844));
})(),(function (){var G__221904 = cljs.core.PersistentArrayMap.EMPTY;
var G__221905 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What happens when Alyssa attempts to use this to compute square roots? Explain."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221904,G__221905) : tailrecursion.hoplon.markdown.para_node.call(null,G__221904,G__221905));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_221557;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_221556;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_221555;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_221554;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_221906 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_221907 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_221908 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_221909 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__221910 = cljs.core.PersistentArrayMap.EMPTY;
var G__221911 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since ",(function (){var G__221912 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__221913 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221912,G__221913) : tailrecursion.hoplon.markdown.code_node.call(null,G__221912,G__221913));
})()," is not a special form, it will be evaluated in applicative order. Hence, when ",(function (){var G__221914 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(new-if a b c)"], null);
var G__221915 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221914,G__221915) : tailrecursion.hoplon.markdown.code_node.call(null,G__221914,G__221915));
})()," is called, a, b, and c are all evaluated before considering how they may or may not be used within the function ",(function (){var G__221916 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__221917 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221916,G__221917) : tailrecursion.hoplon.markdown.code_node.call(null,G__221916,G__221917));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221910,G__221911) : tailrecursion.hoplon.markdown.para_node.call(null,G__221910,G__221911));
})(),(function (){var G__221918 = cljs.core.PersistentArrayMap.EMPTY;
var G__221919 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So, in this particular case, let us compute the square root of 4 with our first guess being 2 (Alyssa would probably think that this would terminate immediately, but let",(function (){var G__221920 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221921 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221920,G__221921) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221920,G__221921));
})(),"s see). ",(function (){var G__221922 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"clj\n(sqrt-iter 2 4) ==>\n(new-if (good-enough? 2 4) 2 (sqrt-iter (improve 2 4) 4))\n"], null);
var G__221923 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221922,G__221923) : tailrecursion.hoplon.markdown.code_node.call(null,G__221922,G__221923));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221918,G__221919) : tailrecursion.hoplon.markdown.para_node.call(null,G__221918,G__221919));
})(),(function (){var G__221924 = cljs.core.PersistentArrayMap.EMPTY;
var G__221925 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["You can see that in this example, since ",(function (){var G__221926 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(improve 2 4) = 2"], null);
var G__221927 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221926,G__221927) : tailrecursion.hoplon.markdown.code_node.call(null,G__221926,G__221927));
})(),", ",(function (){var G__221928 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__221929 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221928,G__221929) : tailrecursion.hoplon.markdown.code_node.call(null,G__221928,G__221929));
})()," is going to requre us to compute ",(function (){var G__221930 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"(sqrt-iter 2 4)"], null);
var G__221931 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221930,G__221931) : tailrecursion.hoplon.markdown.code_node.call(null,G__221930,G__221931));
})()," again. Then we",(function (){var G__221932 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221933 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221932,G__221933) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221932,G__221933));
})(),"ll be computing the ",(function (){var G__221934 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"new-if"], null);
var G__221935 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221934,G__221935) : tailrecursion.hoplon.markdown.code_node.call(null,G__221934,G__221935));
})()," again, and you can see the cycle that we",(function (){var G__221936 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221937 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221936,G__221937) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221936,G__221937));
})(),"ve gotten ourselves in."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221924,G__221925) : tailrecursion.hoplon.markdown.para_node.call(null,G__221924,G__221925));
})(),(function (){var G__221938 = cljs.core.PersistentArrayMap.EMPTY;
var G__221939 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Long story short, this would result in an infinite loop."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221938,G__221939) : tailrecursion.hoplon.markdown.para_node.call(null,G__221938,G__221939));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_221909;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_221908;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_221907;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_221906;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_221940 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_221941 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_221942 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_221943 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__221944 = cljs.core.PersistentArrayMap.EMPTY;
var G__221945 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",(function (){var G__221946 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__221947 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221946,G__221947) : tailrecursion.hoplon.markdown.code_node.call(null,G__221946,G__221947));
})()," test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing ",(function (){var G__221948 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__221949 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221948,G__221949) : tailrecursion.hoplon.markdown.code_node.call(null,G__221948,G__221949));
})()," is to watch how ",(function (){var G__221950 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__221951 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221950,G__221951) : tailrecursion.hoplon.markdown.code_node.call(null,G__221950,G__221951));
})()," changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221944,G__221945) : tailrecursion.hoplon.markdown.para_node.call(null,G__221944,G__221945));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_221943;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_221942;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_221941;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_221940;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_221952 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_221953 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_221954 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_221955 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__221956 = cljs.core.PersistentArrayMap.EMPTY;
var G__221957 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When finding the square root of a very small number (let",(function (){var G__221958 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221959 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221958,G__221959) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221958,G__221959));
})(),"s use 0.0000001, whose square root is 0.0001), since the answer we",(function (){var G__221960 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221961 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221960,G__221961) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221960,G__221961));
})(),"re looking for is smaller than our tollerance, you might get a zero or even a negative number as our answer! And on the other end of the spectrum, if our number is too large it would require enough calculations to make the precision larger than our tolerance. In that having a set tolerance is meaningless because our answer will be outside of that range due to the limitations of the computer!"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221956,G__221957) : tailrecursion.hoplon.markdown.para_node.call(null,G__221956,G__221957));
})(),(function (){var G__221962 = cljs.core.PersistentArrayMap.EMPTY;
var G__221963 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To avoid this problem we can set a dynamic tolerance like the exercise suggests. Let",(function (){var G__221964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__221965 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__221964,G__221965) : tailrecursion.hoplon.markdown.simple_node.call(null,G__221964,G__221965));
})(),"s say our problem allows for a 10% fractional tolerance. Then our ",(function (){var G__221966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__221967 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__221966,G__221967) : tailrecursion.hoplon.markdown.code_node.call(null,G__221966,G__221967));
})()," procedure would look like, "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__221962,G__221963) : tailrecursion.hoplon.markdown.para_node.call(null,G__221962,G__221963));
})(),(function (){var G__222018 = (function (){var G__222019 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__222020 = (function (){var G__222021 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__222022 = "(";
var G__222023 = (function (){var G__222045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222046 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222045,G__222046) : tailrecursion.hoplon.span.call(null,G__222045,G__222046));
})();
var G__222024 = (function (){var G__222047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222048 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222047,G__222048) : tailrecursion.hoplon.span.call(null,G__222047,G__222048));
})();
var G__222025 = " [";
var G__222026 = (function (){var G__222049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222050 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222049,G__222050) : tailrecursion.hoplon.span.call(null,G__222049,G__222050));
})();
var G__222027 = " ";
var G__222028 = (function (){var G__222051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222052 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222051,G__222052) : tailrecursion.hoplon.span.call(null,G__222051,G__222052));
})();
var G__222029 = "]\n  (";
var G__222030 = (function (){var G__222053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222054 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222053,G__222054) : tailrecursion.hoplon.span.call(null,G__222053,G__222054));
})();
var G__222031 = "(";
var G__222032 = (function (){var G__222055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222056 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222055,G__222056) : tailrecursion.hoplon.span.call(null,G__222055,G__222056));
})();
var G__222033 = " (";
var G__222034 = (function (){var G__222057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222058 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222057,G__222058) : tailrecursion.hoplon.span.call(null,G__222057,G__222058));
})();
var G__222035 = "(";
var G__222036 = (function (){var G__222059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222060 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222059,G__222060) : tailrecursion.hoplon.span.call(null,G__222059,G__222060));
})();
var G__222037 = (function (){var G__222061 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222062 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222061,G__222062) : tailrecursion.hoplon.span.call(null,G__222061,G__222062));
})();
var G__222038 = " ";
var G__222039 = (function (){var G__222063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222064 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222063,G__222064) : tailrecursion.hoplon.span.call(null,G__222063,G__222064));
})();
var G__222040 = ") ";
var G__222041 = (function (){var G__222065 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222066 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222065,G__222066) : tailrecursion.hoplon.span.call(null,G__222065,G__222066));
})();
var G__222042 = ")) ";
var G__222043 = (function (){var G__222067 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__222068 = "0.1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222067,G__222068) : tailrecursion.hoplon.span.call(null,G__222067,G__222068));
})();
var G__222044 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24(G__222021,G__222022,G__222023,G__222024,G__222025,G__222026,G__222027,G__222028,G__222029,G__222030,G__222031,G__222032,G__222033,G__222034,G__222035,G__222036,G__222037,G__222038,G__222039,G__222040,G__222041,G__222042,G__222043,G__222044) : tailrecursion.hoplon.pre.call(null,G__222021,G__222022,G__222023,G__222024,G__222025,G__222026,G__222027,G__222028,G__222029,G__222030,G__222031,G__222032,G__222033,G__222034,G__222035,G__222036,G__222037,G__222038,G__222039,G__222040,G__222041,G__222042,G__222043,G__222044));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__222019,G__222020) : tailrecursion.hoplon.div.call(null,G__222019,G__222020));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__222018) : tailrecursion.hoplon.div.call(null,G__222018));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_221955;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_221954;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_221953;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_221952;
}})()], 0))], 0)),"",book.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_222069 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222070 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_222071 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222072 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__222073 = cljs.core.PersistentArrayMap.EMPTY;
var G__222074 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Newton",(function (){var G__222075 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__222076 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222075,G__222076) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222075,G__222076));
})(),"s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222073,G__222074) : tailrecursion.hoplon.markdown.para_node.call(null,G__222073,G__222074));
})(),(function (){var G__222077 = cljs.core.PersistentArrayMap.EMPTY;
var G__222078 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\frac{x/y^2 +2y}{3} $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222077,G__222078) : tailrecursion.hoplon.markdown.para_node.call(null,G__222077,G__222078));
})(),(function (){var G__222079 = cljs.core.PersistentArrayMap.EMPTY;
var G__222080 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"#!/sicp/ch/1/sect/3/sub/4",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.3.4"], null)], 0))," we will see how to implement Newton",(function (){var G__222081 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__222082 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222081,G__222082) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222081,G__222082));
})(),"s method in general as an abstraction of these square-root and cube-root procedures.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222079,G__222080) : tailrecursion.hoplon.markdown.para_node.call(null,G__222079,G__222080));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222072;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222071;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222070;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222069;
}})(),"",book.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_222083 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222084 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_222085 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222086 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__222144 = (function (){var G__222145 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__222146 = (function (){var G__222147 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__222148 = "(";
var G__222149 = (function (){var G__222174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222175 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222174,G__222175) : tailrecursion.hoplon.span.call(null,G__222174,G__222175));
})();
var G__222150 = (function (){var G__222176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222177 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222176,G__222177) : tailrecursion.hoplon.span.call(null,G__222176,G__222177));
})();
var G__222151 = " [";
var G__222152 = (function (){var G__222178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222179 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222178,G__222179) : tailrecursion.hoplon.span.call(null,G__222178,G__222179));
})();
var G__222153 = " ";
var G__222154 = (function (){var G__222180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222181 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222180,G__222181) : tailrecursion.hoplon.span.call(null,G__222180,G__222181));
})();
var G__222155 = "]\n  (";
var G__222156 = (function (){var G__222182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222183 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222182,G__222183) : tailrecursion.hoplon.span.call(null,G__222182,G__222183));
})();
var G__222157 = "(";
var G__222158 = (function (){var G__222184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222185 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222184,G__222185) : tailrecursion.hoplon.span.call(null,G__222184,G__222185));
})();
var G__222159 = "(";
var G__222160 = (function (){var G__222186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222187 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222186,G__222187) : tailrecursion.hoplon.span.call(null,G__222186,G__222187));
})();
var G__222161 = (function (){var G__222188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222189 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222188,G__222189) : tailrecursion.hoplon.span.call(null,G__222188,G__222189));
})();
var G__222162 = " (";
var G__222163 = (function (){var G__222190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222191 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222190,G__222191) : tailrecursion.hoplon.span.call(null,G__222190,G__222191));
})();
var G__222164 = " ";
var G__222165 = (function (){var G__222192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222193 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222192,G__222193) : tailrecursion.hoplon.span.call(null,G__222192,G__222193));
})();
var G__222166 = ")) (";
var G__222167 = (function (){var G__222194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222195 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222194,G__222195) : tailrecursion.hoplon.span.call(null,G__222194,G__222195));
})();
var G__222168 = (function (){var G__222196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__222197 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222196,G__222197) : tailrecursion.hoplon.span.call(null,G__222196,G__222197));
})();
var G__222169 = " ";
var G__222170 = (function (){var G__222198 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222199 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222198,G__222199) : tailrecursion.hoplon.span.call(null,G__222198,G__222199));
})();
var G__222171 = ")) ";
var G__222172 = (function (){var G__222200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__222201 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222200,G__222201) : tailrecursion.hoplon.span.call(null,G__222200,G__222201));
})();
var G__222173 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__222147,G__222148,G__222149,G__222150,G__222151,G__222152,G__222153,G__222154,G__222155,G__222156,G__222157,G__222158,G__222159,G__222160,G__222161,G__222162,G__222163,G__222164,G__222165,G__222166,G__222167,G__222168,G__222169,G__222170,G__222171,G__222172,G__222173) : tailrecursion.hoplon.pre.call(null,G__222147,G__222148,G__222149,G__222150,G__222151,G__222152,G__222153,G__222154,G__222155,G__222156,G__222157,G__222158,G__222159,G__222160,G__222161,G__222162,G__222163,G__222164,G__222165,G__222166,G__222167,G__222168,G__222169,G__222170,G__222171,G__222172,G__222173));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__222145,G__222146) : tailrecursion.hoplon.div.call(null,G__222145,G__222146));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__222144) : tailrecursion.hoplon.div.call(null,G__222144));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222086;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222085;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222084;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222083;
}})()], 0))], 0))], 0));
var G__216596 = "";
var G__216597 = book.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Procedures as Black-Box Abstractions"], null),(function (){var _STAR_references_STAR_222202 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222203 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_222204 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222205 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__222206 = cljs.core.PersistentArrayMap.EMPTY;
var G__222207 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__222208 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Sqrt"], null);
var G__222209 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222208,G__222209) : tailrecursion.hoplon.markdown.code_node.call(null,G__222208,G__222209));
})()," is our first example of a process defined by a set of mutually defined procedures. Notice that the definition of ",(function (){var G__222210 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__222211 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222210,G__222211) : tailrecursion.hoplon.markdown.code_node.call(null,G__222210,G__222211));
})()," is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0)),"; that is, the procedure is defined in terms of itself. The idea of being able to define a procedure in terms of itself may be disturbing; it may seem unclear how such a ",(function (){var G__222212 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__222213 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["circular"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__222212,G__222213) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__222212,G__222213));
})()," definition could make sense at all, much less specify a well-defined process to be carried out by a computer. This will be addressed more carefully in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$url,"\"#/sicp/ch/1/sect/2/\"",cljs.core.cst$kw$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.2"], null)], 0)),". But first let",(function (){var G__222214 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__222215 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222214,G__222215) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222214,G__222215));
})(),"s consider some other important points illustrated by the ",(function (){var G__222216 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__222217 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222216,G__222217) : tailrecursion.hoplon.markdown.code_node.call(null,G__222216,G__222217));
})()," example."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222206,G__222207) : tailrecursion.hoplon.markdown.para_node.call(null,G__222206,G__222207));
})(),(function (){var G__222218 = cljs.core.PersistentArrayMap.EMPTY;
var G__222219 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that the problem of computing square roots breaks up naturally into a number of subproblems: how to tell whether a guess is good enough, how to improve a guess, and so on. Each of these tasks is accomplished by a separate procedure. The entire ",(function (){var G__222220 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__222221 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222220,G__222221) : tailrecursion.hoplon.markdown.code_node.call(null,G__222220,G__222221));
})()," program can be viewed as a cluster of procedures (shown in figure 1.2) that mirrors the decomposition of the problem into subproblems."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222218,G__222219) : tailrecursion.hoplon.markdown.para_node.call(null,G__222218,G__222219));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222205;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222204;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222203;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222202;
}})(),book.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$footer,"Procedural decomposition of the sqrt program."], null)], 0)),"",(function (){var _STAR_references_STAR_222222 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222223 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_222224 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222225 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__222226 = cljs.core.PersistentArrayMap.EMPTY;
var G__222227 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The importance of this decomposition strategy is not simply that one is dividing the program into parts. After all, we could take any large program and divide it into parts ",(function (){var G__222228 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__222229 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222228,G__222229) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222228,G__222229));
})()," the first ten lines, the next ten lines, the next ten lines, and so on. Rather, it is crucial that each procedure accomplishes an identifiable task that can be used as a module in defining other procedures. For example, when we define the ",(function (){var G__222230 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222231 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222230,G__222231) : tailrecursion.hoplon.markdown.code_node.call(null,G__222230,G__222231));
})()," procedure in terms of ",(function (){var G__222232 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222233 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222232,G__222233) : tailrecursion.hoplon.markdown.code_node.call(null,G__222232,G__222233));
})(),", we are able to regard the ",(function (){var G__222234 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222235 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222234,G__222235) : tailrecursion.hoplon.markdown.code_node.call(null,G__222234,G__222235));
})()," procedure as a ",(function (){var G__222236 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__222237 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["black box."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__222236,G__222237) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__222236,G__222237));
})()," We are not at that moment concerned with ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how"], null)], 0))," the procedure computes its result, only with the fact that it computes the square. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as the ",(function (){var G__222238 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222239 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222238,G__222239) : tailrecursion.hoplon.markdown.code_node.call(null,G__222238,G__222239));
})()," procedure is concerned, ",(function (){var G__222240 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222241 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222240,G__222241) : tailrecursion.hoplon.markdown.code_node.call(null,G__222240,G__222241));
})()," is not quite a procedure but rather an abstraction of a procedure, a so-called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedural abstraction"], null)], 0)),". At this level of abstraction, any procedure that computes the square is equally good."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222226,G__222227) : tailrecursion.hoplon.markdown.para_node.call(null,G__222226,G__222227));
})(),(function (){var G__222242 = cljs.core.PersistentArrayMap.EMPTY;
var G__222243 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus, considering only the values they return, the following two procedures for squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.",(function (){var G__222244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__222245 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is not even clear which of these procedures is a more efficient implementation. This depends upon the hardware available. There are machines for which the ",(function (){var G__222246 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double], null);
var G__222247 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["obvious"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__222246,G__222247) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__222246,G__222247));
})()," implementation is the less efficient one. Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__222244,G__222245) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__222244,G__222245));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222242,G__222243) : tailrecursion.hoplon.markdown.para_node.call(null,G__222242,G__222243));
})(),(function (){var G__222274 = (function (){var G__222275 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__222276 = (function (){var G__222277 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__222278 = "(";
var G__222279 = (function (){var G__222289 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222290 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222289,G__222290) : tailrecursion.hoplon.span.call(null,G__222289,G__222290));
})();
var G__222280 = (function (){var G__222291 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222292 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222291,G__222292) : tailrecursion.hoplon.span.call(null,G__222291,G__222292));
})();
var G__222281 = " [";
var G__222282 = (function (){var G__222293 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222294 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222293,G__222294) : tailrecursion.hoplon.span.call(null,G__222293,G__222294));
})();
var G__222283 = "] (";
var G__222284 = (function (){var G__222295 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222296 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222295,G__222296) : tailrecursion.hoplon.span.call(null,G__222295,G__222296));
})();
var G__222285 = (function (){var G__222297 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222298 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222297,G__222298) : tailrecursion.hoplon.span.call(null,G__222297,G__222298));
})();
var G__222286 = " ";
var G__222287 = (function (){var G__222299 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222300 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222299,G__222300) : tailrecursion.hoplon.span.call(null,G__222299,G__222300));
})();
var G__222288 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__222277,G__222278,G__222279,G__222280,G__222281,G__222282,G__222283,G__222284,G__222285,G__222286,G__222287,G__222288) : tailrecursion.hoplon.pre.call(null,G__222277,G__222278,G__222279,G__222280,G__222281,G__222282,G__222283,G__222284,G__222285,G__222286,G__222287,G__222288));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__222275,G__222276) : tailrecursion.hoplon.div.call(null,G__222275,G__222276));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__222274) : tailrecursion.hoplon.div.call(null,G__222274));
})(),(function (){var G__222301 = (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1("(defn square [x] \n  (exp (double (log x))))\n") : tailrecursion.hoplon.code.call(null,"(defn square [x] \n  (exp (double (log x))))\n"));
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__222301) : tailrecursion.hoplon.pre.call(null,G__222301));
})(),(function (){var G__222328 = (function (){var G__222329 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__222330 = (function (){var G__222331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__222332 = "(";
var G__222333 = (function (){var G__222343 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222344 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222343,G__222344) : tailrecursion.hoplon.span.call(null,G__222343,G__222344));
})();
var G__222334 = (function (){var G__222345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222346 = "double ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222345,G__222346) : tailrecursion.hoplon.span.call(null,G__222345,G__222346));
})();
var G__222335 = "[";
var G__222336 = (function (){var G__222347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222348 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222347,G__222348) : tailrecursion.hoplon.span.call(null,G__222347,G__222348));
})();
var G__222337 = "] (";
var G__222338 = (function (){var G__222349 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222350 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222349,G__222350) : tailrecursion.hoplon.span.call(null,G__222349,G__222350));
})();
var G__222339 = (function (){var G__222351 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222352 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222351,G__222352) : tailrecursion.hoplon.span.call(null,G__222351,G__222352));
})();
var G__222340 = " ";
var G__222341 = (function (){var G__222353 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222354 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222353,G__222354) : tailrecursion.hoplon.span.call(null,G__222353,G__222354));
})();
var G__222342 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__222331,G__222332,G__222333,G__222334,G__222335,G__222336,G__222337,G__222338,G__222339,G__222340,G__222341,G__222342) : tailrecursion.hoplon.pre.call(null,G__222331,G__222332,G__222333,G__222334,G__222335,G__222336,G__222337,G__222338,G__222339,G__222340,G__222341,G__222342));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__222329,G__222330) : tailrecursion.hoplon.div.call(null,G__222329,G__222330));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__222328) : tailrecursion.hoplon.div.call(null,G__222328));
})(),(function (){var G__222355 = cljs.core.PersistentArrayMap.EMPTY;
var G__222356 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So a procedure definition should be able to suppress detail. The users of the procedure may not have written the procedure themselves, but may have obtained it from another programmer as a black box. A user should not need to know how the procedure is implemented in order to use it."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222355,G__222356) : tailrecursion.hoplon.markdown.para_node.call(null,G__222355,G__222356));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222225;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222224;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222223;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222222;
}})()], 0));
var G__216598 = "";
var G__216599 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Local Names"], null),(function (){var _STAR_references_STAR_222357 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222358 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_222359 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222360 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__222361 = cljs.core.PersistentArrayMap.EMPTY;
var G__222362 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One detail of a procedure",(function (){var G__222363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__222364 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222363,G__222364) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222363,G__222364));
})(),"s implementation that should not matter to the user of the procedure is the implementer",(function (){var G__222365 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__222366 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222365,G__222366) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222365,G__222366));
})(),"s choice of names for the procedure",(function (){var G__222367 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__222368 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222367,G__222368) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222367,G__222368));
})(),"s formal parameters. Thus, the following procedures should not be distinguishable:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222361,G__222362) : tailrecursion.hoplon.markdown.para_node.call(null,G__222361,G__222362));
})(),(function (){var G__222395 = (function (){var G__222396 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__222397 = (function (){var G__222398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__222399 = "(";
var G__222400 = (function (){var G__222410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222411 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222410,G__222411) : tailrecursion.hoplon.span.call(null,G__222410,G__222411));
})();
var G__222401 = (function (){var G__222412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222413 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222412,G__222413) : tailrecursion.hoplon.span.call(null,G__222412,G__222413));
})();
var G__222402 = " [";
var G__222403 = (function (){var G__222414 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222415 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222414,G__222415) : tailrecursion.hoplon.span.call(null,G__222414,G__222415));
})();
var G__222404 = "] (";
var G__222405 = (function (){var G__222416 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222417 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222416,G__222417) : tailrecursion.hoplon.span.call(null,G__222416,G__222417));
})();
var G__222406 = (function (){var G__222418 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222419 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222418,G__222419) : tailrecursion.hoplon.span.call(null,G__222418,G__222419));
})();
var G__222407 = " ";
var G__222408 = (function (){var G__222420 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222421 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222420,G__222421) : tailrecursion.hoplon.span.call(null,G__222420,G__222421));
})();
var G__222409 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__222398,G__222399,G__222400,G__222401,G__222402,G__222403,G__222404,G__222405,G__222406,G__222407,G__222408,G__222409) : tailrecursion.hoplon.pre.call(null,G__222398,G__222399,G__222400,G__222401,G__222402,G__222403,G__222404,G__222405,G__222406,G__222407,G__222408,G__222409));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__222396,G__222397) : tailrecursion.hoplon.div.call(null,G__222396,G__222397));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__222395) : tailrecursion.hoplon.div.call(null,G__222395));
})(),(function (){var G__222448 = (function (){var G__222449 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__222450 = (function (){var G__222451 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__222452 = "(";
var G__222453 = (function (){var G__222463 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222464 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222463,G__222464) : tailrecursion.hoplon.span.call(null,G__222463,G__222464));
})();
var G__222454 = (function (){var G__222465 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222466 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222465,G__222466) : tailrecursion.hoplon.span.call(null,G__222465,G__222466));
})();
var G__222455 = " [";
var G__222456 = (function (){var G__222467 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222468 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222467,G__222468) : tailrecursion.hoplon.span.call(null,G__222467,G__222468));
})();
var G__222457 = "] (";
var G__222458 = (function (){var G__222469 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222470 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222469,G__222470) : tailrecursion.hoplon.span.call(null,G__222469,G__222470));
})();
var G__222459 = (function (){var G__222471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222472 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222471,G__222472) : tailrecursion.hoplon.span.call(null,G__222471,G__222472));
})();
var G__222460 = " ";
var G__222461 = (function (){var G__222473 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222474 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222473,G__222474) : tailrecursion.hoplon.span.call(null,G__222473,G__222474));
})();
var G__222462 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__222451,G__222452,G__222453,G__222454,G__222455,G__222456,G__222457,G__222458,G__222459,G__222460,G__222461,G__222462) : tailrecursion.hoplon.pre.call(null,G__222451,G__222452,G__222453,G__222454,G__222455,G__222456,G__222457,G__222458,G__222459,G__222460,G__222461,G__222462));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__222449,G__222450) : tailrecursion.hoplon.div.call(null,G__222449,G__222450));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__222448) : tailrecursion.hoplon.div.call(null,G__222448));
})(),(function (){var G__222475 = cljs.core.PersistentArrayMap.EMPTY;
var G__222476 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This principle ",(function (){var G__222477 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__222478 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222477,G__222478) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222477,G__222478));
})()," that the meaning of a procedure should be independent of the parameter names used by its author ",(function (){var G__222479 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$endash], null);
var G__222480 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222479,G__222480) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222479,G__222480));
})()," seems on the surface to be self-evident, but its consequences are profound. The simplest consequence is that the parameter names of a procedure must be local to the body of the procedure. For example, we used ",(function (){var G__222481 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222482 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222481,G__222482) : tailrecursion.hoplon.markdown.code_node.call(null,G__222481,G__222482));
})()," in the definition of ",(function (){var G__222483 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222484 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222483,G__222484) : tailrecursion.hoplon.markdown.code_node.call(null,G__222483,G__222484));
})()," in our square-root procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222475,G__222476) : tailrecursion.hoplon.markdown.para_node.call(null,G__222475,G__222476));
})(),(function (){var G__222532 = (function (){var G__222533 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__222534 = (function (){var G__222535 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__222536 = "(";
var G__222537 = (function (){var G__222558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222559 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222558,G__222559) : tailrecursion.hoplon.span.call(null,G__222558,G__222559));
})();
var G__222538 = (function (){var G__222560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222561 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222560,G__222561) : tailrecursion.hoplon.span.call(null,G__222560,G__222561));
})();
var G__222539 = " [";
var G__222540 = (function (){var G__222562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222563 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222562,G__222563) : tailrecursion.hoplon.span.call(null,G__222562,G__222563));
})();
var G__222541 = " ";
var G__222542 = (function (){var G__222564 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222565 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222564,G__222565) : tailrecursion.hoplon.span.call(null,G__222564,G__222565));
})();
var G__222543 = "]\n  (";
var G__222544 = (function (){var G__222566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222567 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222566,G__222567) : tailrecursion.hoplon.span.call(null,G__222566,G__222567));
})();
var G__222545 = "(";
var G__222546 = (function (){var G__222568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222569 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222568,G__222569) : tailrecursion.hoplon.span.call(null,G__222568,G__222569));
})();
var G__222547 = " (";
var G__222548 = (function (){var G__222570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222571 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222570,G__222571) : tailrecursion.hoplon.span.call(null,G__222570,G__222571));
})();
var G__222549 = "(";
var G__222550 = (function (){var G__222572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222573 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222572,G__222573) : tailrecursion.hoplon.span.call(null,G__222572,G__222573));
})();
var G__222551 = " ";
var G__222552 = (function (){var G__222574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222575 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222574,G__222575) : tailrecursion.hoplon.span.call(null,G__222574,G__222575));
})();
var G__222553 = ") ";
var G__222554 = (function (){var G__222576 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222577 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222576,G__222577) : tailrecursion.hoplon.span.call(null,G__222576,G__222577));
})();
var G__222555 = ")) ";
var G__222556 = (function (){var G__222578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__222579 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222578,G__222579) : tailrecursion.hoplon.span.call(null,G__222578,G__222579));
})();
var G__222557 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__222535,G__222536,G__222537,G__222538,G__222539,G__222540,G__222541,G__222542,G__222543,G__222544,G__222545,G__222546,G__222547,G__222548,G__222549,G__222550,G__222551,G__222552,G__222553,G__222554,G__222555,G__222556,G__222557) : tailrecursion.hoplon.pre.call(null,G__222535,G__222536,G__222537,G__222538,G__222539,G__222540,G__222541,G__222542,G__222543,G__222544,G__222545,G__222546,G__222547,G__222548,G__222549,G__222550,G__222551,G__222552,G__222553,G__222554,G__222555,G__222556,G__222557));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__222533,G__222534) : tailrecursion.hoplon.div.call(null,G__222533,G__222534));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__222532) : tailrecursion.hoplon.div.call(null,G__222532));
})(),(function (){var G__222580 = cljs.core.PersistentArrayMap.EMPTY;
var G__222581 = cljs.core.PersistentVector.fromArray(["The intention of the author of ",(function (){var G__222582 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222583 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222582,G__222583) : tailrecursion.hoplon.markdown.code_node.call(null,G__222582,G__222583));
})()," is to determine if the square of the first argument is within a given tolerance of the second argument. We see that the author of ",(function (){var G__222584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222585 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222584,G__222585) : tailrecursion.hoplon.markdown.code_node.call(null,G__222584,G__222585));
})()," used the name ",(function (){var G__222586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__222587 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222586,G__222587) : tailrecursion.hoplon.markdown.code_node.call(null,G__222586,G__222587));
})()," to refer to the first argument and ",(function (){var G__222588 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222589 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222588,G__222589) : tailrecursion.hoplon.markdown.code_node.call(null,G__222588,G__222589));
})()," to refer to the second argument. The argument of ",(function (){var G__222590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222591 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222590,G__222591) : tailrecursion.hoplon.markdown.code_node.call(null,G__222590,G__222591));
})()," is ",(function (){var G__222592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__222593 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222592,G__222593) : tailrecursion.hoplon.markdown.code_node.call(null,G__222592,G__222593));
})(),". If the author of ",(function (){var G__222594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222595 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222594,G__222595) : tailrecursion.hoplon.markdown.code_node.call(null,G__222594,G__222595));
})()," used ",(function (){var G__222596 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222597 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222596,G__222597) : tailrecursion.hoplon.markdown.code_node.call(null,G__222596,G__222597));
})()," (as above) to refer to that argument, we see that the ",(function (){var G__222598 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222599 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222598,G__222599) : tailrecursion.hoplon.markdown.code_node.call(null,G__222598,G__222599));
})()," in ",(function (){var G__222600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222601 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222600,G__222601) : tailrecursion.hoplon.markdown.code_node.call(null,G__222600,G__222601));
})()," must be a different ",(function (){var G__222602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222603 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222602,G__222603) : tailrecursion.hoplon.markdown.code_node.call(null,G__222602,G__222603));
})()," than the one in ",(function (){var G__222604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222605 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222604,G__222605) : tailrecursion.hoplon.markdown.code_node.call(null,G__222604,G__222605));
})(),". Running the procedure ",(function (){var G__222606 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222607 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222606,G__222607) : tailrecursion.hoplon.markdown.code_node.call(null,G__222606,G__222607));
})()," must not affect the value of ",(function (){var G__222608 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222609 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222608,G__222609) : tailrecursion.hoplon.markdown.code_node.call(null,G__222608,G__222609));
})()," that is used by ",(function (){var G__222610 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222611 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222610,G__222611) : tailrecursion.hoplon.markdown.code_node.call(null,G__222610,G__222611));
})(),", because that value of ",(function (){var G__222612 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222613 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222612,G__222613) : tailrecursion.hoplon.markdown.code_node.call(null,G__222612,G__222613));
})()," may be needed by ",(function (){var G__222614 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222615 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222614,G__222615) : tailrecursion.hoplon.markdown.code_node.call(null,G__222614,G__222615));
})()," after ",(function (){var G__222616 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222617 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222616,G__222617) : tailrecursion.hoplon.markdown.code_node.call(null,G__222616,G__222617));
})()," is done computing."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222580,G__222581) : tailrecursion.hoplon.markdown.para_node.call(null,G__222580,G__222581));
})(),(function (){var G__222618 = cljs.core.PersistentArrayMap.EMPTY;
var G__222619 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If the parameters were not local to the bodies of their respective procedures, then the parameter ",(function (){var G__222620 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222621 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222620,G__222621) : tailrecursion.hoplon.markdown.code_node.call(null,G__222620,G__222621));
})()," in ",(function (){var G__222622 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222623 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222622,G__222623) : tailrecursion.hoplon.markdown.code_node.call(null,G__222622,G__222623));
})()," could be confused with the parameter ",(function (){var G__222624 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222625 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222624,G__222625) : tailrecursion.hoplon.markdown.code_node.call(null,G__222624,G__222625));
})()," in ",(function (){var G__222626 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222627 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222626,G__222627) : tailrecursion.hoplon.markdown.code_node.call(null,G__222626,G__222627));
})(),", and the behavior of ",(function (){var G__222628 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222629 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222628,G__222629) : tailrecursion.hoplon.markdown.code_node.call(null,G__222628,G__222629));
})()," would depend upon which version of ",(function (){var G__222630 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222631 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222630,G__222631) : tailrecursion.hoplon.markdown.code_node.call(null,G__222630,G__222631));
})()," we used. Thus, ",(function (){var G__222632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222633 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222632,G__222633) : tailrecursion.hoplon.markdown.code_node.call(null,G__222632,G__222633));
})()," would not be the black box we desired."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222618,G__222619) : tailrecursion.hoplon.markdown.para_node.call(null,G__222618,G__222619));
})(),(function (){var G__222634 = cljs.core.PersistentArrayMap.EMPTY;
var G__222635 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A formal parameter of a procedure has a very special role in the procedure definition, in that it doesn",(function (){var G__222636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__222637 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222636,G__222637) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222636,G__222637));
})(),"t matter what name the formal parameter has. Such a name is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["bound variable"], null)], 0)),", and we say that the procedure definition ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["binds"], null)], 0))," its formal parameters. The meaning of a procedure definition is unchanged if a bound variable is consistently renamed throughout the definition.",(function (){var G__222638 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__222639 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The concept of consistent renaming is actually subtle and difficult to define formally. Famous logicians have made embarrassing errors here."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__222638,G__222639) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__222638,G__222639));
})()," If a variable is not bound, we say that it is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["free"], null)], 0)),". The set of expressions for which a binding defines a name is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["scope"], null)], 0))," of that name. In a procedure definition, the bound variables declared as the formal parameters of the procedure have the body of the procedure as their scope."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222634,G__222635) : tailrecursion.hoplon.markdown.para_node.call(null,G__222634,G__222635));
})(),(function (){var G__222640 = cljs.core.PersistentArrayMap.EMPTY;
var G__222641 = cljs.core.PersistentVector.fromArray(["In the definition of ",(function (){var G__222642 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222643 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222642,G__222643) : tailrecursion.hoplon.markdown.code_node.call(null,G__222642,G__222643));
})()," above, ",(function (){var G__222644 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__222645 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222644,G__222645) : tailrecursion.hoplon.markdown.code_node.call(null,G__222644,G__222645));
})()," and ",(function (){var G__222646 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222647 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222646,G__222647) : tailrecursion.hoplon.markdown.code_node.call(null,G__222646,G__222647));
})()," are bound variables but ",(function (){var G__222648 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__222649 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222648,G__222649) : tailrecursion.hoplon.markdown.code_node.call(null,G__222648,G__222649));
})(),", ",(function (){var G__222650 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__222651 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222650,G__222651) : tailrecursion.hoplon.markdown.code_node.call(null,G__222650,G__222651));
})(),", ",(function (){var G__222652 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__222653 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222652,G__222653) : tailrecursion.hoplon.markdown.code_node.call(null,G__222652,G__222653));
})(),", and ",(function (){var G__222654 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222655 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222654,G__222655) : tailrecursion.hoplon.markdown.code_node.call(null,G__222654,G__222655));
})()," are free. The meaning of ",(function (){var G__222656 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222657 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222656,G__222657) : tailrecursion.hoplon.markdown.code_node.call(null,G__222656,G__222657));
})()," should be independent of the names we choose for ",(function (){var G__222658 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__222659 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222658,G__222659) : tailrecursion.hoplon.markdown.code_node.call(null,G__222658,G__222659));
})()," and ",(function (){var G__222660 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__222661 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222660,G__222661) : tailrecursion.hoplon.markdown.code_node.call(null,G__222660,G__222661));
})()," so long as they are distinct and different from ",(function (){var G__222662 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"<"], null);
var G__222663 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222662,G__222663) : tailrecursion.hoplon.markdown.code_node.call(null,G__222662,G__222663));
})(),", ",(function (){var G__222664 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"-"], null);
var G__222665 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222664,G__222665) : tailrecursion.hoplon.markdown.code_node.call(null,G__222664,G__222665));
})(),", ",(function (){var G__222666 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__222667 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222666,G__222667) : tailrecursion.hoplon.markdown.code_node.call(null,G__222666,G__222667));
})(),", and ",(function (){var G__222668 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square"], null);
var G__222669 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222668,G__222669) : tailrecursion.hoplon.markdown.code_node.call(null,G__222668,G__222669));
})(),". (If we renamed ",(function (){var G__222670 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"guess"], null);
var G__222671 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222670,G__222671) : tailrecursion.hoplon.markdown.code_node.call(null,G__222670,G__222671));
})()," to ",(function (){var G__222672 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__222673 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222672,G__222673) : tailrecursion.hoplon.markdown.code_node.call(null,G__222672,G__222673));
})()," we would have introduced a bug by ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["capturing"], null)], 0))," the variable ",(function (){var G__222674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__222675 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222674,G__222675) : tailrecursion.hoplon.markdown.code_node.call(null,G__222674,G__222675));
})(),". It would have changed from free to bound.) The meaning of ",(function (){var G__222676 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__222677 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222676,G__222677) : tailrecursion.hoplon.markdown.code_node.call(null,G__222676,G__222677));
})()," is not independent of the names of its free variables, however. It surely depends upon the fact (external to this definition) that the symbol ",(function (){var G__222678 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__222679 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222678,G__222679) : tailrecursion.hoplon.markdown.code_node.call(null,G__222678,G__222679));
})()," names a procedure for computing the absolute value of a number. ",(function (){var G__222680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"Good-enough?"], null);
var G__222681 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222680,G__222681) : tailrecursion.hoplon.markdown.code_node.call(null,G__222680,G__222681));
})()," will compute a different function if we substitute ",(function (){var G__222682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"cos"], null);
var G__222683 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222682,G__222683) : tailrecursion.hoplon.markdown.code_node.call(null,G__222682,G__222683));
})()," for ",(function (){var G__222684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"abs"], null);
var G__222685 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222684,G__222685) : tailrecursion.hoplon.markdown.code_node.call(null,G__222684,G__222685));
})()," in its definition."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222640,G__222641) : tailrecursion.hoplon.markdown.para_node.call(null,G__222640,G__222641));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222360;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222359;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222358;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222357;
}})()], 0));
var G__216600 = "";
var G__216601 = book.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$title,"Internal Definitions and Block Structures"], null),(function (){var _STAR_references_STAR_222686 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222687 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_222688 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_222689 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__222690 = cljs.core.PersistentArrayMap.EMPTY;
var G__222691 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is instructive to note that the rest of this section does not work as well in Clojure. The reason is that ",(function (){var G__222692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__222693 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222692,G__222693) : tailrecursion.hoplon.markdown.code_node.call(null,G__222692,G__222693));
})(),", ",(function (){var G__222694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__222695 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__222694,G__222695) : tailrecursion.hoplon.markdown.code_node.call(null,G__222694,G__222695));
})()," and all other defining forms define things in the global environment directly (no matter where they are called). If this does not make sense to you just yet, don",(function (){var G__222696 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__222697 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__222696,G__222697) : tailrecursion.hoplon.markdown.simple_node.call(null,G__222696,G__222697));
})(),"t worry: it should by the end of this section."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222690,G__222691) : tailrecursion.hoplon.markdown.para_node.call(null,G__222690,G__222691));
})(),(function (){var G__222698 = cljs.core.PersistentArrayMap.EMPTY;
var G__222699 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have one kind of name isolation available to us so far: The formal parameters of a procedure are local to the body of the procedure. The square-root program illustrates another way in which we would like to control the use of names. The existing program consists of separate procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__222698,G__222699) : tailrecursion.hoplon.markdown.para_node.call(null,G__222698,G__222699));
})(),(function (){var G__222859 = (function (){var G__222860 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__222861 = (function (){var G__222862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__222863 = "(";
var G__222864 = (function (){var G__222939 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222940 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222939,G__222940) : tailrecursion.hoplon.span.call(null,G__222939,G__222940));
})();
var G__222865 = (function (){var G__222941 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222942 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222941,G__222942) : tailrecursion.hoplon.span.call(null,G__222941,G__222942));
})();
var G__222866 = " [";
var G__222867 = (function (){var G__222943 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222944 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222943,G__222944) : tailrecursion.hoplon.span.call(null,G__222943,G__222944));
})();
var G__222868 = "]\n  (";
var G__222869 = (function (){var G__222945 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222946 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222945,G__222946) : tailrecursion.hoplon.span.call(null,G__222945,G__222946));
})();
var G__222870 = " ";
var G__222871 = (function (){var G__222947 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__222948 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222947,G__222948) : tailrecursion.hoplon.span.call(null,G__222947,G__222948));
})();
var G__222872 = " ";
var G__222873 = (function (){var G__222949 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222950 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222949,G__222950) : tailrecursion.hoplon.span.call(null,G__222949,G__222950));
})();
var G__222874 = "))\n(";
var G__222875 = (function (){var G__222951 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222952 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222951,G__222952) : tailrecursion.hoplon.span.call(null,G__222951,G__222952));
})();
var G__222876 = (function (){var G__222953 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222954 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222953,G__222954) : tailrecursion.hoplon.span.call(null,G__222953,G__222954));
})();
var G__222877 = " [";
var G__222878 = (function (){var G__222955 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222956 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222955,G__222956) : tailrecursion.hoplon.span.call(null,G__222955,G__222956));
})();
var G__222879 = " ";
var G__222880 = (function (){var G__222957 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222958 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222957,G__222958) : tailrecursion.hoplon.span.call(null,G__222957,G__222958));
})();
var G__222881 = "]\n  (";
var G__222882 = (function (){var G__222959 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222960 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222959,G__222960) : tailrecursion.hoplon.span.call(null,G__222959,G__222960));
})();
var G__222883 = "(";
var G__222884 = (function (){var G__222961 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222962 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222961,G__222962) : tailrecursion.hoplon.span.call(null,G__222961,G__222962));
})();
var G__222885 = " ";
var G__222886 = (function (){var G__222963 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222964 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222963,G__222964) : tailrecursion.hoplon.span.call(null,G__222963,G__222964));
})();
var G__222887 = " ";
var G__222888 = (function (){var G__222965 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222966 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222965,G__222966) : tailrecursion.hoplon.span.call(null,G__222965,G__222966));
})();
var G__222889 = ")\n      ";
var G__222890 = (function (){var G__222967 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222968 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222967,G__222968) : tailrecursion.hoplon.span.call(null,G__222967,G__222968));
})();
var G__222891 = "\n      (";
var G__222892 = (function (){var G__222969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222970 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222969,G__222970) : tailrecursion.hoplon.span.call(null,G__222969,G__222970));
})();
var G__222893 = " (";
var G__222894 = (function (){var G__222971 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222972 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222971,G__222972) : tailrecursion.hoplon.span.call(null,G__222971,G__222972));
})();
var G__222895 = " ";
var G__222896 = (function (){var G__222973 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222974 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222973,G__222974) : tailrecursion.hoplon.span.call(null,G__222973,G__222974));
})();
var G__222897 = " ";
var G__222898 = (function (){var G__222975 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222976 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222975,G__222976) : tailrecursion.hoplon.span.call(null,G__222975,G__222976));
})();
var G__222899 = ") ";
var G__222900 = (function (){var G__222977 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222978 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222977,G__222978) : tailrecursion.hoplon.span.call(null,G__222977,G__222978));
})();
var G__222901 = ")))\n(";
var G__222902 = (function (){var G__222979 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__222980 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222979,G__222980) : tailrecursion.hoplon.span.call(null,G__222979,G__222980));
})();
var G__222903 = (function (){var G__222981 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222982 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222981,G__222982) : tailrecursion.hoplon.span.call(null,G__222981,G__222982));
})();
var G__222904 = " [";
var G__222905 = (function (){var G__222983 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222984 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222983,G__222984) : tailrecursion.hoplon.span.call(null,G__222983,G__222984));
})();
var G__222906 = " ";
var G__222907 = (function (){var G__222985 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222986 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222985,G__222986) : tailrecursion.hoplon.span.call(null,G__222985,G__222986));
})();
var G__222908 = "]\n  (";
var G__222909 = (function (){var G__222987 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222988 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222987,G__222988) : tailrecursion.hoplon.span.call(null,G__222987,G__222988));
})();
var G__222910 = "(";
var G__222911 = (function (){var G__222989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222990 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222989,G__222990) : tailrecursion.hoplon.span.call(null,G__222989,G__222990));
})();
var G__222912 = " (";
var G__222913 = (function (){var G__222991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__222992 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222991,G__222992) : tailrecursion.hoplon.span.call(null,G__222991,G__222992));
})();
var G__222914 = "(";
var G__222915 = (function (){var G__222993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__222994 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222993,G__222994) : tailrecursion.hoplon.span.call(null,G__222993,G__222994));
})();
var G__222916 = " ";
var G__222917 = (function (){var G__222995 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222996 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222995,G__222996) : tailrecursion.hoplon.span.call(null,G__222995,G__222996));
})();
var G__222918 = ") ";
var G__222919 = (function (){var G__222997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__222998 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222997,G__222998) : tailrecursion.hoplon.span.call(null,G__222997,G__222998));
})();
var G__222920 = ")) ";
var G__222921 = (function (){var G__222999 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__223000 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__222999,G__223000) : tailrecursion.hoplon.span.call(null,G__222999,G__223000));
})();
var G__222922 = "))\n(";
var G__222923 = (function (){var G__223001 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223002 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223001,G__223002) : tailrecursion.hoplon.span.call(null,G__223001,G__223002));
})();
var G__222924 = (function (){var G__223003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223004 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223003,G__223004) : tailrecursion.hoplon.span.call(null,G__223003,G__223004));
})();
var G__222925 = " [";
var G__222926 = (function (){var G__223005 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223006 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223005,G__223006) : tailrecursion.hoplon.span.call(null,G__223005,G__223006));
})();
var G__222927 = " ";
var G__222928 = (function (){var G__223007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223008 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223007,G__223008) : tailrecursion.hoplon.span.call(null,G__223007,G__223008));
})();
var G__222929 = "]\n  (";
var G__222930 = (function (){var G__223009 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223010 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223009,G__223010) : tailrecursion.hoplon.span.call(null,G__223009,G__223010));
})();
var G__222931 = " ";
var G__222932 = (function (){var G__223011 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223012 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223011,G__223012) : tailrecursion.hoplon.span.call(null,G__223011,G__223012));
})();
var G__222933 = " (";
var G__222934 = (function (){var G__223013 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223014 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223013,G__223014) : tailrecursion.hoplon.span.call(null,G__223013,G__223014));
})();
var G__222935 = (function (){var G__223015 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223016 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223015,G__223016) : tailrecursion.hoplon.span.call(null,G__223015,G__223016));
})();
var G__222936 = " ";
var G__222937 = (function (){var G__223017 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223018 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223017,G__223018) : tailrecursion.hoplon.span.call(null,G__223017,G__223018));
})();
var G__222938 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77(G__222862,G__222863,G__222864,G__222865,G__222866,G__222867,G__222868,G__222869,G__222870,G__222871,G__222872,G__222873,G__222874,G__222875,G__222876,G__222877,G__222878,G__222879,G__222880,G__222881,G__222882,G__222883,G__222884,G__222885,G__222886,G__222887,G__222888,G__222889,G__222890,G__222891,G__222892,G__222893,G__222894,G__222895,G__222896,G__222897,G__222898,G__222899,G__222900,G__222901,G__222902,G__222903,G__222904,G__222905,G__222906,G__222907,G__222908,G__222909,G__222910,G__222911,G__222912,G__222913,G__222914,G__222915,G__222916,G__222917,G__222918,G__222919,G__222920,G__222921,G__222922,G__222923,G__222924,G__222925,G__222926,G__222927,G__222928,G__222929,G__222930,G__222931,G__222932,G__222933,G__222934,G__222935,G__222936,G__222937,G__222938) : tailrecursion.hoplon.pre.call(null,G__222862,G__222863,G__222864,G__222865,G__222866,G__222867,G__222868,G__222869,G__222870,G__222871,G__222872,G__222873,G__222874,G__222875,G__222876,G__222877,G__222878,G__222879,G__222880,G__222881,G__222882,G__222883,G__222884,G__222885,G__222886,G__222887,G__222888,G__222889,G__222890,G__222891,G__222892,G__222893,G__222894,G__222895,G__222896,G__222897,G__222898,G__222899,G__222900,G__222901,G__222902,G__222903,G__222904,G__222905,G__222906,G__222907,G__222908,G__222909,G__222910,G__222911,G__222912,G__222913,G__222914,G__222915,G__222916,G__222917,G__222918,G__222919,G__222920,G__222921,G__222922,G__222923,G__222924,G__222925,G__222926,G__222927,G__222928,G__222929,G__222930,G__222931,G__222932,G__222933,G__222934,G__222935,G__222936,G__222937,G__222938));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__222860,G__222861) : tailrecursion.hoplon.div.call(null,G__222860,G__222861));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__222859) : tailrecursion.hoplon.div.call(null,G__222859));
})(),(function (){var G__223019 = cljs.core.PersistentArrayMap.EMPTY;
var G__223020 = new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The problem with this program is that the only procedure that is important to users of ",(function (){var G__223021 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__223022 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223021,G__223022) : tailrecursion.hoplon.markdown.code_node.call(null,G__223021,G__223022));
})()," is ",(function (){var G__223023 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__223024 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223023,G__223024) : tailrecursion.hoplon.markdown.code_node.call(null,G__223023,G__223024));
})(),". The other procedures (",(function (){var G__223025 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__223026 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223025,G__223026) : tailrecursion.hoplon.markdown.code_node.call(null,G__223025,G__223026));
})(),", ",(function (){var G__223027 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__223028 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223027,G__223028) : tailrecursion.hoplon.markdown.code_node.call(null,G__223027,G__223028));
})(),", and ",(function (){var G__223029 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__223030 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223029,G__223030) : tailrecursion.hoplon.markdown.code_node.call(null,G__223029,G__223030));
})(),") only clutter up their minds. They may not define any other procedure called ",(function (){var G__223031 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__223032 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223031,G__223032) : tailrecursion.hoplon.markdown.code_node.call(null,G__223031,G__223032));
})()," as part of another program to work together with the square-root program, because ",(function (){var G__223033 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__223034 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223033,G__223034) : tailrecursion.hoplon.markdown.code_node.call(null,G__223033,G__223034));
})()," needs it. The problem is especially severe in the construction of large systems by many separate programmers. For example, in the construction of a large library of numerical procedures, many numerical functions are computed as successive approximations and thus might have procedures named ",(function (){var G__223035 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__223036 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223035,G__223036) : tailrecursion.hoplon.markdown.code_node.call(null,G__223035,G__223036));
})()," and ",(function (){var G__223037 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__223038 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223037,G__223038) : tailrecursion.hoplon.markdown.code_node.call(null,G__223037,G__223038));
})()," as auxiliary procedures. We would like to localize the subprocedures, hiding them inside ",(function (){var G__223039 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__223040 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223039,G__223040) : tailrecursion.hoplon.markdown.code_node.call(null,G__223039,G__223040));
})()," so that ",(function (){var G__223041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__223042 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223041,G__223042) : tailrecursion.hoplon.markdown.code_node.call(null,G__223041,G__223042));
})()," could coexist with other successive approximations, each having its own private ",(function (){var G__223043 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__223044 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223043,G__223044) : tailrecursion.hoplon.markdown.code_node.call(null,G__223043,G__223044));
})()," procedure. To make this possible, we allow a procedure to have internal definitions that are local to that procedure. For example, in the ",(function (){var G__223045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"square-root"], null);
var G__223046 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223045,G__223046) : tailrecursion.hoplon.markdown.code_node.call(null,G__223045,G__223046));
})()," problem we can write"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__223019,G__223020) : tailrecursion.hoplon.markdown.para_node.call(null,G__223019,G__223020));
})(),(function (){var G__223209 = (function (){var G__223210 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__223211 = (function (){var G__223212 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__223213 = "(";
var G__223214 = (function (){var G__223292 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223293 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223292,G__223293) : tailrecursion.hoplon.span.call(null,G__223292,G__223293));
})();
var G__223215 = "(";
var G__223216 = (function (){var G__223294 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223295 = "sqrt ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223294,G__223295) : tailrecursion.hoplon.span.call(null,G__223294,G__223295));
})();
var G__223217 = (function (){var G__223296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223297 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223296,G__223297) : tailrecursion.hoplon.span.call(null,G__223296,G__223297));
})();
var G__223218 = ")\n  (";
var G__223219 = (function (){var G__223298 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223299 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223298,G__223299) : tailrecursion.hoplon.span.call(null,G__223298,G__223299));
})();
var G__223220 = "(";
var G__223221 = (function (){var G__223300 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223301 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223300,G__223301) : tailrecursion.hoplon.span.call(null,G__223300,G__223301));
})();
var G__223222 = " ";
var G__223223 = (function (){var G__223302 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223303 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223302,G__223303) : tailrecursion.hoplon.span.call(null,G__223302,G__223303));
})();
var G__223224 = " ";
var G__223225 = (function (){var G__223304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223305 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223304,G__223305) : tailrecursion.hoplon.span.call(null,G__223304,G__223305));
})();
var G__223226 = ")\n    (";
var G__223227 = (function (){var G__223306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223307 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223306,G__223307) : tailrecursion.hoplon.span.call(null,G__223306,G__223307));
})();
var G__223228 = "(";
var G__223229 = (function (){var G__223308 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223309 = "abs ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223308,G__223309) : tailrecursion.hoplon.span.call(null,G__223308,G__223309));
})();
var G__223230 = "(";
var G__223231 = (function (){var G__223310 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223311 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223310,G__223311) : tailrecursion.hoplon.span.call(null,G__223310,G__223311));
})();
var G__223232 = "(";
var G__223233 = (function (){var G__223312 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223313 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223312,G__223313) : tailrecursion.hoplon.span.call(null,G__223312,G__223313));
})();
var G__223234 = " ";
var G__223235 = (function (){var G__223314 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223315 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223314,G__223315) : tailrecursion.hoplon.span.call(null,G__223314,G__223315));
})();
var G__223236 = ") ";
var G__223237 = (function (){var G__223316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223317 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223316,G__223317) : tailrecursion.hoplon.span.call(null,G__223316,G__223317));
})();
var G__223238 = ")) ";
var G__223239 = (function (){var G__223318 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__223319 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223318,G__223319) : tailrecursion.hoplon.span.call(null,G__223318,G__223319));
})();
var G__223240 = "))\n  (";
var G__223241 = (function (){var G__223320 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223321 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223320,G__223321) : tailrecursion.hoplon.span.call(null,G__223320,G__223321));
})();
var G__223242 = "(";
var G__223243 = (function (){var G__223322 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223323 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223322,G__223323) : tailrecursion.hoplon.span.call(null,G__223322,G__223323));
})();
var G__223244 = " ";
var G__223245 = (function (){var G__223324 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223325 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223324,G__223325) : tailrecursion.hoplon.span.call(null,G__223324,G__223325));
})();
var G__223246 = " ";
var G__223247 = (function (){var G__223326 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223327 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223326,G__223327) : tailrecursion.hoplon.span.call(null,G__223326,G__223327));
})();
var G__223248 = ")\n    (";
var G__223249 = (function (){var G__223328 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223329 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223328,G__223329) : tailrecursion.hoplon.span.call(null,G__223328,G__223329));
})();
var G__223250 = " ";
var G__223251 = (function (){var G__223330 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223331 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223330,G__223331) : tailrecursion.hoplon.span.call(null,G__223330,G__223331));
})();
var G__223252 = " (";
var G__223253 = (function (){var G__223332 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223333 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223332,G__223333) : tailrecursion.hoplon.span.call(null,G__223332,G__223333));
})();
var G__223254 = (function (){var G__223334 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223335 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223334,G__223335) : tailrecursion.hoplon.span.call(null,G__223334,G__223335));
})();
var G__223255 = " ";
var G__223256 = (function (){var G__223336 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223337 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223336,G__223337) : tailrecursion.hoplon.span.call(null,G__223336,G__223337));
})();
var G__223257 = ")))\n  (";
var G__223258 = (function (){var G__223338 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223339 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223338,G__223339) : tailrecursion.hoplon.span.call(null,G__223338,G__223339));
})();
var G__223259 = "(";
var G__223260 = (function (){var G__223340 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223341 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223340,G__223341) : tailrecursion.hoplon.span.call(null,G__223340,G__223341));
})();
var G__223261 = " ";
var G__223262 = (function (){var G__223342 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223343 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223342,G__223343) : tailrecursion.hoplon.span.call(null,G__223342,G__223343));
})();
var G__223263 = " ";
var G__223264 = (function (){var G__223344 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223345 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223344,G__223345) : tailrecursion.hoplon.span.call(null,G__223344,G__223345));
})();
var G__223265 = ")\n    (";
var G__223266 = (function (){var G__223346 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223347 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223346,G__223347) : tailrecursion.hoplon.span.call(null,G__223346,G__223347));
})();
var G__223267 = "(";
var G__223268 = (function (){var G__223348 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223349 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223348,G__223349) : tailrecursion.hoplon.span.call(null,G__223348,G__223349));
})();
var G__223269 = " ";
var G__223270 = (function (){var G__223350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223351 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223350,G__223351) : tailrecursion.hoplon.span.call(null,G__223350,G__223351));
})();
var G__223271 = " ";
var G__223272 = (function (){var G__223352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223353 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223352,G__223353) : tailrecursion.hoplon.span.call(null,G__223352,G__223353));
})();
var G__223273 = ")\n        ";
var G__223274 = (function (){var G__223354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223355 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223354,G__223355) : tailrecursion.hoplon.span.call(null,G__223354,G__223355));
})();
var G__223275 = "\n        (";
var G__223276 = (function (){var G__223356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223357 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223356,G__223357) : tailrecursion.hoplon.span.call(null,G__223356,G__223357));
})();
var G__223277 = " (";
var G__223278 = (function (){var G__223358 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223359 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223358,G__223359) : tailrecursion.hoplon.span.call(null,G__223358,G__223359));
})();
var G__223279 = " ";
var G__223280 = (function (){var G__223360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223361 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223360,G__223361) : tailrecursion.hoplon.span.call(null,G__223360,G__223361));
})();
var G__223281 = " ";
var G__223282 = (function (){var G__223362 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223363 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223362,G__223363) : tailrecursion.hoplon.span.call(null,G__223362,G__223363));
})();
var G__223283 = ") ";
var G__223284 = (function (){var G__223364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223365 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223364,G__223365) : tailrecursion.hoplon.span.call(null,G__223364,G__223365));
})();
var G__223285 = ")))\n  (";
var G__223286 = (function (){var G__223366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223367 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223366,G__223367) : tailrecursion.hoplon.span.call(null,G__223366,G__223367));
})();
var G__223287 = " ";
var G__223288 = (function (){var G__223368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__223369 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223368,G__223369) : tailrecursion.hoplon.span.call(null,G__223368,G__223369));
})();
var G__223289 = " ";
var G__223290 = (function (){var G__223370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223371 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223370,G__223371) : tailrecursion.hoplon.span.call(null,G__223370,G__223371));
})();
var G__223291 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80(G__223212,G__223213,G__223214,G__223215,G__223216,G__223217,G__223218,G__223219,G__223220,G__223221,G__223222,G__223223,G__223224,G__223225,G__223226,G__223227,G__223228,G__223229,G__223230,G__223231,G__223232,G__223233,G__223234,G__223235,G__223236,G__223237,G__223238,G__223239,G__223240,G__223241,G__223242,G__223243,G__223244,G__223245,G__223246,G__223247,G__223248,G__223249,G__223250,G__223251,G__223252,G__223253,G__223254,G__223255,G__223256,G__223257,G__223258,G__223259,G__223260,G__223261,G__223262,G__223263,G__223264,G__223265,G__223266,G__223267,G__223268,G__223269,G__223270,G__223271,G__223272,G__223273,G__223274,G__223275,G__223276,G__223277,G__223278,G__223279,G__223280,G__223281,G__223282,G__223283,G__223284,G__223285,G__223286,G__223287,G__223288,G__223289,G__223290,G__223291) : tailrecursion.hoplon.pre.call(null,G__223212,G__223213,G__223214,G__223215,G__223216,G__223217,G__223218,G__223219,G__223220,G__223221,G__223222,G__223223,G__223224,G__223225,G__223226,G__223227,G__223228,G__223229,G__223230,G__223231,G__223232,G__223233,G__223234,G__223235,G__223236,G__223237,G__223238,G__223239,G__223240,G__223241,G__223242,G__223243,G__223244,G__223245,G__223246,G__223247,G__223248,G__223249,G__223250,G__223251,G__223252,G__223253,G__223254,G__223255,G__223256,G__223257,G__223258,G__223259,G__223260,G__223261,G__223262,G__223263,G__223264,G__223265,G__223266,G__223267,G__223268,G__223269,G__223270,G__223271,G__223272,G__223273,G__223274,G__223275,G__223276,G__223277,G__223278,G__223279,G__223280,G__223281,G__223282,G__223283,G__223284,G__223285,G__223286,G__223287,G__223288,G__223289,G__223290,G__223291));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__223210,G__223211) : tailrecursion.hoplon.div.call(null,G__223210,G__223211));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__223209) : tailrecursion.hoplon.div.call(null,G__223209));
})(),(function (){var G__223372 = cljs.core.PersistentArrayMap.EMPTY;
var G__223373 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note: This approach does not solve our problem in Clojure. In Clojure, whenever ",(function (){var G__223374 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"def"], null);
var G__223375 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223374,G__223375) : tailrecursion.hoplon.markdown.code_node.call(null,G__223374,G__223375));
})()," or ",(function (){var G__223376 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__223377 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223376,G__223377) : tailrecursion.hoplon.markdown.code_node.call(null,G__223376,G__223377));
})()," are used, they add the definitions to the global environment. What that means is, every time you run the ",(function (){var G__223378 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__223379 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223378,G__223379) : tailrecursion.hoplon.markdown.code_node.call(null,G__223378,G__223379));
})()," procedure, you would end up redefining ",(function (){var G__223380 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__223381 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223380,G__223381) : tailrecursion.hoplon.markdown.code_node.call(null,G__223380,G__223381));
})()," for every program that uses it. Now, if every program that uses ",(function (){var G__223382 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__223383 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223382,G__223383) : tailrecursion.hoplon.markdown.code_node.call(null,G__223382,G__223383));
})()," redefines ",(function (){var G__223384 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__223385 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223384,G__223385) : tailrecursion.hoplon.markdown.code_node.call(null,G__223384,G__223385));
})(),", then you might not run into any problems; but either way, there is a better alternative: we could use what",(function (){var G__223386 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__223387 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__223386,G__223387) : tailrecursion.hoplon.markdown.simple_node.call(null,G__223386,G__223387));
})(),"s called a ",(function (){var G__223388 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"let"], null);
var G__223389 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223388,G__223389) : tailrecursion.hoplon.markdown.code_node.call(null,G__223388,G__223389));
})()," binding, but we",(function (){var G__223390 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__223391 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__223390,G__223391) : tailrecursion.hoplon.markdown.simple_node.call(null,G__223390,G__223391));
})(),"ll learn about those a little later."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__223372,G__223373) : tailrecursion.hoplon.markdown.para_node.call(null,G__223372,G__223373));
})(),(function (){var G__223392 = cljs.core.PersistentArrayMap.EMPTY;
var G__223393 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The thing to remember is the evaluation model. When the compiler is given a symbol, it has a set procedure for determining what this symbol means: first it looks to see if the symbol is a special form (like ",(function (){var G__223394 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"if"], null);
var G__223395 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223394,G__223395) : tailrecursion.hoplon.markdown.code_node.call(null,G__223394,G__223395));
})(),"), if it",(function (){var G__223396 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$apostrophe], null);
var G__223397 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__223396,G__223397) : tailrecursion.hoplon.markdown.simple_node.call(null,G__223396,G__223397));
})(),"s not, then it checks each successive nested local environment until it reaches the global environment. The point is, in Scheme, ",(function (){var G__223398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"define"], null);
var G__223399 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223398,G__223399) : tailrecursion.hoplon.markdown.code_node.call(null,G__223398,G__223399));
})()," only mutates the local environment, whatever that may be; the same is not true in Clojure. Defining forms mutate the global environment directly, so using ",(function (){var G__223400 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"defn"], null);
var G__223401 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223400,G__223401) : tailrecursion.hoplon.markdown.code_node.call(null,G__223400,G__223401));
})()," to change the definition of a function in one place changes it in all places."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__223392,G__223393) : tailrecursion.hoplon.markdown.para_node.call(null,G__223392,G__223393));
})(),(function (){var G__223402 = cljs.core.PersistentArrayMap.EMPTY;
var G__223403 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Luckily, Cloure has a built in pair of functions ",(function (){var G__223404 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__223405 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223404,G__223405) : tailrecursion.hoplon.markdown.code_node.call(null,G__223404,G__223405));
})()," and ",(function (){var G__223406 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__223407 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223406,G__223407) : tailrecursion.hoplon.markdown.code_node.call(null,G__223406,G__223407));
})()," that do help us a bit. We can replace the ",(function (){var G__223408 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"iter"], null);
var G__223409 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223408,G__223409) : tailrecursion.hoplon.markdown.code_node.call(null,G__223408,G__223409));
})()," definition with this ",(function (){var G__223410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__223411 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223410,G__223411) : tailrecursion.hoplon.markdown.code_node.call(null,G__223410,G__223411));
})()," ",(function (){var G__223412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__223413 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223412,G__223413) : tailrecursion.hoplon.markdown.code_node.call(null,G__223412,G__223413));
})()," business thusly (assuming ",(function (){var G__223414 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough"], null);
var G__223415 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223414,G__223415) : tailrecursion.hoplon.markdown.code_node.call(null,G__223414,G__223415));
})()," and ",(function (){var G__223416 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__223417 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223416,G__223417) : tailrecursion.hoplon.markdown.code_node.call(null,G__223416,G__223417));
})()," were already defined):"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__223402,G__223403) : tailrecursion.hoplon.markdown.para_node.call(null,G__223402,G__223403));
})(),(function (){var G__223481 = (function (){var G__223482 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__223483 = (function (){var G__223484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__223485 = "(";
var G__223486 = (function (){var G__223515 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223516 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223515,G__223516) : tailrecursion.hoplon.span.call(null,G__223515,G__223516));
})();
var G__223487 = (function (){var G__223517 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223518 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223517,G__223518) : tailrecursion.hoplon.span.call(null,G__223517,G__223518));
})();
var G__223488 = " [";
var G__223489 = (function (){var G__223519 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223520 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223519,G__223520) : tailrecursion.hoplon.span.call(null,G__223519,G__223520));
})();
var G__223490 = "]\n  (";
var G__223491 = (function (){var G__223521 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223522 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223521,G__223522) : tailrecursion.hoplon.span.call(null,G__223521,G__223522));
})();
var G__223492 = "[";
var G__223493 = (function (){var G__223523 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223524 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223523,G__223524) : tailrecursion.hoplon.span.call(null,G__223523,G__223524));
})();
var G__223494 = " ";
var G__223495 = (function (){var G__223525 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__223526 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223525,G__223526) : tailrecursion.hoplon.span.call(null,G__223525,G__223526));
})();
var G__223496 = "]\n    (";
var G__223497 = (function (){var G__223527 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223528 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223527,G__223528) : tailrecursion.hoplon.span.call(null,G__223527,G__223528));
})();
var G__223498 = "(";
var G__223499 = (function (){var G__223529 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223530 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223529,G__223530) : tailrecursion.hoplon.span.call(null,G__223529,G__223530));
})();
var G__223500 = " ";
var G__223501 = (function (){var G__223531 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223532 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223531,G__223532) : tailrecursion.hoplon.span.call(null,G__223531,G__223532));
})();
var G__223502 = " ";
var G__223503 = (function (){var G__223533 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223534 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223533,G__223534) : tailrecursion.hoplon.span.call(null,G__223533,G__223534));
})();
var G__223504 = ")\n        ";
var G__223505 = (function (){var G__223535 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223536 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223535,G__223536) : tailrecursion.hoplon.span.call(null,G__223535,G__223536));
})();
var G__223506 = "\n        (";
var G__223507 = (function (){var G__223537 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223538 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223537,G__223538) : tailrecursion.hoplon.span.call(null,G__223537,G__223538));
})();
var G__223508 = " (";
var G__223509 = (function (){var G__223539 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223540 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223539,G__223540) : tailrecursion.hoplon.span.call(null,G__223539,G__223540));
})();
var G__223510 = " ";
var G__223511 = (function (){var G__223541 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223542 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223541,G__223542) : tailrecursion.hoplon.span.call(null,G__223541,G__223542));
})();
var G__223512 = " ";
var G__223513 = (function (){var G__223543 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223544 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223543,G__223544) : tailrecursion.hoplon.span.call(null,G__223543,G__223544));
})();
var G__223514 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31(G__223484,G__223485,G__223486,G__223487,G__223488,G__223489,G__223490,G__223491,G__223492,G__223493,G__223494,G__223495,G__223496,G__223497,G__223498,G__223499,G__223500,G__223501,G__223502,G__223503,G__223504,G__223505,G__223506,G__223507,G__223508,G__223509,G__223510,G__223511,G__223512,G__223513,G__223514) : tailrecursion.hoplon.pre.call(null,G__223484,G__223485,G__223486,G__223487,G__223488,G__223489,G__223490,G__223491,G__223492,G__223493,G__223494,G__223495,G__223496,G__223497,G__223498,G__223499,G__223500,G__223501,G__223502,G__223503,G__223504,G__223505,G__223506,G__223507,G__223508,G__223509,G__223510,G__223511,G__223512,G__223513,G__223514));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__223482,G__223483) : tailrecursion.hoplon.div.call(null,G__223482,G__223483));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__223481) : tailrecursion.hoplon.div.call(null,G__223481));
})(),(function (){var G__223545 = cljs.core.PersistentArrayMap.EMPTY;
var G__223546 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The genearl format for these will be,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__223545,G__223546) : tailrecursion.hoplon.markdown.para_node.call(null,G__223545,G__223546));
})(),(function (){var G__223642 = (function (){var G__223643 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__223644 = (function (){var G__223645 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__223646 = "(";
var G__223647 = (function (){var G__223690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223691 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223690,G__223691) : tailrecursion.hoplon.span.call(null,G__223690,G__223691));
})();
var G__223648 = (function (){var G__223692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223693 = "function";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223692,G__223693) : tailrecursion.hoplon.span.call(null,G__223692,G__223693));
})();
var G__223649 = " [";
var G__223650 = (function (){var G__223694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223695 = "arguments";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223694,G__223695) : tailrecursion.hoplon.span.call(null,G__223694,G__223695));
})();
var G__223651 = "]\n  (";
var G__223652 = (function (){var G__223696 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223697 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223696,G__223697) : tailrecursion.hoplon.span.call(null,G__223696,G__223697));
})();
var G__223653 = "[";
var G__223654 = (function (){var G__223698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223699 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223698,G__223699) : tailrecursion.hoplon.span.call(null,G__223698,G__223699));
})();
var G__223655 = " ";
var G__223656 = (function (){var G__223700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223701 = "initial-value1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223700,G__223701) : tailrecursion.hoplon.span.call(null,G__223700,G__223701));
})();
var G__223657 = "\n         ";
var G__223658 = (function (){var G__223702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223703 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223702,G__223703) : tailrecursion.hoplon.span.call(null,G__223702,G__223703));
})();
var G__223659 = " ";
var G__223660 = (function (){var G__223704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223705 = "initial-value2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223704,G__223705) : tailrecursion.hoplon.span.call(null,G__223704,G__223705));
})();
var G__223661 = "\n         ";
var G__223662 = (function (){var G__223706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223707 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223706,G__223707) : tailrecursion.hoplon.span.call(null,G__223706,G__223707));
})();
var G__223663 = "\n         ";
var G__223664 = (function (){var G__223708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223709 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223708,G__223709) : tailrecursion.hoplon.span.call(null,G__223708,G__223709));
})();
var G__223665 = " ";
var G__223666 = (function (){var G__223710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223711 = "initial-valuen";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223710,G__223711) : tailrecursion.hoplon.span.call(null,G__223710,G__223711));
})();
var G__223667 = "]\n    (";
var G__223668 = (function (){var G__223712 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223713 = "<if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223712,G__223713) : tailrecursion.hoplon.span.call(null,G__223712,G__223713));
})();
var G__223669 = " ";
var G__223670 = (function (){var G__223714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223715 = "or cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223714,G__223715) : tailrecursion.hoplon.span.call(null,G__223714,G__223715));
})();
var G__223671 = (function (){var G__223716 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223717 = "can";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223716,G__223717) : tailrecursion.hoplon.span.call(null,G__223716,G__223717));
})();
var G__223672 = " ";
var G__223673 = (function (){var G__223718 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223719 = "go";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223718,G__223719) : tailrecursion.hoplon.span.call(null,G__223718,G__223719));
})();
var G__223674 = " ";
var G__223675 = (function (){var G__223720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223721 = "here>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223720,G__223721) : tailrecursion.hoplon.span.call(null,G__223720,G__223721));
})();
var G__223676 = " (";
var G__223677 = (function (){var G__223722 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223723 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223722,G__223723) : tailrecursion.hoplon.span.call(null,G__223722,G__223723));
})();
var G__223678 = " (";
var G__223679 = (function (){var G__223724 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223725 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223724,G__223725) : tailrecursion.hoplon.span.call(null,G__223724,G__223725));
})();
var G__223680 = (function (){var G__223726 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223727 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223726,G__223727) : tailrecursion.hoplon.span.call(null,G__223726,G__223727));
})();
var G__223681 = ") (";
var G__223682 = (function (){var G__223728 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223729 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223728,G__223729) : tailrecursion.hoplon.span.call(null,G__223728,G__223729));
})();
var G__223683 = (function (){var G__223730 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223731 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223730,G__223731) : tailrecursion.hoplon.span.call(null,G__223730,G__223731));
})();
var G__223684 = ")";
var G__223685 = (function (){var G__223732 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223733 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223732,G__223733) : tailrecursion.hoplon.span.call(null,G__223732,G__223733));
})();
var G__223686 = "(";
var G__223687 = (function (){var G__223734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223735 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223734,G__223735) : tailrecursion.hoplon.span.call(null,G__223734,G__223735));
})();
var G__223688 = (function (){var G__223736 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223737 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223736,G__223737) : tailrecursion.hoplon.span.call(null,G__223736,G__223737));
})();
var G__223689 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45(G__223645,G__223646,G__223647,G__223648,G__223649,G__223650,G__223651,G__223652,G__223653,G__223654,G__223655,G__223656,G__223657,G__223658,G__223659,G__223660,G__223661,G__223662,G__223663,G__223664,G__223665,G__223666,G__223667,G__223668,G__223669,G__223670,G__223671,G__223672,G__223673,G__223674,G__223675,G__223676,G__223677,G__223678,G__223679,G__223680,G__223681,G__223682,G__223683,G__223684,G__223685,G__223686,G__223687,G__223688,G__223689) : tailrecursion.hoplon.pre.call(null,G__223645,G__223646,G__223647,G__223648,G__223649,G__223650,G__223651,G__223652,G__223653,G__223654,G__223655,G__223656,G__223657,G__223658,G__223659,G__223660,G__223661,G__223662,G__223663,G__223664,G__223665,G__223666,G__223667,G__223668,G__223669,G__223670,G__223671,G__223672,G__223673,G__223674,G__223675,G__223676,G__223677,G__223678,G__223679,G__223680,G__223681,G__223682,G__223683,G__223684,G__223685,G__223686,G__223687,G__223688,G__223689));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__223643,G__223644) : tailrecursion.hoplon.div.call(null,G__223643,G__223644));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__223642) : tailrecursion.hoplon.div.call(null,G__223642));
})(),(function (){var G__223738 = cljs.core.PersistentArrayMap.EMPTY;
var G__223739 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This ",(function (){var G__223740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"[thing1 intial-value1]"], null);
var G__223741 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223740,G__223741) : tailrecursion.hoplon.markdown.code_node.call(null,G__223740,G__223741));
})()," defines ",(function (){var G__223742 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"thing1"], null);
var G__223743 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223742,G__223743) : tailrecursion.hoplon.markdown.code_node.call(null,G__223742,G__223743));
})()," to be ",(function (){var G__223744 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"value1"], null);
var G__223745 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223744,G__223745) : tailrecursion.hoplon.markdown.code_node.call(null,G__223744,G__223745));
})()," for the first iteration, then when you call ",(function (){var G__223746 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"recur"], null);
var G__223747 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223746,G__223747) : tailrecursion.hoplon.markdown.code_node.call(null,G__223746,G__223747));
})(),", it goes back to loop with the new values given (in the same order they appear in the ",(function (){var G__223748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"loop"], null);
var G__223749 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223748,G__223749) : tailrecursion.hoplon.markdown.code_node.call(null,G__223748,G__223749));
})()," bindings)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__223738,G__223739) : tailrecursion.hoplon.markdown.para_node.call(null,G__223738,G__223739));
})(),(function (){var G__223750 = cljs.core.PersistentArrayMap.EMPTY;
var G__223751 = new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such nesting of definitions, called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["block structure"], null)], 0)),", is basically the right solution to the simplest name-packaging problem. But there is a better idea lurking here. In addition to internalizing the definitions of the auxiliary procedures, we can simplify them. Since ",(function (){var G__223752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__223753 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223752,G__223753) : tailrecursion.hoplon.markdown.code_node.call(null,G__223752,G__223753));
})()," is bound in the definition of ",(function (){var G__223754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__223755 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223754,G__223755) : tailrecursion.hoplon.markdown.code_node.call(null,G__223754,G__223755));
})(),", the procedures ",(function (){var G__223756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"good-enough?"], null);
var G__223757 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223756,G__223757) : tailrecursion.hoplon.markdown.code_node.call(null,G__223756,G__223757));
})(),", ",(function (){var G__223758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"improve"], null);
var G__223759 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223758,G__223759) : tailrecursion.hoplon.markdown.code_node.call(null,G__223758,G__223759));
})(),", and ",(function (){var G__223760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt-iter"], null);
var G__223761 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223760,G__223761) : tailrecursion.hoplon.markdown.code_node.call(null,G__223760,G__223761));
})(),", which are defined internally to ",(function (){var G__223762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__223763 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223762,G__223763) : tailrecursion.hoplon.markdown.code_node.call(null,G__223762,G__223763));
})(),", are in the scope of ",(function (){var G__223764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__223765 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223764,G__223765) : tailrecursion.hoplon.markdown.code_node.call(null,G__223764,G__223765));
})(),". Thus, it is not necessary to pass ",(function (){var G__223766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__223767 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223766,G__223767) : tailrecursion.hoplon.markdown.code_node.call(null,G__223766,G__223767));
})()," explicitly to each of these procedures. Instead, we allow ",(function (){var G__223768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__223769 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223768,G__223769) : tailrecursion.hoplon.markdown.code_node.call(null,G__223768,G__223769));
})()," to be a free variable in the internal definitions, as shown below. Then ",(function (){var G__223770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"x"], null);
var G__223771 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223770,G__223771) : tailrecursion.hoplon.markdown.code_node.call(null,G__223770,G__223771));
})()," gets its value from the argument with which the enclosing procedure ",(function (){var G__223772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$text,"sqrt"], null);
var G__223773 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__223772,G__223773) : tailrecursion.hoplon.markdown.code_node.call(null,G__223772,G__223773));
})()," is called. This discipline is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$chars,"*",cljs.core.cst$kw$closed,true,cljs.core.cst$kw$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["lexical scoping"], null)], 0)),".",(function (){var G__223774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__223775 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lexical scoping dictates that free variables in a procedure are taken to refer to bindings made by enclosing procedure definitions; that is, they are looked up in the environment in which the procedure was defined. We will see how this works in detail in chapter 3 when we study environments and the detailed behavior of the interpreter."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__223774,G__223775) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__223774,G__223775));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__223750,G__223751) : tailrecursion.hoplon.markdown.para_node.call(null,G__223750,G__223751));
})(),(function (){var G__223776 = cljs.core.PersistentArrayMap.EMPTY;
var G__223777 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__223778 = cljs.core.PersistentArrayMap.EMPTY;
var G__223779 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This would still work in Clojure, if one were so inclined, it would just define all of these functions globally (as is explained above)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__223778,G__223779) : tailrecursion.hoplon.markdown.para_node.call(null,G__223778,G__223779));
})()], null);
return (tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2(G__223776,G__223777) : tailrecursion.hoplon.markdown.block_quote_node.call(null,G__223776,G__223777));
})(),(function (){var G__223911 = (function (){var G__223912 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$class,"highlight",cljs.core.cst$kw$style,"background: #f8f8f8"], null);
var G__223913 = (function (){var G__223914 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"line-height: 125%"], null);
var G__223915 = "(";
var G__223916 = (function (){var G__223977 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223978 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223977,G__223978) : tailrecursion.hoplon.span.call(null,G__223977,G__223978));
})();
var G__223917 = (function (){var G__223979 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223980 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223979,G__223980) : tailrecursion.hoplon.span.call(null,G__223979,G__223980));
})();
var G__223918 = " [";
var G__223919 = (function (){var G__223981 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223982 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223981,G__223982) : tailrecursion.hoplon.span.call(null,G__223981,G__223982));
})();
var G__223920 = "]\n  (";
var G__223921 = (function (){var G__223983 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__223984 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223983,G__223984) : tailrecursion.hoplon.span.call(null,G__223983,G__223984));
})();
var G__223922 = (function (){var G__223985 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223986 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223985,G__223986) : tailrecursion.hoplon.span.call(null,G__223985,G__223986));
})();
var G__223923 = " [";
var G__223924 = (function (){var G__223987 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223988 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223987,G__223988) : tailrecursion.hoplon.span.call(null,G__223987,G__223988));
})();
var G__223925 = "]\n    (";
var G__223926 = (function (){var G__223989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223990 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223989,G__223990) : tailrecursion.hoplon.span.call(null,G__223989,G__223990));
})();
var G__223927 = "(";
var G__223928 = (function (){var G__223991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223992 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223991,G__223992) : tailrecursion.hoplon.span.call(null,G__223991,G__223992));
})();
var G__223929 = " (";
var G__223930 = (function (){var G__223993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__223994 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223993,G__223994) : tailrecursion.hoplon.span.call(null,G__223993,G__223994));
})();
var G__223931 = "(";
var G__223932 = (function (){var G__223995 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__223996 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223995,G__223996) : tailrecursion.hoplon.span.call(null,G__223995,G__223996));
})();
var G__223933 = " ";
var G__223934 = (function (){var G__223997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__223998 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223997,G__223998) : tailrecursion.hoplon.span.call(null,G__223997,G__223998));
})();
var G__223935 = ") ";
var G__223936 = (function (){var G__223999 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224000 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__223999,G__224000) : tailrecursion.hoplon.span.call(null,G__223999,G__224000));
})();
var G__223937 = ")) ";
var G__223938 = (function (){var G__224001 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__224002 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224001,G__224002) : tailrecursion.hoplon.span.call(null,G__224001,G__224002));
})();
var G__223939 = "))\n  (";
var G__223940 = (function (){var G__224003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__224004 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224003,G__224004) : tailrecursion.hoplon.span.call(null,G__224003,G__224004));
})();
var G__223941 = (function (){var G__224005 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224006 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224005,G__224006) : tailrecursion.hoplon.span.call(null,G__224005,G__224006));
})();
var G__223942 = " [";
var G__223943 = (function (){var G__224007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224008 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224007,G__224008) : tailrecursion.hoplon.span.call(null,G__224007,G__224008));
})();
var G__223944 = "]\n    (";
var G__223945 = (function (){var G__224009 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__224010 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224009,G__224010) : tailrecursion.hoplon.span.call(null,G__224009,G__224010));
})();
var G__223946 = " ";
var G__223947 = (function (){var G__224011 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224012 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224011,G__224012) : tailrecursion.hoplon.span.call(null,G__224011,G__224012));
})();
var G__223948 = " (";
var G__223949 = (function (){var G__224013 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000"], null);
var G__224014 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224013,G__224014) : tailrecursion.hoplon.span.call(null,G__224013,G__224014));
})();
var G__223950 = (function (){var G__224015 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224016 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224015,G__224016) : tailrecursion.hoplon.span.call(null,G__224015,G__224016));
})();
var G__223951 = " ";
var G__223952 = (function (){var G__224017 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224018 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224017,G__224018) : tailrecursion.hoplon.span.call(null,G__224017,G__224018));
})();
var G__223953 = ")))\n  (";
var G__223954 = (function (){var G__224019 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__224020 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224019,G__224020) : tailrecursion.hoplon.span.call(null,G__224019,G__224020));
})();
var G__223955 = (function (){var G__224021 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224022 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224021,G__224022) : tailrecursion.hoplon.span.call(null,G__224021,G__224022));
})();
var G__223956 = " [";
var G__223957 = (function (){var G__224023 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224024 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224023,G__224024) : tailrecursion.hoplon.span.call(null,G__224023,G__224024));
})();
var G__223958 = "]\n    (";
var G__223959 = (function (){var G__224025 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #008000; font-weight: bold"], null);
var G__224026 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224025,G__224026) : tailrecursion.hoplon.span.call(null,G__224025,G__224026));
})();
var G__223960 = "(";
var G__223961 = (function (){var G__224027 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__224028 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224027,G__224028) : tailrecursion.hoplon.span.call(null,G__224027,G__224028));
})();
var G__223962 = " ";
var G__223963 = (function (){var G__224029 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224030 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224029,G__224030) : tailrecursion.hoplon.span.call(null,G__224029,G__224030));
})();
var G__223964 = ")\n        ";
var G__223965 = (function (){var G__224031 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224032 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224031,G__224032) : tailrecursion.hoplon.span.call(null,G__224031,G__224032));
})();
var G__223966 = "\n        (";
var G__223967 = (function (){var G__224033 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__224034 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224033,G__224034) : tailrecursion.hoplon.span.call(null,G__224033,G__224034));
})();
var G__223968 = " (";
var G__223969 = (function (){var G__224035 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__224036 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224035,G__224036) : tailrecursion.hoplon.span.call(null,G__224035,G__224036));
})();
var G__223970 = " ";
var G__223971 = (function (){var G__224037 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #19177C"], null);
var G__224038 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224037,G__224038) : tailrecursion.hoplon.span.call(null,G__224037,G__224038));
})();
var G__223972 = "))))\n  (";
var G__223973 = (function (){var G__224039 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #0000FF"], null);
var G__224040 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224039,G__224040) : tailrecursion.hoplon.span.call(null,G__224039,G__224040));
})();
var G__223974 = " ";
var G__223975 = (function (){var G__224041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"color: #666666"], null);
var G__224042 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__224041,G__224042) : tailrecursion.hoplon.span.call(null,G__224041,G__224042));
})();
var G__223976 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63(G__223914,G__223915,G__223916,G__223917,G__223918,G__223919,G__223920,G__223921,G__223922,G__223923,G__223924,G__223925,G__223926,G__223927,G__223928,G__223929,G__223930,G__223931,G__223932,G__223933,G__223934,G__223935,G__223936,G__223937,G__223938,G__223939,G__223940,G__223941,G__223942,G__223943,G__223944,G__223945,G__223946,G__223947,G__223948,G__223949,G__223950,G__223951,G__223952,G__223953,G__223954,G__223955,G__223956,G__223957,G__223958,G__223959,G__223960,G__223961,G__223962,G__223963,G__223964,G__223965,G__223966,G__223967,G__223968,G__223969,G__223970,G__223971,G__223972,G__223973,G__223974,G__223975,G__223976) : tailrecursion.hoplon.pre.call(null,G__223914,G__223915,G__223916,G__223917,G__223918,G__223919,G__223920,G__223921,G__223922,G__223923,G__223924,G__223925,G__223926,G__223927,G__223928,G__223929,G__223930,G__223931,G__223932,G__223933,G__223934,G__223935,G__223936,G__223937,G__223938,G__223939,G__223940,G__223941,G__223942,G__223943,G__223944,G__223945,G__223946,G__223947,G__223948,G__223949,G__223950,G__223951,G__223952,G__223953,G__223954,G__223955,G__223956,G__223957,G__223958,G__223959,G__223960,G__223961,G__223962,G__223963,G__223964,G__223965,G__223966,G__223967,G__223968,G__223969,G__223970,G__223971,G__223972,G__223973,G__223974,G__223975,G__223976));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__223912,G__223913) : tailrecursion.hoplon.div.call(null,G__223912,G__223913));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__223911) : tailrecursion.hoplon.div.call(null,G__223911));
})(),(function (){var G__224043 = cljs.core.PersistentArrayMap.EMPTY;
var G__224044 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will use block structure extensively to help us break up large programs into tractable pieces.",(function (){var G__224045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$type,cljs.core.cst$kw$double_DASH_angle], null);
var G__224046 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Embedded definitions must come first in a procedure body. The management is not responsible for the consequences of running programs that intertwine definition and use."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__224045,G__224046) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__224045,G__224046));
})()," The idea of block structure originated with the programming language Algol 60. It appears in most advanced programming languages and is an important tool for helping to organize the construction of large programs."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__224043,G__224044) : tailrecursion.hoplon.markdown.para_node.call(null,G__224043,G__224044));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222689;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222688;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_222687;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_222686;
}})()], 0));
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27(G__216575,G__216576,G__216577,G__216578,G__216579,G__216580,G__216581,G__216582,G__216583,G__216584,G__216585,G__216586,G__216587,G__216588,G__216589,G__216590,G__216591,G__216592,G__216593,G__216594,G__216595,G__216596,G__216597,G__216598,G__216599,G__216600,G__216601) : tailrecursion.hoplon.div.call(null,G__216575,G__216576,G__216577,G__216578,G__216579,G__216580,G__216581,G__216582,G__216583,G__216584,G__216585,G__216586,G__216587,G__216588,G__216589,G__216590,G__216591,G__216592,G__216593,G__216594,G__216595,G__216596,G__216597,G__216598,G__216599,G__216600,G__216601));
};
var book$sicp$texts$ch1sect1$content = function (var_args){
var args__8262__auto__ = null;
if (arguments.length > 0) {
var G__224047__i = 0, G__224047__a = new Array(arguments.length -  0);
while (G__224047__i < G__224047__a.length) {G__224047__a[G__224047__i] = arguments[G__224047__i + 0]; ++G__224047__i;}
  args__8262__auto__ = new cljs.core.IndexedSeq(G__224047__a,0);
} 
return book$sicp$texts$ch1sect1$content__delegate.call(this,args__8262__auto__);};
book$sicp$texts$ch1sect1$content.cljs$lang$maxFixedArity = 0;
book$sicp$texts$ch1sect1$content.cljs$lang$applyTo = (function (arglist__224048){
var args__8262__auto__ = cljs.core.seq(arglist__224048);
return book$sicp$texts$ch1sect1$content__delegate(args__8262__auto__);
});
book$sicp$texts$ch1sect1$content.cljs$core$IFn$_invoke$arity$variadic = book$sicp$texts$ch1sect1$content__delegate;
return book$sicp$texts$ch1sect1$content;
})()
;
