// Compiled by ClojureScript 0.0-3308 {:static-fns true, :optimize-constants true}
goog.provide('content.sicp.texts.ch1sect1');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('content.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
content.sicp.texts.ch1sect1.content = (function() { 
var content$sicp$texts$ch1sect1$content__delegate = function (args__10403__auto__){
var vec__124128 = tailrecursion.hoplon.parse_args(args__10403__auto__);
var attr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__124128,(0),null);
var kids = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__124128,(1),null);
var G__124129 = cljs.core.PersistentArrayMap.EMPTY;
var G__124130 = content.sicp.book_data.sect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"The Elements of Programming"], null),(function (){var _STAR_references_STAR_124156 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124157 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_124158 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124159 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124160 = cljs.core.PersistentArrayMap.EMPTY;
var G__124161 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes. Thus, when we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three mechanisms for accomplishing this:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124160,G__124161) : tailrecursion.hoplon.markdown.para_node.call(null,G__124160,G__124161));
})(),(function (){var G__124162 = cljs.core.PersistentArrayMap.EMPTY;
var G__124163 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124164 = cljs.core.PersistentArrayMap.EMPTY;
var G__124165 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124166 = cljs.core.PersistentArrayMap.EMPTY;
var G__124167 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"**",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["primitive expressions"], null)], 0)),", which represent the simplest entities the language is concerned with,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124166,G__124167) : tailrecursion.hoplon.markdown.para_node.call(null,G__124166,G__124167));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124164,G__124165) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124164,G__124165));
})(),(function (){var G__124168 = cljs.core.PersistentArrayMap.EMPTY;
var G__124169 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_124170 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124171 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124172 = cljs.core.PersistentArrayMap.EMPTY;
var G__124173 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"**",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of combination"], null)], 0)),", by which compound elements are built from simpler ones, and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124172,G__124173) : tailrecursion.hoplon.markdown.para_node.call(null,G__124172,G__124173));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124171;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124170;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124168,G__124169) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124168,G__124169));
})(),(function (){var G__124174 = cljs.core.PersistentArrayMap.EMPTY;
var G__124175 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_124176 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124177 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124178 = cljs.core.PersistentArrayMap.EMPTY;
var G__124179 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"**",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of abstraction"], null)], 0)),", by which compound elements can be named and manipulated as units."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124178,G__124179) : tailrecursion.hoplon.markdown.para_node.call(null,G__124178,G__124179));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124177;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124176;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124174,G__124175) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124174,G__124175));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__124162,G__124163) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__124162,G__124163));
})(),(function (){var G__124180 = cljs.core.PersistentArrayMap.EMPTY;
var G__124181 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In programming, we deal with two kinds of elements: procedures and data. (Later we will discover that they are really not so distinct.) Informally, data is ``stuff",(function (){var G__124182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__124183 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__124182,G__124183) : tailrecursion.hoplon.markdown.simple_node.call(null,G__124182,G__124183));
})(),(function (){var G__124184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__124185 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__124184,G__124185) : tailrecursion.hoplon.markdown.simple_node.call(null,G__124184,G__124185));
})()," that we want to manipulate, and procedures are descriptions of the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive procedures and should have methods for combining and abstracting procedures and data."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124180,G__124181) : tailrecursion.hoplon.markdown.para_node.call(null,G__124180,G__124181));
})(),(function (){var G__124186 = cljs.core.PersistentArrayMap.EMPTY;
var G__124187 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this chapter we will deal only with simple numerical data so that we can focus on the rules for building procedures.",(function (){var G__124188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__124189 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The characterization of numbers as ",(function (){var G__124190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__124191 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["simple data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124190,G__124191) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124190,G__124191));
})()," is a barefaced bluff. In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language. Some typical issues involved are these: Some computer systems distinguish ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["integers"], null)], 0)),", such as 2, from ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["real numbers"], null)], 0)),", such as 2.71. Is the real number 2.00 different from the integer 2? Are the arithmetic operations used for integers the same as the operations used for real numbers? Does 6 divided by 2 produce 3, or 3.0? How large a number can we represent? How many decimal places of accuracy can we represent? Is the range of integers the same as the range of real numbers? Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors ",(function (){var G__124192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__124193 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__124192,G__124193) : tailrecursion.hoplon.markdown.simple_node.call(null,G__124192,G__124193));
})()," the entire science of numerical analysis. Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems. The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124188,G__124189) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124188,G__124189));
})()," In later chapters we will see that these same rules allow us to build procedures to manipulate compound data as well."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124186,G__124187) : tailrecursion.hoplon.markdown.para_node.call(null,G__124186,G__124187));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124159;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124158;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124157;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124156;
}})()], 0));
var G__124131 = "";
var G__124132 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Expressions"], null),(function (){var _STAR_references_STAR_124194 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124195 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_124196 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124197 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 24, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124198 = cljs.core.PersistentArrayMap.EMPTY;
var G__124199 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One easy way to get started at programming is to examine some typical interactions with an interpreter for the Scheme dialect of Lisp. Imagine that you are sitting at a computer terminal. You type an ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["expression"], null)], 0)),", and the interpreter responds by displaying the result of its evaluating that expression."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124198,G__124199) : tailrecursion.hoplon.markdown.para_node.call(null,G__124198,G__124199));
})(),(function (){var G__124200 = cljs.core.PersistentArrayMap.EMPTY;
var G__124201 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One kind of primitive expression you might type is a number. (More precisely, the expression that you type consists of the numerals that represent the number in base 10.) If you present Lisp with a number"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124200,G__124201) : tailrecursion.hoplon.markdown.para_node.call(null,G__124200,G__124201));
})(),(function (){var G__124202 = cljs.core.PersistentArrayMap.EMPTY;
var G__124203 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124202,G__124203) : tailrecursion.hoplon.markdown.para_node.call(null,G__124202,G__124203));
})(),(function (){var G__124204 = cljs.core.PersistentArrayMap.EMPTY;
var G__124205 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the interpreter will respond by printing",(function (){var G__124206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__124207 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, when we wish to emphasize the distinction between the input typed by the user and the response printed by the interpreter, we will show the latter in slanted characters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124206,G__124207) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124206,G__124207));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124204,G__124205) : tailrecursion.hoplon.markdown.para_node.call(null,G__124204,G__124205));
})(),(function (){var G__124208 = cljs.core.PersistentArrayMap.EMPTY;
var G__124209 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124208,G__124209) : tailrecursion.hoplon.markdown.para_node.call(null,G__124208,G__124209));
})(),(function (){var G__124210 = cljs.core.PersistentArrayMap.EMPTY;
var G__124211 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions representing numbers may be combined with an expression representing a primitive procedure (such as + or ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,false,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [") to form a compound expression that represents the application of the procedure to those numbers. For example:"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124210,G__124211) : tailrecursion.hoplon.markdown.para_node.call(null,G__124210,G__124211));
})(),(function (){var G__124212 = (function (){var G__124213 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124214 = (function (){var G__124215 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124216 = "(";
var G__124217 = (function (){var G__124224 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124225 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124224,G__124225) : tailrecursion.hoplon.span.call(null,G__124224,G__124225));
})();
var G__124218 = (function (){var G__124226 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124227 = "137";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124226,G__124227) : tailrecursion.hoplon.span.call(null,G__124226,G__124227));
})();
var G__124219 = " ";
var G__124220 = (function (){var G__124228 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124229 = "349";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124228,G__124229) : tailrecursion.hoplon.span.call(null,G__124228,G__124229));
})();
var G__124221 = ")\n";
var G__124222 = (function (){var G__124230 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124231 = "486";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124230,G__124231) : tailrecursion.hoplon.span.call(null,G__124230,G__124231));
})();
var G__124223 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__124215,G__124216,G__124217,G__124218,G__124219,G__124220,G__124221,G__124222,G__124223) : tailrecursion.hoplon.pre.call(null,G__124215,G__124216,G__124217,G__124218,G__124219,G__124220,G__124221,G__124222,G__124223));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124213,G__124214) : tailrecursion.hoplon.div.call(null,G__124213,G__124214));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124212) : tailrecursion.hoplon.div.call(null,G__124212));
})(),(function (){var G__124232 = (function (){var G__124233 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124234 = (function (){var G__124235 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124236 = "(";
var G__124237 = (function (){var G__124244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124245 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124244,G__124245) : tailrecursion.hoplon.span.call(null,G__124244,G__124245));
})();
var G__124238 = (function (){var G__124246 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124247 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124246,G__124247) : tailrecursion.hoplon.span.call(null,G__124246,G__124247));
})();
var G__124239 = " ";
var G__124240 = (function (){var G__124248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124249 = "334";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124248,G__124249) : tailrecursion.hoplon.span.call(null,G__124248,G__124249));
})();
var G__124241 = ")\n";
var G__124242 = (function (){var G__124250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124251 = "666";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124250,G__124251) : tailrecursion.hoplon.span.call(null,G__124250,G__124251));
})();
var G__124243 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__124235,G__124236,G__124237,G__124238,G__124239,G__124240,G__124241,G__124242,G__124243) : tailrecursion.hoplon.pre.call(null,G__124235,G__124236,G__124237,G__124238,G__124239,G__124240,G__124241,G__124242,G__124243));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124233,G__124234) : tailrecursion.hoplon.div.call(null,G__124233,G__124234));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124232) : tailrecursion.hoplon.div.call(null,G__124232));
})(),(function (){var G__124252 = (function (){var G__124253 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124254 = (function (){var G__124255 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124256 = "(";
var G__124257 = (function (){var G__124264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124265 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124264,G__124265) : tailrecursion.hoplon.span.call(null,G__124264,G__124265));
})();
var G__124258 = (function (){var G__124266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124267 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124266,G__124267) : tailrecursion.hoplon.span.call(null,G__124266,G__124267));
})();
var G__124259 = " ";
var G__124260 = (function (){var G__124268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124269 = "99";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124268,G__124269) : tailrecursion.hoplon.span.call(null,G__124268,G__124269));
})();
var G__124261 = ")\n";
var G__124262 = (function (){var G__124270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124271 = "495";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124270,G__124271) : tailrecursion.hoplon.span.call(null,G__124270,G__124271));
})();
var G__124263 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__124255,G__124256,G__124257,G__124258,G__124259,G__124260,G__124261,G__124262,G__124263) : tailrecursion.hoplon.pre.call(null,G__124255,G__124256,G__124257,G__124258,G__124259,G__124260,G__124261,G__124262,G__124263));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124253,G__124254) : tailrecursion.hoplon.div.call(null,G__124253,G__124254));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124252) : tailrecursion.hoplon.div.call(null,G__124252));
})(),(function (){var G__124272 = (function (){var G__124273 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124274 = (function (){var G__124275 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124276 = "(";
var G__124277 = (function (){var G__124284 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124285 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124284,G__124285) : tailrecursion.hoplon.span.call(null,G__124284,G__124285));
})();
var G__124278 = (function (){var G__124286 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124287 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124286,G__124287) : tailrecursion.hoplon.span.call(null,G__124286,G__124287));
})();
var G__124279 = " ";
var G__124280 = (function (){var G__124288 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124289 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124288,G__124289) : tailrecursion.hoplon.span.call(null,G__124288,G__124289));
})();
var G__124281 = ")\n";
var G__124282 = (function (){var G__124290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124291 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124290,G__124291) : tailrecursion.hoplon.span.call(null,G__124290,G__124291));
})();
var G__124283 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__124275,G__124276,G__124277,G__124278,G__124279,G__124280,G__124281,G__124282,G__124283) : tailrecursion.hoplon.pre.call(null,G__124275,G__124276,G__124277,G__124278,G__124279,G__124280,G__124281,G__124282,G__124283));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124273,G__124274) : tailrecursion.hoplon.div.call(null,G__124273,G__124274));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124272) : tailrecursion.hoplon.div.call(null,G__124272));
})(),(function (){var G__124292 = (function (){var G__124293 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124294 = (function (){var G__124295 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124296 = "(";
var G__124297 = (function (){var G__124304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124305 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124304,G__124305) : tailrecursion.hoplon.span.call(null,G__124304,G__124305));
})();
var G__124298 = (function (){var G__124306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124307 = "2.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124306,G__124307) : tailrecursion.hoplon.span.call(null,G__124306,G__124307));
})();
var G__124299 = " ";
var G__124300 = (function (){var G__124308 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124309 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124308,G__124309) : tailrecursion.hoplon.span.call(null,G__124308,G__124309));
})();
var G__124301 = ")\n";
var G__124302 = (function (){var G__124310 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124311 = "12.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124310,G__124311) : tailrecursion.hoplon.span.call(null,G__124310,G__124311));
})();
var G__124303 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__124295,G__124296,G__124297,G__124298,G__124299,G__124300,G__124301,G__124302,G__124303) : tailrecursion.hoplon.pre.call(null,G__124295,G__124296,G__124297,G__124298,G__124299,G__124300,G__124301,G__124302,G__124303));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124293,G__124294) : tailrecursion.hoplon.div.call(null,G__124293,G__124294));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124292) : tailrecursion.hoplon.div.call(null,G__124292));
})(),(function (){var G__124312 = cljs.core.PersistentArrayMap.EMPTY;
var G__124313 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions such as these, formed by delimiting a list of expressions within parentheses in order to denote procedure application, are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["combinations"], null)], 0)),". The leftmost element in the list is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operator"], null)], 0)),", and the other elements are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operands"], null)], 0)),". The value of a combination is obtained by applying the procedure specified by the operator to the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["arguments"], null)], 0))," that are the values of the operands."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124312,G__124313) : tailrecursion.hoplon.markdown.para_node.call(null,G__124312,G__124313));
})(),(function (){var G__124314 = cljs.core.PersistentArrayMap.EMPTY;
var G__124315 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The convention of placing the operator to the left of the operands is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["prefix notation"], null)], 0)),", and it may be somewhat confusing at first because it departs significantly from the customary mathematical convention. Prefix notation has several advantages, however. One of them is that it can accommodate procedures that may take an arbitrary number of arguments, as in the following examples:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124314,G__124315) : tailrecursion.hoplon.markdown.para_node.call(null,G__124314,G__124315));
})(),(function (){var G__124316 = (function (){var G__124317 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124318 = (function (){var G__124319 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124320 = "(";
var G__124321 = (function (){var G__124332 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124333 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124332,G__124333) : tailrecursion.hoplon.span.call(null,G__124332,G__124333));
})();
var G__124322 = (function (){var G__124334 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124335 = "21";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124334,G__124335) : tailrecursion.hoplon.span.call(null,G__124334,G__124335));
})();
var G__124323 = " ";
var G__124324 = (function (){var G__124336 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124337 = "35";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124336,G__124337) : tailrecursion.hoplon.span.call(null,G__124336,G__124337));
})();
var G__124325 = " ";
var G__124326 = (function (){var G__124338 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124339 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124338,G__124339) : tailrecursion.hoplon.span.call(null,G__124338,G__124339));
})();
var G__124327 = " ";
var G__124328 = (function (){var G__124340 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124341 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124340,G__124341) : tailrecursion.hoplon.span.call(null,G__124340,G__124341));
})();
var G__124329 = ")\n";
var G__124330 = (function (){var G__124342 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124343 = "75";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124342,G__124343) : tailrecursion.hoplon.span.call(null,G__124342,G__124343));
})();
var G__124331 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__124319,G__124320,G__124321,G__124322,G__124323,G__124324,G__124325,G__124326,G__124327,G__124328,G__124329,G__124330,G__124331) : tailrecursion.hoplon.pre.call(null,G__124319,G__124320,G__124321,G__124322,G__124323,G__124324,G__124325,G__124326,G__124327,G__124328,G__124329,G__124330,G__124331));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124317,G__124318) : tailrecursion.hoplon.div.call(null,G__124317,G__124318));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124316) : tailrecursion.hoplon.div.call(null,G__124316));
})(),(function (){var G__124344 = (function (){var G__124345 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124346 = (function (){var G__124347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124348 = "(";
var G__124349 = (function (){var G__124358 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124359 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124358,G__124359) : tailrecursion.hoplon.span.call(null,G__124358,G__124359));
})();
var G__124350 = (function (){var G__124360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124361 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124360,G__124361) : tailrecursion.hoplon.span.call(null,G__124360,G__124361));
})();
var G__124351 = " ";
var G__124352 = (function (){var G__124362 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124363 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124362,G__124363) : tailrecursion.hoplon.span.call(null,G__124362,G__124363));
})();
var G__124353 = " ";
var G__124354 = (function (){var G__124364 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124365 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124364,G__124365) : tailrecursion.hoplon.span.call(null,G__124364,G__124365));
})();
var G__124355 = ")\n";
var G__124356 = (function (){var G__124366 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124367 = "1200";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124366,G__124367) : tailrecursion.hoplon.span.call(null,G__124366,G__124367));
})();
var G__124357 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__124347,G__124348,G__124349,G__124350,G__124351,G__124352,G__124353,G__124354,G__124355,G__124356,G__124357) : tailrecursion.hoplon.pre.call(null,G__124347,G__124348,G__124349,G__124350,G__124351,G__124352,G__124353,G__124354,G__124355,G__124356,G__124357));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124345,G__124346) : tailrecursion.hoplon.div.call(null,G__124345,G__124346));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124344) : tailrecursion.hoplon.div.call(null,G__124344));
})(),(function (){var G__124368 = cljs.core.PersistentArrayMap.EMPTY;
var G__124369 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["No ambiguity can arise, because the operator is always the leftmost element and the entire combination is delimited by the parentheses."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124368,G__124369) : tailrecursion.hoplon.markdown.para_node.call(null,G__124368,G__124369));
})(),(function (){var G__124370 = cljs.core.PersistentArrayMap.EMPTY;
var G__124371 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A second advantage of prefix notation is that it extends in a straightforward way to allow combinations to be ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["nested"], null)], 0)),", that is, to have combinations whose elements are themselves combinations:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124370,G__124371) : tailrecursion.hoplon.markdown.para_node.call(null,G__124370,G__124371));
})(),(function (){var G__124372 = (function (){var G__124373 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124374 = (function (){var G__124375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124376 = "(";
var G__124377 = (function (){var G__124391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124392 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124391,G__124392) : tailrecursion.hoplon.span.call(null,G__124391,G__124392));
})();
var G__124378 = "(";
var G__124379 = (function (){var G__124393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124394 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124393,G__124394) : tailrecursion.hoplon.span.call(null,G__124393,G__124394));
})();
var G__124380 = (function (){var G__124395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124396 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124395,G__124396) : tailrecursion.hoplon.span.call(null,G__124395,G__124396));
})();
var G__124381 = " ";
var G__124382 = (function (){var G__124397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124398 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124397,G__124398) : tailrecursion.hoplon.span.call(null,G__124397,G__124398));
})();
var G__124383 = ") (";
var G__124384 = (function (){var G__124399 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124400 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124399,G__124400) : tailrecursion.hoplon.span.call(null,G__124399,G__124400));
})();
var G__124385 = (function (){var G__124401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124402 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124401,G__124402) : tailrecursion.hoplon.span.call(null,G__124401,G__124402));
})();
var G__124386 = " ";
var G__124387 = (function (){var G__124403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124404 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124403,G__124404) : tailrecursion.hoplon.span.call(null,G__124403,G__124404));
})();
var G__124388 = "))\n";
var G__124389 = (function (){var G__124405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124406 = "19";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124405,G__124406) : tailrecursion.hoplon.span.call(null,G__124405,G__124406));
})();
var G__124390 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__124375,G__124376,G__124377,G__124378,G__124379,G__124380,G__124381,G__124382,G__124383,G__124384,G__124385,G__124386,G__124387,G__124388,G__124389,G__124390) : tailrecursion.hoplon.pre.call(null,G__124375,G__124376,G__124377,G__124378,G__124379,G__124380,G__124381,G__124382,G__124383,G__124384,G__124385,G__124386,G__124387,G__124388,G__124389,G__124390));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124373,G__124374) : tailrecursion.hoplon.div.call(null,G__124373,G__124374));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124372) : tailrecursion.hoplon.div.call(null,G__124372));
})(),(function (){var G__124407 = cljs.core.PersistentArrayMap.EMPTY;
var G__124408 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the Lisp interpreter can evaluate. It is we humans who get confused by still relatively simple expressions such as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124407,G__124408) : tailrecursion.hoplon.markdown.para_node.call(null,G__124407,G__124408));
})(),(function (){var G__124409 = (function (){var G__124410 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124411 = (function (){var G__124412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124413 = "(";
var G__124414 = (function (){var G__124440 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124441 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124440,G__124441) : tailrecursion.hoplon.span.call(null,G__124440,G__124441));
})();
var G__124415 = "(";
var G__124416 = (function (){var G__124442 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124443 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124442,G__124443) : tailrecursion.hoplon.span.call(null,G__124442,G__124443));
})();
var G__124417 = (function (){var G__124444 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124445 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124444,G__124445) : tailrecursion.hoplon.span.call(null,G__124444,G__124445));
})();
var G__124418 = " (";
var G__124419 = (function (){var G__124446 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124447 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124446,G__124447) : tailrecursion.hoplon.span.call(null,G__124446,G__124447));
})();
var G__124420 = "(";
var G__124421 = (function (){var G__124448 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124449 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124448,G__124449) : tailrecursion.hoplon.span.call(null,G__124448,G__124449));
})();
var G__124422 = (function (){var G__124450 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124451 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124450,G__124451) : tailrecursion.hoplon.span.call(null,G__124450,G__124451));
})();
var G__124423 = " ";
var G__124424 = (function (){var G__124452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124453 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124452,G__124453) : tailrecursion.hoplon.span.call(null,G__124452,G__124453));
})();
var G__124425 = ") (";
var G__124426 = (function (){var G__124454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124455 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124454,G__124455) : tailrecursion.hoplon.span.call(null,G__124454,G__124455));
})();
var G__124427 = (function (){var G__124456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124457 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124456,G__124457) : tailrecursion.hoplon.span.call(null,G__124456,G__124457));
})();
var G__124428 = " ";
var G__124429 = (function (){var G__124458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124459 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124458,G__124459) : tailrecursion.hoplon.span.call(null,G__124458,G__124459));
})();
var G__124430 = "))) (";
var G__124431 = (function (){var G__124460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124461 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124460,G__124461) : tailrecursion.hoplon.span.call(null,G__124460,G__124461));
})();
var G__124432 = "(";
var G__124433 = (function (){var G__124462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124463 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124462,G__124463) : tailrecursion.hoplon.span.call(null,G__124462,G__124463));
})();
var G__124434 = (function (){var G__124464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124465 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124464,G__124465) : tailrecursion.hoplon.span.call(null,G__124464,G__124465));
})();
var G__124435 = " ";
var G__124436 = (function (){var G__124466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124467 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124466,G__124467) : tailrecursion.hoplon.span.call(null,G__124466,G__124467));
})();
var G__124437 = ") ";
var G__124438 = (function (){var G__124468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124469 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124468,G__124469) : tailrecursion.hoplon.span.call(null,G__124468,G__124469));
})();
var G__124439 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__124412,G__124413,G__124414,G__124415,G__124416,G__124417,G__124418,G__124419,G__124420,G__124421,G__124422,G__124423,G__124424,G__124425,G__124426,G__124427,G__124428,G__124429,G__124430,G__124431,G__124432,G__124433,G__124434,G__124435,G__124436,G__124437,G__124438,G__124439) : tailrecursion.hoplon.pre.call(null,G__124412,G__124413,G__124414,G__124415,G__124416,G__124417,G__124418,G__124419,G__124420,G__124421,G__124422,G__124423,G__124424,G__124425,G__124426,G__124427,G__124428,G__124429,G__124430,G__124431,G__124432,G__124433,G__124434,G__124435,G__124436,G__124437,G__124438,G__124439));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124410,G__124411) : tailrecursion.hoplon.div.call(null,G__124410,G__124411));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124409) : tailrecursion.hoplon.div.call(null,G__124409));
})(),(function (){var G__124470 = cljs.core.PersistentArrayMap.EMPTY;
var G__124471 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which the interpreter would readily evaluate to be 57. We can help ourselves by writing such an expression in the form"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124470,G__124471) : tailrecursion.hoplon.markdown.para_node.call(null,G__124470,G__124471));
})(),(function (){var G__124472 = (function (){var G__124473 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124474 = (function (){var G__124475 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124476 = "(";
var G__124477 = (function (){var G__124503 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124504 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124503,G__124504) : tailrecursion.hoplon.span.call(null,G__124503,G__124504));
})();
var G__124478 = "(";
var G__124479 = (function (){var G__124505 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124506 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124505,G__124506) : tailrecursion.hoplon.span.call(null,G__124505,G__124506));
})();
var G__124480 = (function (){var G__124507 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124508 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124507,G__124508) : tailrecursion.hoplon.span.call(null,G__124507,G__124508));
})();
var G__124481 = "\n      (";
var G__124482 = (function (){var G__124509 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124510 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124509,G__124510) : tailrecursion.hoplon.span.call(null,G__124509,G__124510));
})();
var G__124483 = "(";
var G__124484 = (function (){var G__124511 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124512 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124511,G__124512) : tailrecursion.hoplon.span.call(null,G__124511,G__124512));
})();
var G__124485 = (function (){var G__124513 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124514 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124513,G__124514) : tailrecursion.hoplon.span.call(null,G__124513,G__124514));
})();
var G__124486 = " ";
var G__124487 = (function (){var G__124515 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124516 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124515,G__124516) : tailrecursion.hoplon.span.call(null,G__124515,G__124516));
})();
var G__124488 = ")\n         (";
var G__124489 = (function (){var G__124517 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124518 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124517,G__124518) : tailrecursion.hoplon.span.call(null,G__124517,G__124518));
})();
var G__124490 = (function (){var G__124519 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124520 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124519,G__124520) : tailrecursion.hoplon.span.call(null,G__124519,G__124520));
})();
var G__124491 = " ";
var G__124492 = (function (){var G__124521 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124522 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124521,G__124522) : tailrecursion.hoplon.span.call(null,G__124521,G__124522));
})();
var G__124493 = ")))\n   (";
var G__124494 = (function (){var G__124523 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124524 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124523,G__124524) : tailrecursion.hoplon.span.call(null,G__124523,G__124524));
})();
var G__124495 = "(";
var G__124496 = (function (){var G__124525 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124526 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124525,G__124526) : tailrecursion.hoplon.span.call(null,G__124525,G__124526));
})();
var G__124497 = (function (){var G__124527 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124528 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124527,G__124528) : tailrecursion.hoplon.span.call(null,G__124527,G__124528));
})();
var G__124498 = " ";
var G__124499 = (function (){var G__124529 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124530 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124529,G__124530) : tailrecursion.hoplon.span.call(null,G__124529,G__124530));
})();
var G__124500 = ")\n      ";
var G__124501 = (function (){var G__124531 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124532 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124531,G__124532) : tailrecursion.hoplon.span.call(null,G__124531,G__124532));
})();
var G__124502 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__124475,G__124476,G__124477,G__124478,G__124479,G__124480,G__124481,G__124482,G__124483,G__124484,G__124485,G__124486,G__124487,G__124488,G__124489,G__124490,G__124491,G__124492,G__124493,G__124494,G__124495,G__124496,G__124497,G__124498,G__124499,G__124500,G__124501,G__124502) : tailrecursion.hoplon.pre.call(null,G__124475,G__124476,G__124477,G__124478,G__124479,G__124480,G__124481,G__124482,G__124483,G__124484,G__124485,G__124486,G__124487,G__124488,G__124489,G__124490,G__124491,G__124492,G__124493,G__124494,G__124495,G__124496,G__124497,G__124498,G__124499,G__124500,G__124501,G__124502));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124473,G__124474) : tailrecursion.hoplon.div.call(null,G__124473,G__124474));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124472) : tailrecursion.hoplon.div.call(null,G__124472));
})(),(function (){var G__124533 = cljs.core.PersistentArrayMap.EMPTY;
var G__124534 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["following a formatting convention known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["pretty-printing"], null)], 0)),", in which each long combination is written so that the operands are aligned vertically. The resulting indentations display clearly the structure of the expression.",(function (){var G__124535 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__124536 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp systems typically provide features to aid the user in formatting expressions. Two especially useful features are one that automatically indents to the proper pretty-print position whenever a new line is started and one that highlights the matching left parenthesis whenever a right parenthesis is typed."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124535,G__124536) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124535,G__124536));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124533,G__124534) : tailrecursion.hoplon.markdown.para_node.call(null,G__124533,G__124534));
})(),(function (){var G__124537 = cljs.core.PersistentArrayMap.EMPTY;
var G__124538 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even with complex expressions, the interpreter always operates in the same basic cycle: It reads an expression from the terminal, evaluates the expression, and prints the result. This mode of operation is often expressed by saying that the interpreter runs in a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["read-eval-print loop"], null)], 0)),". Observe in particular that it is not necessary to explicitly instruct the interpreter to print the value of the expression.",(function (){var G__124539 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__124540 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp obeys the convention that every expression has a value. This convention, together with the old reputation of Lisp as an inefficient language, is the source of the quip by Alan Perlis (paraphrasing Oscar Wilde) that ",(function (){var G__124541 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__124542 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp programmers know the value of everything but the cost of nothing."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124541,G__124542) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124541,G__124542));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124539,G__124540) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124539,G__124540));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124537,G__124538) : tailrecursion.hoplon.markdown.para_node.call(null,G__124537,G__124538));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124197;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124196;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124195;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124194;
}})()], 0));
var G__124133 = "";
var G__124134 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Naming and the Environment"], null),(function (){var _STAR_references_STAR_124543 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124544 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_124545 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124546 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124547 = cljs.core.PersistentArrayMap.EMPTY;
var G__124548 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A critical aspect of a programming language is the means it provides for using names to refer to computational objects. We say that the name identifies a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["variable"], null)], 0))," whose ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["value"], null)], 0))," is the object."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124547,G__124548) : tailrecursion.hoplon.markdown.para_node.call(null,G__124547,G__124548));
})(),(function (){var G__124549 = cljs.core.PersistentArrayMap.EMPTY;
var G__124550 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In the Scheme dialect of Lisp, we name things with ",(function (){var G__124551 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"define"], null);
var G__124552 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124551,G__124552) : tailrecursion.hoplon.markdown.code_node.call(null,G__124551,G__124552));
})(),". Typing"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124549,G__124550) : tailrecursion.hoplon.markdown.para_node.call(null,G__124549,G__124550));
})(),(function (){var G__124553 = (function (){var G__124554 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124555 = (function (){var G__124556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124557 = "(";
var G__124558 = (function (){var G__124563 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__124564 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124563,G__124564) : tailrecursion.hoplon.span.call(null,G__124563,G__124564));
})();
var G__124559 = (function (){var G__124565 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124566 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124565,G__124566) : tailrecursion.hoplon.span.call(null,G__124565,G__124566));
})();
var G__124560 = " ";
var G__124561 = (function (){var G__124567 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124568 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124567,G__124568) : tailrecursion.hoplon.span.call(null,G__124567,G__124568));
})();
var G__124562 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__124556,G__124557,G__124558,G__124559,G__124560,G__124561,G__124562) : tailrecursion.hoplon.pre.call(null,G__124556,G__124557,G__124558,G__124559,G__124560,G__124561,G__124562));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124554,G__124555) : tailrecursion.hoplon.div.call(null,G__124554,G__124555));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124553) : tailrecursion.hoplon.div.call(null,G__124553));
})(),(function (){var G__124569 = cljs.core.PersistentArrayMap.EMPTY;
var G__124570 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["causes the interpreter to associate the value 2 with the name size.",(function (){var G__124571 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__124572 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this book, we do not show the interpreter",(function (){var G__124573 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__124574 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__124573,G__124574) : tailrecursion.hoplon.markdown.simple_node.call(null,G__124573,G__124574));
})(),"s response to evaluating definitions, since this is highly implementation-dependent."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124571,G__124572) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124571,G__124572));
})()," In Clojure we would use ",(function (){var G__124575 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__124576 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124575,G__124576) : tailrecursion.hoplon.markdown.code_node.call(null,G__124575,G__124576));
})()," to accomplish the same goal. i.e."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124569,G__124570) : tailrecursion.hoplon.markdown.para_node.call(null,G__124569,G__124570));
})(),(function (){var G__124577 = (function (){var G__124578 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124579 = (function (){var G__124580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124581 = "(";
var G__124582 = (function (){var G__124587 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__124588 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124587,G__124588) : tailrecursion.hoplon.span.call(null,G__124587,G__124588));
})();
var G__124583 = (function (){var G__124589 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124590 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124589,G__124590) : tailrecursion.hoplon.span.call(null,G__124589,G__124590));
})();
var G__124584 = " ";
var G__124585 = (function (){var G__124591 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124592 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124591,G__124592) : tailrecursion.hoplon.span.call(null,G__124591,G__124592));
})();
var G__124586 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__124580,G__124581,G__124582,G__124583,G__124584,G__124585,G__124586) : tailrecursion.hoplon.pre.call(null,G__124580,G__124581,G__124582,G__124583,G__124584,G__124585,G__124586));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124578,G__124579) : tailrecursion.hoplon.div.call(null,G__124578,G__124579));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124577) : tailrecursion.hoplon.div.call(null,G__124577));
})(),(function (){var G__124593 = cljs.core.PersistentArrayMap.EMPTY;
var G__124594 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and the interpreter will now associate the value 2 with the name size. Once the name size has been associated with the number 2, we can refer to the value 2 by name:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124593,G__124594) : tailrecursion.hoplon.markdown.para_node.call(null,G__124593,G__124594));
})(),(function (){var G__124595 = (function (){var G__124596 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124597 = (function (){var G__124598 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124599 = (function (){var G__124603 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124604 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124603,G__124604) : tailrecursion.hoplon.span.call(null,G__124603,G__124604));
})();
var G__124600 = "\n";
var G__124601 = (function (){var G__124605 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124606 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124605,G__124606) : tailrecursion.hoplon.span.call(null,G__124605,G__124606));
})();
var G__124602 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5(G__124598,G__124599,G__124600,G__124601,G__124602) : tailrecursion.hoplon.pre.call(null,G__124598,G__124599,G__124600,G__124601,G__124602));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124596,G__124597) : tailrecursion.hoplon.div.call(null,G__124596,G__124597));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124595) : tailrecursion.hoplon.div.call(null,G__124595));
})(),(function (){var G__124607 = (function (){var G__124608 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124609 = (function (){var G__124610 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124611 = "(";
var G__124612 = (function (){var G__124619 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124620 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124619,G__124620) : tailrecursion.hoplon.span.call(null,G__124619,G__124620));
})();
var G__124613 = (function (){var G__124621 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124622 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124621,G__124622) : tailrecursion.hoplon.span.call(null,G__124621,G__124622));
})();
var G__124614 = " ";
var G__124615 = (function (){var G__124623 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124624 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124623,G__124624) : tailrecursion.hoplon.span.call(null,G__124623,G__124624));
})();
var G__124616 = ")\n";
var G__124617 = (function (){var G__124625 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124626 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124625,G__124626) : tailrecursion.hoplon.span.call(null,G__124625,G__124626));
})();
var G__124618 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__124610,G__124611,G__124612,G__124613,G__124614,G__124615,G__124616,G__124617,G__124618) : tailrecursion.hoplon.pre.call(null,G__124610,G__124611,G__124612,G__124613,G__124614,G__124615,G__124616,G__124617,G__124618));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124608,G__124609) : tailrecursion.hoplon.div.call(null,G__124608,G__124609));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124607) : tailrecursion.hoplon.div.call(null,G__124607));
})(),(function (){var G__124627 = cljs.core.PersistentArrayMap.EMPTY;
var G__124628 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here are further examples of the use of ",(function (){var G__124629 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__124630 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124629,G__124630) : tailrecursion.hoplon.markdown.code_node.call(null,G__124629,G__124630));
})(),":"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124627,G__124628) : tailrecursion.hoplon.markdown.para_node.call(null,G__124627,G__124628));
})(),(function (){var G__124631 = (function (){var G__124632 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124633 = (function (){var G__124634 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124635 = "(";
var G__124636 = (function (){var G__124670 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__124671 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124670,G__124671) : tailrecursion.hoplon.span.call(null,G__124670,G__124671));
})();
var G__124637 = (function (){var G__124672 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124673 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124672,G__124673) : tailrecursion.hoplon.span.call(null,G__124672,G__124673));
})();
var G__124638 = " ";
var G__124639 = (function (){var G__124674 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124675 = "3.14159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124674,G__124675) : tailrecursion.hoplon.span.call(null,G__124674,G__124675));
})();
var G__124640 = ")\n(";
var G__124641 = (function (){var G__124676 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__124677 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124676,G__124677) : tailrecursion.hoplon.span.call(null,G__124676,G__124677));
})();
var G__124642 = (function (){var G__124678 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124679 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124678,G__124679) : tailrecursion.hoplon.span.call(null,G__124678,G__124679));
})();
var G__124643 = " ";
var G__124644 = (function (){var G__124680 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124681 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124680,G__124681) : tailrecursion.hoplon.span.call(null,G__124680,G__124681));
})();
var G__124645 = ")\n(";
var G__124646 = (function (){var G__124682 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124683 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124682,G__124683) : tailrecursion.hoplon.span.call(null,G__124682,G__124683));
})();
var G__124647 = (function (){var G__124684 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124685 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124684,G__124685) : tailrecursion.hoplon.span.call(null,G__124684,G__124685));
})();
var G__124648 = " (";
var G__124649 = (function (){var G__124686 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124687 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124686,G__124687) : tailrecursion.hoplon.span.call(null,G__124686,G__124687));
})();
var G__124650 = (function (){var G__124688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124689 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124688,G__124689) : tailrecursion.hoplon.span.call(null,G__124688,G__124689));
})();
var G__124651 = " ";
var G__124652 = (function (){var G__124690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124691 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124690,G__124691) : tailrecursion.hoplon.span.call(null,G__124690,G__124691));
})();
var G__124653 = "))\n";
var G__124654 = (function (){var G__124692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124693 = "314.159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124692,G__124693) : tailrecursion.hoplon.span.call(null,G__124692,G__124693));
})();
var G__124655 = "\n(";
var G__124656 = (function (){var G__124694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__124695 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124694,G__124695) : tailrecursion.hoplon.span.call(null,G__124694,G__124695));
})();
var G__124657 = (function (){var G__124696 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124697 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124696,G__124697) : tailrecursion.hoplon.span.call(null,G__124696,G__124697));
})();
var G__124658 = " (";
var G__124659 = (function (){var G__124698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124699 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124698,G__124699) : tailrecursion.hoplon.span.call(null,G__124698,G__124699));
})();
var G__124660 = (function (){var G__124700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124701 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124700,G__124701) : tailrecursion.hoplon.span.call(null,G__124700,G__124701));
})();
var G__124661 = " ";
var G__124662 = (function (){var G__124702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124703 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124702,G__124703) : tailrecursion.hoplon.span.call(null,G__124702,G__124703));
})();
var G__124663 = " ";
var G__124664 = (function (){var G__124704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124705 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124704,G__124705) : tailrecursion.hoplon.span.call(null,G__124704,G__124705));
})();
var G__124665 = "))\n";
var G__124666 = (function (){var G__124706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124707 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124706,G__124707) : tailrecursion.hoplon.span.call(null,G__124706,G__124707));
})();
var G__124667 = "\n";
var G__124668 = (function (){var G__124708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124709 = "62.8318";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124708,G__124709) : tailrecursion.hoplon.span.call(null,G__124708,G__124709));
})();
var G__124669 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__124634,G__124635,G__124636,G__124637,G__124638,G__124639,G__124640,G__124641,G__124642,G__124643,G__124644,G__124645,G__124646,G__124647,G__124648,G__124649,G__124650,G__124651,G__124652,G__124653,G__124654,G__124655,G__124656,G__124657,G__124658,G__124659,G__124660,G__124661,G__124662,G__124663,G__124664,G__124665,G__124666,G__124667,G__124668,G__124669) : tailrecursion.hoplon.pre.call(null,G__124634,G__124635,G__124636,G__124637,G__124638,G__124639,G__124640,G__124641,G__124642,G__124643,G__124644,G__124645,G__124646,G__124647,G__124648,G__124649,G__124650,G__124651,G__124652,G__124653,G__124654,G__124655,G__124656,G__124657,G__124658,G__124659,G__124660,G__124661,G__124662,G__124663,G__124664,G__124665,G__124666,G__124667,G__124668,G__124669));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124632,G__124633) : tailrecursion.hoplon.div.call(null,G__124632,G__124633));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124631) : tailrecursion.hoplon.div.call(null,G__124631));
})(),(function (){var G__124710 = cljs.core.PersistentArrayMap.EMPTY;
var G__124711 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124712 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Def"], null);
var G__124713 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124712,G__124713) : tailrecursion.hoplon.markdown.code_node.call(null,G__124712,G__124713));
})()," is our language",(function (){var G__124714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__124715 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__124714,G__124715) : tailrecursion.hoplon.markdown.simple_node.call(null,G__124714,G__124715));
})(),"s simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the ",(function (){var G__124716 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"circumference"], null);
var G__124717 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124716,G__124717) : tailrecursion.hoplon.markdown.code_node.call(null,G__124716,G__124717));
})()," computed above. In general, computational objects may have very complex structures, and it would be extremely inconvenient to have to remember and repeat their details each time we want to use them. Indeed, complex programs are constructed by building, step by step, computational objects of increasing complexity. The interpreter makes this step-by-step program construction particularly convenient because name-object associations can be created incrementally in successive interactions. This feature encourages the incremental development and testing of programs and is largely responsible for the fact that a Lisp program usually consists of a large number of relatively simple procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124710,G__124711) : tailrecursion.hoplon.markdown.para_node.call(null,G__124710,G__124711));
})(),(function (){var G__124718 = cljs.core.PersistentArrayMap.EMPTY;
var G__124719 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It should be clear that the possibility of associating values with symbols and later retrieving them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. This memory is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["environment"], null)], 0))," (more precisely the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["global environment"], null)], 0)),", since we will see later that a computation may involve a number of different environments).",(function (){var G__124720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__124721 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Chapter 3 will show that this notion of environment is crucial, both for understanding how the interpreter works and for implementing interpreters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124720,G__124721) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124720,G__124721));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124718,G__124719) : tailrecursion.hoplon.markdown.para_node.call(null,G__124718,G__124719));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124546;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124545;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124544;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124543;
}})()], 0));
var G__124135 = " ";
var G__124136 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Evaluating Combinations"], null),(function (){var _STAR_references_STAR_124722 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124723 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_124724 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124725 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124726 = cljs.core.PersistentArrayMap.EMPTY;
var G__124727 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating combinations, the interpreter is itself following a procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124726,G__124727) : tailrecursion.hoplon.markdown.para_node.call(null,G__124726,G__124727));
})(),(function (){var G__124728 = cljs.core.PersistentArrayMap.EMPTY;
var G__124729 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124730 = cljs.core.PersistentArrayMap.EMPTY;
var G__124731 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124732 = cljs.core.PersistentArrayMap.EMPTY;
var G__124733 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination, do the following:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124732,G__124733) : tailrecursion.hoplon.markdown.para_node.call(null,G__124732,G__124733));
})(),(function (){var _STAR_references_STAR_124734 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124735 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124736 = cljs.core.PersistentArrayMap.EMPTY;
var G__124737 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124738 = cljs.core.PersistentArrayMap.EMPTY;
var G__124739 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_124740 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124741 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Evaluate the subexpressions of the combination."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124741;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124740;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124738,G__124739) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124738,G__124739));
})(),(function (){var G__124742 = cljs.core.PersistentArrayMap.EMPTY;
var G__124743 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_124744 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124745 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands)."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124745;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124744;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124742,G__124743) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124742,G__124743));
})()], null);
return (tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2(G__124736,G__124737) : tailrecursion.hoplon.markdown.ordered_list_node.call(null,G__124736,G__124737));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124735;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124734;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124730,G__124731) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124730,G__124731));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__124728,G__124729) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__124728,G__124729));
})(),(function (){var G__124746 = cljs.core.PersistentArrayMap.EMPTY;
var G__124747 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even this simple rule illustrates some important points about processes in general. First, observe that the first step dictates that in order to accomplish the evaluation process for a combination we must first perform the evaluation process on each element of the combination. Thus, the evaluation rule is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0))," in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.",(function (){var G__124748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__124749 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It may seem strange that the evaluation rule says, as part of the first step, that we should evaluate the leftmost element of a combination, since at this point that can only be an operator such as ",(function (){var G__124750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"+"], null);
var G__124751 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124750,G__124751) : tailrecursion.hoplon.markdown.code_node.call(null,G__124750,G__124751));
})()," or ",(function (){var G__124752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"*"], null);
var G__124753 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124752,G__124753) : tailrecursion.hoplon.markdown.code_node.call(null,G__124752,G__124753));
})()," representing a built-in primitive procedure such as addition or multiplication. We will see later that it is useful to be able to work with combinations whose operators are themselves compound expressions."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124748,G__124749) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124748,G__124749));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124746,G__124747) : tailrecursion.hoplon.markdown.para_node.call(null,G__124746,G__124747));
})(),(function (){var G__124754 = cljs.core.PersistentArrayMap.EMPTY;
var G__124755 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice how succinctly the idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process. For example, evaluating"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124754,G__124755) : tailrecursion.hoplon.markdown.para_node.call(null,G__124754,G__124755));
})(),(function (){var G__124756 = (function (){var G__124757 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124758 = (function (){var G__124759 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124760 = "(";
var G__124761 = (function (){var G__124778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124779 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124778,G__124779) : tailrecursion.hoplon.span.call(null,G__124778,G__124779));
})();
var G__124762 = "(";
var G__124763 = (function (){var G__124780 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124781 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124780,G__124781) : tailrecursion.hoplon.span.call(null,G__124780,G__124781));
})();
var G__124764 = (function (){var G__124782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124783 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124782,G__124783) : tailrecursion.hoplon.span.call(null,G__124782,G__124783));
})();
var G__124765 = " (";
var G__124766 = (function (){var G__124784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124785 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124784,G__124785) : tailrecursion.hoplon.span.call(null,G__124784,G__124785));
})();
var G__124767 = (function (){var G__124786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124787 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124786,G__124787) : tailrecursion.hoplon.span.call(null,G__124786,G__124787));
})();
var G__124768 = " ";
var G__124769 = (function (){var G__124788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124789 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124788,G__124789) : tailrecursion.hoplon.span.call(null,G__124788,G__124789));
})();
var G__124770 = "))\n   (";
var G__124771 = (function (){var G__124790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124791 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124790,G__124791) : tailrecursion.hoplon.span.call(null,G__124790,G__124791));
})();
var G__124772 = (function (){var G__124792 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124793 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124792,G__124793) : tailrecursion.hoplon.span.call(null,G__124792,G__124793));
})();
var G__124773 = " ";
var G__124774 = (function (){var G__124794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124795 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124794,G__124795) : tailrecursion.hoplon.span.call(null,G__124794,G__124795));
})();
var G__124775 = " ";
var G__124776 = (function (){var G__124796 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__124797 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124796,G__124797) : tailrecursion.hoplon.span.call(null,G__124796,G__124797));
})();
var G__124777 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__124759,G__124760,G__124761,G__124762,G__124763,G__124764,G__124765,G__124766,G__124767,G__124768,G__124769,G__124770,G__124771,G__124772,G__124773,G__124774,G__124775,G__124776,G__124777) : tailrecursion.hoplon.pre.call(null,G__124759,G__124760,G__124761,G__124762,G__124763,G__124764,G__124765,G__124766,G__124767,G__124768,G__124769,G__124770,G__124771,G__124772,G__124773,G__124774,G__124775,G__124776,G__124777));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124757,G__124758) : tailrecursion.hoplon.div.call(null,G__124757,G__124758));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124756) : tailrecursion.hoplon.div.call(null,G__124756));
})(),(function (){var G__124798 = cljs.core.PersistentArrayMap.EMPTY;
var G__124799 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["requires that the evaluation rule be applied to four different combinations. We can obtain a picture of this process by representing the combination in the form of a tree, as shown in figure 1.1. Each combination is represented by a node with branches corresponding to the operator and the operands of the combination stemming from it. The terminal nodes (that is, nodes with no branches stemming from them) represent either operators or numbers. Viewing evaluation in terms of the tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels. In general, we shall see that recursion is a very powerful technique for dealing with hierarchical, treelike objects. In fact, the ``percolate values upward",(function (){var G__124800 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__124801 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__124800,G__124801) : tailrecursion.hoplon.markdown.simple_node.call(null,G__124800,G__124801));
})(),(function (){var G__124802 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__124803 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__124802,G__124803) : tailrecursion.hoplon.markdown.simple_node.call(null,G__124802,G__124803));
})()," form of the evaluation rule is an example of a general kind of process known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["tree accumulation"], null)], 0)),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124798,G__124799) : tailrecursion.hoplon.markdown.para_node.call(null,G__124798,G__124799));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124725;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124724;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124723;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124722;
}})(),"",content.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$footer,"Tree representation, showing the value of each subcombination."], null)], 0)),(function (){var _STAR_references_STAR_124804 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124805 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_124806 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124807 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124808 = cljs.core.PersistentArrayMap.EMPTY;
var G__124809 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not combinations, but primitive expressions such as numerals, built-in operators, or other names. We take care of the primitive cases by stipulating that"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124808,G__124809) : tailrecursion.hoplon.markdown.para_node.call(null,G__124808,G__124809));
})(),(function (){var G__124810 = cljs.core.PersistentArrayMap.EMPTY;
var G__124811 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124812 = cljs.core.PersistentArrayMap.EMPTY;
var G__124813 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_124814 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124815 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of numerals are the numbers that they name,"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124815;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124814;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124812,G__124813) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124812,G__124813));
})(),(function (){var G__124816 = cljs.core.PersistentArrayMap.EMPTY;
var G__124817 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_124818 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124819 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of built-in operators are the machine  instruction sequences that carry out the corresponding operations, and"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124819;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124818;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124816,G__124817) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124816,G__124817));
})(),(function (){var G__124820 = cljs.core.PersistentArrayMap.EMPTY;
var G__124821 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_124822 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124823 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of other names are the objects associated with  those names in the environment."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124823;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124822;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124820,G__124821) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124820,G__124821));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__124810,G__124811) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__124810,G__124811));
})(),(function (){var G__124824 = cljs.core.PersistentArrayMap.EMPTY;
var G__124825 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We may regard the second rule as a special case of the third one by stipulating that symbols such as + and * are also included in the global environment, and are associated with the sequences of machine instructions that are their ",(function (){var G__124826 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__124827 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["values."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124826,G__124827) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124826,G__124827));
})()," The key point to notice is the role of the environment in determining the meaning of the symbols in expressions. In an interactive language such as Lisp, it is meaningless to speak of the value of an expression such as ",(function (){var G__124828 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+\nx 1)"], null);
var G__124829 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124828,G__124829) : tailrecursion.hoplon.markdown.code_node.call(null,G__124828,G__124829));
})()," without specifying any information about the environment that would provide a meaning for the symbol ",(function (){var G__124830 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__124831 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124830,G__124831) : tailrecursion.hoplon.markdown.code_node.call(null,G__124830,G__124831));
})()," (or even for the symbol ",(function (){var G__124832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"+"], null);
var G__124833 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124832,G__124833) : tailrecursion.hoplon.markdown.code_node.call(null,G__124832,G__124833));
})(),"). As we shall see in chapter 3, the general notion of the environment as providing a context in which evaluation takes place will play an important role in our understanding of program execution."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124824,G__124825) : tailrecursion.hoplon.markdown.para_node.call(null,G__124824,G__124825));
})(),(function (){var G__124834 = cljs.core.PersistentArrayMap.EMPTY;
var G__124835 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that the evaluation rule given above does not handle definitions. For instance, evaluating ",(function (){var G__124836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(def x 3)"], null);
var G__124837 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124836,G__124837) : tailrecursion.hoplon.markdown.code_node.call(null,G__124836,G__124837));
})()," does not apply ",(function (){var G__124838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__124839 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124838,G__124839) : tailrecursion.hoplon.markdown.code_node.call(null,G__124838,G__124839));
})()," to two arguments, one of which is the value of the symbol ",(function (){var G__124840 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__124841 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124840,G__124841) : tailrecursion.hoplon.markdown.code_node.call(null,G__124840,G__124841));
})()," and the other of which is 3, since the purpose of the define is precisely to associate ",(function (){var G__124842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__124843 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124842,G__124843) : tailrecursion.hoplon.markdown.code_node.call(null,G__124842,G__124843));
})()," with a value. (That is, ",(function (){var G__124844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(def x\n3)"], null);
var G__124845 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124844,G__124845) : tailrecursion.hoplon.markdown.code_node.call(null,G__124844,G__124845));
})()," is not a combination.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124834,G__124835) : tailrecursion.hoplon.markdown.para_node.call(null,G__124834,G__124835));
})(),(function (){var G__124846 = cljs.core.PersistentArrayMap.EMPTY;
var G__124847 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such exceptions to the general evaluation rule are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["special forms"], null)], 0)),". ",(function (){var G__124848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Def"], null);
var G__124849 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__124848,G__124849) : tailrecursion.hoplon.markdown.code_node.call(null,G__124848,G__124849));
})()," is the only example of a special form that we have seen so far, but we will meet others shortly. Each special form has its own evaluation rule. The various kinds of expressions (each with its associated evaluation rule) constitute the syntax of the programming language. In comparison with most other programming languages, Lisp has a very simple syntax; that is, the evaluation rule for expressions can be described by a simple general rule together with specialized rules for a small number of special forms.",(function (){var G__124850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__124851 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Special syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["syntactic sugar"], null)], 0)),", to use a phrase coined by Peter Landin. In comparison with users of other languages, Lisp programmers, as a rule, are less concerned with matters of syntax. (By contrast, examine any Pascal manual and notice how much of it is devoted to descriptions of syntax.) This disdain for syntax is due partly to the flexibility of Lisp, which makes it easy to change surface syntax, and partly to the observation that many ",(function (){var G__124852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__124853 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["convenient"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124852,G__124853) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124852,G__124853));
})()," syntactic constructs, which make the language less uniform, end up causing more trouble than they are worth when programs become large and complex. In the words of Alan Perlis, ",(function (){var G__124854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__124855 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Syntactic sugar causes cancer of the semicolon."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124854,G__124855) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124854,G__124855));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124850,G__124851) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124850,G__124851));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124846,G__124847) : tailrecursion.hoplon.markdown.para_node.call(null,G__124846,G__124847));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124807;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124806;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124805;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124804;
}})()], 0));
var G__124137 = "";
var G__124138 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Compound Procedures"], null),(function (){var _STAR_references_STAR_124856 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124857 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_124858 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124859 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124860 = cljs.core.PersistentArrayMap.EMPTY;
var G__124861 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have identified in Lisp some of the elements that must appear in any powerful programming language:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124860,G__124861) : tailrecursion.hoplon.markdown.para_node.call(null,G__124860,G__124861));
})(),(function (){var G__124862 = cljs.core.PersistentArrayMap.EMPTY;
var G__124863 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124864 = cljs.core.PersistentArrayMap.EMPTY;
var G__124865 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124866 = cljs.core.PersistentArrayMap.EMPTY;
var G__124867 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Numbers and arithmetic operations are primitive data and procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124866,G__124867) : tailrecursion.hoplon.markdown.para_node.call(null,G__124866,G__124867));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124864,G__124865) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124864,G__124865));
})(),(function (){var G__124868 = cljs.core.PersistentArrayMap.EMPTY;
var G__124869 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_124870 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124871 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124872 = cljs.core.PersistentArrayMap.EMPTY;
var G__124873 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Nesting of combinations provides a means of combining operations."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124872,G__124873) : tailrecursion.hoplon.markdown.para_node.call(null,G__124872,G__124873));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124871;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124870;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124868,G__124869) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124868,G__124869));
})(),(function (){var G__124874 = cljs.core.PersistentArrayMap.EMPTY;
var G__124875 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_124876 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_124877 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__124878 = cljs.core.PersistentArrayMap.EMPTY;
var G__124879 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Definitions that associate names with values provide a  limited means of abstraction."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124878,G__124879) : tailrecursion.hoplon.markdown.para_node.call(null,G__124878,G__124879));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124877;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124876;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__124874,G__124875) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__124874,G__124875));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__124862,G__124863) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__124862,G__124863));
})(),(function (){var G__124880 = cljs.core.PersistentArrayMap.EMPTY;
var G__124881 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we will learn about ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedure definitions"], null)], 0)),", a much more powerful abstraction technique by which a compound operation can be given a name and then referred to as a unit."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124880,G__124881) : tailrecursion.hoplon.markdown.para_node.call(null,G__124880,G__124881));
})(),(function (){var G__124882 = cljs.core.PersistentArrayMap.EMPTY;
var G__124883 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We begin by examining how to express the idea of ",(function (){var G__124884 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__124885 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["squaring."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124884,G__124885) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124884,G__124885));
})()," We might say, ",(function (){var G__124886 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__124887 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To square something, multiply it by itself."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__124886,G__124887) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__124886,G__124887));
})()," This is expressed in scheme as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124882,G__124883) : tailrecursion.hoplon.markdown.para_node.call(null,G__124882,G__124883));
})(),(function (){var G__124888 = (function (){var G__124889 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124890 = (function (){var G__124891 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124892 = "(";
var G__124893 = (function (){var G__124904 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__124905 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124904,G__124905) : tailrecursion.hoplon.span.call(null,G__124904,G__124905));
})();
var G__124894 = "(";
var G__124895 = (function (){var G__124906 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__124907 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124906,G__124907) : tailrecursion.hoplon.span.call(null,G__124906,G__124907));
})();
var G__124896 = " ";
var G__124897 = (function (){var G__124908 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124909 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124908,G__124909) : tailrecursion.hoplon.span.call(null,G__124908,G__124909));
})();
var G__124898 = ") (";
var G__124899 = (function (){var G__124910 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124911 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124910,G__124911) : tailrecursion.hoplon.span.call(null,G__124910,G__124911));
})();
var G__124900 = (function (){var G__124912 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124913 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124912,G__124913) : tailrecursion.hoplon.span.call(null,G__124912,G__124913));
})();
var G__124901 = " ";
var G__124902 = (function (){var G__124914 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124915 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124914,G__124915) : tailrecursion.hoplon.span.call(null,G__124914,G__124915));
})();
var G__124903 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__124891,G__124892,G__124893,G__124894,G__124895,G__124896,G__124897,G__124898,G__124899,G__124900,G__124901,G__124902,G__124903) : tailrecursion.hoplon.pre.call(null,G__124891,G__124892,G__124893,G__124894,G__124895,G__124896,G__124897,G__124898,G__124899,G__124900,G__124901,G__124902,G__124903));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124889,G__124890) : tailrecursion.hoplon.div.call(null,G__124889,G__124890));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124888) : tailrecursion.hoplon.div.call(null,G__124888));
})(),(function (){var G__124916 = cljs.core.PersistentArrayMap.EMPTY;
var G__124917 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["but in Clojure, we would write that as,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124916,G__124917) : tailrecursion.hoplon.markdown.para_node.call(null,G__124916,G__124917));
})(),(function (){var G__124918 = (function (){var G__124919 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124920 = (function (){var G__124921 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124922 = "(";
var G__124923 = (function (){var G__124933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__124934 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124933,G__124934) : tailrecursion.hoplon.span.call(null,G__124933,G__124934));
})();
var G__124924 = (function (){var G__124935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124936 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124935,G__124936) : tailrecursion.hoplon.span.call(null,G__124935,G__124936));
})();
var G__124925 = " [";
var G__124926 = (function (){var G__124937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124938 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124937,G__124938) : tailrecursion.hoplon.span.call(null,G__124937,G__124938));
})();
var G__124927 = "] (";
var G__124928 = (function (){var G__124939 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124940 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124939,G__124940) : tailrecursion.hoplon.span.call(null,G__124939,G__124940));
})();
var G__124929 = (function (){var G__124941 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124942 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124941,G__124942) : tailrecursion.hoplon.span.call(null,G__124941,G__124942));
})();
var G__124930 = " ";
var G__124931 = (function (){var G__124943 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124944 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124943,G__124944) : tailrecursion.hoplon.span.call(null,G__124943,G__124944));
})();
var G__124932 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__124921,G__124922,G__124923,G__124924,G__124925,G__124926,G__124927,G__124928,G__124929,G__124930,G__124931,G__124932) : tailrecursion.hoplon.pre.call(null,G__124921,G__124922,G__124923,G__124924,G__124925,G__124926,G__124927,G__124928,G__124929,G__124930,G__124931,G__124932));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124919,G__124920) : tailrecursion.hoplon.div.call(null,G__124919,G__124920));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124918) : tailrecursion.hoplon.div.call(null,G__124918));
})(),(function (){var G__124945 = cljs.core.PersistentArrayMap.EMPTY;
var G__124946 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note that Clojure differentiates between definining an atom and defining a procedure! We can understand this in the following way:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__124945,G__124946) : tailrecursion.hoplon.markdown.para_node.call(null,G__124945,G__124946));
})(),(function (){var G__124947 = (function (){var G__124948 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__124949 = (function (){var G__124950 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__124951 = "(";
var G__124952 = (function (){var G__124989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__124990 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124989,G__124990) : tailrecursion.hoplon.span.call(null,G__124989,G__124990));
})();
var G__124953 = (function (){var G__124991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124992 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124991,G__124992) : tailrecursion.hoplon.span.call(null,G__124991,G__124992));
})();
var G__124954 = "      [";
var G__124955 = (function (){var G__124993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124994 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124993,G__124994) : tailrecursion.hoplon.span.call(null,G__124993,G__124994));
})();
var G__124956 = "]      (";
var G__124957 = (function (){var G__124995 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__124996 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124995,G__124996) : tailrecursion.hoplon.span.call(null,G__124995,G__124996));
})();
var G__124958 = "     ";
var G__124959 = (function (){var G__124997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__124998 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124997,G__124998) : tailrecursion.hoplon.span.call(null,G__124997,G__124998));
})();
var G__124960 = "      ";
var G__124961 = (function (){var G__124999 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125000 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__124999,G__125000) : tailrecursion.hoplon.span.call(null,G__124999,G__125000));
})();
var G__124962 = "))\n  ";
var G__124963 = (function (){var G__125001 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__125002 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125001,G__125002) : tailrecursion.hoplon.span.call(null,G__125001,G__125002));
})();
var G__124964 = "    ";
var G__124965 = (function (){var G__125003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__125004 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125003,G__125004) : tailrecursion.hoplon.span.call(null,G__125003,G__125004));
})();
var G__124966 = "          ";
var G__124967 = (function (){var G__125005 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__125006 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125005,G__125006) : tailrecursion.hoplon.span.call(null,G__125005,G__125006));
})();
var G__124968 = "        ";
var G__124969 = (function (){var G__125007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__125008 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125007,G__125008) : tailrecursion.hoplon.span.call(null,G__125007,G__125008));
})();
var G__124970 = "     ";
var G__124971 = (function (){var G__125009 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__125010 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125009,G__125010) : tailrecursion.hoplon.span.call(null,G__125009,G__125010));
})();
var G__124972 = "      ";
var G__124973 = (function (){var G__125011 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__125012 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125011,G__125012) : tailrecursion.hoplon.span.call(null,G__125011,G__125012));
})();
var G__124974 = "\n ";
var G__124975 = (function (){var G__125013 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125014 = "to";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125013,G__125014) : tailrecursion.hoplon.span.call(null,G__125013,G__125014));
})();
var G__124976 = "  ";
var G__124977 = (function (){var G__125015 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #BA2121"], null);
var G__125016 = "\"square\"";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125015,G__125016) : tailrecursion.hoplon.span.call(null,G__125015,G__125016));
})();
var G__124978 = " ";
var G__124979 = (function (){var G__125017 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125018 = "something";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125017,G__125018) : tailrecursion.hoplon.span.call(null,G__125017,G__125018));
})();
var G__124980 = ", ";
var G__124981 = (function (){var G__125019 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125020 = "multiply";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125019,G__125020) : tailrecursion.hoplon.span.call(null,G__125019,G__125020));
})();
var G__124982 = " ";
var G__124983 = (function (){var G__125021 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125022 = "it";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125021,G__125022) : tailrecursion.hoplon.span.call(null,G__125021,G__125022));
})();
var G__124984 = " ";
var G__124985 = (function (){var G__125023 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125024 = "by";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125023,G__125024) : tailrecursion.hoplon.span.call(null,G__125023,G__125024));
})();
var G__124986 = " ";
var G__124987 = (function (){var G__125025 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125026 = "itself.";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125025,G__125026) : tailrecursion.hoplon.span.call(null,G__125025,G__125026));
})();
var G__124988 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__124950,G__124951,G__124952,G__124953,G__124954,G__124955,G__124956,G__124957,G__124958,G__124959,G__124960,G__124961,G__124962,G__124963,G__124964,G__124965,G__124966,G__124967,G__124968,G__124969,G__124970,G__124971,G__124972,G__124973,G__124974,G__124975,G__124976,G__124977,G__124978,G__124979,G__124980,G__124981,G__124982,G__124983,G__124984,G__124985,G__124986,G__124987,G__124988) : tailrecursion.hoplon.pre.call(null,G__124950,G__124951,G__124952,G__124953,G__124954,G__124955,G__124956,G__124957,G__124958,G__124959,G__124960,G__124961,G__124962,G__124963,G__124964,G__124965,G__124966,G__124967,G__124968,G__124969,G__124970,G__124971,G__124972,G__124973,G__124974,G__124975,G__124976,G__124977,G__124978,G__124979,G__124980,G__124981,G__124982,G__124983,G__124984,G__124985,G__124986,G__124987,G__124988));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__124948,G__124949) : tailrecursion.hoplon.div.call(null,G__124948,G__124949));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__124947) : tailrecursion.hoplon.div.call(null,G__124947));
})(),(function (){var G__125027 = cljs.core.PersistentArrayMap.EMPTY;
var G__125028 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have here a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["compound procedure"], null)], 0)),", which has been given the name ",(function (){var G__125029 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__125030 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125029,G__125030) : tailrecursion.hoplon.markdown.code_node.call(null,G__125029,G__125030));
})(),". The procedure represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, x, which plays the same role that a pronoun plays in natural language. Evaluating the definition creates this compound procedure and associates it with the name square.",(function (){var G__125031 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__125032 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that there are two different operations being combined here: we are creating the procedure, and we are giving it the name ",(function (){var G__125033 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__125034 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125033,G__125034) : tailrecursion.hoplon.markdown.code_node.call(null,G__125033,G__125034));
})(),". It is possible, indeed important, to be able to separate these two notions ",(function (){var G__125035 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__125036 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125035,G__125036) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125035,G__125036));
})()," to create procedures without naming them, and to give names to procedures that have already been created. We will see how to do this in section 1.3.2."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125031,G__125032) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125031,G__125032));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125027,G__125028) : tailrecursion.hoplon.markdown.para_node.call(null,G__125027,G__125028));
})(),(function (){var G__125037 = cljs.core.PersistentArrayMap.EMPTY;
var G__125038 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a procedure definition is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125037,G__125038) : tailrecursion.hoplon.markdown.para_node.call(null,G__125037,G__125038));
})(),(function (){var G__125039 = (function (){var G__125040 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125041 = (function (){var G__125042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125043 = "(";
var G__125044 = (function (){var G__125053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125054 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125053,G__125054) : tailrecursion.hoplon.span.call(null,G__125053,G__125054));
})();
var G__125045 = (function (){var G__125055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125056 = "<name>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125055,G__125056) : tailrecursion.hoplon.span.call(null,G__125055,G__125056));
})();
var G__125046 = " [";
var G__125047 = (function (){var G__125057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125058 = "<formal";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125057,G__125058) : tailrecursion.hoplon.span.call(null,G__125057,G__125058));
})();
var G__125048 = " ";
var G__125049 = (function (){var G__125059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125060 = "parameters>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125059,G__125060) : tailrecursion.hoplon.span.call(null,G__125059,G__125060));
})();
var G__125050 = "] ";
var G__125051 = (function (){var G__125061 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125062 = "<body>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125061,G__125062) : tailrecursion.hoplon.span.call(null,G__125061,G__125062));
})();
var G__125052 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__125042,G__125043,G__125044,G__125045,G__125046,G__125047,G__125048,G__125049,G__125050,G__125051,G__125052) : tailrecursion.hoplon.pre.call(null,G__125042,G__125043,G__125044,G__125045,G__125046,G__125047,G__125048,G__125049,G__125050,G__125051,G__125052));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125040,G__125041) : tailrecursion.hoplon.div.call(null,G__125040,G__125041));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125039) : tailrecursion.hoplon.div.call(null,G__125039));
})(),(function (){var G__125063 = cljs.core.PersistentArrayMap.EMPTY;
var G__125064 = new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Just in case you end up reading from the original SICP, let",(function (){var G__125065 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125066 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125065,G__125066) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125065,G__125066));
})(),"s take a moment to note the differences between the Scheme method of defining compound procedures, and the Clojure method. The Scheme method ",(function (){var G__125067 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(define\n(<name> <formal parameters>) <body>)"], null);
var G__125068 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125067,G__125068) : tailrecursion.hoplon.markdown.code_node.call(null,G__125067,G__125068));
})()," is very straight forward: it defines the first form to be the second. In this way, we can see ",(function (){var G__125069 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"define"], null);
var G__125070 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125069,G__125070) : tailrecursion.hoplon.markdown.code_node.call(null,G__125069,G__125070));
})()," to be a procedure that takes two arguments. The procedure ",(function (){var G__125071 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"defn"], null);
var G__125072 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125071,G__125072) : tailrecursion.hoplon.markdown.code_node.call(null,G__125071,G__125072));
})()," in Clojure takes three arguments: the first being the name of the intended procedure (in our example ",(function (){var G__125073 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125074 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125075 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__125076 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125075,G__125076) : tailrecursion.hoplon.markdown.code_node.call(null,G__125075,G__125076));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125073,G__125074) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125073,G__125074));
})(),"), the second is a list of all the arguments (we",(function (){var G__125077 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125078 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125077,G__125078) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125077,G__125078));
})(),"ll cover lists later, but in our example it was ",(function (){var G__125079 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"[x]"], null);
var G__125080 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125079,G__125080) : tailrecursion.hoplon.markdown.code_node.call(null,G__125079,G__125080));
})(),"), and the third is the intended procedure or the body (in our example it was ",(function (){var G__125081 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* x x)"], null);
var G__125082 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125081,G__125082) : tailrecursion.hoplon.markdown.code_node.call(null,G__125081,G__125082));
})(),")."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125063,G__125064) : tailrecursion.hoplon.markdown.para_node.call(null,G__125063,G__125064));
})(),(function (){var G__125083 = cljs.core.PersistentArrayMap.EMPTY;
var G__125084 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The <name> is a symbol to be associated with the procedure definition in the environment.",(function (){var G__125085 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__125086 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, we will describe the general syntax of expressions by using italic symbols delimited by angle brackets ",(function (){var G__125087 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__125088 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125087,G__125088) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125087,G__125088));
})()," e.g., ",(function (){var G__125089 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<name>"], null);
var G__125090 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125089,G__125090) : tailrecursion.hoplon.markdown.code_node.call(null,G__125089,G__125090));
})()," ",(function (){var G__125091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__125092 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125091,G__125092) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125091,G__125092));
})()," to denote the ",(function (){var G__125093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125094 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["slots"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125093,G__125094) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125093,G__125094));
})()," in the expression to be filled in when such an expression is actually used."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125085,G__125086) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125085,G__125086));
})()," The <formal\nparameters> are the names used within the body of the procedure to refer to the corresponding arguments of the procedure. The <body> is an expression that will yield the value of the procedure application when the formal parameters are replaced by the actual arguments to which the procedure is applied.",(function (){var G__125095 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__125096 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["More generally, the body of the procedure can be a sequence of expressions. In this case, the interpreter evaluates each expression in the sequence in turn and returns the value of the final expression as the value of the procedure application."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125095,G__125096) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125095,G__125096));
})()," In Scheme, the <name> and the <formal parameters> are grouped within parentheses, just as they would be in an actual call to the procedure being defined, but in Clojure they are not."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125083,G__125084) : tailrecursion.hoplon.markdown.para_node.call(null,G__125083,G__125084));
})(),(function (){var G__125097 = cljs.core.PersistentArrayMap.EMPTY;
var G__125098 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Having defined square, we can now use it:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125097,G__125098) : tailrecursion.hoplon.markdown.para_node.call(null,G__125097,G__125098));
})(),(function (){var G__125099 = (function (){var G__125100 = "(square 21)\n441\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125100) : tailrecursion.hoplon.code.call(null,G__125100));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125099) : tailrecursion.hoplon.pre.call(null,G__125099));
})(),(function (){var G__125101 = (function (){var G__125102 = "(square (+ 2 5))\n49\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125102) : tailrecursion.hoplon.code.call(null,G__125102));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125101) : tailrecursion.hoplon.pre.call(null,G__125101));
})(),(function (){var G__125103 = (function (){var G__125104 = "(square (square 3))\n81\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125104) : tailrecursion.hoplon.code.call(null,G__125104));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125103) : tailrecursion.hoplon.pre.call(null,G__125103));
})(),(function (){var G__125105 = cljs.core.PersistentArrayMap.EMPTY;
var G__125106 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can also use square as a building block in defining other procedures. For example, \\(x^2 + y^2\\) can be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125105,G__125106) : tailrecursion.hoplon.markdown.para_node.call(null,G__125105,G__125106));
})(),(function (){var G__125107 = (function (){var G__125108 = "(+ (square x) (square y))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125108) : tailrecursion.hoplon.code.call(null,G__125108));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125107) : tailrecursion.hoplon.pre.call(null,G__125107));
})(),(function (){var G__125109 = cljs.core.PersistentArrayMap.EMPTY;
var G__125110 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can easily define a procedure sum-of-squares that, given any two numbers as arguments, produces the sum of their squares:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125109,G__125110) : tailrecursion.hoplon.markdown.para_node.call(null,G__125109,G__125110));
})(),(function (){var G__125111 = (function (){var G__125112 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125113 = (function (){var G__125114 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125115 = "(";
var G__125116 = (function (){var G__125133 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125134 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125133,G__125134) : tailrecursion.hoplon.span.call(null,G__125133,G__125134));
})();
var G__125117 = (function (){var G__125135 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125136 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125135,G__125136) : tailrecursion.hoplon.span.call(null,G__125135,G__125136));
})();
var G__125118 = " [";
var G__125119 = (function (){var G__125137 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125138 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125137,G__125138) : tailrecursion.hoplon.span.call(null,G__125137,G__125138));
})();
var G__125120 = " ";
var G__125121 = (function (){var G__125139 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125140 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125139,G__125140) : tailrecursion.hoplon.span.call(null,G__125139,G__125140));
})();
var G__125122 = "]\n  (";
var G__125123 = (function (){var G__125141 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125142 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125141,G__125142) : tailrecursion.hoplon.span.call(null,G__125141,G__125142));
})();
var G__125124 = "(";
var G__125125 = (function (){var G__125143 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__125144 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125143,G__125144) : tailrecursion.hoplon.span.call(null,G__125143,G__125144));
})();
var G__125126 = " ";
var G__125127 = (function (){var G__125145 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125146 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125145,G__125146) : tailrecursion.hoplon.span.call(null,G__125145,G__125146));
})();
var G__125128 = ") (";
var G__125129 = (function (){var G__125147 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__125148 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125147,G__125148) : tailrecursion.hoplon.span.call(null,G__125147,G__125148));
})();
var G__125130 = " ";
var G__125131 = (function (){var G__125149 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125150 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125149,G__125150) : tailrecursion.hoplon.span.call(null,G__125149,G__125150));
})();
var G__125132 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__125114,G__125115,G__125116,G__125117,G__125118,G__125119,G__125120,G__125121,G__125122,G__125123,G__125124,G__125125,G__125126,G__125127,G__125128,G__125129,G__125130,G__125131,G__125132) : tailrecursion.hoplon.pre.call(null,G__125114,G__125115,G__125116,G__125117,G__125118,G__125119,G__125120,G__125121,G__125122,G__125123,G__125124,G__125125,G__125126,G__125127,G__125128,G__125129,G__125130,G__125131,G__125132));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125112,G__125113) : tailrecursion.hoplon.div.call(null,G__125112,G__125113));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125111) : tailrecursion.hoplon.div.call(null,G__125111));
})(),(function (){var G__125151 = (function (){var G__125152 = "(sum-of-squares 3 4)\n25\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125152) : tailrecursion.hoplon.code.call(null,G__125152));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125151) : tailrecursion.hoplon.pre.call(null,G__125151));
})(),(function (){var G__125153 = cljs.core.PersistentArrayMap.EMPTY;
var G__125154 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we can use sum-of-squares as a building block in constructing further procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125153,G__125154) : tailrecursion.hoplon.markdown.para_node.call(null,G__125153,G__125154));
})(),(function (){var G__125155 = (function (){var G__125156 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125157 = (function (){var G__125158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125159 = "(";
var G__125160 = (function (){var G__125177 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125178 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125177,G__125178) : tailrecursion.hoplon.span.call(null,G__125177,G__125178));
})();
var G__125161 = (function (){var G__125179 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125180 = "f";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125179,G__125180) : tailrecursion.hoplon.span.call(null,G__125179,G__125180));
})();
var G__125162 = " [";
var G__125163 = (function (){var G__125181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125182 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125181,G__125182) : tailrecursion.hoplon.span.call(null,G__125181,G__125182));
})();
var G__125164 = "]\n  (";
var G__125165 = (function (){var G__125183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__125184 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125183,G__125184) : tailrecursion.hoplon.span.call(null,G__125183,G__125184));
})();
var G__125166 = " (";
var G__125167 = (function (){var G__125185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125186 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125185,G__125186) : tailrecursion.hoplon.span.call(null,G__125185,G__125186));
})();
var G__125168 = (function (){var G__125187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125188 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125187,G__125188) : tailrecursion.hoplon.span.call(null,G__125187,G__125188));
})();
var G__125169 = " ";
var G__125170 = (function (){var G__125189 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125190 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125189,G__125190) : tailrecursion.hoplon.span.call(null,G__125189,G__125190));
})();
var G__125171 = ") (";
var G__125172 = (function (){var G__125191 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125192 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125191,G__125192) : tailrecursion.hoplon.span.call(null,G__125191,G__125192));
})();
var G__125173 = (function (){var G__125193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125194 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125193,G__125194) : tailrecursion.hoplon.span.call(null,G__125193,G__125194));
})();
var G__125174 = " ";
var G__125175 = (function (){var G__125195 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125196 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125195,G__125196) : tailrecursion.hoplon.span.call(null,G__125195,G__125196));
})();
var G__125176 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__125158,G__125159,G__125160,G__125161,G__125162,G__125163,G__125164,G__125165,G__125166,G__125167,G__125168,G__125169,G__125170,G__125171,G__125172,G__125173,G__125174,G__125175,G__125176) : tailrecursion.hoplon.pre.call(null,G__125158,G__125159,G__125160,G__125161,G__125162,G__125163,G__125164,G__125165,G__125166,G__125167,G__125168,G__125169,G__125170,G__125171,G__125172,G__125173,G__125174,G__125175,G__125176));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125156,G__125157) : tailrecursion.hoplon.div.call(null,G__125156,G__125157));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125155) : tailrecursion.hoplon.div.call(null,G__125155));
})(),(function (){var G__125197 = (function (){var G__125198 = "(f 5)\n136\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125198) : tailrecursion.hoplon.code.call(null,G__125198));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125197) : tailrecursion.hoplon.pre.call(null,G__125197));
})(),(function (){var G__125199 = cljs.core.PersistentArrayMap.EMPTY;
var G__125200 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Compound procedures are used in exactly the same way as primitive procedures. Indeed, one could not tell by looking at the definition of ",(function (){var G__125201 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sum-of-squares"], null);
var G__125202 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125201,G__125202) : tailrecursion.hoplon.markdown.code_node.call(null,G__125201,G__125202));
})()," given above whether ",(function (){var G__125203 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__125204 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125203,G__125204) : tailrecursion.hoplon.markdown.code_node.call(null,G__125203,G__125204));
})()," was built into the interpreter, like ",(function (){var G__125205 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"+"], null);
var G__125206 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125205,G__125206) : tailrecursion.hoplon.markdown.code_node.call(null,G__125205,G__125206));
})()," and ",(function (){var G__125207 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"*"], null);
var G__125208 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125207,G__125208) : tailrecursion.hoplon.markdown.code_node.call(null,G__125207,G__125208));
})(),", or defined as a compound procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125199,G__125200) : tailrecursion.hoplon.markdown.para_node.call(null,G__125199,G__125200));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124859;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124858;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_124857;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_124856;
}})()], 0));
var G__124139 = "";
var G__124140 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"The Substitution Model for Procedure Application"], null),(function (){var _STAR_references_STAR_125209 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125210 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125211 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125212 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125213 = cljs.core.PersistentArrayMap.EMPTY;
var G__125214 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination whose operator names a compound procedure, the interpreter follows much the same process as for combinations whose operators name primitive procedures, which we described in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#section-1.1.3",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),". That is, the interpreter evaluates the elements of the combination and applies the procedure (which is the value of the operator of the combination) to the arguments (which are the values of the operands of the combination)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125213,G__125214) : tailrecursion.hoplon.markdown.para_node.call(null,G__125213,G__125214));
})(),(function (){var G__125215 = cljs.core.PersistentArrayMap.EMPTY;
var G__125216 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can assume that the mechanism for applying primitive procedures to arguments is built into the interpreter. For compound procedures, the application process is as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125215,G__125216) : tailrecursion.hoplon.markdown.para_node.call(null,G__125215,G__125216));
})(),(function (){var G__125217 = cljs.core.PersistentArrayMap.EMPTY;
var G__125218 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125219 = cljs.core.PersistentArrayMap.EMPTY;
var G__125220 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_125221 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125222 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125222;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125221;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__125219,G__125220) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__125219,G__125220));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__125217,G__125218) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__125217,G__125218));
})(),(function (){var G__125223 = cljs.core.PersistentArrayMap.EMPTY;
var G__125224 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To illustrate this process, let",(function (){var G__125225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125226 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125225,G__125226) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125225,G__125226));
})(),"s evaluate the combination"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125223,G__125224) : tailrecursion.hoplon.markdown.para_node.call(null,G__125223,G__125224));
})(),(function (){var G__125227 = (function (){var G__125228 = "(f 5)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125228) : tailrecursion.hoplon.code.call(null,G__125228));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125227) : tailrecursion.hoplon.pre.call(null,G__125227));
})(),(function (){var G__125229 = cljs.core.PersistentArrayMap.EMPTY;
var G__125230 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where f is the procedure defined in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#section-1.1.4",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.4"], null)], 0)),". We begin by retrieving the body of f:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125229,G__125230) : tailrecursion.hoplon.markdown.para_node.call(null,G__125229,G__125230));
})(),(function (){var G__125231 = (function (){var G__125232 = "(sum-of-squares (+ a 1) (* a 2))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125232) : tailrecursion.hoplon.code.call(null,G__125232));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125231) : tailrecursion.hoplon.pre.call(null,G__125231));
})(),(function (){var G__125233 = cljs.core.PersistentArrayMap.EMPTY;
var G__125234 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then we replace the formal parameter a by the argument 5:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125233,G__125234) : tailrecursion.hoplon.markdown.para_node.call(null,G__125233,G__125234));
})(),(function (){var G__125235 = (function (){var G__125236 = "(sum-of-squares (+ 5 1) (* 5 2))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125236) : tailrecursion.hoplon.code.call(null,G__125236));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125235) : tailrecursion.hoplon.pre.call(null,G__125235));
})(),(function (){var G__125237 = cljs.core.PersistentArrayMap.EMPTY;
var G__125238 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus the problem reduces to the evaluation of a combination with two operands and an operator ",(function (){var G__125239 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sum-of-squares"], null);
var G__125240 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125239,G__125240) : tailrecursion.hoplon.markdown.code_node.call(null,G__125239,G__125240));
})(),". Evaluating this combination involves three subproblems. We must evaluate the operator to get the procedure to be applied, and we must evaluate the operands to get the arguments. Now ",(function (){var G__125241 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ 5 1)"], null);
var G__125242 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125241,G__125242) : tailrecursion.hoplon.markdown.code_node.call(null,G__125241,G__125242));
})()," produces 6 and ",(function (){var G__125243 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* 5 2)"], null);
var G__125244 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125243,G__125244) : tailrecursion.hoplon.markdown.code_node.call(null,G__125243,G__125244));
})()," produces 10, so we must apply the ",(function (){var G__125245 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sum-of-squares"], null);
var G__125246 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125245,G__125246) : tailrecursion.hoplon.markdown.code_node.call(null,G__125245,G__125246));
})()," procedure to 6 and 10. These values are substituted for the formal parameters ",(function (){var G__125247 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__125248 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125247,G__125248) : tailrecursion.hoplon.markdown.code_node.call(null,G__125247,G__125248));
})()," and ",(function (){var G__125249 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"y"], null);
var G__125250 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125249,G__125250) : tailrecursion.hoplon.markdown.code_node.call(null,G__125249,G__125250));
})()," in the body of ",(function (){var G__125251 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sum-of-squares"], null);
var G__125252 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125251,G__125252) : tailrecursion.hoplon.markdown.code_node.call(null,G__125251,G__125252));
})(),", reducing the expression to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125237,G__125238) : tailrecursion.hoplon.markdown.para_node.call(null,G__125237,G__125238));
})(),(function (){var G__125253 = (function (){var G__125254 = "(+ (square 6) (square 10))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125254) : tailrecursion.hoplon.code.call(null,G__125254));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125253) : tailrecursion.hoplon.pre.call(null,G__125253));
})(),(function (){var G__125255 = cljs.core.PersistentArrayMap.EMPTY;
var G__125256 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we use the definition of ",(function (){var G__125257 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__125258 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125257,G__125258) : tailrecursion.hoplon.markdown.code_node.call(null,G__125257,G__125258));
})(),", this reduces to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125255,G__125256) : tailrecursion.hoplon.markdown.para_node.call(null,G__125255,G__125256));
})(),(function (){var G__125259 = (function (){var G__125260 = "(+ (* 6 6) (* 10 10))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125260) : tailrecursion.hoplon.code.call(null,G__125260));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125259) : tailrecursion.hoplon.pre.call(null,G__125259));
})(),(function (){var G__125261 = cljs.core.PersistentArrayMap.EMPTY;
var G__125262 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which reduces by multiplication to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125261,G__125262) : tailrecursion.hoplon.markdown.para_node.call(null,G__125261,G__125262));
})(),(function (){var G__125263 = (function (){var G__125264 = "(+ 36 100)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125264) : tailrecursion.hoplon.code.call(null,G__125264));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125263) : tailrecursion.hoplon.pre.call(null,G__125263));
})(),(function (){var G__125265 = cljs.core.PersistentArrayMap.EMPTY;
var G__125266 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and finally to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125265,G__125266) : tailrecursion.hoplon.markdown.para_node.call(null,G__125265,G__125266));
})(),(function (){var G__125267 = (function (){var G__125268 = "136\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125268) : tailrecursion.hoplon.code.call(null,G__125268));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125267) : tailrecursion.hoplon.pre.call(null,G__125267));
})(),(function (){var G__125269 = cljs.core.PersistentArrayMap.EMPTY;
var G__125270 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The process we have just described is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution model"], null)], 0))," for procedure application. It can be taken as a model that determines the ",(function (){var G__125271 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125272 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["meaning"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125271,G__125272) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125271,G__125272));
})()," of procedure application, insofar as the procedures in this chapter are concerned. However, there are two points that should be stressed:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125269,G__125270) : tailrecursion.hoplon.markdown.para_node.call(null,G__125269,G__125270));
})(),(function (){var G__125273 = cljs.core.PersistentArrayMap.EMPTY;
var G__125274 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125275 = cljs.core.PersistentArrayMap.EMPTY;
var G__125276 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125277 = cljs.core.PersistentArrayMap.EMPTY;
var G__125278 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The purpose of the substitution is to help us think about procedure application, not to provide a description of how the interpreter really works. Typical interpreters do not evaluate procedure applications by manipulating the text of a procedure to substitute values for the formal parameters. In practice, the ",(function (){var G__125279 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125280 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125279,G__125280) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125279,G__125280));
})()," is accomplished by using a local environment for the formal parameters. We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125277,G__125278) : tailrecursion.hoplon.markdown.para_node.call(null,G__125277,G__125278));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__125275,G__125276) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__125275,G__125276));
})(),(function (){var G__125281 = cljs.core.PersistentArrayMap.EMPTY;
var G__125282 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_125283 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125284 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125285 = cljs.core.PersistentArrayMap.EMPTY;
var G__125286 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Over the course of this book, we will present a sequence of increasingly elaborate models of how interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. The substitution model is only the first of these models ",(function (){var G__125287 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__125288 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125287,G__125288) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125287,G__125288));
})()," a way to get started thinking formally about the evaluation process. In general, when modeling phenomena in science and engineering, we begin with simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate and must be replaced by more refined models. The substitution model is no exception. In particular, when we address in chapter 3 the use of procedures with ",(function (){var G__125289 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125290 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mutable data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125289,G__125290) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125289,G__125290));
})(),", we will see that the substitution model breaks down and must be replaced by a more complicated model of procedure application.",(function (){var G__125291 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__125292 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process. The problem arises from the possibility of confusion between the names used for the formal parameters of a procedure and the (possibly identical) names used in the expressions to which the procedure may be applied. Indeed, there is a long history of erroneous definitions of substitution in the literature of logic and programming semantics. See Stoy 1977 for a careful discussion of substitution."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125291,G__125292) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125291,G__125292));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125285,G__125286) : tailrecursion.hoplon.markdown.para_node.call(null,G__125285,G__125286));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125284;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125283;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__125281,G__125282) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__125281,G__125282));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__125273,G__125274) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__125273,G__125274));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125212;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125211;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125210;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125209;
}})()], 0));
var G__124141 = "";
var G__124142 = content.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Applicative Order vs Normal Order"], null),(function (){var _STAR_references_STAR_125293 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125294 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125295 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125296 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125297 = cljs.core.PersistentArrayMap.EMPTY;
var G__125298 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["According to the description of evaluation given in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#section-1.1.3",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),", the interpreter first evaluates the operator and operands and then applies the resulting procedure to the resulting arguments. This is not the only way to perform evaluation. An alternative evaluation model would not evaluate the operands until their values were needed. Instead it would first substitute operand expressions for parameters until it obtained an expression involving only primitive operators, and would then perform the evaluation. If we used this method, the evaluation of"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125297,G__125298) : tailrecursion.hoplon.markdown.para_node.call(null,G__125297,G__125298));
})(),(function (){var G__125299 = (function (){var G__125300 = "(f 5)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125300) : tailrecursion.hoplon.code.call(null,G__125300));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125299) : tailrecursion.hoplon.pre.call(null,G__125299));
})(),(function (){var G__125301 = cljs.core.PersistentArrayMap.EMPTY;
var G__125302 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["would proceed according to the sequence of expansions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125301,G__125302) : tailrecursion.hoplon.markdown.para_node.call(null,G__125301,G__125302));
})(),(function (){var G__125303 = (function (){var G__125304 = "(sum-of-squares (+ 5 1) (* 5 2))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125304) : tailrecursion.hoplon.code.call(null,G__125304));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125303) : tailrecursion.hoplon.pre.call(null,G__125303));
})(),(function (){var G__125305 = (function (){var G__125306 = "(+    (square (+ 5 1))      (square (* 5 2))  )\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125306) : tailrecursion.hoplon.code.call(null,G__125306));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125305) : tailrecursion.hoplon.pre.call(null,G__125305));
})(),(function (){var G__125307 = (function (){var G__125308 = "(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125308) : tailrecursion.hoplon.code.call(null,G__125308));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125307) : tailrecursion.hoplon.pre.call(null,G__125307));
})(),(function (){var G__125309 = cljs.core.PersistentArrayMap.EMPTY;
var G__125310 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["followed by the reductions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125309,G__125310) : tailrecursion.hoplon.markdown.para_node.call(null,G__125309,G__125310));
})(),(function (){var G__125311 = (function (){var G__125312 = "(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125312) : tailrecursion.hoplon.code.call(null,G__125312));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125311) : tailrecursion.hoplon.pre.call(null,G__125311));
})(),(function (){var G__125313 = cljs.core.PersistentArrayMap.EMPTY;
var G__125314 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This gives the same answer as our previous evaluation model, but the process is different. In particular, the evaluations of ",(function (){var G__125315 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ 5 1)"], null);
var G__125316 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125315,G__125316) : tailrecursion.hoplon.markdown.code_node.call(null,G__125315,G__125316));
})()," and ",(function (){var G__125317 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* 5 2)"], null);
var G__125318 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125317,G__125318) : tailrecursion.hoplon.markdown.code_node.call(null,G__125317,G__125318));
})()," are each performed twice here, corresponding to the reduction of the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125313,G__125314) : tailrecursion.hoplon.markdown.para_node.call(null,G__125313,G__125314));
})(),(function (){var G__125319 = (function (){var G__125320 = "(* x x)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125320) : tailrecursion.hoplon.code.call(null,G__125320));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125319) : tailrecursion.hoplon.pre.call(null,G__125319));
})(),(function (){var G__125321 = cljs.core.PersistentArrayMap.EMPTY;
var G__125322 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["with ",(function (){var G__125323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__125324 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125323,G__125324) : tailrecursion.hoplon.markdown.code_node.call(null,G__125323,G__125324));
})()," replaced respectively by ",(function (){var G__125325 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ 5 1)"], null);
var G__125326 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125325,G__125326) : tailrecursion.hoplon.markdown.code_node.call(null,G__125325,G__125326));
})()," and ",(function (){var G__125327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* 5 2)"], null);
var G__125328 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125327,G__125328) : tailrecursion.hoplon.markdown.code_node.call(null,G__125327,G__125328));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125321,G__125322) : tailrecursion.hoplon.markdown.para_node.call(null,G__125321,G__125322));
})(),(function (){var G__125329 = cljs.core.PersistentArrayMap.EMPTY;
var G__125330 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This alternative ",(function (){var G__125331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125332 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["fully expand and then reduce"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125331,G__125332) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125331,G__125332));
})()," evaluation method is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["normal-order evaluation"], null)], 0)),", in contrast to the ",(function (){var G__125333 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125334 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["evaluate the arguments and then apply"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125333,G__125334) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125333,G__125334));
})()," method that the interpreter actually uses, which is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["applicative-order evaluation"], null)], 0)),". It can be shown that, for procedure applications that can be modeled using substitution (including all the procedures in the first two chapters of this book) and that yield legitimate values, normal-order and applicative-order evaluation produce the same value. (See ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#q1.5",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.5"], null)], 0))," for an instance of an ",(function (){var G__125335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125336 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["illegitimate"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125335,G__125336) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125335,G__125336));
})()," value where normal-order and applicative-order evaluation do not give the same result.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125329,G__125330) : tailrecursion.hoplon.markdown.para_node.call(null,G__125329,G__125330));
})(),(function (){var G__125337 = cljs.core.PersistentArrayMap.EMPTY;
var G__125338 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp uses applicative-order evaluation, partly because of the additional efficiency obtained from avoiding multiple evaluations of expressions such as those illustrated with ",(function (){var G__125339 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ 5 1)"], null);
var G__125340 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125339,G__125340) : tailrecursion.hoplon.markdown.code_node.call(null,G__125339,G__125340));
})()," and ",(function (){var G__125341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* 5 2)"], null);
var G__125342 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125341,G__125342) : tailrecursion.hoplon.markdown.code_node.call(null,G__125341,G__125342));
})()," above and, more significantly, because normal-order evaluation becomes much more complicated to deal with when we leave the realm of procedures that can be modeled by substitution. On the other hand, normal-order evaluation can be an extremely valuable tool, and we will investigate some of its implications in chapters 3 and 4.",(function (){var G__125343 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__125344 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In chapter 3 we will introduce ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["stream processing"], null)], 0)),", which is a way of handling apparently ",(function (){var G__125345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125346 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["infinite"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125345,G__125346) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125345,G__125346));
})()," data structures by incorporating a limited form of normal-order evaluation. In section 4.2 we will modify the Scheme interpreter to produce a normal-order variant of Scheme."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125343,G__125344) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125343,G__125344));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125337,G__125338) : tailrecursion.hoplon.markdown.para_node.call(null,G__125337,G__125338));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125296;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125295;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125294;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125293;
}})()], 0));
var G__124143 = "";
var G__124144 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Conditional Expressions and Predicates"], null),(function (){var _STAR_references_STAR_125347 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125348 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125349 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125350 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 31, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125351 = cljs.core.PersistentArrayMap.EMPTY;
var G__125352 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The expressive power of the class of procedures that we can define at this point is very limited, because we have no way to make tests and to perform different operations depending on the result of a test. For instance, we cannot define a procedure that computes the absolute value of a number by testing whether the number is positive, negative, or zero and taking different actions in the different cases according to the rule"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125351,G__125352) : tailrecursion.hoplon.markdown.para_node.call(null,G__125351,G__125352));
})(),(function (){var G__125353 = cljs.core.PersistentArrayMap.EMPTY;
var G__125354 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$| x |= \\begin{cases} x &\\mbox{if } x > 0 \\cr 0 &\\mbox{if } x = 0 \\cr -x &\\mbox{if } x < 0 \\end{cases}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125353,G__125354) : tailrecursion.hoplon.markdown.para_node.call(null,G__125353,G__125354));
})(),(function (){var G__125355 = cljs.core.PersistentArrayMap.EMPTY;
var G__125356 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This construct is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["case analysis"], null)], 0)),", and there is a special form in Lisp for notating such a case analysis. It is called ",(function (){var G__125357 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__125358 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125357,G__125358) : tailrecursion.hoplon.markdown.code_node.call(null,G__125357,G__125358));
})()," (which stands for ",(function (){var G__125359 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125360 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["conditional"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125359,G__125360) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125359,G__125360));
})(),"), and it is used as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125355,G__125356) : tailrecursion.hoplon.markdown.para_node.call(null,G__125355,G__125356));
})(),(function (){var G__125361 = (function (){var G__125362 = "(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125362) : tailrecursion.hoplon.code.call(null,G__125362));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125361) : tailrecursion.hoplon.pre.call(null,G__125361));
})(),(function (){var G__125363 = cljs.core.PersistentArrayMap.EMPTY;
var G__125364 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a conditional expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125363,G__125364) : tailrecursion.hoplon.markdown.para_node.call(null,G__125363,G__125364));
})(),(function (){var G__125365 = (function (){var G__125366 = "(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125366) : tailrecursion.hoplon.code.call(null,G__125366));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125365) : tailrecursion.hoplon.pre.call(null,G__125365));
})(),(function (){var G__125367 = cljs.core.PersistentArrayMap.EMPTY;
var G__125368 = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consisting of the symbol cond followed by pairs of expressions <p> <e> called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clauses"], null)], 0)),". The first expression in each pair is a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," ",(function (){var G__125369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__125370 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125369,G__125370) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125369,G__125370));
})()," that is, an expression whose value is interpreted as either ",(function (){var G__125371 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__125372 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125371,G__125372) : tailrecursion.hoplon.markdown.code_node.call(null,G__125371,G__125372));
})()," or ",(function (){var G__125373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__125374 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125373,G__125374) : tailrecursion.hoplon.markdown.code_node.call(null,G__125373,G__125374));
})(),".",(function (){var G__125375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__125376 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125378 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Interpreted as either true or false"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125377,G__125378) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125377,G__125378));
})()," means this: In Scheme, there are two distinguished values that are denoted by the constants ",(function (){var G__125379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__125380 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125379,G__125380) : tailrecursion.hoplon.markdown.code_node.call(null,G__125379,G__125380));
})()," and ",(function (){var G__125381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__125382 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125381,G__125382) : tailrecursion.hoplon.markdown.code_node.call(null,G__125381,G__125382));
})(),". When the interpreter checks a predicate",(function (){var G__125383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125384 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125383,G__125384) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125383,G__125384));
})(),"s value, it interprets",(function (){var G__125385 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__125386 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125385,G__125386) : tailrecursion.hoplon.markdown.code_node.call(null,G__125385,G__125386));
})()," and ",(function (){var G__125387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"nil"], null);
var G__125388 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125387,G__125388) : tailrecursion.hoplon.markdown.code_node.call(null,G__125387,G__125388));
})()," as false. Any other value is treated as true. (Thus, providing ",(function (){var G__125389 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__125390 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125389,G__125390) : tailrecursion.hoplon.markdown.code_node.call(null,G__125389,G__125390));
})()," is logically unnecessary, but it is convenient.)"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125375,G__125376) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125375,G__125376));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125367,G__125368) : tailrecursion.hoplon.markdown.para_node.call(null,G__125367,G__125368));
})(),(function (){var G__125391 = cljs.core.PersistentArrayMap.EMPTY;
var G__125392 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Conditional expressions are evaluated as follows. The predicate <p1> is evaluated first. If its value is false, then <p2> is evaluated. If <p2>",(function (){var G__125393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125394 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125393,G__125394) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125393,G__125394));
})(),"s value is also false, then <p3> is evaluated. This process continues until a predicate is found whose value is true, in which case the interpreter returns the value of the corresponding ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consequent expression"], null)], 0))," <e> of the clause as the value of the conditional expression. If none of the <p>",(function (){var G__125395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125396 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125395,G__125396) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125395,G__125396));
})(),"s is found to be true, the value of the ",(function (){var G__125397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__125398 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125397,G__125398) : tailrecursion.hoplon.markdown.code_node.call(null,G__125397,G__125398));
})()," is undefined."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125391,G__125392) : tailrecursion.hoplon.markdown.para_node.call(null,G__125391,G__125392));
})(),(function (){var G__125399 = cljs.core.PersistentArrayMap.EMPTY;
var G__125400 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The word ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," is used for procedures that return ",(function (){var G__125401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__125402 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125401,G__125402) : tailrecursion.hoplon.markdown.code_node.call(null,G__125401,G__125402));
})()," or ",(function (){var G__125403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__125404 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125403,G__125404) : tailrecursion.hoplon.markdown.code_node.call(null,G__125403,G__125404));
})(),", as well as for expressions that evaluate to ",(function (){var G__125405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__125406 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125405,G__125406) : tailrecursion.hoplon.markdown.code_node.call(null,G__125405,G__125406));
})()," or ",(function (){var G__125407 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__125408 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125407,G__125408) : tailrecursion.hoplon.markdown.code_node.call(null,G__125407,G__125408));
})(),". The absolute-value procedure ",(function (){var G__125409 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__125410 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125409,G__125410) : tailrecursion.hoplon.markdown.code_node.call(null,G__125409,G__125410));
})()," makes use of the primitive predicates >, <, and =.",(function (){var G__125411 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__125412 = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125413 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Abs"], null);
var G__125414 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125413,G__125414) : tailrecursion.hoplon.markdown.code_node.call(null,G__125413,G__125414));
})()," also uses the ",(function (){var G__125415 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125416 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["minus"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125415,G__125416) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125415,G__125416));
})()," operator ",(function (){var G__125417 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"-"], null);
var G__125418 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125417,G__125418) : tailrecursion.hoplon.markdown.code_node.call(null,G__125417,G__125418));
})(),", which, when used with a single operand, as in ",(function (){var G__125419 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(- x)"], null);
var G__125420 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125419,G__125420) : tailrecursion.hoplon.markdown.code_node.call(null,G__125419,G__125420));
})(),", indicates negation."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125411,G__125412) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125411,G__125412));
})()," These take two numbers as arguments and test whether the first number is, respectively, greater than, less than, or equal to the second number, returning true or false accordingly."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125399,G__125400) : tailrecursion.hoplon.markdown.para_node.call(null,G__125399,G__125400));
})(),(function (){var G__125421 = cljs.core.PersistentArrayMap.EMPTY;
var G__125422 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Another way to write the absolute-value procedure is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125421,G__125422) : tailrecursion.hoplon.markdown.para_node.call(null,G__125421,G__125422));
})(),(function (){var G__125423 = (function (){var G__125424 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125425 = (function (){var G__125426 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125427 = "(";
var G__125428 = (function (){var G__125447 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125448 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125447,G__125448) : tailrecursion.hoplon.span.call(null,G__125447,G__125448));
})();
var G__125429 = (function (){var G__125449 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125450 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125449,G__125450) : tailrecursion.hoplon.span.call(null,G__125449,G__125450));
})();
var G__125430 = " [";
var G__125431 = (function (){var G__125451 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125452 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125451,G__125452) : tailrecursion.hoplon.span.call(null,G__125451,G__125452));
})();
var G__125432 = "]\n  (";
var G__125433 = (function (){var G__125453 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125454 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125453,G__125454) : tailrecursion.hoplon.span.call(null,G__125453,G__125454));
})();
var G__125434 = "(";
var G__125435 = (function (){var G__125455 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125456 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125455,G__125456) : tailrecursion.hoplon.span.call(null,G__125455,G__125456));
})();
var G__125436 = (function (){var G__125457 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125458 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125457,G__125458) : tailrecursion.hoplon.span.call(null,G__125457,G__125458));
})();
var G__125437 = " ";
var G__125438 = (function (){var G__125459 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125460 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125459,G__125460) : tailrecursion.hoplon.span.call(null,G__125459,G__125460));
})();
var G__125439 = ") (";
var G__125440 = (function (){var G__125461 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125462 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125461,G__125462) : tailrecursion.hoplon.span.call(null,G__125461,G__125462));
})();
var G__125441 = (function (){var G__125463 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125464 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125463,G__125464) : tailrecursion.hoplon.span.call(null,G__125463,G__125464));
})();
var G__125442 = ")\n        ";
var G__125443 = (function (){var G__125465 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125466 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125465,G__125466) : tailrecursion.hoplon.span.call(null,G__125465,G__125466));
})();
var G__125444 = " ";
var G__125445 = (function (){var G__125467 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125468 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125467,G__125468) : tailrecursion.hoplon.span.call(null,G__125467,G__125468));
})();
var G__125446 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__125426,G__125427,G__125428,G__125429,G__125430,G__125431,G__125432,G__125433,G__125434,G__125435,G__125436,G__125437,G__125438,G__125439,G__125440,G__125441,G__125442,G__125443,G__125444,G__125445,G__125446) : tailrecursion.hoplon.pre.call(null,G__125426,G__125427,G__125428,G__125429,G__125430,G__125431,G__125432,G__125433,G__125434,G__125435,G__125436,G__125437,G__125438,G__125439,G__125440,G__125441,G__125442,G__125443,G__125444,G__125445,G__125446));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125424,G__125425) : tailrecursion.hoplon.div.call(null,G__125424,G__125425));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125423) : tailrecursion.hoplon.div.call(null,G__125423));
})(),(function (){var G__125469 = cljs.core.PersistentArrayMap.EMPTY;
var G__125470 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which could be expressed in English as ",(function (){var G__125471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__125472 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If x is less than zero return - x; otherwise return x."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125471,G__125472) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125471,G__125472));
})()," ",(function (){var G__125473 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,":else"], null);
var G__125474 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125473,G__125474) : tailrecursion.hoplon.markdown.code_node.call(null,G__125473,G__125474));
})()," is a special symbol that can be used in place of the <p> in the final clause of a ",(function (){var G__125475 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__125476 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125475,G__125476) : tailrecursion.hoplon.markdown.code_node.call(null,G__125475,G__125476));
})(),". This causes the ",(function (){var G__125477 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__125478 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125477,G__125478) : tailrecursion.hoplon.markdown.code_node.call(null,G__125477,G__125478));
})()," to return as its value the value of the corresponding <e> whenever all previous clauses have been bypassed. In fact, any expression that always evaluates to a true value could be used as the <p> here."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125469,G__125470) : tailrecursion.hoplon.markdown.para_node.call(null,G__125469,G__125470));
})(),(function (){var G__125479 = cljs.core.PersistentArrayMap.EMPTY;
var G__125480 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here is yet another way to write the absolute-value procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125479,G__125480) : tailrecursion.hoplon.markdown.para_node.call(null,G__125479,G__125480));
})(),(function (){var G__125481 = (function (){var G__125482 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125483 = (function (){var G__125484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125485 = "(";
var G__125486 = (function (){var G__125503 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125504 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125503,G__125504) : tailrecursion.hoplon.span.call(null,G__125503,G__125504));
})();
var G__125487 = (function (){var G__125505 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125506 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125505,G__125506) : tailrecursion.hoplon.span.call(null,G__125505,G__125506));
})();
var G__125488 = " [";
var G__125489 = (function (){var G__125507 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125508 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125507,G__125508) : tailrecursion.hoplon.span.call(null,G__125507,G__125508));
})();
var G__125490 = "]\n  (";
var G__125491 = (function (){var G__125509 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125510 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125509,G__125510) : tailrecursion.hoplon.span.call(null,G__125509,G__125510));
})();
var G__125492 = "(";
var G__125493 = (function (){var G__125511 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125512 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125511,G__125512) : tailrecursion.hoplon.span.call(null,G__125511,G__125512));
})();
var G__125494 = (function (){var G__125513 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125514 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125513,G__125514) : tailrecursion.hoplon.span.call(null,G__125513,G__125514));
})();
var G__125495 = " ";
var G__125496 = (function (){var G__125515 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125516 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125515,G__125516) : tailrecursion.hoplon.span.call(null,G__125515,G__125516));
})();
var G__125497 = ")\n      (";
var G__125498 = (function (){var G__125517 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125518 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125517,G__125518) : tailrecursion.hoplon.span.call(null,G__125517,G__125518));
})();
var G__125499 = (function (){var G__125519 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125520 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125519,G__125520) : tailrecursion.hoplon.span.call(null,G__125519,G__125520));
})();
var G__125500 = ")\n      ";
var G__125501 = (function (){var G__125521 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125522 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125521,G__125522) : tailrecursion.hoplon.span.call(null,G__125521,G__125522));
})();
var G__125502 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__125484,G__125485,G__125486,G__125487,G__125488,G__125489,G__125490,G__125491,G__125492,G__125493,G__125494,G__125495,G__125496,G__125497,G__125498,G__125499,G__125500,G__125501,G__125502) : tailrecursion.hoplon.pre.call(null,G__125484,G__125485,G__125486,G__125487,G__125488,G__125489,G__125490,G__125491,G__125492,G__125493,G__125494,G__125495,G__125496,G__125497,G__125498,G__125499,G__125500,G__125501,G__125502));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125482,G__125483) : tailrecursion.hoplon.div.call(null,G__125482,G__125483));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125481) : tailrecursion.hoplon.div.call(null,G__125481));
})(),(function (){var G__125523 = cljs.core.PersistentArrayMap.EMPTY;
var G__125524 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This uses the special form ",(function (){var G__125525 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__125526 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125525,G__125526) : tailrecursion.hoplon.markdown.code_node.call(null,G__125525,G__125526));
})(),", a restricted type of conditional that can be used when there are precisely two cases in the case analysis. The general form of an ",(function (){var G__125527 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__125528 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125527,G__125528) : tailrecursion.hoplon.markdown.code_node.call(null,G__125527,G__125528));
})()," expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125523,G__125524) : tailrecursion.hoplon.markdown.para_node.call(null,G__125523,G__125524));
})(),(function (){var G__125529 = (function (){var G__125530 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125531 = (function (){var G__125532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125533 = "(";
var G__125534 = (function (){var G__125541 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125542 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125541,G__125542) : tailrecursion.hoplon.span.call(null,G__125541,G__125542));
})();
var G__125535 = (function (){var G__125543 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125544 = "<predicate>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125543,G__125544) : tailrecursion.hoplon.span.call(null,G__125543,G__125544));
})();
var G__125536 = " ";
var G__125537 = (function (){var G__125545 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125546 = "<consequent>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125545,G__125546) : tailrecursion.hoplon.span.call(null,G__125545,G__125546));
})();
var G__125538 = " ";
var G__125539 = (function (){var G__125547 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125548 = "<alternative>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125547,G__125548) : tailrecursion.hoplon.span.call(null,G__125547,G__125548));
})();
var G__125540 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__125532,G__125533,G__125534,G__125535,G__125536,G__125537,G__125538,G__125539,G__125540) : tailrecursion.hoplon.pre.call(null,G__125532,G__125533,G__125534,G__125535,G__125536,G__125537,G__125538,G__125539,G__125540));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125530,G__125531) : tailrecursion.hoplon.div.call(null,G__125530,G__125531));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125529) : tailrecursion.hoplon.div.call(null,G__125529));
})(),(function (){var G__125549 = cljs.core.PersistentArrayMap.EMPTY;
var G__125550 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate an ",(function (){var G__125551 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__125552 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125551,G__125552) : tailrecursion.hoplon.markdown.code_node.call(null,G__125551,G__125552));
})()," expression, the interpreter starts by evaluating the <predicate> part of the expression. If the <predicate> evaluates to a true value, the interpreter then evaluates the <consequent> and returns its value. Otherwise it evaluates the <alternative> and returns its value.",(function (){var G__125553 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__125554 = new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In Scheme, a minor difference between ",(function (){var G__125555 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__125556 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125555,G__125556) : tailrecursion.hoplon.markdown.code_node.call(null,G__125555,G__125556));
})()," and ",(function (){var G__125557 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__125558 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125557,G__125558) : tailrecursion.hoplon.markdown.code_node.call(null,G__125557,G__125558));
})()," is that the ",(function (){var G__125559 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<e>"], null);
var G__125560 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125559,G__125560) : tailrecursion.hoplon.markdown.code_node.call(null,G__125559,G__125560));
})()," part of each ",(function (){var G__125561 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__125562 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125561,G__125562) : tailrecursion.hoplon.markdown.code_node.call(null,G__125561,G__125562));
})()," clause may be a sequence of expressions. If the corresponding ",(function (){var G__125563 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<p>"], null);
var G__125564 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125563,G__125564) : tailrecursion.hoplon.markdown.code_node.call(null,G__125563,G__125564));
})()," is found to be true, the expressions ",(function (){var G__125565 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<e>"], null);
var G__125566 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125565,G__125566) : tailrecursion.hoplon.markdown.code_node.call(null,G__125565,G__125566));
})()," are evaluated in sequence and the value of the final expression in the sequence is returned as the value of the ",(function (){var G__125567 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__125568 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125567,G__125568) : tailrecursion.hoplon.markdown.code_node.call(null,G__125567,G__125568));
})(),". In an ",(function (){var G__125569 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__125570 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125569,G__125570) : tailrecursion.hoplon.markdown.code_node.call(null,G__125569,G__125570));
})()," expression, however, the ",(function (){var G__125571 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<consequent>"], null);
var G__125572 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125571,G__125572) : tailrecursion.hoplon.markdown.code_node.call(null,G__125571,G__125572));
})()," and ",(function (){var G__125573 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<alternative>"], null);
var G__125574 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125573,G__125574) : tailrecursion.hoplon.markdown.code_node.call(null,G__125573,G__125574));
})()," must be single expressions. In Clojure, however, these must all be single expressioins. To get a similar functionality one could use ",(function (){var G__125575 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"do"], null);
var G__125576 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125575,G__125576) : tailrecursion.hoplon.markdown.code_node.call(null,G__125575,G__125576));
})(),"."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__125553,G__125554) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__125553,G__125554));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125549,G__125550) : tailrecursion.hoplon.markdown.para_node.call(null,G__125549,G__125550));
})(),(function (){var G__125577 = cljs.core.PersistentArrayMap.EMPTY;
var G__125578 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In addition to primitive predicates such as <, =, and >, there are logical composition operations, which enable us to construct compound predicates. The three most frequently used are these:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125577,G__125578) : tailrecursion.hoplon.markdown.para_node.call(null,G__125577,G__125578));
})(),(function (){var G__125579 = cljs.core.PersistentArrayMap.EMPTY;
var G__125580 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125581 = cljs.core.PersistentArrayMap.EMPTY;
var G__125582 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_125583 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125584 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__125585 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"\n  (and <e1> ... <en>)\n"], null);
var G__125586 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125585,G__125586) : tailrecursion.hoplon.markdown.code_node.call(null,G__125585,G__125586));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125584;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125583;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__125581,G__125582) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__125581,G__125582));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__125579,G__125580) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__125579,G__125580));
})(),(function (){var G__125587 = cljs.core.PersistentArrayMap.EMPTY;
var G__125588 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to false, the value of the  ",(function (){var G__125589 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"and"], null);
var G__125590 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125589,G__125590) : tailrecursion.hoplon.markdown.code_node.call(null,G__125589,G__125590));
})()," expression is false, and the rest of the <e>",(function (){var G__125591 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125592 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125591,G__125592) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125591,G__125592));
})(),"s are not  evaluated. If all <e>",(function (){var G__125593 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125594 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125593,G__125594) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125593,G__125594));
})(),"s evaluate to true values, the value of the and  expression is the value of the last one."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125587,G__125588) : tailrecursion.hoplon.markdown.para_node.call(null,G__125587,G__125588));
})(),(function (){var G__125595 = cljs.core.PersistentArrayMap.EMPTY;
var G__125596 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125597 = cljs.core.PersistentArrayMap.EMPTY;
var G__125598 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_125599 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125600 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__125601 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"\n  (or <e1> ... <en>)\n"], null);
var G__125602 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125601,G__125602) : tailrecursion.hoplon.markdown.code_node.call(null,G__125601,G__125602));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125600;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125599;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__125597,G__125598) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__125597,G__125598));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__125595,G__125596) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__125595,G__125596));
})(),(function (){var G__125603 = cljs.core.PersistentArrayMap.EMPTY;
var G__125604 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to a true value, that value  is returned as the value of the or expression, and the rest of the  <e>",(function (){var G__125605 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125606 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125605,G__125606) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125605,G__125606));
})(),"s are not evaluated. If all <e>",(function (){var G__125607 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__125608 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__125607,G__125608) : tailrecursion.hoplon.markdown.simple_node.call(null,G__125607,G__125608));
})(),"s evaluate to false, the value of  the ",(function (){var G__125609 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"or"], null);
var G__125610 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125609,G__125610) : tailrecursion.hoplon.markdown.code_node.call(null,G__125609,G__125610));
})()," expression is false."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125603,G__125604) : tailrecursion.hoplon.markdown.para_node.call(null,G__125603,G__125604));
})(),(function (){var G__125611 = cljs.core.PersistentArrayMap.EMPTY;
var G__125612 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125613 = cljs.core.PersistentArrayMap.EMPTY;
var G__125614 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_125615 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125616 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__125617 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"\n  (not <e>)\n"], null);
var G__125618 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125617,G__125618) : tailrecursion.hoplon.markdown.code_node.call(null,G__125617,G__125618));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125616;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125615;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__125613,G__125614) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__125613,G__125614));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__125611,G__125612) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__125611,G__125612));
})(),(function (){var G__125619 = cljs.core.PersistentArrayMap.EMPTY;
var G__125620 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The value of a ",(function (){var G__125621 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"not"], null);
var G__125622 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125621,G__125622) : tailrecursion.hoplon.markdown.code_node.call(null,G__125621,G__125622));
})()," expression is true when the expression <e>  evaluates to false, and false otherwise."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125619,G__125620) : tailrecursion.hoplon.markdown.para_node.call(null,G__125619,G__125620));
})(),(function (){var G__125623 = cljs.core.PersistentArrayMap.EMPTY;
var G__125624 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that ",(function (){var G__125625 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"and"], null);
var G__125626 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125625,G__125626) : tailrecursion.hoplon.markdown.code_node.call(null,G__125625,G__125626));
})()," and ",(function (){var G__125627 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"or"], null);
var G__125628 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125627,G__125628) : tailrecursion.hoplon.markdown.code_node.call(null,G__125627,G__125628));
})()," are special forms, not procedures, because the subexpressions are not necessarily all evaluated. ",(function (){var G__125629 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"not"], null);
var G__125630 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__125629,G__125630) : tailrecursion.hoplon.markdown.code_node.call(null,G__125629,G__125630));
})()," is an ordinary procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125623,G__125624) : tailrecursion.hoplon.markdown.para_node.call(null,G__125623,G__125624));
})(),(function (){var G__125631 = cljs.core.PersistentArrayMap.EMPTY;
var G__125632 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As an example of how these are used, the condition that a number x be in the range \\(5 \\lt x \\lt 10\\) may be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125631,G__125632) : tailrecursion.hoplon.markdown.para_node.call(null,G__125631,G__125632));
})(),(function (){var G__125633 = (function (){var G__125634 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125635 = (function (){var G__125636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125637 = "(";
var G__125638 = (function (){var G__125650 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125651 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125650,G__125651) : tailrecursion.hoplon.span.call(null,G__125650,G__125651));
})();
var G__125639 = "(";
var G__125640 = (function (){var G__125652 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125653 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125652,G__125653) : tailrecursion.hoplon.span.call(null,G__125652,G__125653));
})();
var G__125641 = (function (){var G__125654 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125655 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125654,G__125655) : tailrecursion.hoplon.span.call(null,G__125654,G__125655));
})();
var G__125642 = " ";
var G__125643 = (function (){var G__125656 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125657 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125656,G__125657) : tailrecursion.hoplon.span.call(null,G__125656,G__125657));
})();
var G__125644 = ") (";
var G__125645 = (function (){var G__125658 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125659 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125658,G__125659) : tailrecursion.hoplon.span.call(null,G__125658,G__125659));
})();
var G__125646 = (function (){var G__125660 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125661 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125660,G__125661) : tailrecursion.hoplon.span.call(null,G__125660,G__125661));
})();
var G__125647 = " ";
var G__125648 = (function (){var G__125662 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125663 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125662,G__125663) : tailrecursion.hoplon.span.call(null,G__125662,G__125663));
})();
var G__125649 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__125636,G__125637,G__125638,G__125639,G__125640,G__125641,G__125642,G__125643,G__125644,G__125645,G__125646,G__125647,G__125648,G__125649) : tailrecursion.hoplon.pre.call(null,G__125636,G__125637,G__125638,G__125639,G__125640,G__125641,G__125642,G__125643,G__125644,G__125645,G__125646,G__125647,G__125648,G__125649));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125634,G__125635) : tailrecursion.hoplon.div.call(null,G__125634,G__125635));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125633) : tailrecursion.hoplon.div.call(null,G__125633));
})(),(function (){var G__125664 = cljs.core.PersistentArrayMap.EMPTY;
var G__125665 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As another example, we can define a predicate to test whether one number is greater than or equal to another as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125664,G__125665) : tailrecursion.hoplon.markdown.para_node.call(null,G__125664,G__125665));
})(),(function (){var G__125666 = (function (){var G__125667 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125668 = (function (){var G__125669 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125670 = "(";
var G__125671 = (function (){var G__125690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125691 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125690,G__125691) : tailrecursion.hoplon.span.call(null,G__125690,G__125691));
})();
var G__125672 = (function (){var G__125692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125693 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125692,G__125693) : tailrecursion.hoplon.span.call(null,G__125692,G__125693));
})();
var G__125673 = "[";
var G__125674 = (function (){var G__125694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125695 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125694,G__125695) : tailrecursion.hoplon.span.call(null,G__125694,G__125695));
})();
var G__125675 = " ";
var G__125676 = (function (){var G__125696 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125697 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125696,G__125697) : tailrecursion.hoplon.span.call(null,G__125696,G__125697));
})();
var G__125677 = "] \n  (";
var G__125678 = (function (){var G__125698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125699 = "or ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125698,G__125699) : tailrecursion.hoplon.span.call(null,G__125698,G__125699));
})();
var G__125679 = "(";
var G__125680 = (function (){var G__125700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125701 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125700,G__125701) : tailrecursion.hoplon.span.call(null,G__125700,G__125701));
})();
var G__125681 = (function (){var G__125702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125703 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125702,G__125703) : tailrecursion.hoplon.span.call(null,G__125702,G__125703));
})();
var G__125682 = " ";
var G__125683 = (function (){var G__125704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125705 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125704,G__125705) : tailrecursion.hoplon.span.call(null,G__125704,G__125705));
})();
var G__125684 = ") (";
var G__125685 = (function (){var G__125706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125707 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125706,G__125707) : tailrecursion.hoplon.span.call(null,G__125706,G__125707));
})();
var G__125686 = (function (){var G__125708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125709 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125708,G__125709) : tailrecursion.hoplon.span.call(null,G__125708,G__125709));
})();
var G__125687 = " ";
var G__125688 = (function (){var G__125710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125711 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125710,G__125711) : tailrecursion.hoplon.span.call(null,G__125710,G__125711));
})();
var G__125689 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__125669,G__125670,G__125671,G__125672,G__125673,G__125674,G__125675,G__125676,G__125677,G__125678,G__125679,G__125680,G__125681,G__125682,G__125683,G__125684,G__125685,G__125686,G__125687,G__125688,G__125689) : tailrecursion.hoplon.pre.call(null,G__125669,G__125670,G__125671,G__125672,G__125673,G__125674,G__125675,G__125676,G__125677,G__125678,G__125679,G__125680,G__125681,G__125682,G__125683,G__125684,G__125685,G__125686,G__125687,G__125688,G__125689));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125667,G__125668) : tailrecursion.hoplon.div.call(null,G__125667,G__125668));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125666) : tailrecursion.hoplon.div.call(null,G__125666));
})(),(function (){var G__125712 = cljs.core.PersistentArrayMap.EMPTY;
var G__125713 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["or alternatively as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125712,G__125713) : tailrecursion.hoplon.markdown.para_node.call(null,G__125712,G__125713));
})(),(function (){var G__125714 = (function (){var G__125715 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125716 = (function (){var G__125717 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125718 = "(";
var G__125719 = (function (){var G__125733 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125734 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125733,G__125734) : tailrecursion.hoplon.span.call(null,G__125733,G__125734));
})();
var G__125720 = (function (){var G__125735 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125736 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125735,G__125736) : tailrecursion.hoplon.span.call(null,G__125735,G__125736));
})();
var G__125721 = "[";
var G__125722 = (function (){var G__125737 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125738 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125737,G__125738) : tailrecursion.hoplon.span.call(null,G__125737,G__125738));
})();
var G__125723 = " ";
var G__125724 = (function (){var G__125739 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125740 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125739,G__125740) : tailrecursion.hoplon.span.call(null,G__125739,G__125740));
})();
var G__125725 = "]\n  (";
var G__125726 = (function (){var G__125741 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125742 = "not ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125741,G__125742) : tailrecursion.hoplon.span.call(null,G__125741,G__125742));
})();
var G__125727 = "(";
var G__125728 = (function (){var G__125743 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125744 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125743,G__125744) : tailrecursion.hoplon.span.call(null,G__125743,G__125744));
})();
var G__125729 = (function (){var G__125745 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125746 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125745,G__125746) : tailrecursion.hoplon.span.call(null,G__125745,G__125746));
})();
var G__125730 = " ";
var G__125731 = (function (){var G__125747 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125748 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125747,G__125748) : tailrecursion.hoplon.span.call(null,G__125747,G__125748));
})();
var G__125732 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__125717,G__125718,G__125719,G__125720,G__125721,G__125722,G__125723,G__125724,G__125725,G__125726,G__125727,G__125728,G__125729,G__125730,G__125731,G__125732) : tailrecursion.hoplon.pre.call(null,G__125717,G__125718,G__125719,G__125720,G__125721,G__125722,G__125723,G__125724,G__125725,G__125726,G__125727,G__125728,G__125729,G__125730,G__125731,G__125732));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125715,G__125716) : tailrecursion.hoplon.div.call(null,G__125715,G__125716));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125714) : tailrecursion.hoplon.div.call(null,G__125714));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125350;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125349;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125348;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125347;
}})()], 0));
var G__124145 = content.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_125749 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125750 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125751 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125752 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125753 = cljs.core.PersistentArrayMap.EMPTY;
var G__125754 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__125753,G__125754) : tailrecursion.hoplon.markdown.para_node.call(null,G__125753,G__125754));
})(),(function (){var G__125755 = (function (){var G__125756 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125757 = (function (){var G__125758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125759 = (function (){var G__125761 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125762 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125761,G__125762) : tailrecursion.hoplon.span.call(null,G__125761,G__125762));
})();
var G__125760 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3(G__125758,G__125759,G__125760) : tailrecursion.hoplon.pre.call(null,G__125758,G__125759,G__125760));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125756,G__125757) : tailrecursion.hoplon.div.call(null,G__125756,G__125757));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125755) : tailrecursion.hoplon.div.call(null,G__125755));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125752;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125751;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125750;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125749;
}})(),content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_125763 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125764 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125765 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125766 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125767 = (function (){var G__125768 = "10\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125768) : tailrecursion.hoplon.code.call(null,G__125768));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125767) : tailrecursion.hoplon.pre.call(null,G__125767));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125766;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125765;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125764;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125763;
}})()], 0)),"",(function (){var _STAR_references_STAR_125769 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125770 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125771 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125772 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125773 = (function (){var G__125774 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125775 = (function (){var G__125776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125777 = "(";
var G__125778 = (function (){var G__125785 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125786 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125785,G__125786) : tailrecursion.hoplon.span.call(null,G__125785,G__125786));
})();
var G__125779 = (function (){var G__125787 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125788 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125787,G__125788) : tailrecursion.hoplon.span.call(null,G__125787,G__125788));
})();
var G__125780 = " ";
var G__125781 = (function (){var G__125789 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125790 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125789,G__125790) : tailrecursion.hoplon.span.call(null,G__125789,G__125790));
})();
var G__125782 = " ";
var G__125783 = (function (){var G__125791 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125792 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125791,G__125792) : tailrecursion.hoplon.span.call(null,G__125791,G__125792));
})();
var G__125784 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__125776,G__125777,G__125778,G__125779,G__125780,G__125781,G__125782,G__125783,G__125784) : tailrecursion.hoplon.pre.call(null,G__125776,G__125777,G__125778,G__125779,G__125780,G__125781,G__125782,G__125783,G__125784));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125774,G__125775) : tailrecursion.hoplon.div.call(null,G__125774,G__125775));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125773) : tailrecursion.hoplon.div.call(null,G__125773));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125772;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125771;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125770;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125769;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_125793 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125794 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125795 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125796 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125797 = (function (){var G__125798 = "12\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125798) : tailrecursion.hoplon.code.call(null,G__125798));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125797) : tailrecursion.hoplon.pre.call(null,G__125797));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125796;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125795;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125794;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125793;
}})()], 0)),"",(function (){var _STAR_references_STAR_125799 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125800 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125801 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125802 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125803 = (function (){var G__125804 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125805 = (function (){var G__125806 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125807 = "(";
var G__125808 = (function (){var G__125813 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125814 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125813,G__125814) : tailrecursion.hoplon.span.call(null,G__125813,G__125814));
})();
var G__125809 = (function (){var G__125815 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125816 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125815,G__125816) : tailrecursion.hoplon.span.call(null,G__125815,G__125816));
})();
var G__125810 = " ";
var G__125811 = (function (){var G__125817 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125818 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125817,G__125818) : tailrecursion.hoplon.span.call(null,G__125817,G__125818));
})();
var G__125812 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__125806,G__125807,G__125808,G__125809,G__125810,G__125811,G__125812) : tailrecursion.hoplon.pre.call(null,G__125806,G__125807,G__125808,G__125809,G__125810,G__125811,G__125812));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125804,G__125805) : tailrecursion.hoplon.div.call(null,G__125804,G__125805));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125803) : tailrecursion.hoplon.div.call(null,G__125803));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125802;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125801;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125800;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125799;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_125819 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125820 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125821 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125822 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125823 = (function (){var G__125824 = "8\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125824) : tailrecursion.hoplon.code.call(null,G__125824));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125823) : tailrecursion.hoplon.pre.call(null,G__125823));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125822;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125821;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125820;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125819;
}})()], 0)),"",(function (){var _STAR_references_STAR_125825 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125826 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125827 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125828 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125829 = (function (){var G__125830 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125831 = (function (){var G__125832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125833 = "(";
var G__125834 = (function (){var G__125839 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125840 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125839,G__125840) : tailrecursion.hoplon.span.call(null,G__125839,G__125840));
})();
var G__125835 = (function (){var G__125841 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125842 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125841,G__125842) : tailrecursion.hoplon.span.call(null,G__125841,G__125842));
})();
var G__125836 = " ";
var G__125837 = (function (){var G__125843 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125844 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125843,G__125844) : tailrecursion.hoplon.span.call(null,G__125843,G__125844));
})();
var G__125838 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__125832,G__125833,G__125834,G__125835,G__125836,G__125837,G__125838) : tailrecursion.hoplon.pre.call(null,G__125832,G__125833,G__125834,G__125835,G__125836,G__125837,G__125838));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125830,G__125831) : tailrecursion.hoplon.div.call(null,G__125830,G__125831));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125829) : tailrecursion.hoplon.div.call(null,G__125829));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125828;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125827;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125826;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125825;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_125845 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125846 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125847 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125848 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125849 = (function (){var G__125850 = "3\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125850) : tailrecursion.hoplon.code.call(null,G__125850));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125849) : tailrecursion.hoplon.pre.call(null,G__125849));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125848;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125847;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125846;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125845;
}})()], 0)),"",(function (){var _STAR_references_STAR_125851 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125852 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125853 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125854 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125855 = (function (){var G__125856 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125857 = (function (){var G__125858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125859 = "(";
var G__125860 = (function (){var G__125872 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125873 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125872,G__125873) : tailrecursion.hoplon.span.call(null,G__125872,G__125873));
})();
var G__125861 = "(";
var G__125862 = (function (){var G__125874 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125875 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125874,G__125875) : tailrecursion.hoplon.span.call(null,G__125874,G__125875));
})();
var G__125863 = (function (){var G__125876 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125877 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125876,G__125877) : tailrecursion.hoplon.span.call(null,G__125876,G__125877));
})();
var G__125864 = " ";
var G__125865 = (function (){var G__125878 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125879 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125878,G__125879) : tailrecursion.hoplon.span.call(null,G__125878,G__125879));
})();
var G__125866 = ") (";
var G__125867 = (function (){var G__125880 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125881 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125880,G__125881) : tailrecursion.hoplon.span.call(null,G__125880,G__125881));
})();
var G__125868 = (function (){var G__125882 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125883 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125882,G__125883) : tailrecursion.hoplon.span.call(null,G__125882,G__125883));
})();
var G__125869 = " ";
var G__125870 = (function (){var G__125884 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125885 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125884,G__125885) : tailrecursion.hoplon.span.call(null,G__125884,G__125885));
})();
var G__125871 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__125858,G__125859,G__125860,G__125861,G__125862,G__125863,G__125864,G__125865,G__125866,G__125867,G__125868,G__125869,G__125870,G__125871) : tailrecursion.hoplon.pre.call(null,G__125858,G__125859,G__125860,G__125861,G__125862,G__125863,G__125864,G__125865,G__125866,G__125867,G__125868,G__125869,G__125870,G__125871));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125856,G__125857) : tailrecursion.hoplon.div.call(null,G__125856,G__125857));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125855) : tailrecursion.hoplon.div.call(null,G__125855));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125854;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125853;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125852;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125851;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_125886 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125887 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125888 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125889 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125890 = (function (){var G__125891 = "6\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125891) : tailrecursion.hoplon.code.call(null,G__125891));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125890) : tailrecursion.hoplon.pre.call(null,G__125890));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125889;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125888;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125887;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125886;
}})()], 0)),"",(function (){var _STAR_references_STAR_125892 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125893 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125894 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125895 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125896 = (function (){var G__125897 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125898 = (function (){var G__125899 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125900 = "(";
var G__125901 = (function (){var G__125906 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125907 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125906,G__125907) : tailrecursion.hoplon.span.call(null,G__125906,G__125907));
})();
var G__125902 = (function (){var G__125908 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125909 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125908,G__125909) : tailrecursion.hoplon.span.call(null,G__125908,G__125909));
})();
var G__125903 = " ";
var G__125904 = (function (){var G__125910 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125911 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125910,G__125911) : tailrecursion.hoplon.span.call(null,G__125910,G__125911));
})();
var G__125905 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__125899,G__125900,G__125901,G__125902,G__125903,G__125904,G__125905) : tailrecursion.hoplon.pre.call(null,G__125899,G__125900,G__125901,G__125902,G__125903,G__125904,G__125905));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125897,G__125898) : tailrecursion.hoplon.div.call(null,G__125897,G__125898));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125896) : tailrecursion.hoplon.div.call(null,G__125896));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125895;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125894;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125893;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125892;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_125912 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125913 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125914 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125915 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125916 = (function (){var G__125917 = "a\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125917) : tailrecursion.hoplon.code.call(null,G__125917));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125916) : tailrecursion.hoplon.pre.call(null,G__125916));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125915;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125914;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125913;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125912;
}})()], 0)),"",(function (){var _STAR_references_STAR_125918 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125919 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125920 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125921 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125922 = (function (){var G__125923 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125924 = (function (){var G__125925 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125926 = "(";
var G__125927 = (function (){var G__125935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__125936 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125935,G__125936) : tailrecursion.hoplon.span.call(null,G__125935,G__125936));
})();
var G__125928 = (function (){var G__125937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125938 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125937,G__125938) : tailrecursion.hoplon.span.call(null,G__125937,G__125938));
})();
var G__125929 = " (";
var G__125930 = (function (){var G__125939 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125940 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125939,G__125940) : tailrecursion.hoplon.span.call(null,G__125939,G__125940));
})();
var G__125931 = (function (){var G__125941 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125942 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125941,G__125942) : tailrecursion.hoplon.span.call(null,G__125941,G__125942));
})();
var G__125932 = " ";
var G__125933 = (function (){var G__125943 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__125944 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125943,G__125944) : tailrecursion.hoplon.span.call(null,G__125943,G__125944));
})();
var G__125934 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10(G__125925,G__125926,G__125927,G__125928,G__125929,G__125930,G__125931,G__125932,G__125933,G__125934) : tailrecursion.hoplon.pre.call(null,G__125925,G__125926,G__125927,G__125928,G__125929,G__125930,G__125931,G__125932,G__125933,G__125934));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125923,G__125924) : tailrecursion.hoplon.div.call(null,G__125923,G__125924));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125922) : tailrecursion.hoplon.div.call(null,G__125922));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125921;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125920;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125919;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125918;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_125945 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125946 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125947 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125948 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125949 = (function (){var G__125950 = "b\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125950) : tailrecursion.hoplon.code.call(null,G__125950));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125949) : tailrecursion.hoplon.pre.call(null,G__125949));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125948;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125947;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125946;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125945;
}})()], 0)),"",(function (){var _STAR_references_STAR_125951 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125952 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125953 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125954 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125955 = (function (){var G__125956 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125957 = (function (){var G__125958 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125959 = "(";
var G__125960 = (function (){var G__125970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125971 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125970,G__125971) : tailrecursion.hoplon.span.call(null,G__125970,G__125971));
})();
var G__125961 = (function (){var G__125972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125973 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125972,G__125973) : tailrecursion.hoplon.span.call(null,G__125972,G__125973));
})();
var G__125962 = " ";
var G__125963 = (function (){var G__125974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125975 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125974,G__125975) : tailrecursion.hoplon.span.call(null,G__125974,G__125975));
})();
var G__125964 = " (";
var G__125965 = (function (){var G__125976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__125977 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125976,G__125977) : tailrecursion.hoplon.span.call(null,G__125976,G__125977));
})();
var G__125966 = (function (){var G__125978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125979 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125978,G__125979) : tailrecursion.hoplon.span.call(null,G__125978,G__125979));
})();
var G__125967 = " ";
var G__125968 = (function (){var G__125980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__125981 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__125980,G__125981) : tailrecursion.hoplon.span.call(null,G__125980,G__125981));
})();
var G__125969 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__125958,G__125959,G__125960,G__125961,G__125962,G__125963,G__125964,G__125965,G__125966,G__125967,G__125968,G__125969) : tailrecursion.hoplon.pre.call(null,G__125958,G__125959,G__125960,G__125961,G__125962,G__125963,G__125964,G__125965,G__125966,G__125967,G__125968,G__125969));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125956,G__125957) : tailrecursion.hoplon.div.call(null,G__125956,G__125957));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125955) : tailrecursion.hoplon.div.call(null,G__125955));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125954;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125953;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125952;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125951;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_125982 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125983 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125984 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125985 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125986 = (function (){var G__125987 = "19\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__125987) : tailrecursion.hoplon.code.call(null,G__125987));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__125986) : tailrecursion.hoplon.pre.call(null,G__125986));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125985;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125984;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125983;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125982;
}})()], 0)),"",(function (){var _STAR_references_STAR_125988 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125989 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_125990 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_125991 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__125992 = (function (){var G__125993 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__125994 = (function (){var G__125995 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__125996 = "(";
var G__125997 = (function (){var G__126002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126003 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126002,G__126003) : tailrecursion.hoplon.span.call(null,G__126002,G__126003));
})();
var G__125998 = (function (){var G__126004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126005 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126004,G__126005) : tailrecursion.hoplon.span.call(null,G__126004,G__126005));
})();
var G__125999 = " ";
var G__126000 = (function (){var G__126006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126007 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126006,G__126007) : tailrecursion.hoplon.span.call(null,G__126006,G__126007));
})();
var G__126001 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__125995,G__125996,G__125997,G__125998,G__125999,G__126000,G__126001) : tailrecursion.hoplon.pre.call(null,G__125995,G__125996,G__125997,G__125998,G__125999,G__126000,G__126001));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__125993,G__125994) : tailrecursion.hoplon.div.call(null,G__125993,G__125994));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__125992) : tailrecursion.hoplon.div.call(null,G__125992));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125991;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125990;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_125989;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_125988;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126008 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126009 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126010 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126011 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126012 = (function (){var G__126013 = "false\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__126013) : tailrecursion.hoplon.code.call(null,G__126013));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__126012) : tailrecursion.hoplon.pre.call(null,G__126012));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126011;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126010;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126009;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126008;
}})()], 0)),"",(function (){var _STAR_references_STAR_126014 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126015 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126016 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126017 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126018 = (function (){var G__126019 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126020 = (function (){var G__126021 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126022 = "(";
var G__126023 = (function (){var G__126044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126045 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126044,G__126045) : tailrecursion.hoplon.span.call(null,G__126044,G__126045));
})();
var G__126024 = "(";
var G__126025 = (function (){var G__126046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126047 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126046,G__126047) : tailrecursion.hoplon.span.call(null,G__126046,G__126047));
})();
var G__126026 = "(";
var G__126027 = (function (){var G__126048 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126049 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126048,G__126049) : tailrecursion.hoplon.span.call(null,G__126048,G__126049));
})();
var G__126028 = (function (){var G__126050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126051 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126050,G__126051) : tailrecursion.hoplon.span.call(null,G__126050,G__126051));
})();
var G__126029 = " ";
var G__126030 = (function (){var G__126052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126053 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126052,G__126053) : tailrecursion.hoplon.span.call(null,G__126052,G__126053));
})();
var G__126031 = ") (";
var G__126032 = (function (){var G__126054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126055 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126054,G__126055) : tailrecursion.hoplon.span.call(null,G__126054,G__126055));
})();
var G__126033 = (function (){var G__126056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126057 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126056,G__126057) : tailrecursion.hoplon.span.call(null,G__126056,G__126057));
})();
var G__126034 = " (";
var G__126035 = (function (){var G__126058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126059 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126058,G__126059) : tailrecursion.hoplon.span.call(null,G__126058,G__126059));
})();
var G__126036 = (function (){var G__126060 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126061 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126060,G__126061) : tailrecursion.hoplon.span.call(null,G__126060,G__126061));
})();
var G__126037 = " ";
var G__126038 = (function (){var G__126062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126063 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126062,G__126063) : tailrecursion.hoplon.span.call(null,G__126062,G__126063));
})();
var G__126039 = ")))\n    ";
var G__126040 = (function (){var G__126064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126065 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126064,G__126065) : tailrecursion.hoplon.span.call(null,G__126064,G__126065));
})();
var G__126041 = "\n    ";
var G__126042 = (function (){var G__126066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126067 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126066,G__126067) : tailrecursion.hoplon.span.call(null,G__126066,G__126067));
})();
var G__126043 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__126021,G__126022,G__126023,G__126024,G__126025,G__126026,G__126027,G__126028,G__126029,G__126030,G__126031,G__126032,G__126033,G__126034,G__126035,G__126036,G__126037,G__126038,G__126039,G__126040,G__126041,G__126042,G__126043) : tailrecursion.hoplon.pre.call(null,G__126021,G__126022,G__126023,G__126024,G__126025,G__126026,G__126027,G__126028,G__126029,G__126030,G__126031,G__126032,G__126033,G__126034,G__126035,G__126036,G__126037,G__126038,G__126039,G__126040,G__126041,G__126042,G__126043));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126019,G__126020) : tailrecursion.hoplon.div.call(null,G__126019,G__126020));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126018) : tailrecursion.hoplon.div.call(null,G__126018));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126017;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126016;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126015;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126014;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126068 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126069 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126070 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126071 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126072 = (function (){var G__126073 = "4\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__126073) : tailrecursion.hoplon.code.call(null,G__126073));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__126072) : tailrecursion.hoplon.pre.call(null,G__126072));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126071;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126070;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126069;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126068;
}})()], 0)),"",(function (){var _STAR_references_STAR_126074 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126075 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126076 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126077 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126078 = (function (){var G__126079 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126080 = (function (){var G__126081 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126082 = "(";
var G__126083 = (function (){var G__126108 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126109 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126108,G__126109) : tailrecursion.hoplon.span.call(null,G__126108,G__126109));
})();
var G__126084 = "(";
var G__126085 = (function (){var G__126110 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126111 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126110,G__126111) : tailrecursion.hoplon.span.call(null,G__126110,G__126111));
})();
var G__126086 = (function (){var G__126112 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126113 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126112,G__126113) : tailrecursion.hoplon.span.call(null,G__126112,G__126113));
})();
var G__126087 = " ";
var G__126088 = (function (){var G__126114 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126115 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126114,G__126115) : tailrecursion.hoplon.span.call(null,G__126114,G__126115));
})();
var G__126089 = ") ";
var G__126090 = (function (){var G__126116 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126117 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126116,G__126117) : tailrecursion.hoplon.span.call(null,G__126116,G__126117));
})();
var G__126091 = "\n      (";
var G__126092 = (function (){var G__126118 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126119 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126118,G__126119) : tailrecursion.hoplon.span.call(null,G__126118,G__126119));
})();
var G__126093 = (function (){var G__126120 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126121 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126120,G__126121) : tailrecursion.hoplon.span.call(null,G__126120,G__126121));
})();
var G__126094 = " ";
var G__126095 = (function (){var G__126122 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126123 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126122,G__126123) : tailrecursion.hoplon.span.call(null,G__126122,G__126123));
})();
var G__126096 = ") (";
var G__126097 = (function (){var G__126124 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126125 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126124,G__126125) : tailrecursion.hoplon.span.call(null,G__126124,G__126125));
})();
var G__126098 = (function (){var G__126126 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126127 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126126,G__126127) : tailrecursion.hoplon.span.call(null,G__126126,G__126127));
})();
var G__126099 = " ";
var G__126100 = (function (){var G__126128 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126129 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126128,G__126129) : tailrecursion.hoplon.span.call(null,G__126128,G__126129));
})();
var G__126101 = " ";
var G__126102 = (function (){var G__126130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126131 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126130,G__126131) : tailrecursion.hoplon.span.call(null,G__126130,G__126131));
})();
var G__126103 = ")\n      ";
var G__126104 = (function (){var G__126132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126133 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126132,G__126133) : tailrecursion.hoplon.span.call(null,G__126132,G__126133));
})();
var G__126105 = " ";
var G__126106 = (function (){var G__126134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126135 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126134,G__126135) : tailrecursion.hoplon.span.call(null,G__126134,G__126135));
})();
var G__126107 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__126081,G__126082,G__126083,G__126084,G__126085,G__126086,G__126087,G__126088,G__126089,G__126090,G__126091,G__126092,G__126093,G__126094,G__126095,G__126096,G__126097,G__126098,G__126099,G__126100,G__126101,G__126102,G__126103,G__126104,G__126105,G__126106,G__126107) : tailrecursion.hoplon.pre.call(null,G__126081,G__126082,G__126083,G__126084,G__126085,G__126086,G__126087,G__126088,G__126089,G__126090,G__126091,G__126092,G__126093,G__126094,G__126095,G__126096,G__126097,G__126098,G__126099,G__126100,G__126101,G__126102,G__126103,G__126104,G__126105,G__126106,G__126107));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126079,G__126080) : tailrecursion.hoplon.div.call(null,G__126079,G__126080));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126078) : tailrecursion.hoplon.div.call(null,G__126078));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126077;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126076;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126075;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126074;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126136 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126137 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126138 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126139 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126140 = (function (){var G__126141 = "16\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__126141) : tailrecursion.hoplon.code.call(null,G__126141));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__126140) : tailrecursion.hoplon.pre.call(null,G__126140));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126139;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126138;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126137;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126136;
}})()], 0)),"",(function (){var _STAR_references_STAR_126142 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126143 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126144 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126145 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126146 = (function (){var G__126147 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126148 = (function (){var G__126149 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126150 = "(";
var G__126151 = (function (){var G__126165 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126166 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126165,G__126166) : tailrecursion.hoplon.span.call(null,G__126165,G__126166));
})();
var G__126152 = (function (){var G__126167 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126168 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126167,G__126168) : tailrecursion.hoplon.span.call(null,G__126167,G__126168));
})();
var G__126153 = " (";
var G__126154 = (function (){var G__126169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126170 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126169,G__126170) : tailrecursion.hoplon.span.call(null,G__126169,G__126170));
})();
var G__126155 = "(";
var G__126156 = (function (){var G__126171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126172 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126171,G__126172) : tailrecursion.hoplon.span.call(null,G__126171,G__126172));
})();
var G__126157 = (function (){var G__126173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126174 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126173,G__126174) : tailrecursion.hoplon.span.call(null,G__126173,G__126174));
})();
var G__126158 = " ";
var G__126159 = (function (){var G__126175 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126176 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126175,G__126176) : tailrecursion.hoplon.span.call(null,G__126175,G__126176));
})();
var G__126160 = ") ";
var G__126161 = (function (){var G__126177 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126178 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126177,G__126178) : tailrecursion.hoplon.span.call(null,G__126177,G__126178));
})();
var G__126162 = " ";
var G__126163 = (function (){var G__126179 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126180 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126179,G__126180) : tailrecursion.hoplon.span.call(null,G__126179,G__126180));
})();
var G__126164 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__126149,G__126150,G__126151,G__126152,G__126153,G__126154,G__126155,G__126156,G__126157,G__126158,G__126159,G__126160,G__126161,G__126162,G__126163,G__126164) : tailrecursion.hoplon.pre.call(null,G__126149,G__126150,G__126151,G__126152,G__126153,G__126154,G__126155,G__126156,G__126157,G__126158,G__126159,G__126160,G__126161,G__126162,G__126163,G__126164));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126147,G__126148) : tailrecursion.hoplon.div.call(null,G__126147,G__126148));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126146) : tailrecursion.hoplon.div.call(null,G__126146));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126145;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126144;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126143;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126142;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126181 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126182 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126183 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126184 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126185 = (function (){var G__126186 = "5\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__126186) : tailrecursion.hoplon.code.call(null,G__126186));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__126185) : tailrecursion.hoplon.pre.call(null,G__126185));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126184;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126183;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126182;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126181;
}})()], 0)),"",(function (){var _STAR_references_STAR_126187 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126188 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126189 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126190 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126191 = (function (){var G__126192 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126193 = (function (){var G__126194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126195 = "(";
var G__126196 = (function (){var G__126223 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126224 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126223,G__126224) : tailrecursion.hoplon.span.call(null,G__126223,G__126224));
})();
var G__126197 = "(";
var G__126198 = (function (){var G__126225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126226 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126225,G__126226) : tailrecursion.hoplon.span.call(null,G__126225,G__126226));
})();
var G__126199 = "(";
var G__126200 = (function (){var G__126227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126228 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126227,G__126228) : tailrecursion.hoplon.span.call(null,G__126227,G__126228));
})();
var G__126201 = (function (){var G__126229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126230 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126229,G__126230) : tailrecursion.hoplon.span.call(null,G__126229,G__126230));
})();
var G__126202 = " ";
var G__126203 = (function (){var G__126231 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126232 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126231,G__126232) : tailrecursion.hoplon.span.call(null,G__126231,G__126232));
})();
var G__126204 = ") ";
var G__126205 = (function (){var G__126233 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126234 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126233,G__126234) : tailrecursion.hoplon.span.call(null,G__126233,G__126234));
})();
var G__126206 = "\n         (";
var G__126207 = (function (){var G__126235 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126236 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126235,G__126236) : tailrecursion.hoplon.span.call(null,G__126235,G__126236));
})();
var G__126208 = (function (){var G__126237 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126238 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126237,G__126238) : tailrecursion.hoplon.span.call(null,G__126237,G__126238));
})();
var G__126209 = " ";
var G__126210 = (function (){var G__126239 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126240 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126239,G__126240) : tailrecursion.hoplon.span.call(null,G__126239,G__126240));
})();
var G__126211 = ") ";
var G__126212 = (function (){var G__126241 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126242 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126241,G__126242) : tailrecursion.hoplon.span.call(null,G__126241,G__126242));
})();
var G__126213 = "\n         ";
var G__126214 = (function (){var G__126243 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126244 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126243,G__126244) : tailrecursion.hoplon.span.call(null,G__126243,G__126244));
})();
var G__126215 = " ";
var G__126216 = (function (){var G__126245 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126246 = "-1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126245,G__126246) : tailrecursion.hoplon.span.call(null,G__126245,G__126246));
})();
var G__126217 = ")\n   (";
var G__126218 = (function (){var G__126247 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126248 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126247,G__126248) : tailrecursion.hoplon.span.call(null,G__126247,G__126248));
})();
var G__126219 = (function (){var G__126249 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126250 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126249,G__126250) : tailrecursion.hoplon.span.call(null,G__126249,G__126250));
})();
var G__126220 = " ";
var G__126221 = (function (){var G__126251 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126252 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126251,G__126252) : tailrecursion.hoplon.span.call(null,G__126251,G__126252));
})();
var G__126222 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__126194,G__126195,G__126196,G__126197,G__126198,G__126199,G__126200,G__126201,G__126202,G__126203,G__126204,G__126205,G__126206,G__126207,G__126208,G__126209,G__126210,G__126211,G__126212,G__126213,G__126214,G__126215,G__126216,G__126217,G__126218,G__126219,G__126220,G__126221,G__126222) : tailrecursion.hoplon.pre.call(null,G__126194,G__126195,G__126196,G__126197,G__126198,G__126199,G__126200,G__126201,G__126202,G__126203,G__126204,G__126205,G__126206,G__126207,G__126208,G__126209,G__126210,G__126211,G__126212,G__126213,G__126214,G__126215,G__126216,G__126217,G__126218,G__126219,G__126220,G__126221,G__126222));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126192,G__126193) : tailrecursion.hoplon.div.call(null,G__126192,G__126193));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126191) : tailrecursion.hoplon.div.call(null,G__126191));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126190;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126189;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126188;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126187;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126253 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126254 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126255 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126256 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126257 = (function (){var G__126258 = "16\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__126258) : tailrecursion.hoplon.code.call(null,G__126258));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__126257) : tailrecursion.hoplon.pre.call(null,G__126257));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126256;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126255;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126254;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126253;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126259 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126260 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126261 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126262 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126263 = cljs.core.PersistentArrayMap.EMPTY;
var G__126264 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Translate the following expression into prefix form $$\\frac{5+4+\\left(2-\\left(3-\\left(6+\\frac{4}{5}\\right)\\right)\\right)}{3(6-2)(2-7)}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126263,G__126264) : tailrecursion.hoplon.markdown.para_node.call(null,G__126263,G__126264));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126262;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126261;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126260;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126259;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126265 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126266 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126267 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126268 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126269 = (function (){var G__126270 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126271 = (function (){var G__126272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126273 = "(";
var G__126274 = (function (){var G__126308 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126309 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126308,G__126309) : tailrecursion.hoplon.span.call(null,G__126308,G__126309));
})();
var G__126275 = "(";
var G__126276 = (function (){var G__126310 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126311 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126310,G__126311) : tailrecursion.hoplon.span.call(null,G__126310,G__126311));
})();
var G__126277 = (function (){var G__126312 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126313 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126312,G__126313) : tailrecursion.hoplon.span.call(null,G__126312,G__126313));
})();
var G__126278 = " ";
var G__126279 = (function (){var G__126314 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126315 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126314,G__126315) : tailrecursion.hoplon.span.call(null,G__126314,G__126315));
})();
var G__126280 = " (";
var G__126281 = (function (){var G__126316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126317 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126316,G__126317) : tailrecursion.hoplon.span.call(null,G__126316,G__126317));
})();
var G__126282 = (function (){var G__126318 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126319 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126318,G__126319) : tailrecursion.hoplon.span.call(null,G__126318,G__126319));
})();
var G__126283 = " (";
var G__126284 = (function (){var G__126320 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126321 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126320,G__126321) : tailrecursion.hoplon.span.call(null,G__126320,G__126321));
})();
var G__126285 = (function (){var G__126322 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126323 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126322,G__126323) : tailrecursion.hoplon.span.call(null,G__126322,G__126323));
})();
var G__126286 = " (";
var G__126287 = (function (){var G__126324 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126325 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126324,G__126325) : tailrecursion.hoplon.span.call(null,G__126324,G__126325));
})();
var G__126288 = (function (){var G__126326 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126327 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126326,G__126327) : tailrecursion.hoplon.span.call(null,G__126326,G__126327));
})();
var G__126289 = " (";
var G__126290 = (function (){var G__126328 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126329 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126328,G__126329) : tailrecursion.hoplon.span.call(null,G__126328,G__126329));
})();
var G__126291 = (function (){var G__126330 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126331 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126330,G__126331) : tailrecursion.hoplon.span.call(null,G__126330,G__126331));
})();
var G__126292 = " ";
var G__126293 = (function (){var G__126332 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126333 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126332,G__126333) : tailrecursion.hoplon.span.call(null,G__126332,G__126333));
})();
var G__126294 = "))))) \n   (";
var G__126295 = (function (){var G__126334 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126335 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126334,G__126335) : tailrecursion.hoplon.span.call(null,G__126334,G__126335));
})();
var G__126296 = (function (){var G__126336 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126337 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126336,G__126337) : tailrecursion.hoplon.span.call(null,G__126336,G__126337));
})();
var G__126297 = " (";
var G__126298 = (function (){var G__126338 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126339 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126338,G__126339) : tailrecursion.hoplon.span.call(null,G__126338,G__126339));
})();
var G__126299 = (function (){var G__126340 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126341 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126340,G__126341) : tailrecursion.hoplon.span.call(null,G__126340,G__126341));
})();
var G__126300 = " ";
var G__126301 = (function (){var G__126342 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126343 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126342,G__126343) : tailrecursion.hoplon.span.call(null,G__126342,G__126343));
})();
var G__126302 = ") (";
var G__126303 = (function (){var G__126344 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126345 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126344,G__126345) : tailrecursion.hoplon.span.call(null,G__126344,G__126345));
})();
var G__126304 = (function (){var G__126346 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126347 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126346,G__126347) : tailrecursion.hoplon.span.call(null,G__126346,G__126347));
})();
var G__126305 = " ";
var G__126306 = (function (){var G__126348 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126349 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126348,G__126349) : tailrecursion.hoplon.span.call(null,G__126348,G__126349));
})();
var G__126307 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__126272,G__126273,G__126274,G__126275,G__126276,G__126277,G__126278,G__126279,G__126280,G__126281,G__126282,G__126283,G__126284,G__126285,G__126286,G__126287,G__126288,G__126289,G__126290,G__126291,G__126292,G__126293,G__126294,G__126295,G__126296,G__126297,G__126298,G__126299,G__126300,G__126301,G__126302,G__126303,G__126304,G__126305,G__126306,G__126307) : tailrecursion.hoplon.pre.call(null,G__126272,G__126273,G__126274,G__126275,G__126276,G__126277,G__126278,G__126279,G__126280,G__126281,G__126282,G__126283,G__126284,G__126285,G__126286,G__126287,G__126288,G__126289,G__126290,G__126291,G__126292,G__126293,G__126294,G__126295,G__126296,G__126297,G__126298,G__126299,G__126300,G__126301,G__126302,G__126303,G__126304,G__126305,G__126306,G__126307));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126270,G__126271) : tailrecursion.hoplon.div.call(null,G__126270,G__126271));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126269) : tailrecursion.hoplon.div.call(null,G__126269));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126268;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126267;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126266;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126265;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126350 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126351 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126352 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126353 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126354 = cljs.core.PersistentArrayMap.EMPTY;
var G__126355 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126354,G__126355) : tailrecursion.hoplon.markdown.para_node.call(null,G__126354,G__126355));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126353;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126352;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126351;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126350;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126356 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126357 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126358 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126359 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126360 = (function (){var G__126361 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126362 = (function (){var G__126363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126364 = "(";
var G__126365 = (function (){var G__126432 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126433 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126432,G__126433) : tailrecursion.hoplon.span.call(null,G__126432,G__126433));
})();
var G__126366 = (function (){var G__126434 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126435 = "sum-of-largest-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126434,G__126435) : tailrecursion.hoplon.span.call(null,G__126434,G__126435));
})();
var G__126367 = " [";
var G__126368 = (function (){var G__126436 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126437 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126436,G__126437) : tailrecursion.hoplon.span.call(null,G__126436,G__126437));
})();
var G__126369 = " ";
var G__126370 = (function (){var G__126438 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126439 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126438,G__126439) : tailrecursion.hoplon.span.call(null,G__126438,G__126439));
})();
var G__126371 = " ";
var G__126372 = (function (){var G__126440 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126441 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126440,G__126441) : tailrecursion.hoplon.span.call(null,G__126440,G__126441));
})();
var G__126373 = "]\n  (";
var G__126374 = (function (){var G__126442 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126443 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126442,G__126443) : tailrecursion.hoplon.span.call(null,G__126442,G__126443));
})();
var G__126375 = "(";
var G__126376 = (function (){var G__126444 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126445 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126444,G__126445) : tailrecursion.hoplon.span.call(null,G__126444,G__126445));
})();
var G__126377 = "(";
var G__126378 = (function (){var G__126446 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126447 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126446,G__126447) : tailrecursion.hoplon.span.call(null,G__126446,G__126447));
})();
var G__126379 = (function (){var G__126448 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126449 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126448,G__126449) : tailrecursion.hoplon.span.call(null,G__126448,G__126449));
})();
var G__126380 = " ";
var G__126381 = (function (){var G__126450 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126451 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126450,G__126451) : tailrecursion.hoplon.span.call(null,G__126450,G__126451));
})();
var G__126382 = ") (";
var G__126383 = (function (){var G__126452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126453 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126452,G__126453) : tailrecursion.hoplon.span.call(null,G__126452,G__126453));
})();
var G__126384 = (function (){var G__126454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126455 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126454,G__126455) : tailrecursion.hoplon.span.call(null,G__126454,G__126455));
})();
var G__126385 = " ";
var G__126386 = (function (){var G__126456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126457 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126456,G__126457) : tailrecursion.hoplon.span.call(null,G__126456,G__126457));
})();
var G__126387 = ")) (";
var G__126388 = (function (){var G__126458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126459 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126458,G__126459) : tailrecursion.hoplon.span.call(null,G__126458,G__126459));
})();
var G__126389 = "(";
var G__126390 = (function (){var G__126460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126461 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126460,G__126461) : tailrecursion.hoplon.span.call(null,G__126460,G__126461));
})();
var G__126391 = " ";
var G__126392 = (function (){var G__126462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126463 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126462,G__126463) : tailrecursion.hoplon.span.call(null,G__126462,G__126463));
})();
var G__126393 = ") (";
var G__126394 = (function (){var G__126464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126465 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126464,G__126465) : tailrecursion.hoplon.span.call(null,G__126464,G__126465));
})();
var G__126395 = " ";
var G__126396 = (function (){var G__126466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126467 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126466,G__126467) : tailrecursion.hoplon.span.call(null,G__126466,G__126467));
})();
var G__126397 = "))\n        (";
var G__126398 = (function (){var G__126468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126469 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126468,G__126469) : tailrecursion.hoplon.span.call(null,G__126468,G__126469));
})();
var G__126399 = "(";
var G__126400 = (function (){var G__126470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126471 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126470,G__126471) : tailrecursion.hoplon.span.call(null,G__126470,G__126471));
})();
var G__126401 = (function (){var G__126472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126473 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126472,G__126473) : tailrecursion.hoplon.span.call(null,G__126472,G__126473));
})();
var G__126402 = " ";
var G__126403 = (function (){var G__126474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126475 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126474,G__126475) : tailrecursion.hoplon.span.call(null,G__126474,G__126475));
})();
var G__126404 = ") (";
var G__126405 = (function (){var G__126476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126477 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126476,G__126477) : tailrecursion.hoplon.span.call(null,G__126476,G__126477));
})();
var G__126406 = (function (){var G__126478 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126479 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126478,G__126479) : tailrecursion.hoplon.span.call(null,G__126478,G__126479));
})();
var G__126407 = " ";
var G__126408 = (function (){var G__126480 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126481 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126480,G__126481) : tailrecursion.hoplon.span.call(null,G__126480,G__126481));
})();
var G__126409 = ")) (";
var G__126410 = (function (){var G__126482 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126483 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126482,G__126483) : tailrecursion.hoplon.span.call(null,G__126482,G__126483));
})();
var G__126411 = "(";
var G__126412 = (function (){var G__126484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126485 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126484,G__126485) : tailrecursion.hoplon.span.call(null,G__126484,G__126485));
})();
var G__126413 = " ";
var G__126414 = (function (){var G__126486 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126487 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126486,G__126487) : tailrecursion.hoplon.span.call(null,G__126486,G__126487));
})();
var G__126415 = ") (";
var G__126416 = (function (){var G__126488 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126489 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126488,G__126489) : tailrecursion.hoplon.span.call(null,G__126488,G__126489));
})();
var G__126417 = " ";
var G__126418 = (function (){var G__126490 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126491 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126490,G__126491) : tailrecursion.hoplon.span.call(null,G__126490,G__126491));
})();
var G__126419 = "))\n        ";
var G__126420 = (function (){var G__126492 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126493 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126492,G__126493) : tailrecursion.hoplon.span.call(null,G__126492,G__126493));
})();
var G__126421 = " (";
var G__126422 = (function (){var G__126494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126495 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126494,G__126495) : tailrecursion.hoplon.span.call(null,G__126494,G__126495));
})();
var G__126423 = "(";
var G__126424 = (function (){var G__126496 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126497 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126496,G__126497) : tailrecursion.hoplon.span.call(null,G__126496,G__126497));
})();
var G__126425 = " ";
var G__126426 = (function (){var G__126498 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126499 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126498,G__126499) : tailrecursion.hoplon.span.call(null,G__126498,G__126499));
})();
var G__126427 = ") (";
var G__126428 = (function (){var G__126500 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126501 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126500,G__126501) : tailrecursion.hoplon.span.call(null,G__126500,G__126501));
})();
var G__126429 = " ";
var G__126430 = (function (){var G__126502 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126503 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126502,G__126503) : tailrecursion.hoplon.span.call(null,G__126502,G__126503));
})();
var G__126431 = "))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69(G__126363,G__126364,G__126365,G__126366,G__126367,G__126368,G__126369,G__126370,G__126371,G__126372,G__126373,G__126374,G__126375,G__126376,G__126377,G__126378,G__126379,G__126380,G__126381,G__126382,G__126383,G__126384,G__126385,G__126386,G__126387,G__126388,G__126389,G__126390,G__126391,G__126392,G__126393,G__126394,G__126395,G__126396,G__126397,G__126398,G__126399,G__126400,G__126401,G__126402,G__126403,G__126404,G__126405,G__126406,G__126407,G__126408,G__126409,G__126410,G__126411,G__126412,G__126413,G__126414,G__126415,G__126416,G__126417,G__126418,G__126419,G__126420,G__126421,G__126422,G__126423,G__126424,G__126425,G__126426,G__126427,G__126428,G__126429,G__126430,G__126431) : tailrecursion.hoplon.pre.call(null,G__126363,G__126364,G__126365,G__126366,G__126367,G__126368,G__126369,G__126370,G__126371,G__126372,G__126373,G__126374,G__126375,G__126376,G__126377,G__126378,G__126379,G__126380,G__126381,G__126382,G__126383,G__126384,G__126385,G__126386,G__126387,G__126388,G__126389,G__126390,G__126391,G__126392,G__126393,G__126394,G__126395,G__126396,G__126397,G__126398,G__126399,G__126400,G__126401,G__126402,G__126403,G__126404,G__126405,G__126406,G__126407,G__126408,G__126409,G__126410,G__126411,G__126412,G__126413,G__126414,G__126415,G__126416,G__126417,G__126418,G__126419,G__126420,G__126421,G__126422,G__126423,G__126424,G__126425,G__126426,G__126427,G__126428,G__126429,G__126430,G__126431));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126361,G__126362) : tailrecursion.hoplon.div.call(null,G__126361,G__126362));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126360) : tailrecursion.hoplon.div.call(null,G__126360));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126359;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126358;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126357;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126356;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126504 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126505 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126506 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126507 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126508 = cljs.core.PersistentArrayMap.EMPTY;
var G__126509 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126508,G__126509) : tailrecursion.hoplon.markdown.para_node.call(null,G__126508,G__126509));
})(),(function (){var G__126510 = (function (){var G__126511 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126512 = (function (){var G__126513 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126514 = "(";
var G__126515 = (function (){var G__126536 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126537 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126536,G__126537) : tailrecursion.hoplon.span.call(null,G__126536,G__126537));
})();
var G__126516 = (function (){var G__126538 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126539 = "a-plus-abs-b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126538,G__126539) : tailrecursion.hoplon.span.call(null,G__126538,G__126539));
})();
var G__126517 = " [";
var G__126518 = (function (){var G__126540 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126541 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126540,G__126541) : tailrecursion.hoplon.span.call(null,G__126540,G__126541));
})();
var G__126519 = " ";
var G__126520 = (function (){var G__126542 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126543 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126542,G__126543) : tailrecursion.hoplon.span.call(null,G__126542,G__126543));
})();
var G__126521 = "]\n  ((";
var G__126522 = (function (){var G__126544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126545 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126544,G__126545) : tailrecursion.hoplon.span.call(null,G__126544,G__126545));
})();
var G__126523 = "(";
var G__126524 = (function (){var G__126546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126547 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126546,G__126547) : tailrecursion.hoplon.span.call(null,G__126546,G__126547));
})();
var G__126525 = (function (){var G__126548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126549 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126548,G__126549) : tailrecursion.hoplon.span.call(null,G__126548,G__126549));
})();
var G__126526 = " ";
var G__126527 = (function (){var G__126550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126551 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126550,G__126551) : tailrecursion.hoplon.span.call(null,G__126550,G__126551));
})();
var G__126528 = ") ";
var G__126529 = (function (){var G__126552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126553 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126552,G__126553) : tailrecursion.hoplon.span.call(null,G__126552,G__126553));
})();
var G__126530 = (function (){var G__126554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126555 = "-";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126554,G__126555) : tailrecursion.hoplon.span.call(null,G__126554,G__126555));
})();
var G__126531 = ") ";
var G__126532 = (function (){var G__126556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126557 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126556,G__126557) : tailrecursion.hoplon.span.call(null,G__126556,G__126557));
})();
var G__126533 = " ";
var G__126534 = (function (){var G__126558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126559 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126558,G__126559) : tailrecursion.hoplon.span.call(null,G__126558,G__126559));
})();
var G__126535 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__126513,G__126514,G__126515,G__126516,G__126517,G__126518,G__126519,G__126520,G__126521,G__126522,G__126523,G__126524,G__126525,G__126526,G__126527,G__126528,G__126529,G__126530,G__126531,G__126532,G__126533,G__126534,G__126535) : tailrecursion.hoplon.pre.call(null,G__126513,G__126514,G__126515,G__126516,G__126517,G__126518,G__126519,G__126520,G__126521,G__126522,G__126523,G__126524,G__126525,G__126526,G__126527,G__126528,G__126529,G__126530,G__126531,G__126532,G__126533,G__126534,G__126535));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126511,G__126512) : tailrecursion.hoplon.div.call(null,G__126511,G__126512));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126510) : tailrecursion.hoplon.div.call(null,G__126510));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126507;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126506;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126505;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126504;
}})(),content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126560 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126561 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126562 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126563 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126564 = cljs.core.PersistentArrayMap.EMPTY;
var G__126565 = new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It returns ",(function (){var G__126566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a (abs b))"], null);
var G__126567 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126566,G__126567) : tailrecursion.hoplon.markdown.code_node.call(null,G__126566,G__126567));
})(),". Note: if ",(function (){var G__126568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(> b 0)"], null);
var G__126569 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126568,G__126569) : tailrecursion.hoplon.markdown.code_node.call(null,G__126568,G__126569));
})(),", then ",(function (){var G__126570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(= (abs b) b)"], null);
var G__126571 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126570,G__126571) : tailrecursion.hoplon.markdown.code_node.call(null,G__126570,G__126571));
})(),", so ",(function (){var G__126572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a (abs b))"], null);
var G__126573 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126572,G__126573) : tailrecursion.hoplon.markdown.code_node.call(null,G__126572,G__126573));
})()," would be ",(function (){var G__126574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a b)"], null);
var G__126575 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126574,G__126575) : tailrecursion.hoplon.markdown.code_node.call(null,G__126574,G__126575));
})(),", just as this function gives us. Alternatively, if ",(function (){var G__126576 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(not (> b 0))"], null);
var G__126577 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126576,G__126577) : tailrecursion.hoplon.markdown.code_node.call(null,G__126576,G__126577));
})(),", then b is negative and ",(function (){var G__126578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(= (abs b) (- b))"], null);
var G__126579 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126578,G__126579) : tailrecursion.hoplon.markdown.code_node.call(null,G__126578,G__126579));
})()," which means, ",(function (){var G__126580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a (abs b))"], null);
var G__126581 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126580,G__126581) : tailrecursion.hoplon.markdown.code_node.call(null,G__126580,G__126581));
})()," is ",(function (){var G__126582 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a (- b))"], null);
var G__126583 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126582,G__126583) : tailrecursion.hoplon.markdown.code_node.call(null,G__126582,G__126583));
})()," which is really just ",(function (){var G__126584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(- a b)"], null);
var G__126585 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126584,G__126585) : tailrecursion.hoplon.markdown.code_node.call(null,G__126584,G__126585));
})()," as our function above gives us."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126564,G__126565) : tailrecursion.hoplon.markdown.para_node.call(null,G__126564,G__126565));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126563;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126562;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126561;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126560;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126586 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126587 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126588 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126589 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126590 = cljs.core.PersistentArrayMap.EMPTY;
var G__126591 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126590,G__126591) : tailrecursion.hoplon.markdown.para_node.call(null,G__126590,G__126591));
})(),(function (){var G__126592 = (function (){var G__126593 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126594 = (function (){var G__126595 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126596 = "(";
var G__126597 = (function (){var G__126602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126603 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126602,G__126603) : tailrecursion.hoplon.span.call(null,G__126602,G__126603));
})();
var G__126598 = (function (){var G__126604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126605 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126604,G__126605) : tailrecursion.hoplon.span.call(null,G__126604,G__126605));
})();
var G__126599 = " [] (";
var G__126600 = (function (){var G__126606 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126607 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126606,G__126607) : tailrecursion.hoplon.span.call(null,G__126606,G__126607));
})();
var G__126601 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__126595,G__126596,G__126597,G__126598,G__126599,G__126600,G__126601) : tailrecursion.hoplon.pre.call(null,G__126595,G__126596,G__126597,G__126598,G__126599,G__126600,G__126601));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126593,G__126594) : tailrecursion.hoplon.div.call(null,G__126593,G__126594));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126592) : tailrecursion.hoplon.div.call(null,G__126592));
})(),(function (){var G__126608 = cljs.core.PersistentArrayMap.EMPTY;
var G__126609 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126608,G__126609) : tailrecursion.hoplon.markdown.para_node.call(null,G__126608,G__126609));
})(),(function (){var G__126610 = (function (){var G__126611 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126612 = (function (){var G__126613 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126614 = "(";
var G__126615 = (function (){var G__126633 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126634 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126633,G__126634) : tailrecursion.hoplon.span.call(null,G__126633,G__126634));
})();
var G__126616 = (function (){var G__126635 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126636 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126635,G__126636) : tailrecursion.hoplon.span.call(null,G__126635,G__126636));
})();
var G__126617 = "[";
var G__126618 = (function (){var G__126637 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126638 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126637,G__126638) : tailrecursion.hoplon.span.call(null,G__126637,G__126638));
})();
var G__126619 = " ";
var G__126620 = (function (){var G__126639 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126640 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126639,G__126640) : tailrecursion.hoplon.span.call(null,G__126639,G__126640));
})();
var G__126621 = "]\n   (";
var G__126622 = (function (){var G__126641 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126642 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126641,G__126642) : tailrecursion.hoplon.span.call(null,G__126641,G__126642));
})();
var G__126623 = "(";
var G__126624 = (function (){var G__126643 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126644 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126643,G__126644) : tailrecursion.hoplon.span.call(null,G__126643,G__126644));
})();
var G__126625 = (function (){var G__126645 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126646 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126645,G__126646) : tailrecursion.hoplon.span.call(null,G__126645,G__126646));
})();
var G__126626 = " ";
var G__126627 = (function (){var G__126647 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126648 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126647,G__126648) : tailrecursion.hoplon.span.call(null,G__126647,G__126648));
})();
var G__126628 = ")\n   ";
var G__126629 = (function (){var G__126649 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126650 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126649,G__126650) : tailrecursion.hoplon.span.call(null,G__126649,G__126650));
})();
var G__126630 = "\n   ";
var G__126631 = (function (){var G__126651 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126652 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126651,G__126652) : tailrecursion.hoplon.span.call(null,G__126651,G__126652));
})();
var G__126632 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__126613,G__126614,G__126615,G__126616,G__126617,G__126618,G__126619,G__126620,G__126621,G__126622,G__126623,G__126624,G__126625,G__126626,G__126627,G__126628,G__126629,G__126630,G__126631,G__126632) : tailrecursion.hoplon.pre.call(null,G__126613,G__126614,G__126615,G__126616,G__126617,G__126618,G__126619,G__126620,G__126621,G__126622,G__126623,G__126624,G__126625,G__126626,G__126627,G__126628,G__126629,G__126630,G__126631,G__126632));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126611,G__126612) : tailrecursion.hoplon.div.call(null,G__126611,G__126612));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126610) : tailrecursion.hoplon.div.call(null,G__126610));
})(),(function (){var G__126653 = cljs.core.PersistentArrayMap.EMPTY;
var G__126654 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then he evaluates the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126653,G__126654) : tailrecursion.hoplon.markdown.para_node.call(null,G__126653,G__126654));
})(),(function (){var G__126655 = (function (){var G__126656 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126657 = (function (){var G__126658 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126659 = "(";
var G__126660 = (function (){var G__126665 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126666 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126665,G__126666) : tailrecursion.hoplon.span.call(null,G__126665,G__126666));
})();
var G__126661 = (function (){var G__126667 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126668 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126667,G__126668) : tailrecursion.hoplon.span.call(null,G__126667,G__126668));
})();
var G__126662 = " (";
var G__126663 = (function (){var G__126669 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126670 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126669,G__126670) : tailrecursion.hoplon.span.call(null,G__126669,G__126670));
})();
var G__126664 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__126658,G__126659,G__126660,G__126661,G__126662,G__126663,G__126664) : tailrecursion.hoplon.pre.call(null,G__126658,G__126659,G__126660,G__126661,G__126662,G__126663,G__126664));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126656,G__126657) : tailrecursion.hoplon.div.call(null,G__126656,G__126657));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126655) : tailrecursion.hoplon.div.call(null,G__126655));
})(),(function (){var G__126671 = cljs.core.PersistentArrayMap.EMPTY;
var G__126672 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126671,G__126672) : tailrecursion.hoplon.markdown.para_node.call(null,G__126671,G__126672));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126589;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126588;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126587;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126586;
}})(),content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_126673 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126674 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126675 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126676 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126677 = cljs.core.PersistentArrayMap.EMPTY;
var G__126678 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126679 = cljs.core.PersistentArrayMap.EMPTY;
var G__126680 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126681 = cljs.core.PersistentArrayMap.EMPTY;
var G__126682 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With normal order evaluation it compiles just as one  might expect: first the function itself is unraveled,  finding that it is an ",(function (){var G__126683 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__126684 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126683,G__126684) : tailrecursion.hoplon.markdown.code_node.call(null,G__126683,G__126684));
})()," statement, then the ",(function (){var G__126685 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__126686 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__126685,G__126686) : tailrecursion.hoplon.markdown.code_node.call(null,G__126685,G__126686));
})(),"  statement is evaluated according to its own rules.  Finding that the first argument is 0, it returns 0."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126681,G__126682) : tailrecursion.hoplon.markdown.para_node.call(null,G__126681,G__126682));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__126679,G__126680) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__126679,G__126680));
})(),(function (){var G__126687 = cljs.core.PersistentArrayMap.EMPTY;
var G__126688 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_126689 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126690 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126691 = cljs.core.PersistentArrayMap.EMPTY;
var G__126692 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With applicative order evaluation the story is a bit more  interesting. Since the arguments to a function are always  evaluated first in applicative order evaluation, the  compiler would attempt to evaluate both the first and  second arguments and hence fall into an infinite loop  in the attempt to evaluate the second argument."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126691,G__126692) : tailrecursion.hoplon.markdown.para_node.call(null,G__126691,G__126692));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126690;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126689;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__126687,G__126688) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__126687,G__126688));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__126677,G__126678) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__126677,G__126678));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126676;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126675;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126674;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126673;
}})()], 0))], 0))], 0));
var G__124146 = "";
var G__124147 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Example: Square Roots by Newton's Method"], null),(function (){var _STAR_references_STAR_126693 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126694 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126695 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126696 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126697 = cljs.core.PersistentArrayMap.EMPTY;
var G__126698 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Procedures, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer procedures. Procedures must be effective. As a case in point, consider the problem of computing square roots. We can define the square-root function as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126697,G__126698) : tailrecursion.hoplon.markdown.para_node.call(null,G__126697,G__126698));
})(),(function (){var G__126699 = cljs.core.PersistentArrayMap.EMPTY;
var G__126700 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\sqrt x = \\text{ the } y \\text{ such that } y\\geq 0 \\text{ and } y^2 = x $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126699,G__126700) : tailrecursion.hoplon.markdown.para_node.call(null,G__126699,G__126700));
})(),(function (){var G__126701 = cljs.core.PersistentArrayMap.EMPTY;
var G__126702 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a procedure. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-Lisp: "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126701,G__126702) : tailrecursion.hoplon.markdown.para_node.call(null,G__126701,G__126702));
})(),(function (){var G__126703 = (function (){var G__126704 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126705 = (function (){var G__126706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126707 = "(";
var G__126708 = (function (){var G__126732 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126733 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126732,G__126733) : tailrecursion.hoplon.span.call(null,G__126732,G__126733));
})();
var G__126709 = (function (){var G__126734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126735 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126734,G__126735) : tailrecursion.hoplon.span.call(null,G__126734,G__126735));
})();
var G__126710 = " [";
var G__126711 = (function (){var G__126736 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126737 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126736,G__126737) : tailrecursion.hoplon.span.call(null,G__126736,G__126737));
})();
var G__126712 = "] \n  (";
var G__126713 = (function (){var G__126738 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126739 = "the";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126738,G__126739) : tailrecursion.hoplon.span.call(null,G__126738,G__126739));
})();
var G__126714 = " ";
var G__126715 = (function (){var G__126740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126741 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126740,G__126741) : tailrecursion.hoplon.span.call(null,G__126740,G__126741));
})();
var G__126716 = " (";
var G__126717 = (function (){var G__126742 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126743 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126742,G__126743) : tailrecursion.hoplon.span.call(null,G__126742,G__126743));
})();
var G__126718 = "(";
var G__126719 = (function (){var G__126744 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126745 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126744,G__126745) : tailrecursion.hoplon.span.call(null,G__126744,G__126745));
})();
var G__126720 = (function (){var G__126746 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126747 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126746,G__126747) : tailrecursion.hoplon.span.call(null,G__126746,G__126747));
})();
var G__126721 = " ";
var G__126722 = (function (){var G__126748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126749 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126748,G__126749) : tailrecursion.hoplon.span.call(null,G__126748,G__126749));
})();
var G__126723 = ") \n              (";
var G__126724 = (function (){var G__126750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126751 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126750,G__126751) : tailrecursion.hoplon.span.call(null,G__126750,G__126751));
})();
var G__126725 = "(";
var G__126726 = (function (){var G__126752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126753 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126752,G__126753) : tailrecursion.hoplon.span.call(null,G__126752,G__126753));
})();
var G__126727 = " ";
var G__126728 = (function (){var G__126754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126755 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126754,G__126755) : tailrecursion.hoplon.span.call(null,G__126754,G__126755));
})();
var G__126729 = ") ";
var G__126730 = (function (){var G__126756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126757 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126756,G__126757) : tailrecursion.hoplon.span.call(null,G__126756,G__126757));
})();
var G__126731 = ")))) \n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26(G__126706,G__126707,G__126708,G__126709,G__126710,G__126711,G__126712,G__126713,G__126714,G__126715,G__126716,G__126717,G__126718,G__126719,G__126720,G__126721,G__126722,G__126723,G__126724,G__126725,G__126726,G__126727,G__126728,G__126729,G__126730,G__126731) : tailrecursion.hoplon.pre.call(null,G__126706,G__126707,G__126708,G__126709,G__126710,G__126711,G__126712,G__126713,G__126714,G__126715,G__126716,G__126717,G__126718,G__126719,G__126720,G__126721,G__126722,G__126723,G__126724,G__126725,G__126726,G__126727,G__126728,G__126729,G__126730,G__126731));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126704,G__126705) : tailrecursion.hoplon.div.call(null,G__126704,G__126705));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126703) : tailrecursion.hoplon.div.call(null,G__126703));
})(),(function (){var G__126758 = cljs.core.PersistentArrayMap.EMPTY;
var G__126759 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This only begs the question. The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.",(function (){var G__126760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__126761 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is ",(function (){var G__126762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__126763 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["correct"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__126762,G__126763) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__126762,G__126763));
})()," is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given ",(function (){var G__126764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__126765 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["what is"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__126764,G__126765) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__126764,G__126765));
})()," knowledge specified by the programmer, they can generate ",(function (){var G__126766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__126767 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how to"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__126766,G__126767) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__126766,G__126767));
})()," knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in chapter 4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__126760,G__126761) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__126760,G__126761));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126758,G__126759) : tailrecursion.hoplon.markdown.para_node.call(null,G__126758,G__126759));
})(),(function (){var G__126768 = cljs.core.PersistentArrayMap.EMPTY;
var G__126769 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How does one compute square roots? The most common way is to use Newton",(function (){var G__126770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__126771 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__126770,G__126771) : tailrecursion.hoplon.markdown.simple_node.call(null,G__126770,G__126771));
})(),"s method of successive approximations, which says that whenever we have a guess y for the value of the square root of a number x, we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging y with x/y.",(function (){var G__126772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__126773 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This square-root algorithm is actually a special case of Newton",(function (){var G__126774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__126775 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__126774,G__126775) : tailrecursion.hoplon.markdown.simple_node.call(null,G__126774,G__126775));
})(),"s method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century A.D. We will see how to express the general Newton",(function (){var G__126776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__126777 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__126776,G__126777) : tailrecursion.hoplon.markdown.simple_node.call(null,G__126776,G__126777));
})(),"s method as a Lisp procedure in section 1.3.4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__126772,G__126773) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__126772,G__126773));
})()," For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126768,G__126769) : tailrecursion.hoplon.markdown.para_node.call(null,G__126768,G__126769));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126696;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126695;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126694;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126693;
}})(),"",(function (){var G__126778 = cljs.core.PersistentArrayMap.EMPTY;
var G__126779 = (function (){var G__126784 = cljs.core.PersistentArrayMap.EMPTY;
var G__126785 = (function (){var G__126788 = cljs.core.PersistentArrayMap.EMPTY;
var G__126789 = "Guess ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126788,G__126789) : tailrecursion.hoplon.td.call(null,G__126788,G__126789));
})();
var G__126786 = (function (){var G__126790 = cljs.core.PersistentArrayMap.EMPTY;
var G__126791 = "Quotient ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126790,G__126791) : tailrecursion.hoplon.td.call(null,G__126790,G__126791));
})();
var G__126787 = (function (){var G__126792 = cljs.core.PersistentArrayMap.EMPTY;
var G__126793 = "Average ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126792,G__126793) : tailrecursion.hoplon.td.call(null,G__126792,G__126793));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__126784,G__126785,G__126786,G__126787) : tailrecursion.hoplon.tr.call(null,G__126784,G__126785,G__126786,G__126787));
})();
var G__126780 = (function (){var G__126794 = cljs.core.PersistentArrayMap.EMPTY;
var G__126795 = (function (){var G__126798 = cljs.core.PersistentArrayMap.EMPTY;
var G__126799 = "1 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126798,G__126799) : tailrecursion.hoplon.td.call(null,G__126798,G__126799));
})();
var G__126796 = (function (){var G__126800 = cljs.core.PersistentArrayMap.EMPTY;
var G__126801 = "(2/1) = 2 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126800,G__126801) : tailrecursion.hoplon.td.call(null,G__126800,G__126801));
})();
var G__126797 = (function (){var G__126802 = cljs.core.PersistentArrayMap.EMPTY;
var G__126803 = "((2+1)/2) = 1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126802,G__126803) : tailrecursion.hoplon.td.call(null,G__126802,G__126803));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__126794,G__126795,G__126796,G__126797) : tailrecursion.hoplon.tr.call(null,G__126794,G__126795,G__126796,G__126797));
})();
var G__126781 = (function (){var G__126804 = cljs.core.PersistentArrayMap.EMPTY;
var G__126805 = (function (){var G__126808 = cljs.core.PersistentArrayMap.EMPTY;
var G__126809 = "1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126808,G__126809) : tailrecursion.hoplon.td.call(null,G__126808,G__126809));
})();
var G__126806 = (function (){var G__126810 = cljs.core.PersistentArrayMap.EMPTY;
var G__126811 = "(2/1.5) = 1.333...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126810,G__126811) : tailrecursion.hoplon.td.call(null,G__126810,G__126811));
})();
var G__126807 = (function (){var G__126812 = cljs.core.PersistentArrayMap.EMPTY;
var G__126813 = "((1.333... + 1.5)/2) = 1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126812,G__126813) : tailrecursion.hoplon.td.call(null,G__126812,G__126813));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__126804,G__126805,G__126806,G__126807) : tailrecursion.hoplon.tr.call(null,G__126804,G__126805,G__126806,G__126807));
})();
var G__126782 = (function (){var G__126814 = cljs.core.PersistentArrayMap.EMPTY;
var G__126815 = (function (){var G__126818 = cljs.core.PersistentArrayMap.EMPTY;
var G__126819 = "1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126818,G__126819) : tailrecursion.hoplon.td.call(null,G__126818,G__126819));
})();
var G__126816 = (function (){var G__126820 = cljs.core.PersistentArrayMap.EMPTY;
var G__126821 = "(2/1.4167) = 1.4118 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126820,G__126821) : tailrecursion.hoplon.td.call(null,G__126820,G__126821));
})();
var G__126817 = (function (){var G__126822 = cljs.core.PersistentArrayMap.EMPTY;
var G__126823 = "((1.4167 + 1.4118)/2) = 1.4142 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126822,G__126823) : tailrecursion.hoplon.td.call(null,G__126822,G__126823));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__126814,G__126815,G__126816,G__126817) : tailrecursion.hoplon.tr.call(null,G__126814,G__126815,G__126816,G__126817));
})();
var G__126783 = (function (){var G__126824 = cljs.core.PersistentArrayMap.EMPTY;
var G__126825 = (function (){var G__126828 = cljs.core.PersistentArrayMap.EMPTY;
var G__126829 = "1.4142...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126828,G__126829) : tailrecursion.hoplon.td.call(null,G__126828,G__126829));
})();
var G__126826 = (function (){var G__126830 = cljs.core.PersistentArrayMap.EMPTY;
var G__126831 = "...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126830,G__126831) : tailrecursion.hoplon.td.call(null,G__126830,G__126831));
})();
var G__126827 = (function (){var G__126832 = cljs.core.PersistentArrayMap.EMPTY;
var G__126833 = "...";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__126832,G__126833) : tailrecursion.hoplon.td.call(null,G__126832,G__126833));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__126824,G__126825,G__126826,G__126827) : tailrecursion.hoplon.tr.call(null,G__126824,G__126825,G__126826,G__126827));
})();
return (tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6 ? tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6(G__126778,G__126779,G__126780,G__126781,G__126782,G__126783) : tailrecursion.hoplon.table.call(null,G__126778,G__126779,G__126780,G__126781,G__126782,G__126783));
})(),(function (){var _STAR_references_STAR_126834 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126835 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_126836 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_126837 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__126838 = cljs.core.PersistentArrayMap.EMPTY;
var G__126839 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Continuing this process, we obtain better and better approximations to the square root. "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126838,G__126839) : tailrecursion.hoplon.markdown.para_node.call(null,G__126838,G__126839));
})(),(function (){var G__126840 = cljs.core.PersistentArrayMap.EMPTY;
var G__126841 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now let",(function (){var G__126842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__126843 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__126842,G__126843) : tailrecursion.hoplon.markdown.simple_node.call(null,G__126842,G__126843));
})(),"s formalize the process in terms of procedures. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126840,G__126841) : tailrecursion.hoplon.markdown.para_node.call(null,G__126840,G__126841));
})(),(function (){var G__126844 = (function (){var G__126845 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126846 = (function (){var G__126847 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126848 = "(";
var G__126849 = (function (){var G__126876 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126877 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126876,G__126877) : tailrecursion.hoplon.span.call(null,G__126876,G__126877));
})();
var G__126850 = (function (){var G__126878 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126879 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126878,G__126879) : tailrecursion.hoplon.span.call(null,G__126878,G__126879));
})();
var G__126851 = " [";
var G__126852 = (function (){var G__126880 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126881 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126880,G__126881) : tailrecursion.hoplon.span.call(null,G__126880,G__126881));
})();
var G__126853 = " ";
var G__126854 = (function (){var G__126882 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126883 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126882,G__126883) : tailrecursion.hoplon.span.call(null,G__126882,G__126883));
})();
var G__126855 = "]\n  (";
var G__126856 = (function (){var G__126884 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126885 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126884,G__126885) : tailrecursion.hoplon.span.call(null,G__126884,G__126885));
})();
var G__126857 = "(";
var G__126858 = (function (){var G__126886 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126887 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126886,G__126887) : tailrecursion.hoplon.span.call(null,G__126886,G__126887));
})();
var G__126859 = " ";
var G__126860 = (function (){var G__126888 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126889 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126888,G__126889) : tailrecursion.hoplon.span.call(null,G__126888,G__126889));
})();
var G__126861 = " ";
var G__126862 = (function (){var G__126890 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126891 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126890,G__126891) : tailrecursion.hoplon.span.call(null,G__126890,G__126891));
})();
var G__126863 = ")\n      ";
var G__126864 = (function (){var G__126892 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126893 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126892,G__126893) : tailrecursion.hoplon.span.call(null,G__126892,G__126893));
})();
var G__126865 = "\n      (";
var G__126866 = (function (){var G__126894 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126895 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126894,G__126895) : tailrecursion.hoplon.span.call(null,G__126894,G__126895));
})();
var G__126867 = " (";
var G__126868 = (function (){var G__126896 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126897 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126896,G__126897) : tailrecursion.hoplon.span.call(null,G__126896,G__126897));
})();
var G__126869 = " ";
var G__126870 = (function (){var G__126898 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126899 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126898,G__126899) : tailrecursion.hoplon.span.call(null,G__126898,G__126899));
})();
var G__126871 = " ";
var G__126872 = (function (){var G__126900 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126901 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126900,G__126901) : tailrecursion.hoplon.span.call(null,G__126900,G__126901));
})();
var G__126873 = ")\n                 ";
var G__126874 = (function (){var G__126902 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126903 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126902,G__126903) : tailrecursion.hoplon.span.call(null,G__126902,G__126903));
})();
var G__126875 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__126847,G__126848,G__126849,G__126850,G__126851,G__126852,G__126853,G__126854,G__126855,G__126856,G__126857,G__126858,G__126859,G__126860,G__126861,G__126862,G__126863,G__126864,G__126865,G__126866,G__126867,G__126868,G__126869,G__126870,G__126871,G__126872,G__126873,G__126874,G__126875) : tailrecursion.hoplon.pre.call(null,G__126847,G__126848,G__126849,G__126850,G__126851,G__126852,G__126853,G__126854,G__126855,G__126856,G__126857,G__126858,G__126859,G__126860,G__126861,G__126862,G__126863,G__126864,G__126865,G__126866,G__126867,G__126868,G__126869,G__126870,G__126871,G__126872,G__126873,G__126874,G__126875));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126845,G__126846) : tailrecursion.hoplon.div.call(null,G__126845,G__126846));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126844) : tailrecursion.hoplon.div.call(null,G__126844));
})(),(function (){var G__126904 = cljs.core.PersistentArrayMap.EMPTY;
var G__126905 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A guess is improved by averaging it with the quotient of the radicand and the old guess:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126904,G__126905) : tailrecursion.hoplon.markdown.para_node.call(null,G__126904,G__126905));
})(),(function (){var G__126906 = (function (){var G__126907 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126908 = (function (){var G__126909 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126910 = "(";
var G__126911 = (function (){var G__126927 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126928 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126927,G__126928) : tailrecursion.hoplon.span.call(null,G__126927,G__126928));
})();
var G__126912 = (function (){var G__126929 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126930 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126929,G__126930) : tailrecursion.hoplon.span.call(null,G__126929,G__126930));
})();
var G__126913 = " [";
var G__126914 = (function (){var G__126931 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126932 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126931,G__126932) : tailrecursion.hoplon.span.call(null,G__126931,G__126932));
})();
var G__126915 = " ";
var G__126916 = (function (){var G__126933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126934 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126933,G__126934) : tailrecursion.hoplon.span.call(null,G__126933,G__126934));
})();
var G__126917 = "]\n  (";
var G__126918 = (function (){var G__126935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__126936 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126935,G__126936) : tailrecursion.hoplon.span.call(null,G__126935,G__126936));
})();
var G__126919 = " ";
var G__126920 = (function (){var G__126937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126938 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126937,G__126938) : tailrecursion.hoplon.span.call(null,G__126937,G__126938));
})();
var G__126921 = " (";
var G__126922 = (function (){var G__126939 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126940 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126939,G__126940) : tailrecursion.hoplon.span.call(null,G__126939,G__126940));
})();
var G__126923 = (function (){var G__126941 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126942 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126941,G__126942) : tailrecursion.hoplon.span.call(null,G__126941,G__126942));
})();
var G__126924 = " ";
var G__126925 = (function (){var G__126943 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126944 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126943,G__126944) : tailrecursion.hoplon.span.call(null,G__126943,G__126944));
})();
var G__126926 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__126909,G__126910,G__126911,G__126912,G__126913,G__126914,G__126915,G__126916,G__126917,G__126918,G__126919,G__126920,G__126921,G__126922,G__126923,G__126924,G__126925,G__126926) : tailrecursion.hoplon.pre.call(null,G__126909,G__126910,G__126911,G__126912,G__126913,G__126914,G__126915,G__126916,G__126917,G__126918,G__126919,G__126920,G__126921,G__126922,G__126923,G__126924,G__126925,G__126926));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126907,G__126908) : tailrecursion.hoplon.div.call(null,G__126907,G__126908));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126906) : tailrecursion.hoplon.div.call(null,G__126906));
})(),(function (){var G__126945 = cljs.core.PersistentArrayMap.EMPTY;
var G__126946 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126945,G__126946) : tailrecursion.hoplon.markdown.para_node.call(null,G__126945,G__126946));
})(),(function (){var G__126947 = (function (){var G__126948 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126949 = (function (){var G__126950 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126951 = "(";
var G__126952 = (function (){var G__126968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__126969 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126968,G__126969) : tailrecursion.hoplon.span.call(null,G__126968,G__126969));
})();
var G__126953 = (function (){var G__126970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126971 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126970,G__126971) : tailrecursion.hoplon.span.call(null,G__126970,G__126971));
})();
var G__126954 = " [";
var G__126955 = (function (){var G__126972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126973 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126972,G__126973) : tailrecursion.hoplon.span.call(null,G__126972,G__126973));
})();
var G__126956 = " ";
var G__126957 = (function (){var G__126974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126975 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126974,G__126975) : tailrecursion.hoplon.span.call(null,G__126974,G__126975));
})();
var G__126958 = "]\n  (";
var G__126959 = (function (){var G__126976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126977 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126976,G__126977) : tailrecursion.hoplon.span.call(null,G__126976,G__126977));
})();
var G__126960 = "(";
var G__126961 = (function (){var G__126978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__126979 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126978,G__126979) : tailrecursion.hoplon.span.call(null,G__126978,G__126979));
})();
var G__126962 = (function (){var G__126980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126981 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126980,G__126981) : tailrecursion.hoplon.span.call(null,G__126980,G__126981));
})();
var G__126963 = " ";
var G__126964 = (function (){var G__126982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__126983 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126982,G__126983) : tailrecursion.hoplon.span.call(null,G__126982,G__126983));
})();
var G__126965 = ") ";
var G__126966 = (function (){var G__126984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__126985 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__126984,G__126985) : tailrecursion.hoplon.span.call(null,G__126984,G__126985));
})();
var G__126967 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__126950,G__126951,G__126952,G__126953,G__126954,G__126955,G__126956,G__126957,G__126958,G__126959,G__126960,G__126961,G__126962,G__126963,G__126964,G__126965,G__126966,G__126967) : tailrecursion.hoplon.pre.call(null,G__126950,G__126951,G__126952,G__126953,G__126954,G__126955,G__126956,G__126957,G__126958,G__126959,G__126960,G__126961,G__126962,G__126963,G__126964,G__126965,G__126966,G__126967));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126948,G__126949) : tailrecursion.hoplon.div.call(null,G__126948,G__126949));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126947) : tailrecursion.hoplon.div.call(null,G__126947));
})(),(function (){var G__126986 = cljs.core.PersistentArrayMap.EMPTY;
var G__126987 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We also have to say what we mean by ``good enough.",(function (){var G__126988 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__126989 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__126988,G__126989) : tailrecursion.hoplon.markdown.simple_node.call(null,G__126988,G__126989));
})(),(function (){var G__126990 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__126991 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__126990,G__126991) : tailrecursion.hoplon.markdown.simple_node.call(null,G__126990,G__126991));
})()," The following will do for illustration, but it is not really a very good test. (See exercise 1.7.) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001):",(function (){var G__126992 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__126993 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention. As far as the interpreter is concerned, the question mark is just an ordinary character."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__126992,G__126993) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__126992,G__126993));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__126986,G__126987) : tailrecursion.hoplon.markdown.para_node.call(null,G__126986,G__126987));
})(),(function (){var G__126994 = (function (){var G__126995 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__126996 = (function (){var G__126997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__126998 = "(";
var G__126999 = (function (){var G__127020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127021 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127020,G__127021) : tailrecursion.hoplon.span.call(null,G__127020,G__127021));
})();
var G__127000 = (function (){var G__127022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127023 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127022,G__127023) : tailrecursion.hoplon.span.call(null,G__127022,G__127023));
})();
var G__127001 = " [";
var G__127002 = (function (){var G__127024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127025 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127024,G__127025) : tailrecursion.hoplon.span.call(null,G__127024,G__127025));
})();
var G__127003 = " ";
var G__127004 = (function (){var G__127026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127027 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127026,G__127027) : tailrecursion.hoplon.span.call(null,G__127026,G__127027));
})();
var G__127005 = "]\n  (";
var G__127006 = (function (){var G__127028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127029 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127028,G__127029) : tailrecursion.hoplon.span.call(null,G__127028,G__127029));
})();
var G__127007 = "(";
var G__127008 = (function (){var G__127030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127031 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127030,G__127031) : tailrecursion.hoplon.span.call(null,G__127030,G__127031));
})();
var G__127009 = " (";
var G__127010 = (function (){var G__127032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127033 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127032,G__127033) : tailrecursion.hoplon.span.call(null,G__127032,G__127033));
})();
var G__127011 = "(";
var G__127012 = (function (){var G__127034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127035 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127034,G__127035) : tailrecursion.hoplon.span.call(null,G__127034,G__127035));
})();
var G__127013 = " ";
var G__127014 = (function (){var G__127036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127037 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127036,G__127037) : tailrecursion.hoplon.span.call(null,G__127036,G__127037));
})();
var G__127015 = ") ";
var G__127016 = (function (){var G__127038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127039 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127038,G__127039) : tailrecursion.hoplon.span.call(null,G__127038,G__127039));
})();
var G__127017 = ")) ";
var G__127018 = (function (){var G__127040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127041 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127040,G__127041) : tailrecursion.hoplon.span.call(null,G__127040,G__127041));
})();
var G__127019 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__126997,G__126998,G__126999,G__127000,G__127001,G__127002,G__127003,G__127004,G__127005,G__127006,G__127007,G__127008,G__127009,G__127010,G__127011,G__127012,G__127013,G__127014,G__127015,G__127016,G__127017,G__127018,G__127019) : tailrecursion.hoplon.pre.call(null,G__126997,G__126998,G__126999,G__127000,G__127001,G__127002,G__127003,G__127004,G__127005,G__127006,G__127007,G__127008,G__127009,G__127010,G__127011,G__127012,G__127013,G__127014,G__127015,G__127016,G__127017,G__127018,G__127019));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__126995,G__126996) : tailrecursion.hoplon.div.call(null,G__126995,G__126996));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__126994) : tailrecursion.hoplon.div.call(null,G__126994));
})(),(function (){var G__127042 = cljs.core.PersistentArrayMap.EMPTY;
var G__127043 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:",(function (){var G__127044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__127045 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that we express our initial guess as 1.0 rather than 1. This would not make any difference in many Lisp implementations. MIT Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal. For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667. (We will learn how to implement arithmetic on rational numbers in section 2.1.1.) If we start with an initial guess of 1 in our square-root program, and \\(x\\) is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals. Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__127044,G__127045) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__127044,G__127045));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127042,G__127043) : tailrecursion.hoplon.markdown.para_node.call(null,G__127042,G__127043));
})(),(function (){var G__127046 = (function (){var G__127047 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127048 = (function (){var G__127049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127050 = "(";
var G__127051 = (function (){var G__127062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127063 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127062,G__127063) : tailrecursion.hoplon.span.call(null,G__127062,G__127063));
})();
var G__127052 = (function (){var G__127064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127065 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127064,G__127065) : tailrecursion.hoplon.span.call(null,G__127064,G__127065));
})();
var G__127053 = " [";
var G__127054 = (function (){var G__127066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127067 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127066,G__127067) : tailrecursion.hoplon.span.call(null,G__127066,G__127067));
})();
var G__127055 = "]\n  (";
var G__127056 = (function (){var G__127068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127069 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127068,G__127069) : tailrecursion.hoplon.span.call(null,G__127068,G__127069));
})();
var G__127057 = " ";
var G__127058 = (function (){var G__127070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127071 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127070,G__127071) : tailrecursion.hoplon.span.call(null,G__127070,G__127071));
})();
var G__127059 = " ";
var G__127060 = (function (){var G__127072 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127073 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127072,G__127073) : tailrecursion.hoplon.span.call(null,G__127072,G__127073));
})();
var G__127061 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__127049,G__127050,G__127051,G__127052,G__127053,G__127054,G__127055,G__127056,G__127057,G__127058,G__127059,G__127060,G__127061) : tailrecursion.hoplon.pre.call(null,G__127049,G__127050,G__127051,G__127052,G__127053,G__127054,G__127055,G__127056,G__127057,G__127058,G__127059,G__127060,G__127061));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127047,G__127048) : tailrecursion.hoplon.div.call(null,G__127047,G__127048));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127046) : tailrecursion.hoplon.div.call(null,G__127046));
})(),(function (){var G__127074 = cljs.core.PersistentArrayMap.EMPTY;
var G__127075 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we type these definitions to the interpreter, we can use sqrt just as we can use any procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127074,G__127075) : tailrecursion.hoplon.markdown.para_node.call(null,G__127074,G__127075));
})(),(function (){var G__127076 = (function (){var G__127077 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127078 = (function (){var G__127079 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127080 = "(";
var G__127081 = (function (){var G__127118 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127119 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127118,G__127119) : tailrecursion.hoplon.span.call(null,G__127118,G__127119));
})();
var G__127082 = " ";
var G__127083 = (function (){var G__127120 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127121 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127120,G__127121) : tailrecursion.hoplon.span.call(null,G__127120,G__127121));
})();
var G__127084 = ")\n";
var G__127085 = (function (){var G__127122 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127123 = "3.00009155413138";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127122,G__127123) : tailrecursion.hoplon.span.call(null,G__127122,G__127123));
})();
var G__127086 = "\n(";
var G__127087 = (function (){var G__127124 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127125 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127124,G__127125) : tailrecursion.hoplon.span.call(null,G__127124,G__127125));
})();
var G__127088 = " (";
var G__127089 = (function (){var G__127126 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127127 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127126,G__127127) : tailrecursion.hoplon.span.call(null,G__127126,G__127127));
})();
var G__127090 = (function (){var G__127128 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127129 = "100";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127128,G__127129) : tailrecursion.hoplon.span.call(null,G__127128,G__127129));
})();
var G__127091 = " ";
var G__127092 = (function (){var G__127130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127131 = "37";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127130,G__127131) : tailrecursion.hoplon.span.call(null,G__127130,G__127131));
})();
var G__127093 = "))\n";
var G__127094 = (function (){var G__127132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127133 = "11.704699917758145";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127132,G__127133) : tailrecursion.hoplon.span.call(null,G__127132,G__127133));
})();
var G__127095 = "\n(";
var G__127096 = (function (){var G__127134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127135 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127134,G__127135) : tailrecursion.hoplon.span.call(null,G__127134,G__127135));
})();
var G__127097 = " (";
var G__127098 = (function (){var G__127136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127137 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127136,G__127137) : tailrecursion.hoplon.span.call(null,G__127136,G__127137));
})();
var G__127099 = "(";
var G__127100 = (function (){var G__127138 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127139 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127138,G__127139) : tailrecursion.hoplon.span.call(null,G__127138,G__127139));
})();
var G__127101 = " ";
var G__127102 = (function (){var G__127140 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127141 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127140,G__127141) : tailrecursion.hoplon.span.call(null,G__127140,G__127141));
})();
var G__127103 = ") (";
var G__127104 = (function (){var G__127142 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127143 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127142,G__127143) : tailrecursion.hoplon.span.call(null,G__127142,G__127143));
})();
var G__127105 = " ";
var G__127106 = (function (){var G__127144 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127145 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127144,G__127145) : tailrecursion.hoplon.span.call(null,G__127144,G__127145));
})();
var G__127107 = ")))\n";
var G__127108 = (function (){var G__127146 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127147 = "1.7739279023207892";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127146,G__127147) : tailrecursion.hoplon.span.call(null,G__127146,G__127147));
})();
var G__127109 = "\n(";
var G__127110 = (function (){var G__127148 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127149 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127148,G__127149) : tailrecursion.hoplon.span.call(null,G__127148,G__127149));
})();
var G__127111 = " (";
var G__127112 = (function (){var G__127150 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127151 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127150,G__127151) : tailrecursion.hoplon.span.call(null,G__127150,G__127151));
})();
var G__127113 = " ";
var G__127114 = (function (){var G__127152 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127153 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127152,G__127153) : tailrecursion.hoplon.span.call(null,G__127152,G__127153));
})();
var G__127115 = "))\n";
var G__127116 = (function (){var G__127154 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127155 = "1000.000369924366";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127154,G__127155) : tailrecursion.hoplon.span.call(null,G__127154,G__127155));
})();
var G__127117 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__127079,G__127080,G__127081,G__127082,G__127083,G__127084,G__127085,G__127086,G__127087,G__127088,G__127089,G__127090,G__127091,G__127092,G__127093,G__127094,G__127095,G__127096,G__127097,G__127098,G__127099,G__127100,G__127101,G__127102,G__127103,G__127104,G__127105,G__127106,G__127107,G__127108,G__127109,G__127110,G__127111,G__127112,G__127113,G__127114,G__127115,G__127116,G__127117) : tailrecursion.hoplon.pre.call(null,G__127079,G__127080,G__127081,G__127082,G__127083,G__127084,G__127085,G__127086,G__127087,G__127088,G__127089,G__127090,G__127091,G__127092,G__127093,G__127094,G__127095,G__127096,G__127097,G__127098,G__127099,G__127100,G__127101,G__127102,G__127103,G__127104,G__127105,G__127106,G__127107,G__127108,G__127109,G__127110,G__127111,G__127112,G__127113,G__127114,G__127115,G__127116,G__127117));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127077,G__127078) : tailrecursion.hoplon.div.call(null,G__127077,G__127078));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127076) : tailrecursion.hoplon.div.call(null,G__127076));
})(),(function (){var G__127156 = cljs.core.PersistentArrayMap.EMPTY;
var G__127157 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The sqrt program also illustrates that the simple procedural language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. Sqrt-iter, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a procedure.",(function (){var G__127158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__127159 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on ``tail recursion",(function (){var G__127160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127161 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127160,G__127161) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127160,G__127161));
})(),(function (){var G__127162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127163 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127162,G__127163) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127162,G__127163));
})()," in section 1.2.1."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__127158,G__127159) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__127158,G__127159));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127156,G__127157) : tailrecursion.hoplon.markdown.para_node.call(null,G__127156,G__127157));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126837;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126836;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_126835;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_126834;
}})()], 0));
var G__124148 = "";
var G__124149 = content.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_127164 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127165 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127166 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127167 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127168 = cljs.core.PersistentArrayMap.EMPTY;
var G__127169 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Alyssa P. Hacker doesn",(function (){var G__127170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127171 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127170,G__127171) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127170,G__127171));
})(),"t see why if needs to be provided as a special form. ",(function (){var G__127172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__127173 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Why can",(function (){var G__127174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127175 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127174,G__127175) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127174,G__127175));
})(),"t I just define it as an ordinary procedure in terms of cond?"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__127172,G__127173) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__127172,G__127173));
})()," she asks. Alyssa",(function (){var G__127176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127177 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127176,G__127177) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127176,G__127177));
})(),"s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127168,G__127169) : tailrecursion.hoplon.markdown.para_node.call(null,G__127168,G__127169));
})(),(function (){var G__127178 = (function (){var G__127179 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127180 = (function (){var G__127181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127182 = "(";
var G__127183 = (function (){var G__127201 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127202 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127201,G__127202) : tailrecursion.hoplon.span.call(null,G__127201,G__127202));
})();
var G__127184 = (function (){var G__127203 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127204 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127203,G__127204) : tailrecursion.hoplon.span.call(null,G__127203,G__127204));
})();
var G__127185 = " [";
var G__127186 = (function (){var G__127205 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127206 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127205,G__127206) : tailrecursion.hoplon.span.call(null,G__127205,G__127206));
})();
var G__127187 = " ";
var G__127188 = (function (){var G__127207 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127208 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127207,G__127208) : tailrecursion.hoplon.span.call(null,G__127207,G__127208));
})();
var G__127189 = " ";
var G__127190 = (function (){var G__127209 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127210 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127209,G__127210) : tailrecursion.hoplon.span.call(null,G__127209,G__127210));
})();
var G__127191 = "]\n  (";
var G__127192 = (function (){var G__127211 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127212 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127211,G__127212) : tailrecursion.hoplon.span.call(null,G__127211,G__127212));
})();
var G__127193 = (function (){var G__127213 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127214 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127213,G__127214) : tailrecursion.hoplon.span.call(null,G__127213,G__127214));
})();
var G__127194 = " ";
var G__127195 = (function (){var G__127215 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127216 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127215,G__127216) : tailrecursion.hoplon.span.call(null,G__127215,G__127216));
})();
var G__127196 = "\n        ";
var G__127197 = (function (){var G__127217 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127218 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127217,G__127218) : tailrecursion.hoplon.span.call(null,G__127217,G__127218));
})();
var G__127198 = " ";
var G__127199 = (function (){var G__127219 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127220 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127219,G__127220) : tailrecursion.hoplon.span.call(null,G__127219,G__127220));
})();
var G__127200 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__127181,G__127182,G__127183,G__127184,G__127185,G__127186,G__127187,G__127188,G__127189,G__127190,G__127191,G__127192,G__127193,G__127194,G__127195,G__127196,G__127197,G__127198,G__127199,G__127200) : tailrecursion.hoplon.pre.call(null,G__127181,G__127182,G__127183,G__127184,G__127185,G__127186,G__127187,G__127188,G__127189,G__127190,G__127191,G__127192,G__127193,G__127194,G__127195,G__127196,G__127197,G__127198,G__127199,G__127200));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127179,G__127180) : tailrecursion.hoplon.div.call(null,G__127179,G__127180));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127178) : tailrecursion.hoplon.div.call(null,G__127178));
})(),(function (){var G__127221 = cljs.core.PersistentArrayMap.EMPTY;
var G__127222 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Eva demonstrates the program for Alyssa:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127221,G__127222) : tailrecursion.hoplon.markdown.para_node.call(null,G__127221,G__127222));
})(),(function (){var G__127223 = (function (){var G__127224 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127225 = (function (){var G__127226 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127227 = "(";
var G__127228 = (function (){var G__127241 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127242 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127241,G__127242) : tailrecursion.hoplon.span.call(null,G__127241,G__127242));
})();
var G__127229 = " (";
var G__127230 = (function (){var G__127243 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127244 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127243,G__127244) : tailrecursion.hoplon.span.call(null,G__127243,G__127244));
})();
var G__127231 = (function (){var G__127245 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127246 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127245,G__127246) : tailrecursion.hoplon.span.call(null,G__127245,G__127246));
})();
var G__127232 = " ";
var G__127233 = (function (){var G__127247 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127248 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127247,G__127248) : tailrecursion.hoplon.span.call(null,G__127247,G__127248));
})();
var G__127234 = ") ";
var G__127235 = (function (){var G__127249 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127250 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127249,G__127250) : tailrecursion.hoplon.span.call(null,G__127249,G__127250));
})();
var G__127236 = " ";
var G__127237 = (function (){var G__127251 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127252 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127251,G__127252) : tailrecursion.hoplon.span.call(null,G__127251,G__127252));
})();
var G__127238 = ")\n";
var G__127239 = (function (){var G__127253 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127254 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127253,G__127254) : tailrecursion.hoplon.span.call(null,G__127253,G__127254));
})();
var G__127240 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__127226,G__127227,G__127228,G__127229,G__127230,G__127231,G__127232,G__127233,G__127234,G__127235,G__127236,G__127237,G__127238,G__127239,G__127240) : tailrecursion.hoplon.pre.call(null,G__127226,G__127227,G__127228,G__127229,G__127230,G__127231,G__127232,G__127233,G__127234,G__127235,G__127236,G__127237,G__127238,G__127239,G__127240));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127224,G__127225) : tailrecursion.hoplon.div.call(null,G__127224,G__127225));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127223) : tailrecursion.hoplon.div.call(null,G__127223));
})(),(function (){var G__127255 = (function (){var G__127256 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127257 = (function (){var G__127258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127259 = "(";
var G__127260 = (function (){var G__127273 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127274 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127273,G__127274) : tailrecursion.hoplon.span.call(null,G__127273,G__127274));
})();
var G__127261 = " (";
var G__127262 = (function (){var G__127275 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127276 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127275,G__127276) : tailrecursion.hoplon.span.call(null,G__127275,G__127276));
})();
var G__127263 = (function (){var G__127277 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127278 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127277,G__127278) : tailrecursion.hoplon.span.call(null,G__127277,G__127278));
})();
var G__127264 = " ";
var G__127265 = (function (){var G__127279 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127280 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127279,G__127280) : tailrecursion.hoplon.span.call(null,G__127279,G__127280));
})();
var G__127266 = ") ";
var G__127267 = (function (){var G__127281 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127282 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127281,G__127282) : tailrecursion.hoplon.span.call(null,G__127281,G__127282));
})();
var G__127268 = " ";
var G__127269 = (function (){var G__127283 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127284 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127283,G__127284) : tailrecursion.hoplon.span.call(null,G__127283,G__127284));
})();
var G__127270 = ")\n";
var G__127271 = (function (){var G__127285 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127286 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127285,G__127286) : tailrecursion.hoplon.span.call(null,G__127285,G__127286));
})();
var G__127272 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__127258,G__127259,G__127260,G__127261,G__127262,G__127263,G__127264,G__127265,G__127266,G__127267,G__127268,G__127269,G__127270,G__127271,G__127272) : tailrecursion.hoplon.pre.call(null,G__127258,G__127259,G__127260,G__127261,G__127262,G__127263,G__127264,G__127265,G__127266,G__127267,G__127268,G__127269,G__127270,G__127271,G__127272));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127256,G__127257) : tailrecursion.hoplon.div.call(null,G__127256,G__127257));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127255) : tailrecursion.hoplon.div.call(null,G__127255));
})(),(function (){var G__127287 = cljs.core.PersistentArrayMap.EMPTY;
var G__127288 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Delighted, Alyssa now uses ",(function (){var G__127289 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__127290 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127289,G__127290) : tailrecursion.hoplon.markdown.code_node.call(null,G__127289,G__127290));
})()," to rewrite the square-root program:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127287,G__127288) : tailrecursion.hoplon.markdown.para_node.call(null,G__127287,G__127288));
})(),(function (){var G__127291 = (function (){var G__127292 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127293 = (function (){var G__127294 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127295 = "(";
var G__127296 = (function (){var G__127323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127324 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127323,G__127324) : tailrecursion.hoplon.span.call(null,G__127323,G__127324));
})();
var G__127297 = (function (){var G__127325 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127326 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127325,G__127326) : tailrecursion.hoplon.span.call(null,G__127325,G__127326));
})();
var G__127298 = " [";
var G__127299 = (function (){var G__127327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127328 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127327,G__127328) : tailrecursion.hoplon.span.call(null,G__127327,G__127328));
})();
var G__127300 = " ";
var G__127301 = (function (){var G__127329 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127330 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127329,G__127330) : tailrecursion.hoplon.span.call(null,G__127329,G__127330));
})();
var G__127302 = "]\n  (";
var G__127303 = (function (){var G__127331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127332 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127331,G__127332) : tailrecursion.hoplon.span.call(null,G__127331,G__127332));
})();
var G__127304 = " (";
var G__127305 = (function (){var G__127333 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127334 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127333,G__127334) : tailrecursion.hoplon.span.call(null,G__127333,G__127334));
})();
var G__127306 = " ";
var G__127307 = (function (){var G__127335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127336 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127335,G__127336) : tailrecursion.hoplon.span.call(null,G__127335,G__127336));
})();
var G__127308 = " ";
var G__127309 = (function (){var G__127337 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127338 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127337,G__127338) : tailrecursion.hoplon.span.call(null,G__127337,G__127338));
})();
var G__127310 = ")\n          ";
var G__127311 = (function (){var G__127339 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127340 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127339,G__127340) : tailrecursion.hoplon.span.call(null,G__127339,G__127340));
})();
var G__127312 = "\n          (";
var G__127313 = (function (){var G__127341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127342 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127341,G__127342) : tailrecursion.hoplon.span.call(null,G__127341,G__127342));
})();
var G__127314 = " (";
var G__127315 = (function (){var G__127343 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127344 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127343,G__127344) : tailrecursion.hoplon.span.call(null,G__127343,G__127344));
})();
var G__127316 = " ";
var G__127317 = (function (){var G__127345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127346 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127345,G__127346) : tailrecursion.hoplon.span.call(null,G__127345,G__127346));
})();
var G__127318 = " ";
var G__127319 = (function (){var G__127347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127348 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127347,G__127348) : tailrecursion.hoplon.span.call(null,G__127347,G__127348));
})();
var G__127320 = ")\n                     ";
var G__127321 = (function (){var G__127349 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127350 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127349,G__127350) : tailrecursion.hoplon.span.call(null,G__127349,G__127350));
})();
var G__127322 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__127294,G__127295,G__127296,G__127297,G__127298,G__127299,G__127300,G__127301,G__127302,G__127303,G__127304,G__127305,G__127306,G__127307,G__127308,G__127309,G__127310,G__127311,G__127312,G__127313,G__127314,G__127315,G__127316,G__127317,G__127318,G__127319,G__127320,G__127321,G__127322) : tailrecursion.hoplon.pre.call(null,G__127294,G__127295,G__127296,G__127297,G__127298,G__127299,G__127300,G__127301,G__127302,G__127303,G__127304,G__127305,G__127306,G__127307,G__127308,G__127309,G__127310,G__127311,G__127312,G__127313,G__127314,G__127315,G__127316,G__127317,G__127318,G__127319,G__127320,G__127321,G__127322));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127292,G__127293) : tailrecursion.hoplon.div.call(null,G__127292,G__127293));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127291) : tailrecursion.hoplon.div.call(null,G__127291));
})(),(function (){var G__127351 = cljs.core.PersistentArrayMap.EMPTY;
var G__127352 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What happens when Alyssa attempts to use this to compute square roots? Explain."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127351,G__127352) : tailrecursion.hoplon.markdown.para_node.call(null,G__127351,G__127352));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127167;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127166;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127165;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127164;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_127353 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127354 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127355 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127356 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127357 = cljs.core.PersistentArrayMap.EMPTY;
var G__127358 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since ",(function (){var G__127359 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__127360 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127359,G__127360) : tailrecursion.hoplon.markdown.code_node.call(null,G__127359,G__127360));
})()," is not a special form, it will be evaluated in applicative order. Hence, when ",(function (){var G__127361 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(new-if a b c)"], null);
var G__127362 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127361,G__127362) : tailrecursion.hoplon.markdown.code_node.call(null,G__127361,G__127362));
})()," is called, a, b, and c are all evaluated before considering how they may or may not be used within the function ",(function (){var G__127363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__127364 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127363,G__127364) : tailrecursion.hoplon.markdown.code_node.call(null,G__127363,G__127364));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127357,G__127358) : tailrecursion.hoplon.markdown.para_node.call(null,G__127357,G__127358));
})(),(function (){var G__127365 = cljs.core.PersistentArrayMap.EMPTY;
var G__127366 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So, in this particular case, let us compute the square root of 4 with our first guess being 2 (Alyssa would probably think that this would terminate immediately, but let",(function (){var G__127367 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127368 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127367,G__127368) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127367,G__127368));
})(),"s see). ",(function (){var G__127369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"clj\n(sqrt-iter 2 4) ==>\n(new-if (good-enough? 2 4) 2 (sqrt-iter (improve 2 4) 4))\n"], null);
var G__127370 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127369,G__127370) : tailrecursion.hoplon.markdown.code_node.call(null,G__127369,G__127370));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127365,G__127366) : tailrecursion.hoplon.markdown.para_node.call(null,G__127365,G__127366));
})(),(function (){var G__127371 = cljs.core.PersistentArrayMap.EMPTY;
var G__127372 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["You can see that in this example, since ",(function (){var G__127373 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(improve 2 4) = 2"], null);
var G__127374 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127373,G__127374) : tailrecursion.hoplon.markdown.code_node.call(null,G__127373,G__127374));
})(),", ",(function (){var G__127375 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__127376 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127375,G__127376) : tailrecursion.hoplon.markdown.code_node.call(null,G__127375,G__127376));
})()," is going to requre us to compute ",(function (){var G__127377 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(sqrt-iter 2 4)"], null);
var G__127378 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127377,G__127378) : tailrecursion.hoplon.markdown.code_node.call(null,G__127377,G__127378));
})()," again. Then we",(function (){var G__127379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127380 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127379,G__127380) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127379,G__127380));
})(),"ll be computing the ",(function (){var G__127381 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__127382 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127381,G__127382) : tailrecursion.hoplon.markdown.code_node.call(null,G__127381,G__127382));
})()," again, and you can see the cycle that we",(function (){var G__127383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127384 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127383,G__127384) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127383,G__127384));
})(),"ve gotten ourselves in."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127371,G__127372) : tailrecursion.hoplon.markdown.para_node.call(null,G__127371,G__127372));
})(),(function (){var G__127385 = cljs.core.PersistentArrayMap.EMPTY;
var G__127386 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Long story short, this would result in an infinite loop."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127385,G__127386) : tailrecursion.hoplon.markdown.para_node.call(null,G__127385,G__127386));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127356;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127355;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127354;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127353;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_127387 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127388 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127389 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127390 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127391 = cljs.core.PersistentArrayMap.EMPTY;
var G__127392 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",(function (){var G__127393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127394 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127393,G__127394) : tailrecursion.hoplon.markdown.code_node.call(null,G__127393,G__127394));
})()," test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing ",(function (){var G__127395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127396 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127395,G__127396) : tailrecursion.hoplon.markdown.code_node.call(null,G__127395,G__127396));
})()," is to watch how ",(function (){var G__127397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__127398 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127397,G__127398) : tailrecursion.hoplon.markdown.code_node.call(null,G__127397,G__127398));
})()," changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127391,G__127392) : tailrecursion.hoplon.markdown.para_node.call(null,G__127391,G__127392));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127390;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127389;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127388;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127387;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_127399 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127400 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127401 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127402 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127403 = cljs.core.PersistentArrayMap.EMPTY;
var G__127404 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When finding the square root of a very small number (let",(function (){var G__127405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127406 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127405,G__127406) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127405,G__127406));
})(),"s use 0.0000001, whose square root is 0.0001), since the answer we",(function (){var G__127407 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127408 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127407,G__127408) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127407,G__127408));
})(),"re looking for is smaller than our tollerance, you might get a zero or even a negative number as our answer! And on the other end of the spectrum, if our number is too large it would require enough calculations to make the precision larger than our tolerance. In that having a set tolerance is meaningless because our answer will be outside of that range due to the limitations of the computer!"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127403,G__127404) : tailrecursion.hoplon.markdown.para_node.call(null,G__127403,G__127404));
})(),(function (){var G__127409 = cljs.core.PersistentArrayMap.EMPTY;
var G__127410 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To avoid this problem we can set a dynamic tolerance like the exercise suggests. Let",(function (){var G__127411 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127412 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127411,G__127412) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127411,G__127412));
})(),"s say our problem allows for a 10% fractional tolerance. Then our ",(function (){var G__127413 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127414 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127413,G__127414) : tailrecursion.hoplon.markdown.code_node.call(null,G__127413,G__127414));
})()," procedure would look like, "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127409,G__127410) : tailrecursion.hoplon.markdown.para_node.call(null,G__127409,G__127410));
})(),(function (){var G__127415 = (function (){var G__127416 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127417 = (function (){var G__127418 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127419 = "(";
var G__127420 = (function (){var G__127442 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127443 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127442,G__127443) : tailrecursion.hoplon.span.call(null,G__127442,G__127443));
})();
var G__127421 = (function (){var G__127444 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127445 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127444,G__127445) : tailrecursion.hoplon.span.call(null,G__127444,G__127445));
})();
var G__127422 = " [";
var G__127423 = (function (){var G__127446 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127447 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127446,G__127447) : tailrecursion.hoplon.span.call(null,G__127446,G__127447));
})();
var G__127424 = " ";
var G__127425 = (function (){var G__127448 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127449 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127448,G__127449) : tailrecursion.hoplon.span.call(null,G__127448,G__127449));
})();
var G__127426 = "]\n  (";
var G__127427 = (function (){var G__127450 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127451 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127450,G__127451) : tailrecursion.hoplon.span.call(null,G__127450,G__127451));
})();
var G__127428 = "(";
var G__127429 = (function (){var G__127452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127453 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127452,G__127453) : tailrecursion.hoplon.span.call(null,G__127452,G__127453));
})();
var G__127430 = " (";
var G__127431 = (function (){var G__127454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127455 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127454,G__127455) : tailrecursion.hoplon.span.call(null,G__127454,G__127455));
})();
var G__127432 = "(";
var G__127433 = (function (){var G__127456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127457 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127456,G__127457) : tailrecursion.hoplon.span.call(null,G__127456,G__127457));
})();
var G__127434 = (function (){var G__127458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127459 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127458,G__127459) : tailrecursion.hoplon.span.call(null,G__127458,G__127459));
})();
var G__127435 = " ";
var G__127436 = (function (){var G__127460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127461 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127460,G__127461) : tailrecursion.hoplon.span.call(null,G__127460,G__127461));
})();
var G__127437 = ") ";
var G__127438 = (function (){var G__127462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127463 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127462,G__127463) : tailrecursion.hoplon.span.call(null,G__127462,G__127463));
})();
var G__127439 = ")) ";
var G__127440 = (function (){var G__127464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127465 = "0.1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127464,G__127465) : tailrecursion.hoplon.span.call(null,G__127464,G__127465));
})();
var G__127441 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24(G__127418,G__127419,G__127420,G__127421,G__127422,G__127423,G__127424,G__127425,G__127426,G__127427,G__127428,G__127429,G__127430,G__127431,G__127432,G__127433,G__127434,G__127435,G__127436,G__127437,G__127438,G__127439,G__127440,G__127441) : tailrecursion.hoplon.pre.call(null,G__127418,G__127419,G__127420,G__127421,G__127422,G__127423,G__127424,G__127425,G__127426,G__127427,G__127428,G__127429,G__127430,G__127431,G__127432,G__127433,G__127434,G__127435,G__127436,G__127437,G__127438,G__127439,G__127440,G__127441));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127416,G__127417) : tailrecursion.hoplon.div.call(null,G__127416,G__127417));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127415) : tailrecursion.hoplon.div.call(null,G__127415));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127402;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127401;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127400;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127399;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_127466 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127467 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127468 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127469 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127470 = cljs.core.PersistentArrayMap.EMPTY;
var G__127471 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Newton",(function (){var G__127472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127473 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127472,G__127473) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127472,G__127473));
})(),"s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127470,G__127471) : tailrecursion.hoplon.markdown.para_node.call(null,G__127470,G__127471));
})(),(function (){var G__127474 = cljs.core.PersistentArrayMap.EMPTY;
var G__127475 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\frac{x/y^2 +2y}{3} $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127474,G__127475) : tailrecursion.hoplon.markdown.para_node.call(null,G__127474,G__127475));
})(),(function (){var G__127476 = cljs.core.PersistentArrayMap.EMPTY;
var G__127477 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#!/sicp/ch/1/sect/3/sub/4",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.3.4"], null)], 0))," we will see how to implement Newton",(function (){var G__127478 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127479 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127478,G__127479) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127478,G__127479));
})(),"s method in general as an abstraction of these square-root and cube-root procedures.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127476,G__127477) : tailrecursion.hoplon.markdown.para_node.call(null,G__127476,G__127477));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127469;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127468;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127467;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127466;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_127480 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127481 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127482 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127483 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127484 = (function (){var G__127485 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127486 = (function (){var G__127487 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127488 = "(";
var G__127489 = (function (){var G__127514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127515 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127514,G__127515) : tailrecursion.hoplon.span.call(null,G__127514,G__127515));
})();
var G__127490 = (function (){var G__127516 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127517 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127516,G__127517) : tailrecursion.hoplon.span.call(null,G__127516,G__127517));
})();
var G__127491 = " [";
var G__127492 = (function (){var G__127518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127519 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127518,G__127519) : tailrecursion.hoplon.span.call(null,G__127518,G__127519));
})();
var G__127493 = " ";
var G__127494 = (function (){var G__127520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127521 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127520,G__127521) : tailrecursion.hoplon.span.call(null,G__127520,G__127521));
})();
var G__127495 = "]\n  (";
var G__127496 = (function (){var G__127522 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127523 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127522,G__127523) : tailrecursion.hoplon.span.call(null,G__127522,G__127523));
})();
var G__127497 = "(";
var G__127498 = (function (){var G__127524 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127525 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127524,G__127525) : tailrecursion.hoplon.span.call(null,G__127524,G__127525));
})();
var G__127499 = "(";
var G__127500 = (function (){var G__127526 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127527 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127526,G__127527) : tailrecursion.hoplon.span.call(null,G__127526,G__127527));
})();
var G__127501 = (function (){var G__127528 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127529 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127528,G__127529) : tailrecursion.hoplon.span.call(null,G__127528,G__127529));
})();
var G__127502 = " (";
var G__127503 = (function (){var G__127530 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127531 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127530,G__127531) : tailrecursion.hoplon.span.call(null,G__127530,G__127531));
})();
var G__127504 = " ";
var G__127505 = (function (){var G__127532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127533 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127532,G__127533) : tailrecursion.hoplon.span.call(null,G__127532,G__127533));
})();
var G__127506 = ")) (";
var G__127507 = (function (){var G__127534 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127535 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127534,G__127535) : tailrecursion.hoplon.span.call(null,G__127534,G__127535));
})();
var G__127508 = (function (){var G__127536 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127537 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127536,G__127537) : tailrecursion.hoplon.span.call(null,G__127536,G__127537));
})();
var G__127509 = " ";
var G__127510 = (function (){var G__127538 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127539 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127538,G__127539) : tailrecursion.hoplon.span.call(null,G__127538,G__127539));
})();
var G__127511 = ")) ";
var G__127512 = (function (){var G__127540 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127541 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127540,G__127541) : tailrecursion.hoplon.span.call(null,G__127540,G__127541));
})();
var G__127513 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__127487,G__127488,G__127489,G__127490,G__127491,G__127492,G__127493,G__127494,G__127495,G__127496,G__127497,G__127498,G__127499,G__127500,G__127501,G__127502,G__127503,G__127504,G__127505,G__127506,G__127507,G__127508,G__127509,G__127510,G__127511,G__127512,G__127513) : tailrecursion.hoplon.pre.call(null,G__127487,G__127488,G__127489,G__127490,G__127491,G__127492,G__127493,G__127494,G__127495,G__127496,G__127497,G__127498,G__127499,G__127500,G__127501,G__127502,G__127503,G__127504,G__127505,G__127506,G__127507,G__127508,G__127509,G__127510,G__127511,G__127512,G__127513));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127485,G__127486) : tailrecursion.hoplon.div.call(null,G__127485,G__127486));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127484) : tailrecursion.hoplon.div.call(null,G__127484));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127483;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127482;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127481;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127480;
}})()], 0))], 0))], 0));
var G__124150 = "";
var G__124151 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Procedures as Black-Box Abstractions"], null),(function (){var _STAR_references_STAR_127542 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127543 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127544 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127545 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127546 = cljs.core.PersistentArrayMap.EMPTY;
var G__127547 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Sqrt"], null);
var G__127549 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127548,G__127549) : tailrecursion.hoplon.markdown.code_node.call(null,G__127548,G__127549));
})()," is our first example of a process defined by a set of mutually defined procedures. Notice that the definition of ",(function (){var G__127550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt-iter"], null);
var G__127551 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127550,G__127551) : tailrecursion.hoplon.markdown.code_node.call(null,G__127550,G__127551));
})()," is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0)),"; that is, the procedure is defined in terms of itself. The idea of being able to define a procedure in terms of itself may be disturbing; it may seem unclear how such a ",(function (){var G__127552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__127553 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["circular"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__127552,G__127553) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__127552,G__127553));
})()," definition could make sense at all, much less specify a well-defined process to be carried out by a computer. This will be addressed more carefully in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"\"#/sicp/ch/1/sect/2/\"",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.2"], null)], 0)),". But first let",(function (){var G__127554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127555 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127554,G__127555) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127554,G__127555));
})(),"s consider some other important points illustrated by the ",(function (){var G__127556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__127557 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127556,G__127557) : tailrecursion.hoplon.markdown.code_node.call(null,G__127556,G__127557));
})()," example."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127546,G__127547) : tailrecursion.hoplon.markdown.para_node.call(null,G__127546,G__127547));
})(),(function (){var G__127558 = cljs.core.PersistentArrayMap.EMPTY;
var G__127559 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that the problem of computing square roots breaks up naturally into a number of subproblems: how to tell whether a guess is good enough, how to improve a guess, and so on. Each of these tasks is accomplished by a separate procedure. The entire ",(function (){var G__127560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__127561 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127560,G__127561) : tailrecursion.hoplon.markdown.code_node.call(null,G__127560,G__127561));
})()," program can be viewed as a cluster of procedures (shown in figure 1.2) that mirrors the decomposition of the problem into subproblems."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127558,G__127559) : tailrecursion.hoplon.markdown.para_node.call(null,G__127558,G__127559));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127545;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127544;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127543;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127542;
}})(),content.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$footer,"Procedural decomposition of the sqrt program."], null)], 0)),"",(function (){var _STAR_references_STAR_127562 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127563 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127564 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127565 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127566 = cljs.core.PersistentArrayMap.EMPTY;
var G__127567 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The importance of this decomposition strategy is not simply that one is dividing the program into parts. After all, we could take any large program and divide it into parts ",(function (){var G__127568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__127569 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127568,G__127569) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127568,G__127569));
})()," the first ten lines, the next ten lines, the next ten lines, and so on. Rather, it is crucial that each procedure accomplishes an identifiable task that can be used as a module in defining other procedures. For example, when we define the ",(function (){var G__127570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127571 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127570,G__127571) : tailrecursion.hoplon.markdown.code_node.call(null,G__127570,G__127571));
})()," procedure in terms of ",(function (){var G__127572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127573 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127572,G__127573) : tailrecursion.hoplon.markdown.code_node.call(null,G__127572,G__127573));
})(),", we are able to regard the ",(function (){var G__127574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127575 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127574,G__127575) : tailrecursion.hoplon.markdown.code_node.call(null,G__127574,G__127575));
})()," procedure as a ",(function (){var G__127576 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__127577 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["black box."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__127576,G__127577) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__127576,G__127577));
})()," We are not at that moment concerned with ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how"], null)], 0))," the procedure computes its result, only with the fact that it computes the square. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as the ",(function (){var G__127578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127579 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127578,G__127579) : tailrecursion.hoplon.markdown.code_node.call(null,G__127578,G__127579));
})()," procedure is concerned, ",(function (){var G__127580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127581 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127580,G__127581) : tailrecursion.hoplon.markdown.code_node.call(null,G__127580,G__127581));
})()," is not quite a procedure but rather an abstraction of a procedure, a so-called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedural abstraction"], null)], 0)),". At this level of abstraction, any procedure that computes the square is equally good."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127566,G__127567) : tailrecursion.hoplon.markdown.para_node.call(null,G__127566,G__127567));
})(),(function (){var G__127582 = cljs.core.PersistentArrayMap.EMPTY;
var G__127583 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus, considering only the values they return, the following two procedures for squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.",(function (){var G__127584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__127585 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is not even clear which of these procedures is a more efficient implementation. This depends upon the hardware available. There are machines for which the ",(function (){var G__127586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__127587 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["obvious"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__127586,G__127587) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__127586,G__127587));
})()," implementation is the less efficient one. Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__127584,G__127585) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__127584,G__127585));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127582,G__127583) : tailrecursion.hoplon.markdown.para_node.call(null,G__127582,G__127583));
})(),(function (){var G__127588 = (function (){var G__127589 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127590 = (function (){var G__127591 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127592 = "(";
var G__127593 = (function (){var G__127603 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127604 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127603,G__127604) : tailrecursion.hoplon.span.call(null,G__127603,G__127604));
})();
var G__127594 = (function (){var G__127605 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127606 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127605,G__127606) : tailrecursion.hoplon.span.call(null,G__127605,G__127606));
})();
var G__127595 = " [";
var G__127596 = (function (){var G__127607 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127608 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127607,G__127608) : tailrecursion.hoplon.span.call(null,G__127607,G__127608));
})();
var G__127597 = "] (";
var G__127598 = (function (){var G__127609 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127610 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127609,G__127610) : tailrecursion.hoplon.span.call(null,G__127609,G__127610));
})();
var G__127599 = (function (){var G__127611 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127612 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127611,G__127612) : tailrecursion.hoplon.span.call(null,G__127611,G__127612));
})();
var G__127600 = " ";
var G__127601 = (function (){var G__127613 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127614 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127613,G__127614) : tailrecursion.hoplon.span.call(null,G__127613,G__127614));
})();
var G__127602 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__127591,G__127592,G__127593,G__127594,G__127595,G__127596,G__127597,G__127598,G__127599,G__127600,G__127601,G__127602) : tailrecursion.hoplon.pre.call(null,G__127591,G__127592,G__127593,G__127594,G__127595,G__127596,G__127597,G__127598,G__127599,G__127600,G__127601,G__127602));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127589,G__127590) : tailrecursion.hoplon.div.call(null,G__127589,G__127590));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127588) : tailrecursion.hoplon.div.call(null,G__127588));
})(),(function (){var G__127615 = (function (){var G__127616 = "(defn square [x] \n  (exp (double (log x))))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__127616) : tailrecursion.hoplon.code.call(null,G__127616));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__127615) : tailrecursion.hoplon.pre.call(null,G__127615));
})(),(function (){var G__127617 = (function (){var G__127618 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127619 = (function (){var G__127620 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127621 = "(";
var G__127622 = (function (){var G__127632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127633 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127632,G__127633) : tailrecursion.hoplon.span.call(null,G__127632,G__127633));
})();
var G__127623 = (function (){var G__127634 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127635 = "double ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127634,G__127635) : tailrecursion.hoplon.span.call(null,G__127634,G__127635));
})();
var G__127624 = "[";
var G__127625 = (function (){var G__127636 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127637 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127636,G__127637) : tailrecursion.hoplon.span.call(null,G__127636,G__127637));
})();
var G__127626 = "] (";
var G__127627 = (function (){var G__127638 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127639 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127638,G__127639) : tailrecursion.hoplon.span.call(null,G__127638,G__127639));
})();
var G__127628 = (function (){var G__127640 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127641 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127640,G__127641) : tailrecursion.hoplon.span.call(null,G__127640,G__127641));
})();
var G__127629 = " ";
var G__127630 = (function (){var G__127642 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127643 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127642,G__127643) : tailrecursion.hoplon.span.call(null,G__127642,G__127643));
})();
var G__127631 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__127620,G__127621,G__127622,G__127623,G__127624,G__127625,G__127626,G__127627,G__127628,G__127629,G__127630,G__127631) : tailrecursion.hoplon.pre.call(null,G__127620,G__127621,G__127622,G__127623,G__127624,G__127625,G__127626,G__127627,G__127628,G__127629,G__127630,G__127631));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127618,G__127619) : tailrecursion.hoplon.div.call(null,G__127618,G__127619));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127617) : tailrecursion.hoplon.div.call(null,G__127617));
})(),(function (){var G__127644 = cljs.core.PersistentArrayMap.EMPTY;
var G__127645 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So a procedure definition should be able to suppress detail. The users of the procedure may not have written the procedure themselves, but may have obtained it from another programmer as a black box. A user should not need to know how the procedure is implemented in order to use it."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127644,G__127645) : tailrecursion.hoplon.markdown.para_node.call(null,G__127644,G__127645));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127565;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127564;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127563;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127562;
}})()], 0));
var G__124152 = "";
var G__124153 = content.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Local Names"], null),(function (){var _STAR_references_STAR_127646 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127647 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127648 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127649 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127650 = cljs.core.PersistentArrayMap.EMPTY;
var G__127651 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One detail of a procedure",(function (){var G__127652 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127653 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127652,G__127653) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127652,G__127653));
})(),"s implementation that should not matter to the user of the procedure is the implementer",(function (){var G__127654 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127655 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127654,G__127655) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127654,G__127655));
})(),"s choice of names for the procedure",(function (){var G__127656 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127657 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127656,G__127657) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127656,G__127657));
})(),"s formal parameters. Thus, the following procedures should not be distinguishable:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127650,G__127651) : tailrecursion.hoplon.markdown.para_node.call(null,G__127650,G__127651));
})(),(function (){var G__127658 = (function (){var G__127659 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127660 = (function (){var G__127661 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127662 = "(";
var G__127663 = (function (){var G__127673 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127674 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127673,G__127674) : tailrecursion.hoplon.span.call(null,G__127673,G__127674));
})();
var G__127664 = (function (){var G__127675 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127676 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127675,G__127676) : tailrecursion.hoplon.span.call(null,G__127675,G__127676));
})();
var G__127665 = " [";
var G__127666 = (function (){var G__127677 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127678 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127677,G__127678) : tailrecursion.hoplon.span.call(null,G__127677,G__127678));
})();
var G__127667 = "] (";
var G__127668 = (function (){var G__127679 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127680 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127679,G__127680) : tailrecursion.hoplon.span.call(null,G__127679,G__127680));
})();
var G__127669 = (function (){var G__127681 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127682 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127681,G__127682) : tailrecursion.hoplon.span.call(null,G__127681,G__127682));
})();
var G__127670 = " ";
var G__127671 = (function (){var G__127683 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127684 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127683,G__127684) : tailrecursion.hoplon.span.call(null,G__127683,G__127684));
})();
var G__127672 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__127661,G__127662,G__127663,G__127664,G__127665,G__127666,G__127667,G__127668,G__127669,G__127670,G__127671,G__127672) : tailrecursion.hoplon.pre.call(null,G__127661,G__127662,G__127663,G__127664,G__127665,G__127666,G__127667,G__127668,G__127669,G__127670,G__127671,G__127672));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127659,G__127660) : tailrecursion.hoplon.div.call(null,G__127659,G__127660));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127658) : tailrecursion.hoplon.div.call(null,G__127658));
})(),(function (){var G__127685 = (function (){var G__127686 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127687 = (function (){var G__127688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127689 = "(";
var G__127690 = (function (){var G__127700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127701 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127700,G__127701) : tailrecursion.hoplon.span.call(null,G__127700,G__127701));
})();
var G__127691 = (function (){var G__127702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127703 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127702,G__127703) : tailrecursion.hoplon.span.call(null,G__127702,G__127703));
})();
var G__127692 = " [";
var G__127693 = (function (){var G__127704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127705 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127704,G__127705) : tailrecursion.hoplon.span.call(null,G__127704,G__127705));
})();
var G__127694 = "] (";
var G__127695 = (function (){var G__127706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127707 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127706,G__127707) : tailrecursion.hoplon.span.call(null,G__127706,G__127707));
})();
var G__127696 = (function (){var G__127708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127709 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127708,G__127709) : tailrecursion.hoplon.span.call(null,G__127708,G__127709));
})();
var G__127697 = " ";
var G__127698 = (function (){var G__127710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127711 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127710,G__127711) : tailrecursion.hoplon.span.call(null,G__127710,G__127711));
})();
var G__127699 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__127688,G__127689,G__127690,G__127691,G__127692,G__127693,G__127694,G__127695,G__127696,G__127697,G__127698,G__127699) : tailrecursion.hoplon.pre.call(null,G__127688,G__127689,G__127690,G__127691,G__127692,G__127693,G__127694,G__127695,G__127696,G__127697,G__127698,G__127699));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127686,G__127687) : tailrecursion.hoplon.div.call(null,G__127686,G__127687));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127685) : tailrecursion.hoplon.div.call(null,G__127685));
})(),(function (){var G__127712 = cljs.core.PersistentArrayMap.EMPTY;
var G__127713 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This principle ",(function (){var G__127714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__127715 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127714,G__127715) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127714,G__127715));
})()," that the meaning of a procedure should be independent of the parameter names used by its author ",(function (){var G__127716 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__127717 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127716,G__127717) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127716,G__127717));
})()," seems on the surface to be self-evident, but its consequences are profound. The simplest consequence is that the parameter names of a procedure must be local to the body of the procedure. For example, we used ",(function (){var G__127718 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127719 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127718,G__127719) : tailrecursion.hoplon.markdown.code_node.call(null,G__127718,G__127719));
})()," in the definition of ",(function (){var G__127720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127721 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127720,G__127721) : tailrecursion.hoplon.markdown.code_node.call(null,G__127720,G__127721));
})()," in our square-root procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127712,G__127713) : tailrecursion.hoplon.markdown.para_node.call(null,G__127712,G__127713));
})(),(function (){var G__127722 = (function (){var G__127723 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127724 = (function (){var G__127725 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127726 = "(";
var G__127727 = (function (){var G__127748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127749 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127748,G__127749) : tailrecursion.hoplon.span.call(null,G__127748,G__127749));
})();
var G__127728 = (function (){var G__127750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127751 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127750,G__127751) : tailrecursion.hoplon.span.call(null,G__127750,G__127751));
})();
var G__127729 = " [";
var G__127730 = (function (){var G__127752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127753 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127752,G__127753) : tailrecursion.hoplon.span.call(null,G__127752,G__127753));
})();
var G__127731 = " ";
var G__127732 = (function (){var G__127754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127755 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127754,G__127755) : tailrecursion.hoplon.span.call(null,G__127754,G__127755));
})();
var G__127733 = "]\n  (";
var G__127734 = (function (){var G__127756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127757 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127756,G__127757) : tailrecursion.hoplon.span.call(null,G__127756,G__127757));
})();
var G__127735 = "(";
var G__127736 = (function (){var G__127758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127759 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127758,G__127759) : tailrecursion.hoplon.span.call(null,G__127758,G__127759));
})();
var G__127737 = " (";
var G__127738 = (function (){var G__127760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__127761 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127760,G__127761) : tailrecursion.hoplon.span.call(null,G__127760,G__127761));
})();
var G__127739 = "(";
var G__127740 = (function (){var G__127762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127763 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127762,G__127763) : tailrecursion.hoplon.span.call(null,G__127762,G__127763));
})();
var G__127741 = " ";
var G__127742 = (function (){var G__127764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127765 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127764,G__127765) : tailrecursion.hoplon.span.call(null,G__127764,G__127765));
})();
var G__127743 = ") ";
var G__127744 = (function (){var G__127766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127767 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127766,G__127767) : tailrecursion.hoplon.span.call(null,G__127766,G__127767));
})();
var G__127745 = ")) ";
var G__127746 = (function (){var G__127768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127769 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127768,G__127769) : tailrecursion.hoplon.span.call(null,G__127768,G__127769));
})();
var G__127747 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__127725,G__127726,G__127727,G__127728,G__127729,G__127730,G__127731,G__127732,G__127733,G__127734,G__127735,G__127736,G__127737,G__127738,G__127739,G__127740,G__127741,G__127742,G__127743,G__127744,G__127745,G__127746,G__127747) : tailrecursion.hoplon.pre.call(null,G__127725,G__127726,G__127727,G__127728,G__127729,G__127730,G__127731,G__127732,G__127733,G__127734,G__127735,G__127736,G__127737,G__127738,G__127739,G__127740,G__127741,G__127742,G__127743,G__127744,G__127745,G__127746,G__127747));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127723,G__127724) : tailrecursion.hoplon.div.call(null,G__127723,G__127724));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127722) : tailrecursion.hoplon.div.call(null,G__127722));
})(),(function (){var G__127770 = cljs.core.PersistentArrayMap.EMPTY;
var G__127771 = cljs.core.PersistentVector.fromArray(["The intention of the author of ",(function (){var G__127772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127773 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127772,G__127773) : tailrecursion.hoplon.markdown.code_node.call(null,G__127772,G__127773));
})()," is to determine if the square of the first argument is within a given tolerance of the second argument. We see that the author of ",(function (){var G__127774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127775 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127774,G__127775) : tailrecursion.hoplon.markdown.code_node.call(null,G__127774,G__127775));
})()," used the name ",(function (){var G__127776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__127777 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127776,G__127777) : tailrecursion.hoplon.markdown.code_node.call(null,G__127776,G__127777));
})()," to refer to the first argument and ",(function (){var G__127778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127779 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127778,G__127779) : tailrecursion.hoplon.markdown.code_node.call(null,G__127778,G__127779));
})()," to refer to the second argument. The argument of ",(function (){var G__127780 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127781 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127780,G__127781) : tailrecursion.hoplon.markdown.code_node.call(null,G__127780,G__127781));
})()," is ",(function (){var G__127782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__127783 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127782,G__127783) : tailrecursion.hoplon.markdown.code_node.call(null,G__127782,G__127783));
})(),". If the author of ",(function (){var G__127784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127785 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127784,G__127785) : tailrecursion.hoplon.markdown.code_node.call(null,G__127784,G__127785));
})()," used ",(function (){var G__127786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127787 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127786,G__127787) : tailrecursion.hoplon.markdown.code_node.call(null,G__127786,G__127787));
})()," (as above) to refer to that argument, we see that the ",(function (){var G__127788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127789 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127788,G__127789) : tailrecursion.hoplon.markdown.code_node.call(null,G__127788,G__127789));
})()," in ",(function (){var G__127790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127791 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127790,G__127791) : tailrecursion.hoplon.markdown.code_node.call(null,G__127790,G__127791));
})()," must be a different ",(function (){var G__127792 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127793 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127792,G__127793) : tailrecursion.hoplon.markdown.code_node.call(null,G__127792,G__127793));
})()," than the one in ",(function (){var G__127794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127795 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127794,G__127795) : tailrecursion.hoplon.markdown.code_node.call(null,G__127794,G__127795));
})(),". Running the procedure ",(function (){var G__127796 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127797 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127796,G__127797) : tailrecursion.hoplon.markdown.code_node.call(null,G__127796,G__127797));
})()," must not affect the value of ",(function (){var G__127798 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127799 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127798,G__127799) : tailrecursion.hoplon.markdown.code_node.call(null,G__127798,G__127799));
})()," that is used by ",(function (){var G__127800 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127801 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127800,G__127801) : tailrecursion.hoplon.markdown.code_node.call(null,G__127800,G__127801));
})(),", because that value of ",(function (){var G__127802 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127803 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127802,G__127803) : tailrecursion.hoplon.markdown.code_node.call(null,G__127802,G__127803));
})()," may be needed by ",(function (){var G__127804 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127805 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127804,G__127805) : tailrecursion.hoplon.markdown.code_node.call(null,G__127804,G__127805));
})()," after ",(function (){var G__127806 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127807 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127806,G__127807) : tailrecursion.hoplon.markdown.code_node.call(null,G__127806,G__127807));
})()," is done computing."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127770,G__127771) : tailrecursion.hoplon.markdown.para_node.call(null,G__127770,G__127771));
})(),(function (){var G__127808 = cljs.core.PersistentArrayMap.EMPTY;
var G__127809 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If the parameters were not local to the bodies of their respective procedures, then the parameter ",(function (){var G__127810 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127811 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127810,G__127811) : tailrecursion.hoplon.markdown.code_node.call(null,G__127810,G__127811));
})()," in ",(function (){var G__127812 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127813 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127812,G__127813) : tailrecursion.hoplon.markdown.code_node.call(null,G__127812,G__127813));
})()," could be confused with the parameter ",(function (){var G__127814 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127815 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127814,G__127815) : tailrecursion.hoplon.markdown.code_node.call(null,G__127814,G__127815));
})()," in ",(function (){var G__127816 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127817 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127816,G__127817) : tailrecursion.hoplon.markdown.code_node.call(null,G__127816,G__127817));
})(),", and the behavior of ",(function (){var G__127818 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127819 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127818,G__127819) : tailrecursion.hoplon.markdown.code_node.call(null,G__127818,G__127819));
})()," would depend upon which version of ",(function (){var G__127820 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127821 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127820,G__127821) : tailrecursion.hoplon.markdown.code_node.call(null,G__127820,G__127821));
})()," we used. Thus, ",(function (){var G__127822 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127823 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127822,G__127823) : tailrecursion.hoplon.markdown.code_node.call(null,G__127822,G__127823));
})()," would not be the black box we desired."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127808,G__127809) : tailrecursion.hoplon.markdown.para_node.call(null,G__127808,G__127809));
})(),(function (){var G__127824 = cljs.core.PersistentArrayMap.EMPTY;
var G__127825 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A formal parameter of a procedure has a very special role in the procedure definition, in that it doesn",(function (){var G__127826 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127827 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127826,G__127827) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127826,G__127827));
})(),"t matter what name the formal parameter has. Such a name is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["bound variable"], null)], 0)),", and we say that the procedure definition ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["binds"], null)], 0))," its formal parameters. The meaning of a procedure definition is unchanged if a bound variable is consistently renamed throughout the definition.",(function (){var G__127828 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__127829 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The concept of consistent renaming is actually subtle and difficult to define formally. Famous logicians have made embarrassing errors here."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__127828,G__127829) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__127828,G__127829));
})()," If a variable is not bound, we say that it is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["free"], null)], 0)),". The set of expressions for which a binding defines a name is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["scope"], null)], 0))," of that name. In a procedure definition, the bound variables declared as the formal parameters of the procedure have the body of the procedure as their scope."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127824,G__127825) : tailrecursion.hoplon.markdown.para_node.call(null,G__127824,G__127825));
})(),(function (){var G__127830 = cljs.core.PersistentArrayMap.EMPTY;
var G__127831 = cljs.core.PersistentVector.fromArray(["In the definition of ",(function (){var G__127832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127833 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127832,G__127833) : tailrecursion.hoplon.markdown.code_node.call(null,G__127832,G__127833));
})()," above, ",(function (){var G__127834 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__127835 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127834,G__127835) : tailrecursion.hoplon.markdown.code_node.call(null,G__127834,G__127835));
})()," and ",(function (){var G__127836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127837 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127836,G__127837) : tailrecursion.hoplon.markdown.code_node.call(null,G__127836,G__127837));
})()," are bound variables but ",(function (){var G__127838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<"], null);
var G__127839 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127838,G__127839) : tailrecursion.hoplon.markdown.code_node.call(null,G__127838,G__127839));
})(),", ",(function (){var G__127840 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"-"], null);
var G__127841 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127840,G__127841) : tailrecursion.hoplon.markdown.code_node.call(null,G__127840,G__127841));
})(),", ",(function (){var G__127842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__127843 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127842,G__127843) : tailrecursion.hoplon.markdown.code_node.call(null,G__127842,G__127843));
})(),", and ",(function (){var G__127844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127845 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127844,G__127845) : tailrecursion.hoplon.markdown.code_node.call(null,G__127844,G__127845));
})()," are free. The meaning of ",(function (){var G__127846 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127847 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127846,G__127847) : tailrecursion.hoplon.markdown.code_node.call(null,G__127846,G__127847));
})()," should be independent of the names we choose for ",(function (){var G__127848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__127849 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127848,G__127849) : tailrecursion.hoplon.markdown.code_node.call(null,G__127848,G__127849));
})()," and ",(function (){var G__127850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__127851 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127850,G__127851) : tailrecursion.hoplon.markdown.code_node.call(null,G__127850,G__127851));
})()," so long as they are distinct and different from ",(function (){var G__127852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<"], null);
var G__127853 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127852,G__127853) : tailrecursion.hoplon.markdown.code_node.call(null,G__127852,G__127853));
})(),", ",(function (){var G__127854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"-"], null);
var G__127855 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127854,G__127855) : tailrecursion.hoplon.markdown.code_node.call(null,G__127854,G__127855));
})(),", ",(function (){var G__127856 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__127857 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127856,G__127857) : tailrecursion.hoplon.markdown.code_node.call(null,G__127856,G__127857));
})(),", and ",(function (){var G__127858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__127859 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127858,G__127859) : tailrecursion.hoplon.markdown.code_node.call(null,G__127858,G__127859));
})(),". (If we renamed ",(function (){var G__127860 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__127861 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127860,G__127861) : tailrecursion.hoplon.markdown.code_node.call(null,G__127860,G__127861));
})()," to ",(function (){var G__127862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__127863 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127862,G__127863) : tailrecursion.hoplon.markdown.code_node.call(null,G__127862,G__127863));
})()," we would have introduced a bug by ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["capturing"], null)], 0))," the variable ",(function (){var G__127864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__127865 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127864,G__127865) : tailrecursion.hoplon.markdown.code_node.call(null,G__127864,G__127865));
})(),". It would have changed from free to bound.) The meaning of ",(function (){var G__127866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__127867 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127866,G__127867) : tailrecursion.hoplon.markdown.code_node.call(null,G__127866,G__127867));
})()," is not independent of the names of its free variables, however. It surely depends upon the fact (external to this definition) that the symbol ",(function (){var G__127868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__127869 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127868,G__127869) : tailrecursion.hoplon.markdown.code_node.call(null,G__127868,G__127869));
})()," names a procedure for computing the absolute value of a number. ",(function (){var G__127870 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Good-enough?"], null);
var G__127871 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127870,G__127871) : tailrecursion.hoplon.markdown.code_node.call(null,G__127870,G__127871));
})()," will compute a different function if we substitute ",(function (){var G__127872 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cos"], null);
var G__127873 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127872,G__127873) : tailrecursion.hoplon.markdown.code_node.call(null,G__127872,G__127873));
})()," for ",(function (){var G__127874 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__127875 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127874,G__127875) : tailrecursion.hoplon.markdown.code_node.call(null,G__127874,G__127875));
})()," in its definition."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127830,G__127831) : tailrecursion.hoplon.markdown.para_node.call(null,G__127830,G__127831));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127649;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127648;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127647;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127646;
}})()], 0));
var G__124154 = "";
var G__124155 = content.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Internal Definitions and Block Structures"], null),(function (){var _STAR_references_STAR_127876 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127877 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_127878 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_127879 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__127880 = cljs.core.PersistentArrayMap.EMPTY;
var G__127881 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is instructive to note that the rest of this section does not work as well in Clojure. The reason is that ",(function (){var G__127882 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__127883 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127882,G__127883) : tailrecursion.hoplon.markdown.code_node.call(null,G__127882,G__127883));
})(),", ",(function (){var G__127884 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"defn"], null);
var G__127885 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__127884,G__127885) : tailrecursion.hoplon.markdown.code_node.call(null,G__127884,G__127885));
})()," and all other defining forms define things in the global environment directly (no matter where they are called). If this does not make sense to you just yet, don",(function (){var G__127886 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__127887 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__127886,G__127887) : tailrecursion.hoplon.markdown.simple_node.call(null,G__127886,G__127887));
})(),"t worry: it should by the end of this section."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127880,G__127881) : tailrecursion.hoplon.markdown.para_node.call(null,G__127880,G__127881));
})(),(function (){var G__127888 = cljs.core.PersistentArrayMap.EMPTY;
var G__127889 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have one kind of name isolation available to us so far: The formal parameters of a procedure are local to the body of the procedure. The square-root program illustrates another way in which we would like to control the use of names. The existing program consists of separate procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__127888,G__127889) : tailrecursion.hoplon.markdown.para_node.call(null,G__127888,G__127889));
})(),(function (){var G__127890 = (function (){var G__127891 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__127892 = (function (){var G__127893 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__127894 = "(";
var G__127895 = (function (){var G__127970 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127971 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127970,G__127971) : tailrecursion.hoplon.span.call(null,G__127970,G__127971));
})();
var G__127896 = (function (){var G__127972 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127973 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127972,G__127973) : tailrecursion.hoplon.span.call(null,G__127972,G__127973));
})();
var G__127897 = " [";
var G__127898 = (function (){var G__127974 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127975 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127974,G__127975) : tailrecursion.hoplon.span.call(null,G__127974,G__127975));
})();
var G__127899 = "]\n  (";
var G__127900 = (function (){var G__127976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127977 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127976,G__127977) : tailrecursion.hoplon.span.call(null,G__127976,G__127977));
})();
var G__127901 = " ";
var G__127902 = (function (){var G__127978 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__127979 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127978,G__127979) : tailrecursion.hoplon.span.call(null,G__127978,G__127979));
})();
var G__127903 = " ";
var G__127904 = (function (){var G__127980 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127981 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127980,G__127981) : tailrecursion.hoplon.span.call(null,G__127980,G__127981));
})();
var G__127905 = "))\n(";
var G__127906 = (function (){var G__127982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127983 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127982,G__127983) : tailrecursion.hoplon.span.call(null,G__127982,G__127983));
})();
var G__127907 = (function (){var G__127984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127985 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127984,G__127985) : tailrecursion.hoplon.span.call(null,G__127984,G__127985));
})();
var G__127908 = " [";
var G__127909 = (function (){var G__127986 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127987 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127986,G__127987) : tailrecursion.hoplon.span.call(null,G__127986,G__127987));
})();
var G__127910 = " ";
var G__127911 = (function (){var G__127988 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127989 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127988,G__127989) : tailrecursion.hoplon.span.call(null,G__127988,G__127989));
})();
var G__127912 = "]\n  (";
var G__127913 = (function (){var G__127990 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__127991 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127990,G__127991) : tailrecursion.hoplon.span.call(null,G__127990,G__127991));
})();
var G__127914 = "(";
var G__127915 = (function (){var G__127992 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__127993 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127992,G__127993) : tailrecursion.hoplon.span.call(null,G__127992,G__127993));
})();
var G__127916 = " ";
var G__127917 = (function (){var G__127994 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127995 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127994,G__127995) : tailrecursion.hoplon.span.call(null,G__127994,G__127995));
})();
var G__127918 = " ";
var G__127919 = (function (){var G__127996 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127997 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127996,G__127997) : tailrecursion.hoplon.span.call(null,G__127996,G__127997));
})();
var G__127920 = ")\n      ";
var G__127921 = (function (){var G__127998 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__127999 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__127998,G__127999) : tailrecursion.hoplon.span.call(null,G__127998,G__127999));
})();
var G__127922 = "\n      (";
var G__127923 = (function (){var G__128000 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128001 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128000,G__128001) : tailrecursion.hoplon.span.call(null,G__128000,G__128001));
})();
var G__127924 = " (";
var G__127925 = (function (){var G__128002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128003 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128002,G__128003) : tailrecursion.hoplon.span.call(null,G__128002,G__128003));
})();
var G__127926 = " ";
var G__127927 = (function (){var G__128004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128005 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128004,G__128005) : tailrecursion.hoplon.span.call(null,G__128004,G__128005));
})();
var G__127928 = " ";
var G__127929 = (function (){var G__128006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128007 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128006,G__128007) : tailrecursion.hoplon.span.call(null,G__128006,G__128007));
})();
var G__127930 = ") ";
var G__127931 = (function (){var G__128008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128009 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128008,G__128009) : tailrecursion.hoplon.span.call(null,G__128008,G__128009));
})();
var G__127932 = ")))\n(";
var G__127933 = (function (){var G__128010 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128011 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128010,G__128011) : tailrecursion.hoplon.span.call(null,G__128010,G__128011));
})();
var G__127934 = (function (){var G__128012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128013 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128012,G__128013) : tailrecursion.hoplon.span.call(null,G__128012,G__128013));
})();
var G__127935 = " [";
var G__127936 = (function (){var G__128014 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128015 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128014,G__128015) : tailrecursion.hoplon.span.call(null,G__128014,G__128015));
})();
var G__127937 = " ";
var G__127938 = (function (){var G__128016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128017 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128016,G__128017) : tailrecursion.hoplon.span.call(null,G__128016,G__128017));
})();
var G__127939 = "]\n  (";
var G__127940 = (function (){var G__128018 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128019 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128018,G__128019) : tailrecursion.hoplon.span.call(null,G__128018,G__128019));
})();
var G__127941 = "(";
var G__127942 = (function (){var G__128020 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128021 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128020,G__128021) : tailrecursion.hoplon.span.call(null,G__128020,G__128021));
})();
var G__127943 = " (";
var G__127944 = (function (){var G__128022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128023 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128022,G__128023) : tailrecursion.hoplon.span.call(null,G__128022,G__128023));
})();
var G__127945 = "(";
var G__127946 = (function (){var G__128024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128025 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128024,G__128025) : tailrecursion.hoplon.span.call(null,G__128024,G__128025));
})();
var G__127947 = " ";
var G__127948 = (function (){var G__128026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128027 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128026,G__128027) : tailrecursion.hoplon.span.call(null,G__128026,G__128027));
})();
var G__127949 = ") ";
var G__127950 = (function (){var G__128028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128029 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128028,G__128029) : tailrecursion.hoplon.span.call(null,G__128028,G__128029));
})();
var G__127951 = ")) ";
var G__127952 = (function (){var G__128030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128031 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128030,G__128031) : tailrecursion.hoplon.span.call(null,G__128030,G__128031));
})();
var G__127953 = "))\n(";
var G__127954 = (function (){var G__128032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128033 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128032,G__128033) : tailrecursion.hoplon.span.call(null,G__128032,G__128033));
})();
var G__127955 = (function (){var G__128034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128035 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128034,G__128035) : tailrecursion.hoplon.span.call(null,G__128034,G__128035));
})();
var G__127956 = " [";
var G__127957 = (function (){var G__128036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128037 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128036,G__128037) : tailrecursion.hoplon.span.call(null,G__128036,G__128037));
})();
var G__127958 = " ";
var G__127959 = (function (){var G__128038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128039 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128038,G__128039) : tailrecursion.hoplon.span.call(null,G__128038,G__128039));
})();
var G__127960 = "]\n  (";
var G__127961 = (function (){var G__128040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128041 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128040,G__128041) : tailrecursion.hoplon.span.call(null,G__128040,G__128041));
})();
var G__127962 = " ";
var G__127963 = (function (){var G__128042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128043 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128042,G__128043) : tailrecursion.hoplon.span.call(null,G__128042,G__128043));
})();
var G__127964 = " (";
var G__127965 = (function (){var G__128044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128045 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128044,G__128045) : tailrecursion.hoplon.span.call(null,G__128044,G__128045));
})();
var G__127966 = (function (){var G__128046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128047 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128046,G__128047) : tailrecursion.hoplon.span.call(null,G__128046,G__128047));
})();
var G__127967 = " ";
var G__127968 = (function (){var G__128048 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128049 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128048,G__128049) : tailrecursion.hoplon.span.call(null,G__128048,G__128049));
})();
var G__127969 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77(G__127893,G__127894,G__127895,G__127896,G__127897,G__127898,G__127899,G__127900,G__127901,G__127902,G__127903,G__127904,G__127905,G__127906,G__127907,G__127908,G__127909,G__127910,G__127911,G__127912,G__127913,G__127914,G__127915,G__127916,G__127917,G__127918,G__127919,G__127920,G__127921,G__127922,G__127923,G__127924,G__127925,G__127926,G__127927,G__127928,G__127929,G__127930,G__127931,G__127932,G__127933,G__127934,G__127935,G__127936,G__127937,G__127938,G__127939,G__127940,G__127941,G__127942,G__127943,G__127944,G__127945,G__127946,G__127947,G__127948,G__127949,G__127950,G__127951,G__127952,G__127953,G__127954,G__127955,G__127956,G__127957,G__127958,G__127959,G__127960,G__127961,G__127962,G__127963,G__127964,G__127965,G__127966,G__127967,G__127968,G__127969) : tailrecursion.hoplon.pre.call(null,G__127893,G__127894,G__127895,G__127896,G__127897,G__127898,G__127899,G__127900,G__127901,G__127902,G__127903,G__127904,G__127905,G__127906,G__127907,G__127908,G__127909,G__127910,G__127911,G__127912,G__127913,G__127914,G__127915,G__127916,G__127917,G__127918,G__127919,G__127920,G__127921,G__127922,G__127923,G__127924,G__127925,G__127926,G__127927,G__127928,G__127929,G__127930,G__127931,G__127932,G__127933,G__127934,G__127935,G__127936,G__127937,G__127938,G__127939,G__127940,G__127941,G__127942,G__127943,G__127944,G__127945,G__127946,G__127947,G__127948,G__127949,G__127950,G__127951,G__127952,G__127953,G__127954,G__127955,G__127956,G__127957,G__127958,G__127959,G__127960,G__127961,G__127962,G__127963,G__127964,G__127965,G__127966,G__127967,G__127968,G__127969));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__127891,G__127892) : tailrecursion.hoplon.div.call(null,G__127891,G__127892));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__127890) : tailrecursion.hoplon.div.call(null,G__127890));
})(),(function (){var G__128050 = cljs.core.PersistentArrayMap.EMPTY;
var G__128051 = new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The problem with this program is that the only procedure that is important to users of ",(function (){var G__128052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__128053 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128052,G__128053) : tailrecursion.hoplon.markdown.code_node.call(null,G__128052,G__128053));
})()," is ",(function (){var G__128054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__128055 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128054,G__128055) : tailrecursion.hoplon.markdown.code_node.call(null,G__128054,G__128055));
})(),". The other procedures (",(function (){var G__128056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt-iter"], null);
var G__128057 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128056,G__128057) : tailrecursion.hoplon.markdown.code_node.call(null,G__128056,G__128057));
})(),", ",(function (){var G__128058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__128059 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128058,G__128059) : tailrecursion.hoplon.markdown.code_node.call(null,G__128058,G__128059));
})(),", and ",(function (){var G__128060 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"improve"], null);
var G__128061 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128060,G__128061) : tailrecursion.hoplon.markdown.code_node.call(null,G__128060,G__128061));
})(),") only clutter up their minds. They may not define any other procedure called ",(function (){var G__128062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__128063 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128062,G__128063) : tailrecursion.hoplon.markdown.code_node.call(null,G__128062,G__128063));
})()," as part of another program to work together with the square-root program, because ",(function (){var G__128064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__128065 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128064,G__128065) : tailrecursion.hoplon.markdown.code_node.call(null,G__128064,G__128065));
})()," needs it. The problem is especially severe in the construction of large systems by many separate programmers. For example, in the construction of a large library of numerical procedures, many numerical functions are computed as successive approximations and thus might have procedures named ",(function (){var G__128066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__128067 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128066,G__128067) : tailrecursion.hoplon.markdown.code_node.call(null,G__128066,G__128067));
})()," and ",(function (){var G__128068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"improve"], null);
var G__128069 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128068,G__128069) : tailrecursion.hoplon.markdown.code_node.call(null,G__128068,G__128069));
})()," as auxiliary procedures. We would like to localize the subprocedures, hiding them inside ",(function (){var G__128070 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__128071 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128070,G__128071) : tailrecursion.hoplon.markdown.code_node.call(null,G__128070,G__128071));
})()," so that ",(function (){var G__128072 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__128073 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128072,G__128073) : tailrecursion.hoplon.markdown.code_node.call(null,G__128072,G__128073));
})()," could coexist with other successive approximations, each having its own private ",(function (){var G__128074 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__128075 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128074,G__128075) : tailrecursion.hoplon.markdown.code_node.call(null,G__128074,G__128075));
})()," procedure. To make this possible, we allow a procedure to have internal definitions that are local to that procedure. For example, in the ",(function (){var G__128076 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square-root"], null);
var G__128077 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128076,G__128077) : tailrecursion.hoplon.markdown.code_node.call(null,G__128076,G__128077));
})()," problem we can write"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128050,G__128051) : tailrecursion.hoplon.markdown.para_node.call(null,G__128050,G__128051));
})(),(function (){var G__128078 = (function (){var G__128079 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__128080 = (function (){var G__128081 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__128082 = "(";
var G__128083 = (function (){var G__128161 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128162 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128161,G__128162) : tailrecursion.hoplon.span.call(null,G__128161,G__128162));
})();
var G__128084 = "(";
var G__128085 = (function (){var G__128163 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128164 = "sqrt ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128163,G__128164) : tailrecursion.hoplon.span.call(null,G__128163,G__128164));
})();
var G__128086 = (function (){var G__128165 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128166 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128165,G__128166) : tailrecursion.hoplon.span.call(null,G__128165,G__128166));
})();
var G__128087 = ")\n  (";
var G__128088 = (function (){var G__128167 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128168 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128167,G__128168) : tailrecursion.hoplon.span.call(null,G__128167,G__128168));
})();
var G__128089 = "(";
var G__128090 = (function (){var G__128169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128170 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128169,G__128170) : tailrecursion.hoplon.span.call(null,G__128169,G__128170));
})();
var G__128091 = " ";
var G__128092 = (function (){var G__128171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128172 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128171,G__128172) : tailrecursion.hoplon.span.call(null,G__128171,G__128172));
})();
var G__128093 = " ";
var G__128094 = (function (){var G__128173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128174 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128173,G__128174) : tailrecursion.hoplon.span.call(null,G__128173,G__128174));
})();
var G__128095 = ")\n    (";
var G__128096 = (function (){var G__128175 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128176 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128175,G__128176) : tailrecursion.hoplon.span.call(null,G__128175,G__128176));
})();
var G__128097 = "(";
var G__128098 = (function (){var G__128177 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128178 = "abs ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128177,G__128178) : tailrecursion.hoplon.span.call(null,G__128177,G__128178));
})();
var G__128099 = "(";
var G__128100 = (function (){var G__128179 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128180 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128179,G__128180) : tailrecursion.hoplon.span.call(null,G__128179,G__128180));
})();
var G__128101 = "(";
var G__128102 = (function (){var G__128181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128182 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128181,G__128182) : tailrecursion.hoplon.span.call(null,G__128181,G__128182));
})();
var G__128103 = " ";
var G__128104 = (function (){var G__128183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128184 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128183,G__128184) : tailrecursion.hoplon.span.call(null,G__128183,G__128184));
})();
var G__128105 = ") ";
var G__128106 = (function (){var G__128185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128186 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128185,G__128186) : tailrecursion.hoplon.span.call(null,G__128185,G__128186));
})();
var G__128107 = ")) ";
var G__128108 = (function (){var G__128187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128188 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128187,G__128188) : tailrecursion.hoplon.span.call(null,G__128187,G__128188));
})();
var G__128109 = "))\n  (";
var G__128110 = (function (){var G__128189 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128190 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128189,G__128190) : tailrecursion.hoplon.span.call(null,G__128189,G__128190));
})();
var G__128111 = "(";
var G__128112 = (function (){var G__128191 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128192 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128191,G__128192) : tailrecursion.hoplon.span.call(null,G__128191,G__128192));
})();
var G__128113 = " ";
var G__128114 = (function (){var G__128193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128194 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128193,G__128194) : tailrecursion.hoplon.span.call(null,G__128193,G__128194));
})();
var G__128115 = " ";
var G__128116 = (function (){var G__128195 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128196 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128195,G__128196) : tailrecursion.hoplon.span.call(null,G__128195,G__128196));
})();
var G__128117 = ")\n    (";
var G__128118 = (function (){var G__128197 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128198 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128197,G__128198) : tailrecursion.hoplon.span.call(null,G__128197,G__128198));
})();
var G__128119 = " ";
var G__128120 = (function (){var G__128199 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128200 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128199,G__128200) : tailrecursion.hoplon.span.call(null,G__128199,G__128200));
})();
var G__128121 = " (";
var G__128122 = (function (){var G__128201 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128202 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128201,G__128202) : tailrecursion.hoplon.span.call(null,G__128201,G__128202));
})();
var G__128123 = (function (){var G__128203 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128204 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128203,G__128204) : tailrecursion.hoplon.span.call(null,G__128203,G__128204));
})();
var G__128124 = " ";
var G__128125 = (function (){var G__128205 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128206 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128205,G__128206) : tailrecursion.hoplon.span.call(null,G__128205,G__128206));
})();
var G__128126 = ")))\n  (";
var G__128127 = (function (){var G__128207 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128208 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128207,G__128208) : tailrecursion.hoplon.span.call(null,G__128207,G__128208));
})();
var G__128128 = "(";
var G__128129 = (function (){var G__128209 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128210 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128209,G__128210) : tailrecursion.hoplon.span.call(null,G__128209,G__128210));
})();
var G__128130 = " ";
var G__128131 = (function (){var G__128211 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128212 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128211,G__128212) : tailrecursion.hoplon.span.call(null,G__128211,G__128212));
})();
var G__128132 = " ";
var G__128133 = (function (){var G__128213 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128214 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128213,G__128214) : tailrecursion.hoplon.span.call(null,G__128213,G__128214));
})();
var G__128134 = ")\n    (";
var G__128135 = (function (){var G__128215 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128216 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128215,G__128216) : tailrecursion.hoplon.span.call(null,G__128215,G__128216));
})();
var G__128136 = "(";
var G__128137 = (function (){var G__128217 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128218 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128217,G__128218) : tailrecursion.hoplon.span.call(null,G__128217,G__128218));
})();
var G__128138 = " ";
var G__128139 = (function (){var G__128219 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128220 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128219,G__128220) : tailrecursion.hoplon.span.call(null,G__128219,G__128220));
})();
var G__128140 = " ";
var G__128141 = (function (){var G__128221 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128222 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128221,G__128222) : tailrecursion.hoplon.span.call(null,G__128221,G__128222));
})();
var G__128142 = ")\n        ";
var G__128143 = (function (){var G__128223 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128224 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128223,G__128224) : tailrecursion.hoplon.span.call(null,G__128223,G__128224));
})();
var G__128144 = "\n        (";
var G__128145 = (function (){var G__128225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128226 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128225,G__128226) : tailrecursion.hoplon.span.call(null,G__128225,G__128226));
})();
var G__128146 = " (";
var G__128147 = (function (){var G__128227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128228 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128227,G__128228) : tailrecursion.hoplon.span.call(null,G__128227,G__128228));
})();
var G__128148 = " ";
var G__128149 = (function (){var G__128229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128230 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128229,G__128230) : tailrecursion.hoplon.span.call(null,G__128229,G__128230));
})();
var G__128150 = " ";
var G__128151 = (function (){var G__128231 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128232 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128231,G__128232) : tailrecursion.hoplon.span.call(null,G__128231,G__128232));
})();
var G__128152 = ") ";
var G__128153 = (function (){var G__128233 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128234 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128233,G__128234) : tailrecursion.hoplon.span.call(null,G__128233,G__128234));
})();
var G__128154 = ")))\n  (";
var G__128155 = (function (){var G__128235 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128236 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128235,G__128236) : tailrecursion.hoplon.span.call(null,G__128235,G__128236));
})();
var G__128156 = " ";
var G__128157 = (function (){var G__128237 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128238 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128237,G__128238) : tailrecursion.hoplon.span.call(null,G__128237,G__128238));
})();
var G__128158 = " ";
var G__128159 = (function (){var G__128239 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128240 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128239,G__128240) : tailrecursion.hoplon.span.call(null,G__128239,G__128240));
})();
var G__128160 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80(G__128081,G__128082,G__128083,G__128084,G__128085,G__128086,G__128087,G__128088,G__128089,G__128090,G__128091,G__128092,G__128093,G__128094,G__128095,G__128096,G__128097,G__128098,G__128099,G__128100,G__128101,G__128102,G__128103,G__128104,G__128105,G__128106,G__128107,G__128108,G__128109,G__128110,G__128111,G__128112,G__128113,G__128114,G__128115,G__128116,G__128117,G__128118,G__128119,G__128120,G__128121,G__128122,G__128123,G__128124,G__128125,G__128126,G__128127,G__128128,G__128129,G__128130,G__128131,G__128132,G__128133,G__128134,G__128135,G__128136,G__128137,G__128138,G__128139,G__128140,G__128141,G__128142,G__128143,G__128144,G__128145,G__128146,G__128147,G__128148,G__128149,G__128150,G__128151,G__128152,G__128153,G__128154,G__128155,G__128156,G__128157,G__128158,G__128159,G__128160) : tailrecursion.hoplon.pre.call(null,G__128081,G__128082,G__128083,G__128084,G__128085,G__128086,G__128087,G__128088,G__128089,G__128090,G__128091,G__128092,G__128093,G__128094,G__128095,G__128096,G__128097,G__128098,G__128099,G__128100,G__128101,G__128102,G__128103,G__128104,G__128105,G__128106,G__128107,G__128108,G__128109,G__128110,G__128111,G__128112,G__128113,G__128114,G__128115,G__128116,G__128117,G__128118,G__128119,G__128120,G__128121,G__128122,G__128123,G__128124,G__128125,G__128126,G__128127,G__128128,G__128129,G__128130,G__128131,G__128132,G__128133,G__128134,G__128135,G__128136,G__128137,G__128138,G__128139,G__128140,G__128141,G__128142,G__128143,G__128144,G__128145,G__128146,G__128147,G__128148,G__128149,G__128150,G__128151,G__128152,G__128153,G__128154,G__128155,G__128156,G__128157,G__128158,G__128159,G__128160));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__128079,G__128080) : tailrecursion.hoplon.div.call(null,G__128079,G__128080));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__128078) : tailrecursion.hoplon.div.call(null,G__128078));
})(),(function (){var G__128241 = cljs.core.PersistentArrayMap.EMPTY;
var G__128242 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note: This approach does not solve our problem in Clojure. In Clojure, whenever ",(function (){var G__128243 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__128244 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128243,G__128244) : tailrecursion.hoplon.markdown.code_node.call(null,G__128243,G__128244));
})()," or ",(function (){var G__128245 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"defn"], null);
var G__128246 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128245,G__128246) : tailrecursion.hoplon.markdown.code_node.call(null,G__128245,G__128246));
})()," are used, they add the definitions to the global environment. What that means is, every time you run the ",(function (){var G__128247 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__128248 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128247,G__128248) : tailrecursion.hoplon.markdown.code_node.call(null,G__128247,G__128248));
})()," procedure, you would end up redefining ",(function (){var G__128249 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__128250 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128249,G__128250) : tailrecursion.hoplon.markdown.code_node.call(null,G__128249,G__128250));
})()," for every program that uses it. Now, if every program that uses ",(function (){var G__128251 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__128252 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128251,G__128252) : tailrecursion.hoplon.markdown.code_node.call(null,G__128251,G__128252));
})()," redefines ",(function (){var G__128253 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__128254 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128253,G__128254) : tailrecursion.hoplon.markdown.code_node.call(null,G__128253,G__128254));
})(),", then you might not run into any problems; but either way, there is a better alternative: we could use what",(function (){var G__128255 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__128256 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__128255,G__128256) : tailrecursion.hoplon.markdown.simple_node.call(null,G__128255,G__128256));
})(),"s called a ",(function (){var G__128257 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"let"], null);
var G__128258 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128257,G__128258) : tailrecursion.hoplon.markdown.code_node.call(null,G__128257,G__128258));
})()," binding, but we",(function (){var G__128259 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__128260 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__128259,G__128260) : tailrecursion.hoplon.markdown.simple_node.call(null,G__128259,G__128260));
})(),"ll learn about those a little later."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128241,G__128242) : tailrecursion.hoplon.markdown.para_node.call(null,G__128241,G__128242));
})(),(function (){var G__128261 = cljs.core.PersistentArrayMap.EMPTY;
var G__128262 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The thing to remember is the evaluation model. When the compiler is given a symbol, it has a set procedure for determining what this symbol means: first it looks to see if the symbol is a special form (like ",(function (){var G__128263 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__128264 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128263,G__128264) : tailrecursion.hoplon.markdown.code_node.call(null,G__128263,G__128264));
})(),"), if it",(function (){var G__128265 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__128266 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__128265,G__128266) : tailrecursion.hoplon.markdown.simple_node.call(null,G__128265,G__128266));
})(),"s not, then it checks each successive nested local environment until it reaches the global environment. The point is, in Scheme, ",(function (){var G__128267 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"define"], null);
var G__128268 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128267,G__128268) : tailrecursion.hoplon.markdown.code_node.call(null,G__128267,G__128268));
})()," only mutates the local environment, whatever that may be; the same is not true in Clojure. Defining forms mutate the global environment directly, so using ",(function (){var G__128269 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"defn"], null);
var G__128270 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128269,G__128270) : tailrecursion.hoplon.markdown.code_node.call(null,G__128269,G__128270));
})()," to change the definition of a function in one place changes it in all places."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128261,G__128262) : tailrecursion.hoplon.markdown.para_node.call(null,G__128261,G__128262));
})(),(function (){var G__128271 = cljs.core.PersistentArrayMap.EMPTY;
var G__128272 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Luckily, Cloure has a built in pair of functions ",(function (){var G__128273 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"loop"], null);
var G__128274 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128273,G__128274) : tailrecursion.hoplon.markdown.code_node.call(null,G__128273,G__128274));
})()," and ",(function (){var G__128275 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"recur"], null);
var G__128276 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128275,G__128276) : tailrecursion.hoplon.markdown.code_node.call(null,G__128275,G__128276));
})()," that do help us a bit. We can replace the ",(function (){var G__128277 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"iter"], null);
var G__128278 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128277,G__128278) : tailrecursion.hoplon.markdown.code_node.call(null,G__128277,G__128278));
})()," definition with this ",(function (){var G__128279 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"loop"], null);
var G__128280 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128279,G__128280) : tailrecursion.hoplon.markdown.code_node.call(null,G__128279,G__128280));
})()," ",(function (){var G__128281 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"recur"], null);
var G__128282 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128281,G__128282) : tailrecursion.hoplon.markdown.code_node.call(null,G__128281,G__128282));
})()," business thusly (assuming ",(function (){var G__128283 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough"], null);
var G__128284 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128283,G__128284) : tailrecursion.hoplon.markdown.code_node.call(null,G__128283,G__128284));
})()," and ",(function (){var G__128285 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"improve"], null);
var G__128286 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128285,G__128286) : tailrecursion.hoplon.markdown.code_node.call(null,G__128285,G__128286));
})()," were already defined):"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128271,G__128272) : tailrecursion.hoplon.markdown.para_node.call(null,G__128271,G__128272));
})(),(function (){var G__128287 = (function (){var G__128288 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__128289 = (function (){var G__128290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__128291 = "(";
var G__128292 = (function (){var G__128321 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128322 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128321,G__128322) : tailrecursion.hoplon.span.call(null,G__128321,G__128322));
})();
var G__128293 = (function (){var G__128323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128324 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128323,G__128324) : tailrecursion.hoplon.span.call(null,G__128323,G__128324));
})();
var G__128294 = " [";
var G__128295 = (function (){var G__128325 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128326 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128325,G__128326) : tailrecursion.hoplon.span.call(null,G__128325,G__128326));
})();
var G__128296 = "]\n  (";
var G__128297 = (function (){var G__128327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128328 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128327,G__128328) : tailrecursion.hoplon.span.call(null,G__128327,G__128328));
})();
var G__128298 = "[";
var G__128299 = (function (){var G__128329 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128330 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128329,G__128330) : tailrecursion.hoplon.span.call(null,G__128329,G__128330));
})();
var G__128300 = " ";
var G__128301 = (function (){var G__128331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128332 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128331,G__128332) : tailrecursion.hoplon.span.call(null,G__128331,G__128332));
})();
var G__128302 = "]\n    (";
var G__128303 = (function (){var G__128333 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128334 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128333,G__128334) : tailrecursion.hoplon.span.call(null,G__128333,G__128334));
})();
var G__128304 = "(";
var G__128305 = (function (){var G__128335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128336 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128335,G__128336) : tailrecursion.hoplon.span.call(null,G__128335,G__128336));
})();
var G__128306 = " ";
var G__128307 = (function (){var G__128337 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128338 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128337,G__128338) : tailrecursion.hoplon.span.call(null,G__128337,G__128338));
})();
var G__128308 = " ";
var G__128309 = (function (){var G__128339 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128340 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128339,G__128340) : tailrecursion.hoplon.span.call(null,G__128339,G__128340));
})();
var G__128310 = ")\n        ";
var G__128311 = (function (){var G__128341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128342 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128341,G__128342) : tailrecursion.hoplon.span.call(null,G__128341,G__128342));
})();
var G__128312 = "\n        (";
var G__128313 = (function (){var G__128343 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128344 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128343,G__128344) : tailrecursion.hoplon.span.call(null,G__128343,G__128344));
})();
var G__128314 = " (";
var G__128315 = (function (){var G__128345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128346 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128345,G__128346) : tailrecursion.hoplon.span.call(null,G__128345,G__128346));
})();
var G__128316 = " ";
var G__128317 = (function (){var G__128347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128348 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128347,G__128348) : tailrecursion.hoplon.span.call(null,G__128347,G__128348));
})();
var G__128318 = " ";
var G__128319 = (function (){var G__128349 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128350 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128349,G__128350) : tailrecursion.hoplon.span.call(null,G__128349,G__128350));
})();
var G__128320 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31(G__128290,G__128291,G__128292,G__128293,G__128294,G__128295,G__128296,G__128297,G__128298,G__128299,G__128300,G__128301,G__128302,G__128303,G__128304,G__128305,G__128306,G__128307,G__128308,G__128309,G__128310,G__128311,G__128312,G__128313,G__128314,G__128315,G__128316,G__128317,G__128318,G__128319,G__128320) : tailrecursion.hoplon.pre.call(null,G__128290,G__128291,G__128292,G__128293,G__128294,G__128295,G__128296,G__128297,G__128298,G__128299,G__128300,G__128301,G__128302,G__128303,G__128304,G__128305,G__128306,G__128307,G__128308,G__128309,G__128310,G__128311,G__128312,G__128313,G__128314,G__128315,G__128316,G__128317,G__128318,G__128319,G__128320));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__128288,G__128289) : tailrecursion.hoplon.div.call(null,G__128288,G__128289));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__128287) : tailrecursion.hoplon.div.call(null,G__128287));
})(),(function (){var G__128351 = cljs.core.PersistentArrayMap.EMPTY;
var G__128352 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The genearl format for these will be,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128351,G__128352) : tailrecursion.hoplon.markdown.para_node.call(null,G__128351,G__128352));
})(),(function (){var G__128353 = (function (){var G__128354 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__128355 = (function (){var G__128356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__128357 = "(";
var G__128358 = (function (){var G__128401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128402 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128401,G__128402) : tailrecursion.hoplon.span.call(null,G__128401,G__128402));
})();
var G__128359 = (function (){var G__128403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128404 = "function";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128403,G__128404) : tailrecursion.hoplon.span.call(null,G__128403,G__128404));
})();
var G__128360 = " [";
var G__128361 = (function (){var G__128405 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128406 = "arguments";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128405,G__128406) : tailrecursion.hoplon.span.call(null,G__128405,G__128406));
})();
var G__128362 = "]\n  (";
var G__128363 = (function (){var G__128407 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128408 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128407,G__128408) : tailrecursion.hoplon.span.call(null,G__128407,G__128408));
})();
var G__128364 = "[";
var G__128365 = (function (){var G__128409 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128410 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128409,G__128410) : tailrecursion.hoplon.span.call(null,G__128409,G__128410));
})();
var G__128366 = " ";
var G__128367 = (function (){var G__128411 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128412 = "initial-value1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128411,G__128412) : tailrecursion.hoplon.span.call(null,G__128411,G__128412));
})();
var G__128368 = "\n         ";
var G__128369 = (function (){var G__128413 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128414 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128413,G__128414) : tailrecursion.hoplon.span.call(null,G__128413,G__128414));
})();
var G__128370 = " ";
var G__128371 = (function (){var G__128415 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128416 = "initial-value2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128415,G__128416) : tailrecursion.hoplon.span.call(null,G__128415,G__128416));
})();
var G__128372 = "\n         ";
var G__128373 = (function (){var G__128417 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128418 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128417,G__128418) : tailrecursion.hoplon.span.call(null,G__128417,G__128418));
})();
var G__128374 = "\n         ";
var G__128375 = (function (){var G__128419 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128420 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128419,G__128420) : tailrecursion.hoplon.span.call(null,G__128419,G__128420));
})();
var G__128376 = " ";
var G__128377 = (function (){var G__128421 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128422 = "initial-valuen";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128421,G__128422) : tailrecursion.hoplon.span.call(null,G__128421,G__128422));
})();
var G__128378 = "]\n    (";
var G__128379 = (function (){var G__128423 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128424 = "<if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128423,G__128424) : tailrecursion.hoplon.span.call(null,G__128423,G__128424));
})();
var G__128380 = " ";
var G__128381 = (function (){var G__128425 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128426 = "or cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128425,G__128426) : tailrecursion.hoplon.span.call(null,G__128425,G__128426));
})();
var G__128382 = (function (){var G__128427 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128428 = "can";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128427,G__128428) : tailrecursion.hoplon.span.call(null,G__128427,G__128428));
})();
var G__128383 = " ";
var G__128384 = (function (){var G__128429 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128430 = "go";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128429,G__128430) : tailrecursion.hoplon.span.call(null,G__128429,G__128430));
})();
var G__128385 = " ";
var G__128386 = (function (){var G__128431 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128432 = "here>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128431,G__128432) : tailrecursion.hoplon.span.call(null,G__128431,G__128432));
})();
var G__128387 = " (";
var G__128388 = (function (){var G__128433 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128434 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128433,G__128434) : tailrecursion.hoplon.span.call(null,G__128433,G__128434));
})();
var G__128389 = " (";
var G__128390 = (function (){var G__128435 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128436 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128435,G__128436) : tailrecursion.hoplon.span.call(null,G__128435,G__128436));
})();
var G__128391 = (function (){var G__128437 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128438 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128437,G__128438) : tailrecursion.hoplon.span.call(null,G__128437,G__128438));
})();
var G__128392 = ") (";
var G__128393 = (function (){var G__128439 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128440 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128439,G__128440) : tailrecursion.hoplon.span.call(null,G__128439,G__128440));
})();
var G__128394 = (function (){var G__128441 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128442 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128441,G__128442) : tailrecursion.hoplon.span.call(null,G__128441,G__128442));
})();
var G__128395 = ")";
var G__128396 = (function (){var G__128443 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128444 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128443,G__128444) : tailrecursion.hoplon.span.call(null,G__128443,G__128444));
})();
var G__128397 = "(";
var G__128398 = (function (){var G__128445 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128446 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128445,G__128446) : tailrecursion.hoplon.span.call(null,G__128445,G__128446));
})();
var G__128399 = (function (){var G__128447 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128448 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128447,G__128448) : tailrecursion.hoplon.span.call(null,G__128447,G__128448));
})();
var G__128400 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45(G__128356,G__128357,G__128358,G__128359,G__128360,G__128361,G__128362,G__128363,G__128364,G__128365,G__128366,G__128367,G__128368,G__128369,G__128370,G__128371,G__128372,G__128373,G__128374,G__128375,G__128376,G__128377,G__128378,G__128379,G__128380,G__128381,G__128382,G__128383,G__128384,G__128385,G__128386,G__128387,G__128388,G__128389,G__128390,G__128391,G__128392,G__128393,G__128394,G__128395,G__128396,G__128397,G__128398,G__128399,G__128400) : tailrecursion.hoplon.pre.call(null,G__128356,G__128357,G__128358,G__128359,G__128360,G__128361,G__128362,G__128363,G__128364,G__128365,G__128366,G__128367,G__128368,G__128369,G__128370,G__128371,G__128372,G__128373,G__128374,G__128375,G__128376,G__128377,G__128378,G__128379,G__128380,G__128381,G__128382,G__128383,G__128384,G__128385,G__128386,G__128387,G__128388,G__128389,G__128390,G__128391,G__128392,G__128393,G__128394,G__128395,G__128396,G__128397,G__128398,G__128399,G__128400));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__128354,G__128355) : tailrecursion.hoplon.div.call(null,G__128354,G__128355));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__128353) : tailrecursion.hoplon.div.call(null,G__128353));
})(),(function (){var G__128449 = cljs.core.PersistentArrayMap.EMPTY;
var G__128450 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This ",(function (){var G__128451 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"[thing1 intial-value1]"], null);
var G__128452 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128451,G__128452) : tailrecursion.hoplon.markdown.code_node.call(null,G__128451,G__128452));
})()," defines ",(function (){var G__128453 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"thing1"], null);
var G__128454 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128453,G__128454) : tailrecursion.hoplon.markdown.code_node.call(null,G__128453,G__128454));
})()," to be ",(function (){var G__128455 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"value1"], null);
var G__128456 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128455,G__128456) : tailrecursion.hoplon.markdown.code_node.call(null,G__128455,G__128456));
})()," for the first iteration, then when you call ",(function (){var G__128457 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"recur"], null);
var G__128458 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128457,G__128458) : tailrecursion.hoplon.markdown.code_node.call(null,G__128457,G__128458));
})(),", it goes back to loop with the new values given (in the same order they appear in the ",(function (){var G__128459 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"loop"], null);
var G__128460 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128459,G__128460) : tailrecursion.hoplon.markdown.code_node.call(null,G__128459,G__128460));
})()," bindings)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128449,G__128450) : tailrecursion.hoplon.markdown.para_node.call(null,G__128449,G__128450));
})(),(function (){var G__128461 = cljs.core.PersistentArrayMap.EMPTY;
var G__128462 = new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such nesting of definitions, called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["block structure"], null)], 0)),", is basically the right solution to the simplest name-packaging problem. But there is a better idea lurking here. In addition to internalizing the definitions of the auxiliary procedures, we can simplify them. Since ",(function (){var G__128463 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__128464 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128463,G__128464) : tailrecursion.hoplon.markdown.code_node.call(null,G__128463,G__128464));
})()," is bound in the definition of ",(function (){var G__128465 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__128466 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128465,G__128466) : tailrecursion.hoplon.markdown.code_node.call(null,G__128465,G__128466));
})(),", the procedures ",(function (){var G__128467 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__128468 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128467,G__128468) : tailrecursion.hoplon.markdown.code_node.call(null,G__128467,G__128468));
})(),", ",(function (){var G__128469 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"improve"], null);
var G__128470 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128469,G__128470) : tailrecursion.hoplon.markdown.code_node.call(null,G__128469,G__128470));
})(),", and ",(function (){var G__128471 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt-iter"], null);
var G__128472 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128471,G__128472) : tailrecursion.hoplon.markdown.code_node.call(null,G__128471,G__128472));
})(),", which are defined internally to ",(function (){var G__128473 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__128474 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128473,G__128474) : tailrecursion.hoplon.markdown.code_node.call(null,G__128473,G__128474));
})(),", are in the scope of ",(function (){var G__128475 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__128476 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128475,G__128476) : tailrecursion.hoplon.markdown.code_node.call(null,G__128475,G__128476));
})(),". Thus, it is not necessary to pass ",(function (){var G__128477 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__128478 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128477,G__128478) : tailrecursion.hoplon.markdown.code_node.call(null,G__128477,G__128478));
})()," explicitly to each of these procedures. Instead, we allow ",(function (){var G__128479 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__128480 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128479,G__128480) : tailrecursion.hoplon.markdown.code_node.call(null,G__128479,G__128480));
})()," to be a free variable in the internal definitions, as shown below. Then ",(function (){var G__128481 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__128482 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128481,G__128482) : tailrecursion.hoplon.markdown.code_node.call(null,G__128481,G__128482));
})()," gets its value from the argument with which the enclosing procedure ",(function (){var G__128483 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__128484 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__128483,G__128484) : tailrecursion.hoplon.markdown.code_node.call(null,G__128483,G__128484));
})()," is called. This discipline is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["lexical scoping"], null)], 0)),".",(function (){var G__128485 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__128486 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lexical scoping dictates that free variables in a procedure are taken to refer to bindings made by enclosing procedure definitions; that is, they are looked up in the environment in which the procedure was defined. We will see how this works in detail in chapter 3 when we study environments and the detailed behavior of the interpreter."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__128485,G__128486) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__128485,G__128486));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128461,G__128462) : tailrecursion.hoplon.markdown.para_node.call(null,G__128461,G__128462));
})(),(function (){var G__128487 = cljs.core.PersistentArrayMap.EMPTY;
var G__128488 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__128489 = cljs.core.PersistentArrayMap.EMPTY;
var G__128490 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This would still work in Clojure, if one were so inclined, it would just define all of these functions globally (as is explained above)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128489,G__128490) : tailrecursion.hoplon.markdown.para_node.call(null,G__128489,G__128490));
})()], null);
return (tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2(G__128487,G__128488) : tailrecursion.hoplon.markdown.block_quote_node.call(null,G__128487,G__128488));
})(),(function (){var G__128491 = (function (){var G__128492 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__128493 = (function (){var G__128494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__128495 = "(";
var G__128496 = (function (){var G__128557 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128558 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128557,G__128558) : tailrecursion.hoplon.span.call(null,G__128557,G__128558));
})();
var G__128497 = (function (){var G__128559 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128560 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128559,G__128560) : tailrecursion.hoplon.span.call(null,G__128559,G__128560));
})();
var G__128498 = " [";
var G__128499 = (function (){var G__128561 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128562 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128561,G__128562) : tailrecursion.hoplon.span.call(null,G__128561,G__128562));
})();
var G__128500 = "]\n  (";
var G__128501 = (function (){var G__128563 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128564 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128563,G__128564) : tailrecursion.hoplon.span.call(null,G__128563,G__128564));
})();
var G__128502 = (function (){var G__128565 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128566 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128565,G__128566) : tailrecursion.hoplon.span.call(null,G__128565,G__128566));
})();
var G__128503 = " [";
var G__128504 = (function (){var G__128567 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128568 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128567,G__128568) : tailrecursion.hoplon.span.call(null,G__128567,G__128568));
})();
var G__128505 = "]\n    (";
var G__128506 = (function (){var G__128569 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128570 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128569,G__128570) : tailrecursion.hoplon.span.call(null,G__128569,G__128570));
})();
var G__128507 = "(";
var G__128508 = (function (){var G__128571 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128572 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128571,G__128572) : tailrecursion.hoplon.span.call(null,G__128571,G__128572));
})();
var G__128509 = " (";
var G__128510 = (function (){var G__128573 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128574 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128573,G__128574) : tailrecursion.hoplon.span.call(null,G__128573,G__128574));
})();
var G__128511 = "(";
var G__128512 = (function (){var G__128575 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128576 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128575,G__128576) : tailrecursion.hoplon.span.call(null,G__128575,G__128576));
})();
var G__128513 = " ";
var G__128514 = (function (){var G__128577 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128578 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128577,G__128578) : tailrecursion.hoplon.span.call(null,G__128577,G__128578));
})();
var G__128515 = ") ";
var G__128516 = (function (){var G__128579 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128580 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128579,G__128580) : tailrecursion.hoplon.span.call(null,G__128579,G__128580));
})();
var G__128517 = ")) ";
var G__128518 = (function (){var G__128581 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128582 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128581,G__128582) : tailrecursion.hoplon.span.call(null,G__128581,G__128582));
})();
var G__128519 = "))\n  (";
var G__128520 = (function (){var G__128583 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128584 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128583,G__128584) : tailrecursion.hoplon.span.call(null,G__128583,G__128584));
})();
var G__128521 = (function (){var G__128585 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128586 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128585,G__128586) : tailrecursion.hoplon.span.call(null,G__128585,G__128586));
})();
var G__128522 = " [";
var G__128523 = (function (){var G__128587 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128588 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128587,G__128588) : tailrecursion.hoplon.span.call(null,G__128587,G__128588));
})();
var G__128524 = "]\n    (";
var G__128525 = (function (){var G__128589 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128590 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128589,G__128590) : tailrecursion.hoplon.span.call(null,G__128589,G__128590));
})();
var G__128526 = " ";
var G__128527 = (function (){var G__128591 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128592 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128591,G__128592) : tailrecursion.hoplon.span.call(null,G__128591,G__128592));
})();
var G__128528 = " (";
var G__128529 = (function (){var G__128593 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128594 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128593,G__128594) : tailrecursion.hoplon.span.call(null,G__128593,G__128594));
})();
var G__128530 = (function (){var G__128595 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128596 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128595,G__128596) : tailrecursion.hoplon.span.call(null,G__128595,G__128596));
})();
var G__128531 = " ";
var G__128532 = (function (){var G__128597 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128598 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128597,G__128598) : tailrecursion.hoplon.span.call(null,G__128597,G__128598));
})();
var G__128533 = ")))\n  (";
var G__128534 = (function (){var G__128599 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128600 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128599,G__128600) : tailrecursion.hoplon.span.call(null,G__128599,G__128600));
})();
var G__128535 = (function (){var G__128601 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128602 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128601,G__128602) : tailrecursion.hoplon.span.call(null,G__128601,G__128602));
})();
var G__128536 = " [";
var G__128537 = (function (){var G__128603 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128604 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128603,G__128604) : tailrecursion.hoplon.span.call(null,G__128603,G__128604));
})();
var G__128538 = "]\n    (";
var G__128539 = (function (){var G__128605 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__128606 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128605,G__128606) : tailrecursion.hoplon.span.call(null,G__128605,G__128606));
})();
var G__128540 = "(";
var G__128541 = (function (){var G__128607 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128608 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128607,G__128608) : tailrecursion.hoplon.span.call(null,G__128607,G__128608));
})();
var G__128542 = " ";
var G__128543 = (function (){var G__128609 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128610 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128609,G__128610) : tailrecursion.hoplon.span.call(null,G__128609,G__128610));
})();
var G__128544 = ")\n        ";
var G__128545 = (function (){var G__128611 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128612 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128611,G__128612) : tailrecursion.hoplon.span.call(null,G__128611,G__128612));
})();
var G__128546 = "\n        (";
var G__128547 = (function (){var G__128613 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128614 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128613,G__128614) : tailrecursion.hoplon.span.call(null,G__128613,G__128614));
})();
var G__128548 = " (";
var G__128549 = (function (){var G__128615 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128616 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128615,G__128616) : tailrecursion.hoplon.span.call(null,G__128615,G__128616));
})();
var G__128550 = " ";
var G__128551 = (function (){var G__128617 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__128618 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128617,G__128618) : tailrecursion.hoplon.span.call(null,G__128617,G__128618));
})();
var G__128552 = "))))\n  (";
var G__128553 = (function (){var G__128619 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__128620 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128619,G__128620) : tailrecursion.hoplon.span.call(null,G__128619,G__128620));
})();
var G__128554 = " ";
var G__128555 = (function (){var G__128621 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128622 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128621,G__128622) : tailrecursion.hoplon.span.call(null,G__128621,G__128622));
})();
var G__128556 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63(G__128494,G__128495,G__128496,G__128497,G__128498,G__128499,G__128500,G__128501,G__128502,G__128503,G__128504,G__128505,G__128506,G__128507,G__128508,G__128509,G__128510,G__128511,G__128512,G__128513,G__128514,G__128515,G__128516,G__128517,G__128518,G__128519,G__128520,G__128521,G__128522,G__128523,G__128524,G__128525,G__128526,G__128527,G__128528,G__128529,G__128530,G__128531,G__128532,G__128533,G__128534,G__128535,G__128536,G__128537,G__128538,G__128539,G__128540,G__128541,G__128542,G__128543,G__128544,G__128545,G__128546,G__128547,G__128548,G__128549,G__128550,G__128551,G__128552,G__128553,G__128554,G__128555,G__128556) : tailrecursion.hoplon.pre.call(null,G__128494,G__128495,G__128496,G__128497,G__128498,G__128499,G__128500,G__128501,G__128502,G__128503,G__128504,G__128505,G__128506,G__128507,G__128508,G__128509,G__128510,G__128511,G__128512,G__128513,G__128514,G__128515,G__128516,G__128517,G__128518,G__128519,G__128520,G__128521,G__128522,G__128523,G__128524,G__128525,G__128526,G__128527,G__128528,G__128529,G__128530,G__128531,G__128532,G__128533,G__128534,G__128535,G__128536,G__128537,G__128538,G__128539,G__128540,G__128541,G__128542,G__128543,G__128544,G__128545,G__128546,G__128547,G__128548,G__128549,G__128550,G__128551,G__128552,G__128553,G__128554,G__128555,G__128556));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__128492,G__128493) : tailrecursion.hoplon.div.call(null,G__128492,G__128493));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__128491) : tailrecursion.hoplon.div.call(null,G__128491));
})(),(function (){var G__128623 = cljs.core.PersistentArrayMap.EMPTY;
var G__128624 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will use block structure extensively to help us break up large programs into tractable pieces.",(function (){var G__128625 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__128626 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Embedded definitions must come first in a procedure body. The management is not responsible for the consequences of running programs that intertwine definition and use."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__128625,G__128626) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__128625,G__128626));
})()," The idea of block structure originated with the programming language Algol 60. It appears in most advanced programming languages and is an important tool for helping to organize the construction of large programs."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128623,G__128624) : tailrecursion.hoplon.markdown.para_node.call(null,G__128623,G__128624));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127879;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127878;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_127877;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_127876;
}})()], 0));
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27(G__124129,G__124130,G__124131,G__124132,G__124133,G__124134,G__124135,G__124136,G__124137,G__124138,G__124139,G__124140,G__124141,G__124142,G__124143,G__124144,G__124145,G__124146,G__124147,G__124148,G__124149,G__124150,G__124151,G__124152,G__124153,G__124154,G__124155) : tailrecursion.hoplon.div.call(null,G__124129,G__124130,G__124131,G__124132,G__124133,G__124134,G__124135,G__124136,G__124137,G__124138,G__124139,G__124140,G__124141,G__124142,G__124143,G__124144,G__124145,G__124146,G__124147,G__124148,G__124149,G__124150,G__124151,G__124152,G__124153,G__124154,G__124155));
};
var content$sicp$texts$ch1sect1$content = function (var_args){
var args__10403__auto__ = null;
if (arguments.length > 0) {
var G__128627__i = 0, G__128627__a = new Array(arguments.length -  0);
while (G__128627__i < G__128627__a.length) {G__128627__a[G__128627__i] = arguments[G__128627__i + 0]; ++G__128627__i;}
  args__10403__auto__ = new cljs.core.IndexedSeq(G__128627__a,0);
} 
return content$sicp$texts$ch1sect1$content__delegate.call(this,args__10403__auto__);};
content$sicp$texts$ch1sect1$content.cljs$lang$maxFixedArity = 0;
content$sicp$texts$ch1sect1$content.cljs$lang$applyTo = (function (arglist__128628){
var args__10403__auto__ = cljs.core.seq(arglist__128628);
return content$sicp$texts$ch1sect1$content__delegate(args__10403__auto__);
});
content$sicp$texts$ch1sect1$content.cljs$core$IFn$_invoke$arity$variadic = content$sicp$texts$ch1sect1$content__delegate;
return content$sicp$texts$ch1sect1$content;
})()
;
