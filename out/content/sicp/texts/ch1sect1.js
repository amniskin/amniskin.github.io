// Compiled by ClojureScript 0.0-3308 {:static-fns true, :optimize-constants true}
goog.provide('content.sicp.texts.ch1sect1');
goog.require('cljs.core');
goog.require('tailrecursion.hoplon.markdown');
goog.require('content.sicp.book_data');
goog.require('tailrecursion.hoplon');
goog.require('tailrecursion.javelin');
/**
 * @param {...*} var_args
 */
content.sicp.texts.ch1sect1.content = (function() { 
var content$sicp$texts$ch1sect1$content__delegate = function (args__10403__auto__){
var vec__128846 = tailrecursion.hoplon.parse_args(args__10403__auto__);
var attr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__128846,(0),null);
var kids = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__128846,(1),null);
var G__128847 = cljs.core.PersistentArrayMap.EMPTY;
var G__128848 = content.sicp.book_data.sect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"The Elements of Programming"], null),(function (){var _STAR_references_STAR_128874 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_128875 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_128876 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_128877 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__128878 = cljs.core.PersistentArrayMap.EMPTY;
var G__128879 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes. Thus, when we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three mechanisms for accomplishing this:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128878,G__128879) : tailrecursion.hoplon.markdown.para_node.call(null,G__128878,G__128879));
})(),(function (){var G__128880 = cljs.core.PersistentArrayMap.EMPTY;
var G__128881 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__128882 = cljs.core.PersistentArrayMap.EMPTY;
var G__128883 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__128884 = cljs.core.PersistentArrayMap.EMPTY;
var G__128885 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"**",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["primitive expressions"], null)], 0)),", which represent the simplest entities the language is concerned with,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128884,G__128885) : tailrecursion.hoplon.markdown.para_node.call(null,G__128884,G__128885));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__128882,G__128883) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__128882,G__128883));
})(),(function (){var G__128886 = cljs.core.PersistentArrayMap.EMPTY;
var G__128887 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_128888 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_128889 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__128890 = cljs.core.PersistentArrayMap.EMPTY;
var G__128891 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"**",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of combination"], null)], 0)),", by which compound elements are built from simpler ones, and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128890,G__128891) : tailrecursion.hoplon.markdown.para_node.call(null,G__128890,G__128891));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_128889;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_128888;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__128886,G__128887) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__128886,G__128887));
})(),(function (){var G__128892 = cljs.core.PersistentArrayMap.EMPTY;
var G__128893 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_128894 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_128895 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__128896 = cljs.core.PersistentArrayMap.EMPTY;
var G__128897 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"**",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,true], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["means of abstraction"], null)], 0)),", by which compound elements can be named and manipulated as units."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128896,G__128897) : tailrecursion.hoplon.markdown.para_node.call(null,G__128896,G__128897));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_128895;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_128894;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__128892,G__128893) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__128892,G__128893));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__128880,G__128881) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__128880,G__128881));
})(),(function (){var G__128898 = cljs.core.PersistentArrayMap.EMPTY;
var G__128899 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In programming, we deal with two kinds of elements: procedures and data. (Later we will discover that they are really not so distinct.) Informally, data is ``stuff",(function (){var G__128900 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__128901 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__128900,G__128901) : tailrecursion.hoplon.markdown.simple_node.call(null,G__128900,G__128901));
})(),(function (){var G__128902 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__128903 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__128902,G__128903) : tailrecursion.hoplon.markdown.simple_node.call(null,G__128902,G__128903));
})()," that we want to manipulate, and procedures are descriptions of the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive procedures and should have methods for combining and abstracting procedures and data."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128898,G__128899) : tailrecursion.hoplon.markdown.para_node.call(null,G__128898,G__128899));
})(),(function (){var G__128904 = cljs.core.PersistentArrayMap.EMPTY;
var G__128905 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this chapter we will deal only with simple numerical data so that we can focus on the rules for building procedures.",(function (){var G__128906 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__128907 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The characterization of numbers as ",(function (){var G__128908 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__128909 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["simple data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__128908,G__128909) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__128908,G__128909));
})()," is a barefaced bluff. In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language. Some typical issues involved are these: Some computer systems distinguish ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["integers"], null)], 0)),", such as 2, from ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["real numbers"], null)], 0)),", such as 2.71. Is the real number 2.00 different from the integer 2? Are the arithmetic operations used for integers the same as the operations used for real numbers? Does 6 divided by 2 produce 3, or 3.0? How large a number can we represent? How many decimal places of accuracy can we represent? Is the range of integers the same as the range of real numbers? Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors ",(function (){var G__128910 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__128911 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__128910,G__128911) : tailrecursion.hoplon.markdown.simple_node.call(null,G__128910,G__128911));
})()," the entire science of numerical analysis. Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems. The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__128906,G__128907) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__128906,G__128907));
})()," In later chapters we will see that these same rules allow us to build procedures to manipulate compound data as well."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128904,G__128905) : tailrecursion.hoplon.markdown.para_node.call(null,G__128904,G__128905));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_128877;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_128876;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_128875;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_128874;
}})()], 0));
var G__128849 = "";
var G__128850 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Expressions"], null),(function (){var _STAR_references_STAR_128912 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_128913 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_128914 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_128915 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 24, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__128916 = cljs.core.PersistentArrayMap.EMPTY;
var G__128917 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One easy way to get started at programming is to examine some typical interactions with an interpreter for the Scheme dialect of Lisp. Imagine that you are sitting at a computer terminal. You type an ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["expression"], null)], 0)),", and the interpreter responds by displaying the result of its evaluating that expression."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128916,G__128917) : tailrecursion.hoplon.markdown.para_node.call(null,G__128916,G__128917));
})(),(function (){var G__128918 = cljs.core.PersistentArrayMap.EMPTY;
var G__128919 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One kind of primitive expression you might type is a number. (More precisely, the expression that you type consists of the numerals that represent the number in base 10.) If you present Lisp with a number"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128918,G__128919) : tailrecursion.hoplon.markdown.para_node.call(null,G__128918,G__128919));
})(),(function (){var G__128920 = cljs.core.PersistentArrayMap.EMPTY;
var G__128921 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128920,G__128921) : tailrecursion.hoplon.markdown.para_node.call(null,G__128920,G__128921));
})(),(function (){var G__128922 = cljs.core.PersistentArrayMap.EMPTY;
var G__128923 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the interpreter will respond by printing",(function (){var G__128924 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__128925 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, when we wish to emphasize the distinction between the input typed by the user and the response printed by the interpreter, we will show the latter in slanted characters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__128924,G__128925) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__128924,G__128925));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128922,G__128923) : tailrecursion.hoplon.markdown.para_node.call(null,G__128922,G__128923));
})(),(function (){var G__128926 = cljs.core.PersistentArrayMap.EMPTY;
var G__128927 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["486"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128926,G__128927) : tailrecursion.hoplon.markdown.para_node.call(null,G__128926,G__128927));
})(),(function (){var G__128928 = cljs.core.PersistentArrayMap.EMPTY;
var G__128929 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions representing numbers may be combined with an expression representing a primitive procedure (such as + or ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,false,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [") to form a compound expression that represents the application of the procedure to those numbers. For example:"], null)], 0))], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__128928,G__128929) : tailrecursion.hoplon.markdown.para_node.call(null,G__128928,G__128929));
})(),(function (){var G__128930 = (function (){var G__128931 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__128932 = (function (){var G__128933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__128934 = "(";
var G__128935 = (function (){var G__128942 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128943 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128942,G__128943) : tailrecursion.hoplon.span.call(null,G__128942,G__128943));
})();
var G__128936 = (function (){var G__128944 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128945 = "137";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128944,G__128945) : tailrecursion.hoplon.span.call(null,G__128944,G__128945));
})();
var G__128937 = " ";
var G__128938 = (function (){var G__128946 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128947 = "349";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128946,G__128947) : tailrecursion.hoplon.span.call(null,G__128946,G__128947));
})();
var G__128939 = ")\n";
var G__128940 = (function (){var G__128948 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128949 = "486";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128948,G__128949) : tailrecursion.hoplon.span.call(null,G__128948,G__128949));
})();
var G__128941 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__128933,G__128934,G__128935,G__128936,G__128937,G__128938,G__128939,G__128940,G__128941) : tailrecursion.hoplon.pre.call(null,G__128933,G__128934,G__128935,G__128936,G__128937,G__128938,G__128939,G__128940,G__128941));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__128931,G__128932) : tailrecursion.hoplon.div.call(null,G__128931,G__128932));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__128930) : tailrecursion.hoplon.div.call(null,G__128930));
})(),(function (){var G__128950 = (function (){var G__128951 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__128952 = (function (){var G__128953 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__128954 = "(";
var G__128955 = (function (){var G__128962 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128963 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128962,G__128963) : tailrecursion.hoplon.span.call(null,G__128962,G__128963));
})();
var G__128956 = (function (){var G__128964 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128965 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128964,G__128965) : tailrecursion.hoplon.span.call(null,G__128964,G__128965));
})();
var G__128957 = " ";
var G__128958 = (function (){var G__128966 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128967 = "334";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128966,G__128967) : tailrecursion.hoplon.span.call(null,G__128966,G__128967));
})();
var G__128959 = ")\n";
var G__128960 = (function (){var G__128968 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128969 = "666";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128968,G__128969) : tailrecursion.hoplon.span.call(null,G__128968,G__128969));
})();
var G__128961 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__128953,G__128954,G__128955,G__128956,G__128957,G__128958,G__128959,G__128960,G__128961) : tailrecursion.hoplon.pre.call(null,G__128953,G__128954,G__128955,G__128956,G__128957,G__128958,G__128959,G__128960,G__128961));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__128951,G__128952) : tailrecursion.hoplon.div.call(null,G__128951,G__128952));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__128950) : tailrecursion.hoplon.div.call(null,G__128950));
})(),(function (){var G__128970 = (function (){var G__128971 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__128972 = (function (){var G__128973 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__128974 = "(";
var G__128975 = (function (){var G__128982 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__128983 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128982,G__128983) : tailrecursion.hoplon.span.call(null,G__128982,G__128983));
})();
var G__128976 = (function (){var G__128984 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128985 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128984,G__128985) : tailrecursion.hoplon.span.call(null,G__128984,G__128985));
})();
var G__128977 = " ";
var G__128978 = (function (){var G__128986 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128987 = "99";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128986,G__128987) : tailrecursion.hoplon.span.call(null,G__128986,G__128987));
})();
var G__128979 = ")\n";
var G__128980 = (function (){var G__128988 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__128989 = "495";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__128988,G__128989) : tailrecursion.hoplon.span.call(null,G__128988,G__128989));
})();
var G__128981 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__128973,G__128974,G__128975,G__128976,G__128977,G__128978,G__128979,G__128980,G__128981) : tailrecursion.hoplon.pre.call(null,G__128973,G__128974,G__128975,G__128976,G__128977,G__128978,G__128979,G__128980,G__128981));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__128971,G__128972) : tailrecursion.hoplon.div.call(null,G__128971,G__128972));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__128970) : tailrecursion.hoplon.div.call(null,G__128970));
})(),(function (){var G__128990 = (function (){var G__128991 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__128992 = (function (){var G__128993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__128994 = "(";
var G__128995 = (function (){var G__129002 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129003 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129002,G__129003) : tailrecursion.hoplon.span.call(null,G__129002,G__129003));
})();
var G__128996 = (function (){var G__129004 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129005 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129004,G__129005) : tailrecursion.hoplon.span.call(null,G__129004,G__129005));
})();
var G__128997 = " ";
var G__128998 = (function (){var G__129006 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129007 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129006,G__129007) : tailrecursion.hoplon.span.call(null,G__129006,G__129007));
})();
var G__128999 = ")\n";
var G__129000 = (function (){var G__129008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129009 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129008,G__129009) : tailrecursion.hoplon.span.call(null,G__129008,G__129009));
})();
var G__129001 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__128993,G__128994,G__128995,G__128996,G__128997,G__128998,G__128999,G__129000,G__129001) : tailrecursion.hoplon.pre.call(null,G__128993,G__128994,G__128995,G__128996,G__128997,G__128998,G__128999,G__129000,G__129001));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__128991,G__128992) : tailrecursion.hoplon.div.call(null,G__128991,G__128992));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__128990) : tailrecursion.hoplon.div.call(null,G__128990));
})(),(function (){var G__129010 = (function (){var G__129011 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129012 = (function (){var G__129013 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129014 = "(";
var G__129015 = (function (){var G__129022 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129023 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129022,G__129023) : tailrecursion.hoplon.span.call(null,G__129022,G__129023));
})();
var G__129016 = (function (){var G__129024 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129025 = "2.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129024,G__129025) : tailrecursion.hoplon.span.call(null,G__129024,G__129025));
})();
var G__129017 = " ";
var G__129018 = (function (){var G__129026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129027 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129026,G__129027) : tailrecursion.hoplon.span.call(null,G__129026,G__129027));
})();
var G__129019 = ")\n";
var G__129020 = (function (){var G__129028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129029 = "12.7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129028,G__129029) : tailrecursion.hoplon.span.call(null,G__129028,G__129029));
})();
var G__129021 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__129013,G__129014,G__129015,G__129016,G__129017,G__129018,G__129019,G__129020,G__129021) : tailrecursion.hoplon.pre.call(null,G__129013,G__129014,G__129015,G__129016,G__129017,G__129018,G__129019,G__129020,G__129021));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129011,G__129012) : tailrecursion.hoplon.div.call(null,G__129011,G__129012));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129010) : tailrecursion.hoplon.div.call(null,G__129010));
})(),(function (){var G__129030 = cljs.core.PersistentArrayMap.EMPTY;
var G__129031 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Expressions such as these, formed by delimiting a list of expressions within parentheses in order to denote procedure application, are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["combinations"], null)], 0)),". The leftmost element in the list is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operator"], null)], 0)),", and the other elements are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["operands"], null)], 0)),". The value of a combination is obtained by applying the procedure specified by the operator to the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["arguments"], null)], 0))," that are the values of the operands."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129030,G__129031) : tailrecursion.hoplon.markdown.para_node.call(null,G__129030,G__129031));
})(),(function (){var G__129032 = cljs.core.PersistentArrayMap.EMPTY;
var G__129033 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The convention of placing the operator to the left of the operands is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["prefix notation"], null)], 0)),", and it may be somewhat confusing at first because it departs significantly from the customary mathematical convention. Prefix notation has several advantages, however. One of them is that it can accommodate procedures that may take an arbitrary number of arguments, as in the following examples:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129032,G__129033) : tailrecursion.hoplon.markdown.para_node.call(null,G__129032,G__129033));
})(),(function (){var G__129034 = (function (){var G__129035 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129036 = (function (){var G__129037 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129038 = "(";
var G__129039 = (function (){var G__129050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129051 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129050,G__129051) : tailrecursion.hoplon.span.call(null,G__129050,G__129051));
})();
var G__129040 = (function (){var G__129052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129053 = "21";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129052,G__129053) : tailrecursion.hoplon.span.call(null,G__129052,G__129053));
})();
var G__129041 = " ";
var G__129042 = (function (){var G__129054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129055 = "35";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129054,G__129055) : tailrecursion.hoplon.span.call(null,G__129054,G__129055));
})();
var G__129043 = " ";
var G__129044 = (function (){var G__129056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129057 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129056,G__129057) : tailrecursion.hoplon.span.call(null,G__129056,G__129057));
})();
var G__129045 = " ";
var G__129046 = (function (){var G__129058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129059 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129058,G__129059) : tailrecursion.hoplon.span.call(null,G__129058,G__129059));
})();
var G__129047 = ")\n";
var G__129048 = (function (){var G__129060 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129061 = "75";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129060,G__129061) : tailrecursion.hoplon.span.call(null,G__129060,G__129061));
})();
var G__129049 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__129037,G__129038,G__129039,G__129040,G__129041,G__129042,G__129043,G__129044,G__129045,G__129046,G__129047,G__129048,G__129049) : tailrecursion.hoplon.pre.call(null,G__129037,G__129038,G__129039,G__129040,G__129041,G__129042,G__129043,G__129044,G__129045,G__129046,G__129047,G__129048,G__129049));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129035,G__129036) : tailrecursion.hoplon.div.call(null,G__129035,G__129036));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129034) : tailrecursion.hoplon.div.call(null,G__129034));
})(),(function (){var G__129062 = (function (){var G__129063 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129064 = (function (){var G__129065 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129066 = "(";
var G__129067 = (function (){var G__129076 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129077 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129076,G__129077) : tailrecursion.hoplon.span.call(null,G__129076,G__129077));
})();
var G__129068 = (function (){var G__129078 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129079 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129078,G__129079) : tailrecursion.hoplon.span.call(null,G__129078,G__129079));
})();
var G__129069 = " ";
var G__129070 = (function (){var G__129080 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129081 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129080,G__129081) : tailrecursion.hoplon.span.call(null,G__129080,G__129081));
})();
var G__129071 = " ";
var G__129072 = (function (){var G__129082 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129083 = "12";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129082,G__129083) : tailrecursion.hoplon.span.call(null,G__129082,G__129083));
})();
var G__129073 = ")\n";
var G__129074 = (function (){var G__129084 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129085 = "1200";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129084,G__129085) : tailrecursion.hoplon.span.call(null,G__129084,G__129085));
})();
var G__129075 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__129065,G__129066,G__129067,G__129068,G__129069,G__129070,G__129071,G__129072,G__129073,G__129074,G__129075) : tailrecursion.hoplon.pre.call(null,G__129065,G__129066,G__129067,G__129068,G__129069,G__129070,G__129071,G__129072,G__129073,G__129074,G__129075));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129063,G__129064) : tailrecursion.hoplon.div.call(null,G__129063,G__129064));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129062) : tailrecursion.hoplon.div.call(null,G__129062));
})(),(function (){var G__129086 = cljs.core.PersistentArrayMap.EMPTY;
var G__129087 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["No ambiguity can arise, because the operator is always the leftmost element and the entire combination is delimited by the parentheses."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129086,G__129087) : tailrecursion.hoplon.markdown.para_node.call(null,G__129086,G__129087));
})(),(function (){var G__129088 = cljs.core.PersistentArrayMap.EMPTY;
var G__129089 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A second advantage of prefix notation is that it extends in a straightforward way to allow combinations to be ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["nested"], null)], 0)),", that is, to have combinations whose elements are themselves combinations:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129088,G__129089) : tailrecursion.hoplon.markdown.para_node.call(null,G__129088,G__129089));
})(),(function (){var G__129090 = (function (){var G__129091 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129092 = (function (){var G__129093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129094 = "(";
var G__129095 = (function (){var G__129109 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129110 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129109,G__129110) : tailrecursion.hoplon.span.call(null,G__129109,G__129110));
})();
var G__129096 = "(";
var G__129097 = (function (){var G__129111 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129112 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129111,G__129112) : tailrecursion.hoplon.span.call(null,G__129111,G__129112));
})();
var G__129098 = (function (){var G__129113 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129114 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129113,G__129114) : tailrecursion.hoplon.span.call(null,G__129113,G__129114));
})();
var G__129099 = " ";
var G__129100 = (function (){var G__129115 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129116 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129115,G__129116) : tailrecursion.hoplon.span.call(null,G__129115,G__129116));
})();
var G__129101 = ") (";
var G__129102 = (function (){var G__129117 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129118 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129117,G__129118) : tailrecursion.hoplon.span.call(null,G__129117,G__129118));
})();
var G__129103 = (function (){var G__129119 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129120 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129119,G__129120) : tailrecursion.hoplon.span.call(null,G__129119,G__129120));
})();
var G__129104 = " ";
var G__129105 = (function (){var G__129121 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129122 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129121,G__129122) : tailrecursion.hoplon.span.call(null,G__129121,G__129122));
})();
var G__129106 = "))\n";
var G__129107 = (function (){var G__129123 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129124 = "19";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129123,G__129124) : tailrecursion.hoplon.span.call(null,G__129123,G__129124));
})();
var G__129108 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__129093,G__129094,G__129095,G__129096,G__129097,G__129098,G__129099,G__129100,G__129101,G__129102,G__129103,G__129104,G__129105,G__129106,G__129107,G__129108) : tailrecursion.hoplon.pre.call(null,G__129093,G__129094,G__129095,G__129096,G__129097,G__129098,G__129099,G__129100,G__129101,G__129102,G__129103,G__129104,G__129105,G__129106,G__129107,G__129108));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129091,G__129092) : tailrecursion.hoplon.div.call(null,G__129091,G__129092));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129090) : tailrecursion.hoplon.div.call(null,G__129090));
})(),(function (){var G__129125 = cljs.core.PersistentArrayMap.EMPTY;
var G__129126 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the Lisp interpreter can evaluate. It is we humans who get confused by still relatively simple expressions such as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129125,G__129126) : tailrecursion.hoplon.markdown.para_node.call(null,G__129125,G__129126));
})(),(function (){var G__129127 = (function (){var G__129128 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129129 = (function (){var G__129130 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129131 = "(";
var G__129132 = (function (){var G__129158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129159 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129158,G__129159) : tailrecursion.hoplon.span.call(null,G__129158,G__129159));
})();
var G__129133 = "(";
var G__129134 = (function (){var G__129160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129161 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129160,G__129161) : tailrecursion.hoplon.span.call(null,G__129160,G__129161));
})();
var G__129135 = (function (){var G__129162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129163 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129162,G__129163) : tailrecursion.hoplon.span.call(null,G__129162,G__129163));
})();
var G__129136 = " (";
var G__129137 = (function (){var G__129164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129165 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129164,G__129165) : tailrecursion.hoplon.span.call(null,G__129164,G__129165));
})();
var G__129138 = "(";
var G__129139 = (function (){var G__129166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129167 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129166,G__129167) : tailrecursion.hoplon.span.call(null,G__129166,G__129167));
})();
var G__129140 = (function (){var G__129168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129169 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129168,G__129169) : tailrecursion.hoplon.span.call(null,G__129168,G__129169));
})();
var G__129141 = " ";
var G__129142 = (function (){var G__129170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129171 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129170,G__129171) : tailrecursion.hoplon.span.call(null,G__129170,G__129171));
})();
var G__129143 = ") (";
var G__129144 = (function (){var G__129172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129173 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129172,G__129173) : tailrecursion.hoplon.span.call(null,G__129172,G__129173));
})();
var G__129145 = (function (){var G__129174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129175 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129174,G__129175) : tailrecursion.hoplon.span.call(null,G__129174,G__129175));
})();
var G__129146 = " ";
var G__129147 = (function (){var G__129176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129177 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129176,G__129177) : tailrecursion.hoplon.span.call(null,G__129176,G__129177));
})();
var G__129148 = "))) (";
var G__129149 = (function (){var G__129178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129179 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129178,G__129179) : tailrecursion.hoplon.span.call(null,G__129178,G__129179));
})();
var G__129150 = "(";
var G__129151 = (function (){var G__129180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129181 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129180,G__129181) : tailrecursion.hoplon.span.call(null,G__129180,G__129181));
})();
var G__129152 = (function (){var G__129182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129183 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129182,G__129183) : tailrecursion.hoplon.span.call(null,G__129182,G__129183));
})();
var G__129153 = " ";
var G__129154 = (function (){var G__129184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129185 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129184,G__129185) : tailrecursion.hoplon.span.call(null,G__129184,G__129185));
})();
var G__129155 = ") ";
var G__129156 = (function (){var G__129186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129187 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129186,G__129187) : tailrecursion.hoplon.span.call(null,G__129186,G__129187));
})();
var G__129157 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__129130,G__129131,G__129132,G__129133,G__129134,G__129135,G__129136,G__129137,G__129138,G__129139,G__129140,G__129141,G__129142,G__129143,G__129144,G__129145,G__129146,G__129147,G__129148,G__129149,G__129150,G__129151,G__129152,G__129153,G__129154,G__129155,G__129156,G__129157) : tailrecursion.hoplon.pre.call(null,G__129130,G__129131,G__129132,G__129133,G__129134,G__129135,G__129136,G__129137,G__129138,G__129139,G__129140,G__129141,G__129142,G__129143,G__129144,G__129145,G__129146,G__129147,G__129148,G__129149,G__129150,G__129151,G__129152,G__129153,G__129154,G__129155,G__129156,G__129157));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129128,G__129129) : tailrecursion.hoplon.div.call(null,G__129128,G__129129));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129127) : tailrecursion.hoplon.div.call(null,G__129127));
})(),(function (){var G__129188 = cljs.core.PersistentArrayMap.EMPTY;
var G__129189 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which the interpreter would readily evaluate to be 57. We can help ourselves by writing such an expression in the form"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129188,G__129189) : tailrecursion.hoplon.markdown.para_node.call(null,G__129188,G__129189));
})(),(function (){var G__129190 = (function (){var G__129191 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129192 = (function (){var G__129193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129194 = "(";
var G__129195 = (function (){var G__129221 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129222 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129221,G__129222) : tailrecursion.hoplon.span.call(null,G__129221,G__129222));
})();
var G__129196 = "(";
var G__129197 = (function (){var G__129223 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129224 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129223,G__129224) : tailrecursion.hoplon.span.call(null,G__129223,G__129224));
})();
var G__129198 = (function (){var G__129225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129226 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129225,G__129226) : tailrecursion.hoplon.span.call(null,G__129225,G__129226));
})();
var G__129199 = "\n      (";
var G__129200 = (function (){var G__129227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129228 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129227,G__129228) : tailrecursion.hoplon.span.call(null,G__129227,G__129228));
})();
var G__129201 = "(";
var G__129202 = (function (){var G__129229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129230 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129229,G__129230) : tailrecursion.hoplon.span.call(null,G__129229,G__129230));
})();
var G__129203 = (function (){var G__129231 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129232 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129231,G__129232) : tailrecursion.hoplon.span.call(null,G__129231,G__129232));
})();
var G__129204 = " ";
var G__129205 = (function (){var G__129233 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129234 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129233,G__129234) : tailrecursion.hoplon.span.call(null,G__129233,G__129234));
})();
var G__129206 = ")\n         (";
var G__129207 = (function (){var G__129235 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129236 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129235,G__129236) : tailrecursion.hoplon.span.call(null,G__129235,G__129236));
})();
var G__129208 = (function (){var G__129237 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129238 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129237,G__129238) : tailrecursion.hoplon.span.call(null,G__129237,G__129238));
})();
var G__129209 = " ";
var G__129210 = (function (){var G__129239 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129240 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129239,G__129240) : tailrecursion.hoplon.span.call(null,G__129239,G__129240));
})();
var G__129211 = ")))\n   (";
var G__129212 = (function (){var G__129241 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129242 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129241,G__129242) : tailrecursion.hoplon.span.call(null,G__129241,G__129242));
})();
var G__129213 = "(";
var G__129214 = (function (){var G__129243 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129244 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129243,G__129244) : tailrecursion.hoplon.span.call(null,G__129243,G__129244));
})();
var G__129215 = (function (){var G__129245 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129246 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129245,G__129246) : tailrecursion.hoplon.span.call(null,G__129245,G__129246));
})();
var G__129216 = " ";
var G__129217 = (function (){var G__129247 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129248 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129247,G__129248) : tailrecursion.hoplon.span.call(null,G__129247,G__129248));
})();
var G__129218 = ")\n      ";
var G__129219 = (function (){var G__129249 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129250 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129249,G__129250) : tailrecursion.hoplon.span.call(null,G__129249,G__129250));
})();
var G__129220 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$28(G__129193,G__129194,G__129195,G__129196,G__129197,G__129198,G__129199,G__129200,G__129201,G__129202,G__129203,G__129204,G__129205,G__129206,G__129207,G__129208,G__129209,G__129210,G__129211,G__129212,G__129213,G__129214,G__129215,G__129216,G__129217,G__129218,G__129219,G__129220) : tailrecursion.hoplon.pre.call(null,G__129193,G__129194,G__129195,G__129196,G__129197,G__129198,G__129199,G__129200,G__129201,G__129202,G__129203,G__129204,G__129205,G__129206,G__129207,G__129208,G__129209,G__129210,G__129211,G__129212,G__129213,G__129214,G__129215,G__129216,G__129217,G__129218,G__129219,G__129220));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129191,G__129192) : tailrecursion.hoplon.div.call(null,G__129191,G__129192));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129190) : tailrecursion.hoplon.div.call(null,G__129190));
})(),(function (){var G__129251 = cljs.core.PersistentArrayMap.EMPTY;
var G__129252 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["following a formatting convention known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["pretty-printing"], null)], 0)),", in which each long combination is written so that the operands are aligned vertically. The resulting indentations display clearly the structure of the expression.",(function (){var G__129253 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__129254 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp systems typically provide features to aid the user in formatting expressions. Two especially useful features are one that automatically indents to the proper pretty-print position whenever a new line is started and one that highlights the matching left parenthesis whenever a right parenthesis is typed."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129253,G__129254) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129253,G__129254));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129251,G__129252) : tailrecursion.hoplon.markdown.para_node.call(null,G__129251,G__129252));
})(),(function (){var G__129255 = cljs.core.PersistentArrayMap.EMPTY;
var G__129256 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even with complex expressions, the interpreter always operates in the same basic cycle: It reads an expression from the terminal, evaluates the expression, and prints the result. This mode of operation is often expressed by saying that the interpreter runs in a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["read-eval-print loop"], null)], 0)),". Observe in particular that it is not necessary to explicitly instruct the interpreter to print the value of the expression.",(function (){var G__129257 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__129258 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp obeys the convention that every expression has a value. This convention, together with the old reputation of Lisp as an inefficient language, is the source of the quip by Alan Perlis (paraphrasing Oscar Wilde) that ",(function (){var G__129259 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129260 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp programmers know the value of everything but the cost of nothing."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129259,G__129260) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129259,G__129260));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129257,G__129258) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129257,G__129258));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129255,G__129256) : tailrecursion.hoplon.markdown.para_node.call(null,G__129255,G__129256));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_128915;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_128914;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_128913;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_128912;
}})()], 0));
var G__128851 = "";
var G__128852 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Naming and the Environment"], null),(function (){var _STAR_references_STAR_129261 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129262 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_129263 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129264 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129265 = cljs.core.PersistentArrayMap.EMPTY;
var G__129266 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A critical aspect of a programming language is the means it provides for using names to refer to computational objects. We say that the name identifies a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["variable"], null)], 0))," whose ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["value"], null)], 0))," is the object."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129265,G__129266) : tailrecursion.hoplon.markdown.para_node.call(null,G__129265,G__129266));
})(),(function (){var G__129267 = cljs.core.PersistentArrayMap.EMPTY;
var G__129268 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In the Scheme dialect of Lisp, we name things with ",(function (){var G__129269 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"define"], null);
var G__129270 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129269,G__129270) : tailrecursion.hoplon.markdown.code_node.call(null,G__129269,G__129270));
})(),". Typing"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129267,G__129268) : tailrecursion.hoplon.markdown.para_node.call(null,G__129267,G__129268));
})(),(function (){var G__129271 = (function (){var G__129272 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129273 = (function (){var G__129274 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129275 = "(";
var G__129276 = (function (){var G__129281 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129282 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129281,G__129282) : tailrecursion.hoplon.span.call(null,G__129281,G__129282));
})();
var G__129277 = (function (){var G__129283 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129284 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129283,G__129284) : tailrecursion.hoplon.span.call(null,G__129283,G__129284));
})();
var G__129278 = " ";
var G__129279 = (function (){var G__129285 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129286 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129285,G__129286) : tailrecursion.hoplon.span.call(null,G__129285,G__129286));
})();
var G__129280 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__129274,G__129275,G__129276,G__129277,G__129278,G__129279,G__129280) : tailrecursion.hoplon.pre.call(null,G__129274,G__129275,G__129276,G__129277,G__129278,G__129279,G__129280));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129272,G__129273) : tailrecursion.hoplon.div.call(null,G__129272,G__129273));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129271) : tailrecursion.hoplon.div.call(null,G__129271));
})(),(function (){var G__129287 = cljs.core.PersistentArrayMap.EMPTY;
var G__129288 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["causes the interpreter to associate the value 2 with the name size.",(function (){var G__129289 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__129290 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In this book, we do not show the interpreter",(function (){var G__129291 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__129292 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129291,G__129292) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129291,G__129292));
})(),"s response to evaluating definitions, since this is highly implementation-dependent."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129289,G__129290) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129289,G__129290));
})()," In Clojure we would use ",(function (){var G__129293 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__129294 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129293,G__129294) : tailrecursion.hoplon.markdown.code_node.call(null,G__129293,G__129294));
})()," to accomplish the same goal. i.e."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129287,G__129288) : tailrecursion.hoplon.markdown.para_node.call(null,G__129287,G__129288));
})(),(function (){var G__129295 = (function (){var G__129296 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129297 = (function (){var G__129298 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129299 = "(";
var G__129300 = (function (){var G__129305 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129306 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129305,G__129306) : tailrecursion.hoplon.span.call(null,G__129305,G__129306));
})();
var G__129301 = (function (){var G__129307 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129308 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129307,G__129308) : tailrecursion.hoplon.span.call(null,G__129307,G__129308));
})();
var G__129302 = " ";
var G__129303 = (function (){var G__129309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129310 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129309,G__129310) : tailrecursion.hoplon.span.call(null,G__129309,G__129310));
})();
var G__129304 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__129298,G__129299,G__129300,G__129301,G__129302,G__129303,G__129304) : tailrecursion.hoplon.pre.call(null,G__129298,G__129299,G__129300,G__129301,G__129302,G__129303,G__129304));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129296,G__129297) : tailrecursion.hoplon.div.call(null,G__129296,G__129297));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129295) : tailrecursion.hoplon.div.call(null,G__129295));
})(),(function (){var G__129311 = cljs.core.PersistentArrayMap.EMPTY;
var G__129312 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and the interpreter will now associate the value 2 with the name size. Once the name size has been associated with the number 2, we can refer to the value 2 by name:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129311,G__129312) : tailrecursion.hoplon.markdown.para_node.call(null,G__129311,G__129312));
})(),(function (){var G__129313 = (function (){var G__129314 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129315 = (function (){var G__129316 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129317 = (function (){var G__129321 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129322 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129321,G__129322) : tailrecursion.hoplon.span.call(null,G__129321,G__129322));
})();
var G__129318 = "\n";
var G__129319 = (function (){var G__129323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129324 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129323,G__129324) : tailrecursion.hoplon.span.call(null,G__129323,G__129324));
})();
var G__129320 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$5(G__129316,G__129317,G__129318,G__129319,G__129320) : tailrecursion.hoplon.pre.call(null,G__129316,G__129317,G__129318,G__129319,G__129320));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129314,G__129315) : tailrecursion.hoplon.div.call(null,G__129314,G__129315));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129313) : tailrecursion.hoplon.div.call(null,G__129313));
})(),(function (){var G__129325 = (function (){var G__129326 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129327 = (function (){var G__129328 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129329 = "(";
var G__129330 = (function (){var G__129337 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129338 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129337,G__129338) : tailrecursion.hoplon.span.call(null,G__129337,G__129338));
})();
var G__129331 = (function (){var G__129339 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129340 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129339,G__129340) : tailrecursion.hoplon.span.call(null,G__129339,G__129340));
})();
var G__129332 = " ";
var G__129333 = (function (){var G__129341 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129342 = "size";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129341,G__129342) : tailrecursion.hoplon.span.call(null,G__129341,G__129342));
})();
var G__129334 = ")\n";
var G__129335 = (function (){var G__129343 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129344 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129343,G__129344) : tailrecursion.hoplon.span.call(null,G__129343,G__129344));
})();
var G__129336 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__129328,G__129329,G__129330,G__129331,G__129332,G__129333,G__129334,G__129335,G__129336) : tailrecursion.hoplon.pre.call(null,G__129328,G__129329,G__129330,G__129331,G__129332,G__129333,G__129334,G__129335,G__129336));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129326,G__129327) : tailrecursion.hoplon.div.call(null,G__129326,G__129327));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129325) : tailrecursion.hoplon.div.call(null,G__129325));
})(),(function (){var G__129345 = cljs.core.PersistentArrayMap.EMPTY;
var G__129346 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here are further examples of the use of ",(function (){var G__129347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__129348 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129347,G__129348) : tailrecursion.hoplon.markdown.code_node.call(null,G__129347,G__129348));
})(),":"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129345,G__129346) : tailrecursion.hoplon.markdown.para_node.call(null,G__129345,G__129346));
})(),(function (){var G__129349 = (function (){var G__129350 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129351 = (function (){var G__129352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129353 = "(";
var G__129354 = (function (){var G__129388 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129389 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129388,G__129389) : tailrecursion.hoplon.span.call(null,G__129388,G__129389));
})();
var G__129355 = (function (){var G__129390 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129391 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129390,G__129391) : tailrecursion.hoplon.span.call(null,G__129390,G__129391));
})();
var G__129356 = " ";
var G__129357 = (function (){var G__129392 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129393 = "3.14159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129392,G__129393) : tailrecursion.hoplon.span.call(null,G__129392,G__129393));
})();
var G__129358 = ")\n(";
var G__129359 = (function (){var G__129394 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129395 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129394,G__129395) : tailrecursion.hoplon.span.call(null,G__129394,G__129395));
})();
var G__129360 = (function (){var G__129396 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129397 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129396,G__129397) : tailrecursion.hoplon.span.call(null,G__129396,G__129397));
})();
var G__129361 = " ";
var G__129362 = (function (){var G__129398 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129399 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129398,G__129399) : tailrecursion.hoplon.span.call(null,G__129398,G__129399));
})();
var G__129363 = ")\n(";
var G__129364 = (function (){var G__129400 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129401 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129400,G__129401) : tailrecursion.hoplon.span.call(null,G__129400,G__129401));
})();
var G__129365 = (function (){var G__129402 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129403 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129402,G__129403) : tailrecursion.hoplon.span.call(null,G__129402,G__129403));
})();
var G__129366 = " (";
var G__129367 = (function (){var G__129404 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129405 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129404,G__129405) : tailrecursion.hoplon.span.call(null,G__129404,G__129405));
})();
var G__129368 = (function (){var G__129406 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129407 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129406,G__129407) : tailrecursion.hoplon.span.call(null,G__129406,G__129407));
})();
var G__129369 = " ";
var G__129370 = (function (){var G__129408 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129409 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129408,G__129409) : tailrecursion.hoplon.span.call(null,G__129408,G__129409));
})();
var G__129371 = "))\n";
var G__129372 = (function (){var G__129410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129411 = "314.159";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129410,G__129411) : tailrecursion.hoplon.span.call(null,G__129410,G__129411));
})();
var G__129373 = "\n(";
var G__129374 = (function (){var G__129412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129413 = "def ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129412,G__129413) : tailrecursion.hoplon.span.call(null,G__129412,G__129413));
})();
var G__129375 = (function (){var G__129414 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129415 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129414,G__129415) : tailrecursion.hoplon.span.call(null,G__129414,G__129415));
})();
var G__129376 = " (";
var G__129377 = (function (){var G__129416 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129417 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129416,G__129417) : tailrecursion.hoplon.span.call(null,G__129416,G__129417));
})();
var G__129378 = (function (){var G__129418 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129419 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129418,G__129419) : tailrecursion.hoplon.span.call(null,G__129418,G__129419));
})();
var G__129379 = " ";
var G__129380 = (function (){var G__129420 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129421 = "pi";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129420,G__129421) : tailrecursion.hoplon.span.call(null,G__129420,G__129421));
})();
var G__129381 = " ";
var G__129382 = (function (){var G__129422 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129423 = "radius";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129422,G__129423) : tailrecursion.hoplon.span.call(null,G__129422,G__129423));
})();
var G__129383 = "))\n";
var G__129384 = (function (){var G__129424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129425 = "circumference";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129424,G__129425) : tailrecursion.hoplon.span.call(null,G__129424,G__129425));
})();
var G__129385 = "\n";
var G__129386 = (function (){var G__129426 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129427 = "62.8318";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129426,G__129427) : tailrecursion.hoplon.span.call(null,G__129426,G__129427));
})();
var G__129387 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__129352,G__129353,G__129354,G__129355,G__129356,G__129357,G__129358,G__129359,G__129360,G__129361,G__129362,G__129363,G__129364,G__129365,G__129366,G__129367,G__129368,G__129369,G__129370,G__129371,G__129372,G__129373,G__129374,G__129375,G__129376,G__129377,G__129378,G__129379,G__129380,G__129381,G__129382,G__129383,G__129384,G__129385,G__129386,G__129387) : tailrecursion.hoplon.pre.call(null,G__129352,G__129353,G__129354,G__129355,G__129356,G__129357,G__129358,G__129359,G__129360,G__129361,G__129362,G__129363,G__129364,G__129365,G__129366,G__129367,G__129368,G__129369,G__129370,G__129371,G__129372,G__129373,G__129374,G__129375,G__129376,G__129377,G__129378,G__129379,G__129380,G__129381,G__129382,G__129383,G__129384,G__129385,G__129386,G__129387));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129350,G__129351) : tailrecursion.hoplon.div.call(null,G__129350,G__129351));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129349) : tailrecursion.hoplon.div.call(null,G__129349));
})(),(function (){var G__129428 = cljs.core.PersistentArrayMap.EMPTY;
var G__129429 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129430 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Def"], null);
var G__129431 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129430,G__129431) : tailrecursion.hoplon.markdown.code_node.call(null,G__129430,G__129431));
})()," is our language",(function (){var G__129432 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__129433 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129432,G__129433) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129432,G__129433));
})(),"s simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the ",(function (){var G__129434 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"circumference"], null);
var G__129435 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129434,G__129435) : tailrecursion.hoplon.markdown.code_node.call(null,G__129434,G__129435));
})()," computed above. In general, computational objects may have very complex structures, and it would be extremely inconvenient to have to remember and repeat their details each time we want to use them. Indeed, complex programs are constructed by building, step by step, computational objects of increasing complexity. The interpreter makes this step-by-step program construction particularly convenient because name-object associations can be created incrementally in successive interactions. This feature encourages the incremental development and testing of programs and is largely responsible for the fact that a Lisp program usually consists of a large number of relatively simple procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129428,G__129429) : tailrecursion.hoplon.markdown.para_node.call(null,G__129428,G__129429));
})(),(function (){var G__129436 = cljs.core.PersistentArrayMap.EMPTY;
var G__129437 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It should be clear that the possibility of associating values with symbols and later retrieving them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. This memory is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["environment"], null)], 0))," (more precisely the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["global environment"], null)], 0)),", since we will see later that a computation may involve a number of different environments).",(function (){var G__129438 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__129439 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Chapter 3 will show that this notion of environment is crucial, both for understanding how the interpreter works and for implementing interpreters."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129438,G__129439) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129438,G__129439));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129436,G__129437) : tailrecursion.hoplon.markdown.para_node.call(null,G__129436,G__129437));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129264;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129263;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129262;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129261;
}})()], 0));
var G__128853 = " ";
var G__128854 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Evaluating Combinations"], null),(function (){var _STAR_references_STAR_129440 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129441 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_129442 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129443 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129444 = cljs.core.PersistentArrayMap.EMPTY;
var G__129445 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating combinations, the interpreter is itself following a procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129444,G__129445) : tailrecursion.hoplon.markdown.para_node.call(null,G__129444,G__129445));
})(),(function (){var G__129446 = cljs.core.PersistentArrayMap.EMPTY;
var G__129447 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129448 = cljs.core.PersistentArrayMap.EMPTY;
var G__129449 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129450 = cljs.core.PersistentArrayMap.EMPTY;
var G__129451 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination, do the following:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129450,G__129451) : tailrecursion.hoplon.markdown.para_node.call(null,G__129450,G__129451));
})(),(function (){var _STAR_references_STAR_129452 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129453 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129454 = cljs.core.PersistentArrayMap.EMPTY;
var G__129455 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129456 = cljs.core.PersistentArrayMap.EMPTY;
var G__129457 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_129458 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129459 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Evaluate the subexpressions of the combination."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129459;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129458;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129456,G__129457) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129456,G__129457));
})(),(function (){var G__129460 = cljs.core.PersistentArrayMap.EMPTY;
var G__129461 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_129462 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129463 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands)."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129463;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129462;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129460,G__129461) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129460,G__129461));
})()], null);
return (tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.ordered_list_node.cljs$core$IFn$_invoke$arity$2(G__129454,G__129455) : tailrecursion.hoplon.markdown.ordered_list_node.call(null,G__129454,G__129455));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129453;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129452;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129448,G__129449) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129448,G__129449));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__129446,G__129447) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__129446,G__129447));
})(),(function (){var G__129464 = cljs.core.PersistentArrayMap.EMPTY;
var G__129465 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Even this simple rule illustrates some important points about processes in general. First, observe that the first step dictates that in order to accomplish the evaluation process for a combination we must first perform the evaluation process on each element of the combination. Thus, the evaluation rule is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0))," in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.",(function (){var G__129466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__129467 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It may seem strange that the evaluation rule says, as part of the first step, that we should evaluate the leftmost element of a combination, since at this point that can only be an operator such as ",(function (){var G__129468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"+"], null);
var G__129469 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129468,G__129469) : tailrecursion.hoplon.markdown.code_node.call(null,G__129468,G__129469));
})()," or ",(function (){var G__129470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"*"], null);
var G__129471 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129470,G__129471) : tailrecursion.hoplon.markdown.code_node.call(null,G__129470,G__129471));
})()," representing a built-in primitive procedure such as addition or multiplication. We will see later that it is useful to be able to work with combinations whose operators are themselves compound expressions."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129466,G__129467) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129466,G__129467));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129464,G__129465) : tailrecursion.hoplon.markdown.para_node.call(null,G__129464,G__129465));
})(),(function (){var G__129472 = cljs.core.PersistentArrayMap.EMPTY;
var G__129473 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice how succinctly the idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process. For example, evaluating"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129472,G__129473) : tailrecursion.hoplon.markdown.para_node.call(null,G__129472,G__129473));
})(),(function (){var G__129474 = (function (){var G__129475 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129476 = (function (){var G__129477 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129478 = "(";
var G__129479 = (function (){var G__129496 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129497 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129496,G__129497) : tailrecursion.hoplon.span.call(null,G__129496,G__129497));
})();
var G__129480 = "(";
var G__129481 = (function (){var G__129498 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129499 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129498,G__129499) : tailrecursion.hoplon.span.call(null,G__129498,G__129499));
})();
var G__129482 = (function (){var G__129500 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129501 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129500,G__129501) : tailrecursion.hoplon.span.call(null,G__129500,G__129501));
})();
var G__129483 = " (";
var G__129484 = (function (){var G__129502 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129503 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129502,G__129503) : tailrecursion.hoplon.span.call(null,G__129502,G__129503));
})();
var G__129485 = (function (){var G__129504 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129505 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129504,G__129505) : tailrecursion.hoplon.span.call(null,G__129504,G__129505));
})();
var G__129486 = " ";
var G__129487 = (function (){var G__129506 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129507 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129506,G__129507) : tailrecursion.hoplon.span.call(null,G__129506,G__129507));
})();
var G__129488 = "))\n   (";
var G__129489 = (function (){var G__129508 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129509 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129508,G__129509) : tailrecursion.hoplon.span.call(null,G__129508,G__129509));
})();
var G__129490 = (function (){var G__129510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129511 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129510,G__129511) : tailrecursion.hoplon.span.call(null,G__129510,G__129511));
})();
var G__129491 = " ";
var G__129492 = (function (){var G__129512 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129513 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129512,G__129513) : tailrecursion.hoplon.span.call(null,G__129512,G__129513));
})();
var G__129493 = " ";
var G__129494 = (function (){var G__129514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129515 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129514,G__129515) : tailrecursion.hoplon.span.call(null,G__129514,G__129515));
})();
var G__129495 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__129477,G__129478,G__129479,G__129480,G__129481,G__129482,G__129483,G__129484,G__129485,G__129486,G__129487,G__129488,G__129489,G__129490,G__129491,G__129492,G__129493,G__129494,G__129495) : tailrecursion.hoplon.pre.call(null,G__129477,G__129478,G__129479,G__129480,G__129481,G__129482,G__129483,G__129484,G__129485,G__129486,G__129487,G__129488,G__129489,G__129490,G__129491,G__129492,G__129493,G__129494,G__129495));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129475,G__129476) : tailrecursion.hoplon.div.call(null,G__129475,G__129476));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129474) : tailrecursion.hoplon.div.call(null,G__129474));
})(),(function (){var G__129516 = cljs.core.PersistentArrayMap.EMPTY;
var G__129517 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["requires that the evaluation rule be applied to four different combinations. We can obtain a picture of this process by representing the combination in the form of a tree, as shown in figure 1.1. Each combination is represented by a node with branches corresponding to the operator and the operands of the combination stemming from it. The terminal nodes (that is, nodes with no branches stemming from them) represent either operators or numbers. Viewing evaluation in terms of the tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels. In general, we shall see that recursion is a very powerful technique for dealing with hierarchical, treelike objects. In fact, the ``percolate values upward",(function (){var G__129518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__129519 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129518,G__129519) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129518,G__129519));
})(),(function (){var G__129520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__129521 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129520,G__129521) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129520,G__129521));
})()," form of the evaluation rule is an example of a general kind of process known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["tree accumulation"], null)], 0)),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129516,G__129517) : tailrecursion.hoplon.markdown.para_node.call(null,G__129516,G__129517));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129443;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129442;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129441;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129440;
}})(),"",content.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$footer,"Tree representation, showing the value of each subcombination."], null)], 0)),(function (){var _STAR_references_STAR_129522 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129523 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_129524 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129525 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129526 = cljs.core.PersistentArrayMap.EMPTY;
var G__129527 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not combinations, but primitive expressions such as numerals, built-in operators, or other names. We take care of the primitive cases by stipulating that"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129526,G__129527) : tailrecursion.hoplon.markdown.para_node.call(null,G__129526,G__129527));
})(),(function (){var G__129528 = cljs.core.PersistentArrayMap.EMPTY;
var G__129529 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129530 = cljs.core.PersistentArrayMap.EMPTY;
var G__129531 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_129532 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129533 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of numerals are the numbers that they name,"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129533;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129532;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129530,G__129531) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129530,G__129531));
})(),(function (){var G__129534 = cljs.core.PersistentArrayMap.EMPTY;
var G__129535 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_129536 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129537 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of built-in operators are the machine  instruction sequences that carry out the corresponding operations, and"], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129537;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129536;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129534,G__129535) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129534,G__129535));
})(),(function (){var G__129538 = cljs.core.PersistentArrayMap.EMPTY;
var G__129539 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_129540 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129541 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["the values of other names are the objects associated with  those names in the environment."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129541;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129540;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129538,G__129539) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129538,G__129539));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__129528,G__129529) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__129528,G__129529));
})(),(function (){var G__129542 = cljs.core.PersistentArrayMap.EMPTY;
var G__129543 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We may regard the second rule as a special case of the third one by stipulating that symbols such as + and * are also included in the global environment, and are associated with the sequences of machine instructions that are their ",(function (){var G__129544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129545 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["values."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129544,G__129545) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129544,G__129545));
})()," The key point to notice is the role of the environment in determining the meaning of the symbols in expressions. In an interactive language such as Lisp, it is meaningless to speak of the value of an expression such as ",(function (){var G__129546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+\nx 1)"], null);
var G__129547 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129546,G__129547) : tailrecursion.hoplon.markdown.code_node.call(null,G__129546,G__129547));
})()," without specifying any information about the environment that would provide a meaning for the symbol ",(function (){var G__129548 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__129549 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129548,G__129549) : tailrecursion.hoplon.markdown.code_node.call(null,G__129548,G__129549));
})()," (or even for the symbol ",(function (){var G__129550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"+"], null);
var G__129551 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129550,G__129551) : tailrecursion.hoplon.markdown.code_node.call(null,G__129550,G__129551));
})(),"). As we shall see in chapter 3, the general notion of the environment as providing a context in which evaluation takes place will play an important role in our understanding of program execution."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129542,G__129543) : tailrecursion.hoplon.markdown.para_node.call(null,G__129542,G__129543));
})(),(function (){var G__129552 = cljs.core.PersistentArrayMap.EMPTY;
var G__129553 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that the evaluation rule given above does not handle definitions. For instance, evaluating ",(function (){var G__129554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(def x 3)"], null);
var G__129555 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129554,G__129555) : tailrecursion.hoplon.markdown.code_node.call(null,G__129554,G__129555));
})()," does not apply ",(function (){var G__129556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__129557 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129556,G__129557) : tailrecursion.hoplon.markdown.code_node.call(null,G__129556,G__129557));
})()," to two arguments, one of which is the value of the symbol ",(function (){var G__129558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__129559 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129558,G__129559) : tailrecursion.hoplon.markdown.code_node.call(null,G__129558,G__129559));
})()," and the other of which is 3, since the purpose of the define is precisely to associate ",(function (){var G__129560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__129561 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129560,G__129561) : tailrecursion.hoplon.markdown.code_node.call(null,G__129560,G__129561));
})()," with a value. (That is, ",(function (){var G__129562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(def x\n3)"], null);
var G__129563 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129562,G__129563) : tailrecursion.hoplon.markdown.code_node.call(null,G__129562,G__129563));
})()," is not a combination.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129552,G__129553) : tailrecursion.hoplon.markdown.para_node.call(null,G__129552,G__129553));
})(),(function (){var G__129564 = cljs.core.PersistentArrayMap.EMPTY;
var G__129565 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such exceptions to the general evaluation rule are called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["special forms"], null)], 0)),". ",(function (){var G__129566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Def"], null);
var G__129567 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129566,G__129567) : tailrecursion.hoplon.markdown.code_node.call(null,G__129566,G__129567));
})()," is the only example of a special form that we have seen so far, but we will meet others shortly. Each special form has its own evaluation rule. The various kinds of expressions (each with its associated evaluation rule) constitute the syntax of the programming language. In comparison with most other programming languages, Lisp has a very simple syntax; that is, the evaluation rule for expressions can be described by a simple general rule together with specialized rules for a small number of special forms.",(function (){var G__129568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__129569 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Special syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["syntactic sugar"], null)], 0)),", to use a phrase coined by Peter Landin. In comparison with users of other languages, Lisp programmers, as a rule, are less concerned with matters of syntax. (By contrast, examine any Pascal manual and notice how much of it is devoted to descriptions of syntax.) This disdain for syntax is due partly to the flexibility of Lisp, which makes it easy to change surface syntax, and partly to the observation that many ",(function (){var G__129570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129571 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["convenient"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129570,G__129571) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129570,G__129571));
})()," syntactic constructs, which make the language less uniform, end up causing more trouble than they are worth when programs become large and complex. In the words of Alan Perlis, ",(function (){var G__129572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129573 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Syntactic sugar causes cancer of the semicolon."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129572,G__129573) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129572,G__129573));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129568,G__129569) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129568,G__129569));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129564,G__129565) : tailrecursion.hoplon.markdown.para_node.call(null,G__129564,G__129565));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129525;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129524;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129523;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129522;
}})()], 0));
var G__128855 = "";
var G__128856 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Compound Procedures"], null),(function (){var _STAR_references_STAR_129574 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129575 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_129576 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129577 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129578 = cljs.core.PersistentArrayMap.EMPTY;
var G__129579 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have identified in Lisp some of the elements that must appear in any powerful programming language:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129578,G__129579) : tailrecursion.hoplon.markdown.para_node.call(null,G__129578,G__129579));
})(),(function (){var G__129580 = cljs.core.PersistentArrayMap.EMPTY;
var G__129581 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129582 = cljs.core.PersistentArrayMap.EMPTY;
var G__129583 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129584 = cljs.core.PersistentArrayMap.EMPTY;
var G__129585 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Numbers and arithmetic operations are primitive data and procedures."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129584,G__129585) : tailrecursion.hoplon.markdown.para_node.call(null,G__129584,G__129585));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129582,G__129583) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129582,G__129583));
})(),(function (){var G__129586 = cljs.core.PersistentArrayMap.EMPTY;
var G__129587 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_129588 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129589 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129590 = cljs.core.PersistentArrayMap.EMPTY;
var G__129591 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Nesting of combinations provides a means of combining operations."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129590,G__129591) : tailrecursion.hoplon.markdown.para_node.call(null,G__129590,G__129591));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129589;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129588;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129586,G__129587) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129586,G__129587));
})(),(function (){var G__129592 = cljs.core.PersistentArrayMap.EMPTY;
var G__129593 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_129594 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129595 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129596 = cljs.core.PersistentArrayMap.EMPTY;
var G__129597 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Definitions that associate names with values provide a  limited means of abstraction."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129596,G__129597) : tailrecursion.hoplon.markdown.para_node.call(null,G__129596,G__129597));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129595;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129594;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129592,G__129593) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129592,G__129593));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__129580,G__129581) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__129580,G__129581));
})(),(function (){var G__129598 = cljs.core.PersistentArrayMap.EMPTY;
var G__129599 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we will learn about ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedure definitions"], null)], 0)),", a much more powerful abstraction technique by which a compound operation can be given a name and then referred to as a unit."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129598,G__129599) : tailrecursion.hoplon.markdown.para_node.call(null,G__129598,G__129599));
})(),(function (){var G__129600 = cljs.core.PersistentArrayMap.EMPTY;
var G__129601 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We begin by examining how to express the idea of ",(function (){var G__129602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129603 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["squaring."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129602,G__129603) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129602,G__129603));
})()," We might say, ",(function (){var G__129604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129605 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To square something, multiply it by itself."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129604,G__129605) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129604,G__129605));
})()," This is expressed in scheme as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129600,G__129601) : tailrecursion.hoplon.markdown.para_node.call(null,G__129600,G__129601));
})(),(function (){var G__129606 = (function (){var G__129607 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129608 = (function (){var G__129609 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129610 = "(";
var G__129611 = (function (){var G__129622 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129623 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129622,G__129623) : tailrecursion.hoplon.span.call(null,G__129622,G__129623));
})();
var G__129612 = "(";
var G__129613 = (function (){var G__129624 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__129625 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129624,G__129625) : tailrecursion.hoplon.span.call(null,G__129624,G__129625));
})();
var G__129614 = " ";
var G__129615 = (function (){var G__129626 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129627 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129626,G__129627) : tailrecursion.hoplon.span.call(null,G__129626,G__129627));
})();
var G__129616 = ") (";
var G__129617 = (function (){var G__129628 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129629 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129628,G__129629) : tailrecursion.hoplon.span.call(null,G__129628,G__129629));
})();
var G__129618 = (function (){var G__129630 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129631 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129630,G__129631) : tailrecursion.hoplon.span.call(null,G__129630,G__129631));
})();
var G__129619 = " ";
var G__129620 = (function (){var G__129632 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129633 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129632,G__129633) : tailrecursion.hoplon.span.call(null,G__129632,G__129633));
})();
var G__129621 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__129609,G__129610,G__129611,G__129612,G__129613,G__129614,G__129615,G__129616,G__129617,G__129618,G__129619,G__129620,G__129621) : tailrecursion.hoplon.pre.call(null,G__129609,G__129610,G__129611,G__129612,G__129613,G__129614,G__129615,G__129616,G__129617,G__129618,G__129619,G__129620,G__129621));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129607,G__129608) : tailrecursion.hoplon.div.call(null,G__129607,G__129608));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129606) : tailrecursion.hoplon.div.call(null,G__129606));
})(),(function (){var G__129634 = cljs.core.PersistentArrayMap.EMPTY;
var G__129635 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["but in Clojure, we would write that as,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129634,G__129635) : tailrecursion.hoplon.markdown.para_node.call(null,G__129634,G__129635));
})(),(function (){var G__129636 = (function (){var G__129637 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129638 = (function (){var G__129639 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129640 = "(";
var G__129641 = (function (){var G__129651 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129652 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129651,G__129652) : tailrecursion.hoplon.span.call(null,G__129651,G__129652));
})();
var G__129642 = (function (){var G__129653 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129654 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129653,G__129654) : tailrecursion.hoplon.span.call(null,G__129653,G__129654));
})();
var G__129643 = " [";
var G__129644 = (function (){var G__129655 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129656 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129655,G__129656) : tailrecursion.hoplon.span.call(null,G__129655,G__129656));
})();
var G__129645 = "] (";
var G__129646 = (function (){var G__129657 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129658 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129657,G__129658) : tailrecursion.hoplon.span.call(null,G__129657,G__129658));
})();
var G__129647 = (function (){var G__129659 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129660 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129659,G__129660) : tailrecursion.hoplon.span.call(null,G__129659,G__129660));
})();
var G__129648 = " ";
var G__129649 = (function (){var G__129661 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129662 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129661,G__129662) : tailrecursion.hoplon.span.call(null,G__129661,G__129662));
})();
var G__129650 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__129639,G__129640,G__129641,G__129642,G__129643,G__129644,G__129645,G__129646,G__129647,G__129648,G__129649,G__129650) : tailrecursion.hoplon.pre.call(null,G__129639,G__129640,G__129641,G__129642,G__129643,G__129644,G__129645,G__129646,G__129647,G__129648,G__129649,G__129650));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129637,G__129638) : tailrecursion.hoplon.div.call(null,G__129637,G__129638));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129636) : tailrecursion.hoplon.div.call(null,G__129636));
})(),(function (){var G__129663 = cljs.core.PersistentArrayMap.EMPTY;
var G__129664 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note that Clojure differentiates between definining an atom and defining a procedure! We can understand this in the following way:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129663,G__129664) : tailrecursion.hoplon.markdown.para_node.call(null,G__129663,G__129664));
})(),(function (){var G__129665 = (function (){var G__129666 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129667 = (function (){var G__129668 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129669 = "(";
var G__129670 = (function (){var G__129707 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129708 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129707,G__129708) : tailrecursion.hoplon.span.call(null,G__129707,G__129708));
})();
var G__129671 = (function (){var G__129709 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129710 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129709,G__129710) : tailrecursion.hoplon.span.call(null,G__129709,G__129710));
})();
var G__129672 = "      [";
var G__129673 = (function (){var G__129711 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129712 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129711,G__129712) : tailrecursion.hoplon.span.call(null,G__129711,G__129712));
})();
var G__129674 = "]      (";
var G__129675 = (function (){var G__129713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129714 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129713,G__129714) : tailrecursion.hoplon.span.call(null,G__129713,G__129714));
})();
var G__129676 = "     ";
var G__129677 = (function (){var G__129715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129716 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129715,G__129716) : tailrecursion.hoplon.span.call(null,G__129715,G__129716));
})();
var G__129678 = "      ";
var G__129679 = (function (){var G__129717 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129718 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129717,G__129718) : tailrecursion.hoplon.span.call(null,G__129717,G__129718));
})();
var G__129680 = "))\n  ";
var G__129681 = (function (){var G__129719 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__129720 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129719,G__129720) : tailrecursion.hoplon.span.call(null,G__129719,G__129720));
})();
var G__129682 = "    ";
var G__129683 = (function (){var G__129721 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__129722 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129721,G__129722) : tailrecursion.hoplon.span.call(null,G__129721,G__129722));
})();
var G__129684 = "          ";
var G__129685 = (function (){var G__129723 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__129724 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129723,G__129724) : tailrecursion.hoplon.span.call(null,G__129723,G__129724));
})();
var G__129686 = "        ";
var G__129687 = (function (){var G__129725 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__129726 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129725,G__129726) : tailrecursion.hoplon.span.call(null,G__129725,G__129726));
})();
var G__129688 = "     ";
var G__129689 = (function (){var G__129727 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__129728 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129727,G__129728) : tailrecursion.hoplon.span.call(null,G__129727,G__129728));
})();
var G__129690 = "      ";
var G__129691 = (function (){var G__129729 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"border: 1px solid #FF0000"], null);
var G__129730 = "\u2191";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129729,G__129730) : tailrecursion.hoplon.span.call(null,G__129729,G__129730));
})();
var G__129692 = "\n ";
var G__129693 = (function (){var G__129731 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129732 = "to";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129731,G__129732) : tailrecursion.hoplon.span.call(null,G__129731,G__129732));
})();
var G__129694 = "  ";
var G__129695 = (function (){var G__129733 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #BA2121"], null);
var G__129734 = "\"square\"";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129733,G__129734) : tailrecursion.hoplon.span.call(null,G__129733,G__129734));
})();
var G__129696 = " ";
var G__129697 = (function (){var G__129735 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129736 = "something";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129735,G__129736) : tailrecursion.hoplon.span.call(null,G__129735,G__129736));
})();
var G__129698 = ", ";
var G__129699 = (function (){var G__129737 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129738 = "multiply";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129737,G__129738) : tailrecursion.hoplon.span.call(null,G__129737,G__129738));
})();
var G__129700 = " ";
var G__129701 = (function (){var G__129739 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129740 = "it";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129739,G__129740) : tailrecursion.hoplon.span.call(null,G__129739,G__129740));
})();
var G__129702 = " ";
var G__129703 = (function (){var G__129741 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129742 = "by";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129741,G__129742) : tailrecursion.hoplon.span.call(null,G__129741,G__129742));
})();
var G__129704 = " ";
var G__129705 = (function (){var G__129743 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129744 = "itself.";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129743,G__129744) : tailrecursion.hoplon.span.call(null,G__129743,G__129744));
})();
var G__129706 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__129668,G__129669,G__129670,G__129671,G__129672,G__129673,G__129674,G__129675,G__129676,G__129677,G__129678,G__129679,G__129680,G__129681,G__129682,G__129683,G__129684,G__129685,G__129686,G__129687,G__129688,G__129689,G__129690,G__129691,G__129692,G__129693,G__129694,G__129695,G__129696,G__129697,G__129698,G__129699,G__129700,G__129701,G__129702,G__129703,G__129704,G__129705,G__129706) : tailrecursion.hoplon.pre.call(null,G__129668,G__129669,G__129670,G__129671,G__129672,G__129673,G__129674,G__129675,G__129676,G__129677,G__129678,G__129679,G__129680,G__129681,G__129682,G__129683,G__129684,G__129685,G__129686,G__129687,G__129688,G__129689,G__129690,G__129691,G__129692,G__129693,G__129694,G__129695,G__129696,G__129697,G__129698,G__129699,G__129700,G__129701,G__129702,G__129703,G__129704,G__129705,G__129706));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129666,G__129667) : tailrecursion.hoplon.div.call(null,G__129666,G__129667));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129665) : tailrecursion.hoplon.div.call(null,G__129665));
})(),(function (){var G__129745 = cljs.core.PersistentArrayMap.EMPTY;
var G__129746 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have here a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["compound procedure"], null)], 0)),", which has been given the name ",(function (){var G__129747 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__129748 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129747,G__129748) : tailrecursion.hoplon.markdown.code_node.call(null,G__129747,G__129748));
})(),". The procedure represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, x, which plays the same role that a pronoun plays in natural language. Evaluating the definition creates this compound procedure and associates it with the name square.",(function (){var G__129749 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__129750 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that there are two different operations being combined here: we are creating the procedure, and we are giving it the name ",(function (){var G__129751 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__129752 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129751,G__129752) : tailrecursion.hoplon.markdown.code_node.call(null,G__129751,G__129752));
})(),". It is possible, indeed important, to be able to separate these two notions ",(function (){var G__129753 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__129754 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129753,G__129754) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129753,G__129754));
})()," to create procedures without naming them, and to give names to procedures that have already been created. We will see how to do this in section 1.3.2."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129749,G__129750) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129749,G__129750));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129745,G__129746) : tailrecursion.hoplon.markdown.para_node.call(null,G__129745,G__129746));
})(),(function (){var G__129755 = cljs.core.PersistentArrayMap.EMPTY;
var G__129756 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a procedure definition is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129755,G__129756) : tailrecursion.hoplon.markdown.para_node.call(null,G__129755,G__129756));
})(),(function (){var G__129757 = (function (){var G__129758 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129759 = (function (){var G__129760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129761 = "(";
var G__129762 = (function (){var G__129771 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129772 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129771,G__129772) : tailrecursion.hoplon.span.call(null,G__129771,G__129772));
})();
var G__129763 = (function (){var G__129773 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129774 = "<name>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129773,G__129774) : tailrecursion.hoplon.span.call(null,G__129773,G__129774));
})();
var G__129764 = " [";
var G__129765 = (function (){var G__129775 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129776 = "<formal";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129775,G__129776) : tailrecursion.hoplon.span.call(null,G__129775,G__129776));
})();
var G__129766 = " ";
var G__129767 = (function (){var G__129777 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129778 = "parameters>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129777,G__129778) : tailrecursion.hoplon.span.call(null,G__129777,G__129778));
})();
var G__129768 = "] ";
var G__129769 = (function (){var G__129779 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129780 = "<body>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129779,G__129780) : tailrecursion.hoplon.span.call(null,G__129779,G__129780));
})();
var G__129770 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$11(G__129760,G__129761,G__129762,G__129763,G__129764,G__129765,G__129766,G__129767,G__129768,G__129769,G__129770) : tailrecursion.hoplon.pre.call(null,G__129760,G__129761,G__129762,G__129763,G__129764,G__129765,G__129766,G__129767,G__129768,G__129769,G__129770));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129758,G__129759) : tailrecursion.hoplon.div.call(null,G__129758,G__129759));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129757) : tailrecursion.hoplon.div.call(null,G__129757));
})(),(function (){var G__129781 = cljs.core.PersistentArrayMap.EMPTY;
var G__129782 = new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Just in case you end up reading from the original SICP, let",(function (){var G__129783 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__129784 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129783,G__129784) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129783,G__129784));
})(),"s take a moment to note the differences between the Scheme method of defining compound procedures, and the Clojure method. The Scheme method ",(function (){var G__129785 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(define\n(<name> <formal parameters>) <body>)"], null);
var G__129786 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129785,G__129786) : tailrecursion.hoplon.markdown.code_node.call(null,G__129785,G__129786));
})()," is very straight forward: it defines the first form to be the second. In this way, we can see ",(function (){var G__129787 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"define"], null);
var G__129788 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129787,G__129788) : tailrecursion.hoplon.markdown.code_node.call(null,G__129787,G__129788));
})()," to be a procedure that takes two arguments. The procedure ",(function (){var G__129789 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"defn"], null);
var G__129790 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129789,G__129790) : tailrecursion.hoplon.markdown.code_node.call(null,G__129789,G__129790));
})()," in Clojure takes three arguments: the first being the name of the intended procedure (in our example ",(function (){var G__129791 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129792 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129793 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__129794 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129793,G__129794) : tailrecursion.hoplon.markdown.code_node.call(null,G__129793,G__129794));
})()], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129791,G__129792) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129791,G__129792));
})(),"), the second is a list of all the arguments (we",(function (){var G__129795 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__129796 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129795,G__129796) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129795,G__129796));
})(),"ll cover lists later, but in our example it was ",(function (){var G__129797 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"[x]"], null);
var G__129798 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129797,G__129798) : tailrecursion.hoplon.markdown.code_node.call(null,G__129797,G__129798));
})(),"), and the third is the intended procedure or the body (in our example it was ",(function (){var G__129799 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* x x)"], null);
var G__129800 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129799,G__129800) : tailrecursion.hoplon.markdown.code_node.call(null,G__129799,G__129800));
})(),")."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129781,G__129782) : tailrecursion.hoplon.markdown.para_node.call(null,G__129781,G__129782));
})(),(function (){var G__129801 = cljs.core.PersistentArrayMap.EMPTY;
var G__129802 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The <name> is a symbol to be associated with the procedure definition in the environment.",(function (){var G__129803 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__129804 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Throughout this book, we will describe the general syntax of expressions by using italic symbols delimited by angle brackets ",(function (){var G__129805 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__129806 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129805,G__129806) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129805,G__129806));
})()," e.g., ",(function (){var G__129807 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<name>"], null);
var G__129808 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129807,G__129808) : tailrecursion.hoplon.markdown.code_node.call(null,G__129807,G__129808));
})()," ",(function (){var G__129809 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__129810 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129809,G__129810) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129809,G__129810));
})()," to denote the ",(function (){var G__129811 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129812 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["slots"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129811,G__129812) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129811,G__129812));
})()," in the expression to be filled in when such an expression is actually used."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129803,G__129804) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129803,G__129804));
})()," The <formal\nparameters> are the names used within the body of the procedure to refer to the corresponding arguments of the procedure. The <body> is an expression that will yield the value of the procedure application when the formal parameters are replaced by the actual arguments to which the procedure is applied.",(function (){var G__129813 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__129814 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["More generally, the body of the procedure can be a sequence of expressions. In this case, the interpreter evaluates each expression in the sequence in turn and returns the value of the final expression as the value of the procedure application."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129813,G__129814) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129813,G__129814));
})()," In Scheme, the <name> and the <formal parameters> are grouped within parentheses, just as they would be in an actual call to the procedure being defined, but in Clojure they are not."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129801,G__129802) : tailrecursion.hoplon.markdown.para_node.call(null,G__129801,G__129802));
})(),(function (){var G__129815 = cljs.core.PersistentArrayMap.EMPTY;
var G__129816 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Having defined square, we can now use it:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129815,G__129816) : tailrecursion.hoplon.markdown.para_node.call(null,G__129815,G__129816));
})(),(function (){var G__129817 = (function (){var G__129818 = "(square 21)\n441\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129818) : tailrecursion.hoplon.code.call(null,G__129818));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129817) : tailrecursion.hoplon.pre.call(null,G__129817));
})(),(function (){var G__129819 = (function (){var G__129820 = "(square (+ 2 5))\n49\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129820) : tailrecursion.hoplon.code.call(null,G__129820));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129819) : tailrecursion.hoplon.pre.call(null,G__129819));
})(),(function (){var G__129821 = (function (){var G__129822 = "(square (square 3))\n81\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129822) : tailrecursion.hoplon.code.call(null,G__129822));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129821) : tailrecursion.hoplon.pre.call(null,G__129821));
})(),(function (){var G__129823 = cljs.core.PersistentArrayMap.EMPTY;
var G__129824 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can also use square as a building block in defining other procedures. For example, \\(x^2 + y^2\\) can be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129823,G__129824) : tailrecursion.hoplon.markdown.para_node.call(null,G__129823,G__129824));
})(),(function (){var G__129825 = (function (){var G__129826 = "(+ (square x) (square y))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129826) : tailrecursion.hoplon.code.call(null,G__129826));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129825) : tailrecursion.hoplon.pre.call(null,G__129825));
})(),(function (){var G__129827 = cljs.core.PersistentArrayMap.EMPTY;
var G__129828 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can easily define a procedure sum-of-squares that, given any two numbers as arguments, produces the sum of their squares:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129827,G__129828) : tailrecursion.hoplon.markdown.para_node.call(null,G__129827,G__129828));
})(),(function (){var G__129829 = (function (){var G__129830 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129831 = (function (){var G__129832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129833 = "(";
var G__129834 = (function (){var G__129851 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129852 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129851,G__129852) : tailrecursion.hoplon.span.call(null,G__129851,G__129852));
})();
var G__129835 = (function (){var G__129853 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129854 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129853,G__129854) : tailrecursion.hoplon.span.call(null,G__129853,G__129854));
})();
var G__129836 = " [";
var G__129837 = (function (){var G__129855 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129856 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129855,G__129856) : tailrecursion.hoplon.span.call(null,G__129855,G__129856));
})();
var G__129838 = " ";
var G__129839 = (function (){var G__129857 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129858 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129857,G__129858) : tailrecursion.hoplon.span.call(null,G__129857,G__129858));
})();
var G__129840 = "]\n  (";
var G__129841 = (function (){var G__129859 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129860 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129859,G__129860) : tailrecursion.hoplon.span.call(null,G__129859,G__129860));
})();
var G__129842 = "(";
var G__129843 = (function (){var G__129861 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__129862 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129861,G__129862) : tailrecursion.hoplon.span.call(null,G__129861,G__129862));
})();
var G__129844 = " ";
var G__129845 = (function (){var G__129863 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129864 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129863,G__129864) : tailrecursion.hoplon.span.call(null,G__129863,G__129864));
})();
var G__129846 = ") (";
var G__129847 = (function (){var G__129865 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__129866 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129865,G__129866) : tailrecursion.hoplon.span.call(null,G__129865,G__129866));
})();
var G__129848 = " ";
var G__129849 = (function (){var G__129867 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129868 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129867,G__129868) : tailrecursion.hoplon.span.call(null,G__129867,G__129868));
})();
var G__129850 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__129832,G__129833,G__129834,G__129835,G__129836,G__129837,G__129838,G__129839,G__129840,G__129841,G__129842,G__129843,G__129844,G__129845,G__129846,G__129847,G__129848,G__129849,G__129850) : tailrecursion.hoplon.pre.call(null,G__129832,G__129833,G__129834,G__129835,G__129836,G__129837,G__129838,G__129839,G__129840,G__129841,G__129842,G__129843,G__129844,G__129845,G__129846,G__129847,G__129848,G__129849,G__129850));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129830,G__129831) : tailrecursion.hoplon.div.call(null,G__129830,G__129831));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129829) : tailrecursion.hoplon.div.call(null,G__129829));
})(),(function (){var G__129869 = (function (){var G__129870 = "(sum-of-squares 3 4)\n25\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129870) : tailrecursion.hoplon.code.call(null,G__129870));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129869) : tailrecursion.hoplon.pre.call(null,G__129869));
})(),(function (){var G__129871 = cljs.core.PersistentArrayMap.EMPTY;
var G__129872 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now we can use sum-of-squares as a building block in constructing further procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129871,G__129872) : tailrecursion.hoplon.markdown.para_node.call(null,G__129871,G__129872));
})(),(function (){var G__129873 = (function (){var G__129874 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__129875 = (function (){var G__129876 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__129877 = "(";
var G__129878 = (function (){var G__129895 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__129896 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129895,G__129896) : tailrecursion.hoplon.span.call(null,G__129895,G__129896));
})();
var G__129879 = (function (){var G__129897 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129898 = "f";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129897,G__129898) : tailrecursion.hoplon.span.call(null,G__129897,G__129898));
})();
var G__129880 = " [";
var G__129881 = (function (){var G__129899 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129900 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129899,G__129900) : tailrecursion.hoplon.span.call(null,G__129899,G__129900));
})();
var G__129882 = "]\n  (";
var G__129883 = (function (){var G__129901 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__129902 = "sum-of-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129901,G__129902) : tailrecursion.hoplon.span.call(null,G__129901,G__129902));
})();
var G__129884 = " (";
var G__129885 = (function (){var G__129903 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129904 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129903,G__129904) : tailrecursion.hoplon.span.call(null,G__129903,G__129904));
})();
var G__129886 = (function (){var G__129905 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129906 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129905,G__129906) : tailrecursion.hoplon.span.call(null,G__129905,G__129906));
})();
var G__129887 = " ";
var G__129888 = (function (){var G__129907 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129908 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129907,G__129908) : tailrecursion.hoplon.span.call(null,G__129907,G__129908));
})();
var G__129889 = ") (";
var G__129890 = (function (){var G__129909 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__129910 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129909,G__129910) : tailrecursion.hoplon.span.call(null,G__129909,G__129910));
})();
var G__129891 = (function (){var G__129911 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__129912 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129911,G__129912) : tailrecursion.hoplon.span.call(null,G__129911,G__129912));
})();
var G__129892 = " ";
var G__129893 = (function (){var G__129913 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__129914 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__129913,G__129914) : tailrecursion.hoplon.span.call(null,G__129913,G__129914));
})();
var G__129894 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__129876,G__129877,G__129878,G__129879,G__129880,G__129881,G__129882,G__129883,G__129884,G__129885,G__129886,G__129887,G__129888,G__129889,G__129890,G__129891,G__129892,G__129893,G__129894) : tailrecursion.hoplon.pre.call(null,G__129876,G__129877,G__129878,G__129879,G__129880,G__129881,G__129882,G__129883,G__129884,G__129885,G__129886,G__129887,G__129888,G__129889,G__129890,G__129891,G__129892,G__129893,G__129894));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__129874,G__129875) : tailrecursion.hoplon.div.call(null,G__129874,G__129875));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__129873) : tailrecursion.hoplon.div.call(null,G__129873));
})(),(function (){var G__129915 = (function (){var G__129916 = "(f 5)\n136\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129916) : tailrecursion.hoplon.code.call(null,G__129916));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129915) : tailrecursion.hoplon.pre.call(null,G__129915));
})(),(function (){var G__129917 = cljs.core.PersistentArrayMap.EMPTY;
var G__129918 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Compound procedures are used in exactly the same way as primitive procedures. Indeed, one could not tell by looking at the definition of ",(function (){var G__129919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sum-of-squares"], null);
var G__129920 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129919,G__129920) : tailrecursion.hoplon.markdown.code_node.call(null,G__129919,G__129920));
})()," given above whether ",(function (){var G__129921 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__129922 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129921,G__129922) : tailrecursion.hoplon.markdown.code_node.call(null,G__129921,G__129922));
})()," was built into the interpreter, like ",(function (){var G__129923 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"+"], null);
var G__129924 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129923,G__129924) : tailrecursion.hoplon.markdown.code_node.call(null,G__129923,G__129924));
})()," and ",(function (){var G__129925 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"*"], null);
var G__129926 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129925,G__129926) : tailrecursion.hoplon.markdown.code_node.call(null,G__129925,G__129926));
})(),", or defined as a compound procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129917,G__129918) : tailrecursion.hoplon.markdown.para_node.call(null,G__129917,G__129918));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129577;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129576;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129575;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129574;
}})()], 0));
var G__128857 = "";
var G__128858 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"The Substitution Model for Procedure Application"], null),(function (){var _STAR_references_STAR_129927 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129928 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_129929 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129930 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129931 = cljs.core.PersistentArrayMap.EMPTY;
var G__129932 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate a combination whose operator names a compound procedure, the interpreter follows much the same process as for combinations whose operators name primitive procedures, which we described in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#section-1.1.3",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),". That is, the interpreter evaluates the elements of the combination and applies the procedure (which is the value of the operator of the combination) to the arguments (which are the values of the operands of the combination)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129931,G__129932) : tailrecursion.hoplon.markdown.para_node.call(null,G__129931,G__129932));
})(),(function (){var G__129933 = cljs.core.PersistentArrayMap.EMPTY;
var G__129934 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We can assume that the mechanism for applying primitive procedures to arguments is built into the interpreter. For compound procedures, the application process is as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129933,G__129934) : tailrecursion.hoplon.markdown.para_node.call(null,G__129933,G__129934));
})(),(function (){var G__129935 = cljs.core.PersistentArrayMap.EMPTY;
var G__129936 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129937 = cljs.core.PersistentArrayMap.EMPTY;
var G__129938 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_129939 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_129940 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument."], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129940;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129939;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129937,G__129938) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129937,G__129938));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__129935,G__129936) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__129935,G__129936));
})(),(function (){var G__129941 = cljs.core.PersistentArrayMap.EMPTY;
var G__129942 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To illustrate this process, let",(function (){var G__129943 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__129944 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__129943,G__129944) : tailrecursion.hoplon.markdown.simple_node.call(null,G__129943,G__129944));
})(),"s evaluate the combination"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129941,G__129942) : tailrecursion.hoplon.markdown.para_node.call(null,G__129941,G__129942));
})(),(function (){var G__129945 = (function (){var G__129946 = "(f 5)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129946) : tailrecursion.hoplon.code.call(null,G__129946));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129945) : tailrecursion.hoplon.pre.call(null,G__129945));
})(),(function (){var G__129947 = cljs.core.PersistentArrayMap.EMPTY;
var G__129948 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where f is the procedure defined in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#section-1.1.4",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.4"], null)], 0)),". We begin by retrieving the body of f:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129947,G__129948) : tailrecursion.hoplon.markdown.para_node.call(null,G__129947,G__129948));
})(),(function (){var G__129949 = (function (){var G__129950 = "(sum-of-squares (+ a 1) (* a 2))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129950) : tailrecursion.hoplon.code.call(null,G__129950));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129949) : tailrecursion.hoplon.pre.call(null,G__129949));
})(),(function (){var G__129951 = cljs.core.PersistentArrayMap.EMPTY;
var G__129952 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then we replace the formal parameter a by the argument 5:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129951,G__129952) : tailrecursion.hoplon.markdown.para_node.call(null,G__129951,G__129952));
})(),(function (){var G__129953 = (function (){var G__129954 = "(sum-of-squares (+ 5 1) (* 5 2))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129954) : tailrecursion.hoplon.code.call(null,G__129954));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129953) : tailrecursion.hoplon.pre.call(null,G__129953));
})(),(function (){var G__129955 = cljs.core.PersistentArrayMap.EMPTY;
var G__129956 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus the problem reduces to the evaluation of a combination with two operands and an operator ",(function (){var G__129957 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sum-of-squares"], null);
var G__129958 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129957,G__129958) : tailrecursion.hoplon.markdown.code_node.call(null,G__129957,G__129958));
})(),". Evaluating this combination involves three subproblems. We must evaluate the operator to get the procedure to be applied, and we must evaluate the operands to get the arguments. Now ",(function (){var G__129959 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ 5 1)"], null);
var G__129960 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129959,G__129960) : tailrecursion.hoplon.markdown.code_node.call(null,G__129959,G__129960));
})()," produces 6 and ",(function (){var G__129961 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* 5 2)"], null);
var G__129962 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129961,G__129962) : tailrecursion.hoplon.markdown.code_node.call(null,G__129961,G__129962));
})()," produces 10, so we must apply the ",(function (){var G__129963 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sum-of-squares"], null);
var G__129964 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129963,G__129964) : tailrecursion.hoplon.markdown.code_node.call(null,G__129963,G__129964));
})()," procedure to 6 and 10. These values are substituted for the formal parameters ",(function (){var G__129965 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__129966 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129965,G__129966) : tailrecursion.hoplon.markdown.code_node.call(null,G__129965,G__129966));
})()," and ",(function (){var G__129967 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"y"], null);
var G__129968 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129967,G__129968) : tailrecursion.hoplon.markdown.code_node.call(null,G__129967,G__129968));
})()," in the body of ",(function (){var G__129969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sum-of-squares"], null);
var G__129970 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129969,G__129970) : tailrecursion.hoplon.markdown.code_node.call(null,G__129969,G__129970));
})(),", reducing the expression to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129955,G__129956) : tailrecursion.hoplon.markdown.para_node.call(null,G__129955,G__129956));
})(),(function (){var G__129971 = (function (){var G__129972 = "(+ (square 6) (square 10))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129972) : tailrecursion.hoplon.code.call(null,G__129972));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129971) : tailrecursion.hoplon.pre.call(null,G__129971));
})(),(function (){var G__129973 = cljs.core.PersistentArrayMap.EMPTY;
var G__129974 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we use the definition of ",(function (){var G__129975 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__129976 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__129975,G__129976) : tailrecursion.hoplon.markdown.code_node.call(null,G__129975,G__129976));
})(),", this reduces to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129973,G__129974) : tailrecursion.hoplon.markdown.para_node.call(null,G__129973,G__129974));
})(),(function (){var G__129977 = (function (){var G__129978 = "(+ (* 6 6) (* 10 10))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129978) : tailrecursion.hoplon.code.call(null,G__129978));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129977) : tailrecursion.hoplon.pre.call(null,G__129977));
})(),(function (){var G__129979 = cljs.core.PersistentArrayMap.EMPTY;
var G__129980 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which reduces by multiplication to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129979,G__129980) : tailrecursion.hoplon.markdown.para_node.call(null,G__129979,G__129980));
})(),(function (){var G__129981 = (function (){var G__129982 = "(+ 36 100)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129982) : tailrecursion.hoplon.code.call(null,G__129982));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129981) : tailrecursion.hoplon.pre.call(null,G__129981));
})(),(function (){var G__129983 = cljs.core.PersistentArrayMap.EMPTY;
var G__129984 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and finally to"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129983,G__129984) : tailrecursion.hoplon.markdown.para_node.call(null,G__129983,G__129984));
})(),(function (){var G__129985 = (function (){var G__129986 = "136\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__129986) : tailrecursion.hoplon.code.call(null,G__129986));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__129985) : tailrecursion.hoplon.pre.call(null,G__129985));
})(),(function (){var G__129987 = cljs.core.PersistentArrayMap.EMPTY;
var G__129988 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The process we have just described is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution model"], null)], 0))," for procedure application. It can be taken as a model that determines the ",(function (){var G__129989 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129990 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["meaning"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129989,G__129990) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129989,G__129990));
})()," of procedure application, insofar as the procedures in this chapter are concerned. However, there are two points that should be stressed:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129987,G__129988) : tailrecursion.hoplon.markdown.para_node.call(null,G__129987,G__129988));
})(),(function (){var G__129991 = cljs.core.PersistentArrayMap.EMPTY;
var G__129992 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129993 = cljs.core.PersistentArrayMap.EMPTY;
var G__129994 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__129995 = cljs.core.PersistentArrayMap.EMPTY;
var G__129996 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The purpose of the substitution is to help us think about procedure application, not to provide a description of how the interpreter really works. Typical interpreters do not evaluate procedure applications by manipulating the text of a procedure to substitute values for the formal parameters. In practice, the ",(function (){var G__129997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__129998 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["substitution"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__129997,G__129998) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__129997,G__129998));
})()," is accomplished by using a local environment for the formal parameters. We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__129995,G__129996) : tailrecursion.hoplon.markdown.para_node.call(null,G__129995,G__129996));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129993,G__129994) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129993,G__129994));
})(),(function (){var G__129999 = cljs.core.PersistentArrayMap.EMPTY;
var G__130000 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_130001 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130002 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130003 = cljs.core.PersistentArrayMap.EMPTY;
var G__130004 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Over the course of this book, we will present a sequence of increasingly elaborate models of how interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. The substitution model is only the first of these models ",(function (){var G__130005 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__130006 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__130005,G__130006) : tailrecursion.hoplon.markdown.simple_node.call(null,G__130005,G__130006));
})()," a way to get started thinking formally about the evaluation process. In general, when modeling phenomena in science and engineering, we begin with simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate and must be replaced by more refined models. The substitution model is no exception. In particular, when we address in chapter 3 the use of procedures with ",(function (){var G__130007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__130008 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mutable data"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130007,G__130008) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130007,G__130008));
})(),", we will see that the substitution model breaks down and must be replaced by a more complicated model of procedure application.",(function (){var G__130009 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__130010 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process. The problem arises from the possibility of confusion between the names used for the formal parameters of a procedure and the (possibly identical) names used in the expressions to which the procedure may be applied. Indeed, there is a long history of erroneous definitions of substitution in the literature of logic and programming semantics. See Stoy 1977 for a careful discussion of substitution."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130009,G__130010) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130009,G__130010));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130003,G__130004) : tailrecursion.hoplon.markdown.para_node.call(null,G__130003,G__130004));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130002;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130001;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__129999,G__130000) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__129999,G__130000));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__129991,G__129992) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__129991,G__129992));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129930;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129929;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_129928;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_129927;
}})()], 0));
var G__128859 = "";
var G__128860 = content.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Applicative Order vs Normal Order"], null),(function (){var _STAR_references_STAR_130011 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130012 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130013 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130014 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130015 = cljs.core.PersistentArrayMap.EMPTY;
var G__130016 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["According to the description of evaluation given in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#section-1.1.3",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.1.3"], null)], 0)),", the interpreter first evaluates the operator and operands and then applies the resulting procedure to the resulting arguments. This is not the only way to perform evaluation. An alternative evaluation model would not evaluate the operands until their values were needed. Instead it would first substitute operand expressions for parameters until it obtained an expression involving only primitive operators, and would then perform the evaluation. If we used this method, the evaluation of"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130015,G__130016) : tailrecursion.hoplon.markdown.para_node.call(null,G__130015,G__130016));
})(),(function (){var G__130017 = (function (){var G__130018 = "(f 5)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130018) : tailrecursion.hoplon.code.call(null,G__130018));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130017) : tailrecursion.hoplon.pre.call(null,G__130017));
})(),(function (){var G__130019 = cljs.core.PersistentArrayMap.EMPTY;
var G__130020 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["would proceed according to the sequence of expansions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130019,G__130020) : tailrecursion.hoplon.markdown.para_node.call(null,G__130019,G__130020));
})(),(function (){var G__130021 = (function (){var G__130022 = "(sum-of-squares (+ 5 1) (* 5 2))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130022) : tailrecursion.hoplon.code.call(null,G__130022));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130021) : tailrecursion.hoplon.pre.call(null,G__130021));
})(),(function (){var G__130023 = (function (){var G__130024 = "(+    (square (+ 5 1))      (square (* 5 2))  )\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130024) : tailrecursion.hoplon.code.call(null,G__130024));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130023) : tailrecursion.hoplon.pre.call(null,G__130023));
})(),(function (){var G__130025 = (function (){var G__130026 = "(+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130026) : tailrecursion.hoplon.code.call(null,G__130026));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130025) : tailrecursion.hoplon.pre.call(null,G__130025));
})(),(function (){var G__130027 = cljs.core.PersistentArrayMap.EMPTY;
var G__130028 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["followed by the reductions"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130027,G__130028) : tailrecursion.hoplon.markdown.para_node.call(null,G__130027,G__130028));
})(),(function (){var G__130029 = (function (){var G__130030 = "(+ (* 6 6) (* 10 10))\n\n(+    36      100)\n\n136\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130030) : tailrecursion.hoplon.code.call(null,G__130030));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130029) : tailrecursion.hoplon.pre.call(null,G__130029));
})(),(function (){var G__130031 = cljs.core.PersistentArrayMap.EMPTY;
var G__130032 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This gives the same answer as our previous evaluation model, but the process is different. In particular, the evaluations of ",(function (){var G__130033 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ 5 1)"], null);
var G__130034 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130033,G__130034) : tailrecursion.hoplon.markdown.code_node.call(null,G__130033,G__130034));
})()," and ",(function (){var G__130035 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* 5 2)"], null);
var G__130036 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130035,G__130036) : tailrecursion.hoplon.markdown.code_node.call(null,G__130035,G__130036));
})()," are each performed twice here, corresponding to the reduction of the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130031,G__130032) : tailrecursion.hoplon.markdown.para_node.call(null,G__130031,G__130032));
})(),(function (){var G__130037 = (function (){var G__130038 = "(* x x)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130038) : tailrecursion.hoplon.code.call(null,G__130038));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130037) : tailrecursion.hoplon.pre.call(null,G__130037));
})(),(function (){var G__130039 = cljs.core.PersistentArrayMap.EMPTY;
var G__130040 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["with ",(function (){var G__130041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__130042 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130041,G__130042) : tailrecursion.hoplon.markdown.code_node.call(null,G__130041,G__130042));
})()," replaced respectively by ",(function (){var G__130043 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ 5 1)"], null);
var G__130044 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130043,G__130044) : tailrecursion.hoplon.markdown.code_node.call(null,G__130043,G__130044));
})()," and ",(function (){var G__130045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* 5 2)"], null);
var G__130046 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130045,G__130046) : tailrecursion.hoplon.markdown.code_node.call(null,G__130045,G__130046));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130039,G__130040) : tailrecursion.hoplon.markdown.para_node.call(null,G__130039,G__130040));
})(),(function (){var G__130047 = cljs.core.PersistentArrayMap.EMPTY;
var G__130048 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This alternative ",(function (){var G__130049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__130050 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["fully expand and then reduce"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130049,G__130050) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130049,G__130050));
})()," evaluation method is known as ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["normal-order evaluation"], null)], 0)),", in contrast to the ",(function (){var G__130051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__130052 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["evaluate the arguments and then apply"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130051,G__130052) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130051,G__130052));
})()," method that the interpreter actually uses, which is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["applicative-order evaluation"], null)], 0)),". It can be shown that, for procedure applications that can be modeled using substitution (including all the procedures in the first two chapters of this book) and that yield legitimate values, normal-order and applicative-order evaluation produce the same value. (See ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#q1.5",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["exercise 1.5"], null)], 0))," for an instance of an ",(function (){var G__130053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__130054 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["illegitimate"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130053,G__130054) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130053,G__130054));
})()," value where normal-order and applicative-order evaluation do not give the same result.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130047,G__130048) : tailrecursion.hoplon.markdown.para_node.call(null,G__130047,G__130048));
})(),(function (){var G__130055 = cljs.core.PersistentArrayMap.EMPTY;
var G__130056 = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lisp uses applicative-order evaluation, partly because of the additional efficiency obtained from avoiding multiple evaluations of expressions such as those illustrated with ",(function (){var G__130057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ 5 1)"], null);
var G__130058 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130057,G__130058) : tailrecursion.hoplon.markdown.code_node.call(null,G__130057,G__130058));
})()," and ",(function (){var G__130059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(* 5 2)"], null);
var G__130060 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130059,G__130060) : tailrecursion.hoplon.markdown.code_node.call(null,G__130059,G__130060));
})()," above and, more significantly, because normal-order evaluation becomes much more complicated to deal with when we leave the realm of procedures that can be modeled by substitution. On the other hand, normal-order evaluation can be an extremely valuable tool, and we will investigate some of its implications in chapters 3 and 4.",(function (){var G__130061 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__130062 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In chapter 3 we will introduce ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["stream processing"], null)], 0)),", which is a way of handling apparently ",(function (){var G__130063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__130064 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["infinite"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130063,G__130064) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130063,G__130064));
})()," data structures by incorporating a limited form of normal-order evaluation. In section 4.2 we will modify the Scheme interpreter to produce a normal-order variant of Scheme."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130061,G__130062) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130061,G__130062));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130055,G__130056) : tailrecursion.hoplon.markdown.para_node.call(null,G__130055,G__130056));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130014;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130013;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130012;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130011;
}})()], 0));
var G__128861 = "";
var G__128862 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Conditional Expressions and Predicates"], null),(function (){var _STAR_references_STAR_130065 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130066 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130067 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130068 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 31, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130069 = cljs.core.PersistentArrayMap.EMPTY;
var G__130070 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The expressive power of the class of procedures that we can define at this point is very limited, because we have no way to make tests and to perform different operations depending on the result of a test. For instance, we cannot define a procedure that computes the absolute value of a number by testing whether the number is positive, negative, or zero and taking different actions in the different cases according to the rule"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130069,G__130070) : tailrecursion.hoplon.markdown.para_node.call(null,G__130069,G__130070));
})(),(function (){var G__130071 = cljs.core.PersistentArrayMap.EMPTY;
var G__130072 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$| x |= \\begin{cases} x &\\mbox{if } x > 0 \\cr 0 &\\mbox{if } x = 0 \\cr -x &\\mbox{if } x < 0 \\end{cases}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130071,G__130072) : tailrecursion.hoplon.markdown.para_node.call(null,G__130071,G__130072));
})(),(function (){var G__130073 = cljs.core.PersistentArrayMap.EMPTY;
var G__130074 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This construct is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["case analysis"], null)], 0)),", and there is a special form in Lisp for notating such a case analysis. It is called ",(function (){var G__130075 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__130076 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130075,G__130076) : tailrecursion.hoplon.markdown.code_node.call(null,G__130075,G__130076));
})()," (which stands for ",(function (){var G__130077 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__130078 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["conditional"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130077,G__130078) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130077,G__130078));
})(),"), and it is used as follows:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130073,G__130074) : tailrecursion.hoplon.markdown.para_node.call(null,G__130073,G__130074));
})(),(function (){var G__130079 = (function (){var G__130080 = "(defn abs [x]\n  (cond (> x 0) x\n        (= x 0) 0\n        (< x 0) (- x)))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130080) : tailrecursion.hoplon.code.call(null,G__130080));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130079) : tailrecursion.hoplon.pre.call(null,G__130079));
})(),(function (){var G__130081 = cljs.core.PersistentArrayMap.EMPTY;
var G__130082 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The general form of a conditional expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130081,G__130082) : tailrecursion.hoplon.markdown.para_node.call(null,G__130081,G__130082));
})(),(function (){var G__130083 = (function (){var G__130084 = "(cond <p1> <e1>\n      <p2> <e2>\n       ...                       \n      <pn> <en>)\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130084) : tailrecursion.hoplon.code.call(null,G__130084));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130083) : tailrecursion.hoplon.pre.call(null,G__130083));
})(),(function (){var G__130085 = cljs.core.PersistentArrayMap.EMPTY;
var G__130086 = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consisting of the symbol cond followed by pairs of expressions <p> <e> called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clauses"], null)], 0)),". The first expression in each pair is a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," ",(function (){var G__130087 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__130088 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__130087,G__130088) : tailrecursion.hoplon.markdown.simple_node.call(null,G__130087,G__130088));
})()," that is, an expression whose value is interpreted as either ",(function (){var G__130089 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__130090 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130089,G__130090) : tailrecursion.hoplon.markdown.code_node.call(null,G__130089,G__130090));
})()," or ",(function (){var G__130091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__130092 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130091,G__130092) : tailrecursion.hoplon.markdown.code_node.call(null,G__130091,G__130092));
})(),".",(function (){var G__130093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__130094 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130095 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__130096 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Interpreted as either true or false"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130095,G__130096) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130095,G__130096));
})()," means this: In Scheme, there are two distinguished values that are denoted by the constants ",(function (){var G__130097 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__130098 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130097,G__130098) : tailrecursion.hoplon.markdown.code_node.call(null,G__130097,G__130098));
})()," and ",(function (){var G__130099 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__130100 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130099,G__130100) : tailrecursion.hoplon.markdown.code_node.call(null,G__130099,G__130100));
})(),". When the interpreter checks a predicate",(function (){var G__130101 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__130102 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__130101,G__130102) : tailrecursion.hoplon.markdown.simple_node.call(null,G__130101,G__130102));
})(),"s value, it interprets",(function (){var G__130103 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__130104 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130103,G__130104) : tailrecursion.hoplon.markdown.code_node.call(null,G__130103,G__130104));
})()," and ",(function (){var G__130105 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"nil"], null);
var G__130106 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130105,G__130106) : tailrecursion.hoplon.markdown.code_node.call(null,G__130105,G__130106));
})()," as false. Any other value is treated as true. (Thus, providing ",(function (){var G__130107 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__130108 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130107,G__130108) : tailrecursion.hoplon.markdown.code_node.call(null,G__130107,G__130108));
})()," is logically unnecessary, but it is convenient.)"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130093,G__130094) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130093,G__130094));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130085,G__130086) : tailrecursion.hoplon.markdown.para_node.call(null,G__130085,G__130086));
})(),(function (){var G__130109 = cljs.core.PersistentArrayMap.EMPTY;
var G__130110 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Conditional expressions are evaluated as follows. The predicate <p1> is evaluated first. If its value is false, then <p2> is evaluated. If <p2>",(function (){var G__130111 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__130112 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__130111,G__130112) : tailrecursion.hoplon.markdown.simple_node.call(null,G__130111,G__130112));
})(),"s value is also false, then <p3> is evaluated. This process continues until a predicate is found whose value is true, in which case the interpreter returns the value of the corresponding ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["consequent expression"], null)], 0))," <e> of the clause as the value of the conditional expression. If none of the <p>",(function (){var G__130113 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__130114 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__130113,G__130114) : tailrecursion.hoplon.markdown.simple_node.call(null,G__130113,G__130114));
})(),"s is found to be true, the value of the ",(function (){var G__130115 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__130116 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130115,G__130116) : tailrecursion.hoplon.markdown.code_node.call(null,G__130115,G__130116));
})()," is undefined."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130109,G__130110) : tailrecursion.hoplon.markdown.para_node.call(null,G__130109,G__130110));
})(),(function (){var G__130117 = cljs.core.PersistentArrayMap.EMPTY;
var G__130118 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The word ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["predicate"], null)], 0))," is used for procedures that return ",(function (){var G__130119 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__130120 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130119,G__130120) : tailrecursion.hoplon.markdown.code_node.call(null,G__130119,G__130120));
})()," or ",(function (){var G__130121 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__130122 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130121,G__130122) : tailrecursion.hoplon.markdown.code_node.call(null,G__130121,G__130122));
})(),", as well as for expressions that evaluate to ",(function (){var G__130123 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"true"], null);
var G__130124 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130123,G__130124) : tailrecursion.hoplon.markdown.code_node.call(null,G__130123,G__130124));
})()," or ",(function (){var G__130125 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"false"], null);
var G__130126 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130125,G__130126) : tailrecursion.hoplon.markdown.code_node.call(null,G__130125,G__130126));
})(),". The absolute-value procedure ",(function (){var G__130127 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__130128 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130127,G__130128) : tailrecursion.hoplon.markdown.code_node.call(null,G__130127,G__130128));
})()," makes use of the primitive predicates >, <, and =.",(function (){var G__130129 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__130130 = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130131 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Abs"], null);
var G__130132 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130131,G__130132) : tailrecursion.hoplon.markdown.code_node.call(null,G__130131,G__130132));
})()," also uses the ",(function (){var G__130133 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__130134 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["minus"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130133,G__130134) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130133,G__130134));
})()," operator ",(function (){var G__130135 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"-"], null);
var G__130136 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130135,G__130136) : tailrecursion.hoplon.markdown.code_node.call(null,G__130135,G__130136));
})(),", which, when used with a single operand, as in ",(function (){var G__130137 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(- x)"], null);
var G__130138 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130137,G__130138) : tailrecursion.hoplon.markdown.code_node.call(null,G__130137,G__130138));
})(),", indicates negation."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130129,G__130130) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130129,G__130130));
})()," These take two numbers as arguments and test whether the first number is, respectively, greater than, less than, or equal to the second number, returning true or false accordingly."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130117,G__130118) : tailrecursion.hoplon.markdown.para_node.call(null,G__130117,G__130118));
})(),(function (){var G__130139 = cljs.core.PersistentArrayMap.EMPTY;
var G__130140 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Another way to write the absolute-value procedure is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130139,G__130140) : tailrecursion.hoplon.markdown.para_node.call(null,G__130139,G__130140));
})(),(function (){var G__130141 = (function (){var G__130142 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130143 = (function (){var G__130144 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130145 = "(";
var G__130146 = (function (){var G__130165 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130166 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130165,G__130166) : tailrecursion.hoplon.span.call(null,G__130165,G__130166));
})();
var G__130147 = (function (){var G__130167 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130168 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130167,G__130168) : tailrecursion.hoplon.span.call(null,G__130167,G__130168));
})();
var G__130148 = " [";
var G__130149 = (function (){var G__130169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130170 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130169,G__130170) : tailrecursion.hoplon.span.call(null,G__130169,G__130170));
})();
var G__130150 = "]\n  (";
var G__130151 = (function (){var G__130171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130172 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130171,G__130172) : tailrecursion.hoplon.span.call(null,G__130171,G__130172));
})();
var G__130152 = "(";
var G__130153 = (function (){var G__130173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130174 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130173,G__130174) : tailrecursion.hoplon.span.call(null,G__130173,G__130174));
})();
var G__130154 = (function (){var G__130175 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130176 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130175,G__130176) : tailrecursion.hoplon.span.call(null,G__130175,G__130176));
})();
var G__130155 = " ";
var G__130156 = (function (){var G__130177 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130178 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130177,G__130178) : tailrecursion.hoplon.span.call(null,G__130177,G__130178));
})();
var G__130157 = ") (";
var G__130158 = (function (){var G__130179 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130180 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130179,G__130180) : tailrecursion.hoplon.span.call(null,G__130179,G__130180));
})();
var G__130159 = (function (){var G__130181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130182 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130181,G__130182) : tailrecursion.hoplon.span.call(null,G__130181,G__130182));
})();
var G__130160 = ")\n        ";
var G__130161 = (function (){var G__130183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130184 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130183,G__130184) : tailrecursion.hoplon.span.call(null,G__130183,G__130184));
})();
var G__130162 = " ";
var G__130163 = (function (){var G__130185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130186 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130185,G__130186) : tailrecursion.hoplon.span.call(null,G__130185,G__130186));
})();
var G__130164 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__130144,G__130145,G__130146,G__130147,G__130148,G__130149,G__130150,G__130151,G__130152,G__130153,G__130154,G__130155,G__130156,G__130157,G__130158,G__130159,G__130160,G__130161,G__130162,G__130163,G__130164) : tailrecursion.hoplon.pre.call(null,G__130144,G__130145,G__130146,G__130147,G__130148,G__130149,G__130150,G__130151,G__130152,G__130153,G__130154,G__130155,G__130156,G__130157,G__130158,G__130159,G__130160,G__130161,G__130162,G__130163,G__130164));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130142,G__130143) : tailrecursion.hoplon.div.call(null,G__130142,G__130143));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130141) : tailrecursion.hoplon.div.call(null,G__130141));
})(),(function (){var G__130187 = cljs.core.PersistentArrayMap.EMPTY;
var G__130188 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["which could be expressed in English as ",(function (){var G__130189 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__130190 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If x is less than zero return - x; otherwise return x."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130189,G__130190) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130189,G__130190));
})()," ",(function (){var G__130191 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,":else"], null);
var G__130192 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130191,G__130192) : tailrecursion.hoplon.markdown.code_node.call(null,G__130191,G__130192));
})()," is a special symbol that can be used in place of the <p> in the final clause of a ",(function (){var G__130193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__130194 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130193,G__130194) : tailrecursion.hoplon.markdown.code_node.call(null,G__130193,G__130194));
})(),". This causes the ",(function (){var G__130195 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__130196 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130195,G__130196) : tailrecursion.hoplon.markdown.code_node.call(null,G__130195,G__130196));
})()," to return as its value the value of the corresponding <e> whenever all previous clauses have been bypassed. In fact, any expression that always evaluates to a true value could be used as the <p> here."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130187,G__130188) : tailrecursion.hoplon.markdown.para_node.call(null,G__130187,G__130188));
})(),(function (){var G__130197 = cljs.core.PersistentArrayMap.EMPTY;
var G__130198 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Here is yet another way to write the absolute-value procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130197,G__130198) : tailrecursion.hoplon.markdown.para_node.call(null,G__130197,G__130198));
})(),(function (){var G__130199 = (function (){var G__130200 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130201 = (function (){var G__130202 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130203 = "(";
var G__130204 = (function (){var G__130221 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130222 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130221,G__130222) : tailrecursion.hoplon.span.call(null,G__130221,G__130222));
})();
var G__130205 = (function (){var G__130223 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130224 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130223,G__130224) : tailrecursion.hoplon.span.call(null,G__130223,G__130224));
})();
var G__130206 = " [";
var G__130207 = (function (){var G__130225 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130226 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130225,G__130226) : tailrecursion.hoplon.span.call(null,G__130225,G__130226));
})();
var G__130208 = "]\n  (";
var G__130209 = (function (){var G__130227 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130228 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130227,G__130228) : tailrecursion.hoplon.span.call(null,G__130227,G__130228));
})();
var G__130210 = "(";
var G__130211 = (function (){var G__130229 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130230 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130229,G__130230) : tailrecursion.hoplon.span.call(null,G__130229,G__130230));
})();
var G__130212 = (function (){var G__130231 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130232 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130231,G__130232) : tailrecursion.hoplon.span.call(null,G__130231,G__130232));
})();
var G__130213 = " ";
var G__130214 = (function (){var G__130233 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130234 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130233,G__130234) : tailrecursion.hoplon.span.call(null,G__130233,G__130234));
})();
var G__130215 = ")\n      (";
var G__130216 = (function (){var G__130235 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130236 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130235,G__130236) : tailrecursion.hoplon.span.call(null,G__130235,G__130236));
})();
var G__130217 = (function (){var G__130237 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130238 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130237,G__130238) : tailrecursion.hoplon.span.call(null,G__130237,G__130238));
})();
var G__130218 = ")\n      ";
var G__130219 = (function (){var G__130239 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130240 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130239,G__130240) : tailrecursion.hoplon.span.call(null,G__130239,G__130240));
})();
var G__130220 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$19(G__130202,G__130203,G__130204,G__130205,G__130206,G__130207,G__130208,G__130209,G__130210,G__130211,G__130212,G__130213,G__130214,G__130215,G__130216,G__130217,G__130218,G__130219,G__130220) : tailrecursion.hoplon.pre.call(null,G__130202,G__130203,G__130204,G__130205,G__130206,G__130207,G__130208,G__130209,G__130210,G__130211,G__130212,G__130213,G__130214,G__130215,G__130216,G__130217,G__130218,G__130219,G__130220));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130200,G__130201) : tailrecursion.hoplon.div.call(null,G__130200,G__130201));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130199) : tailrecursion.hoplon.div.call(null,G__130199));
})(),(function (){var G__130241 = cljs.core.PersistentArrayMap.EMPTY;
var G__130242 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This uses the special form ",(function (){var G__130243 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__130244 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130243,G__130244) : tailrecursion.hoplon.markdown.code_node.call(null,G__130243,G__130244));
})(),", a restricted type of conditional that can be used when there are precisely two cases in the case analysis. The general form of an ",(function (){var G__130245 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__130246 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130245,G__130246) : tailrecursion.hoplon.markdown.code_node.call(null,G__130245,G__130246));
})()," expression is"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130241,G__130242) : tailrecursion.hoplon.markdown.para_node.call(null,G__130241,G__130242));
})(),(function (){var G__130247 = (function (){var G__130248 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130249 = (function (){var G__130250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130251 = "(";
var G__130252 = (function (){var G__130259 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130260 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130259,G__130260) : tailrecursion.hoplon.span.call(null,G__130259,G__130260));
})();
var G__130253 = (function (){var G__130261 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130262 = "<predicate>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130261,G__130262) : tailrecursion.hoplon.span.call(null,G__130261,G__130262));
})();
var G__130254 = " ";
var G__130255 = (function (){var G__130263 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130264 = "<consequent>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130263,G__130264) : tailrecursion.hoplon.span.call(null,G__130263,G__130264));
})();
var G__130256 = " ";
var G__130257 = (function (){var G__130265 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130266 = "<alternative>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130265,G__130266) : tailrecursion.hoplon.span.call(null,G__130265,G__130266));
})();
var G__130258 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__130250,G__130251,G__130252,G__130253,G__130254,G__130255,G__130256,G__130257,G__130258) : tailrecursion.hoplon.pre.call(null,G__130250,G__130251,G__130252,G__130253,G__130254,G__130255,G__130256,G__130257,G__130258));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130248,G__130249) : tailrecursion.hoplon.div.call(null,G__130248,G__130249));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130247) : tailrecursion.hoplon.div.call(null,G__130247));
})(),(function (){var G__130267 = cljs.core.PersistentArrayMap.EMPTY;
var G__130268 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To evaluate an ",(function (){var G__130269 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__130270 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130269,G__130270) : tailrecursion.hoplon.markdown.code_node.call(null,G__130269,G__130270));
})()," expression, the interpreter starts by evaluating the <predicate> part of the expression. If the <predicate> evaluates to a true value, the interpreter then evaluates the <consequent> and returns its value. Otherwise it evaluates the <alternative> and returns its value.",(function (){var G__130271 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__130272 = new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In Scheme, a minor difference between ",(function (){var G__130273 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__130274 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130273,G__130274) : tailrecursion.hoplon.markdown.code_node.call(null,G__130273,G__130274));
})()," and ",(function (){var G__130275 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__130276 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130275,G__130276) : tailrecursion.hoplon.markdown.code_node.call(null,G__130275,G__130276));
})()," is that the ",(function (){var G__130277 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<e>"], null);
var G__130278 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130277,G__130278) : tailrecursion.hoplon.markdown.code_node.call(null,G__130277,G__130278));
})()," part of each ",(function (){var G__130279 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__130280 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130279,G__130280) : tailrecursion.hoplon.markdown.code_node.call(null,G__130279,G__130280));
})()," clause may be a sequence of expressions. If the corresponding ",(function (){var G__130281 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<p>"], null);
var G__130282 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130281,G__130282) : tailrecursion.hoplon.markdown.code_node.call(null,G__130281,G__130282));
})()," is found to be true, the expressions ",(function (){var G__130283 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<e>"], null);
var G__130284 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130283,G__130284) : tailrecursion.hoplon.markdown.code_node.call(null,G__130283,G__130284));
})()," are evaluated in sequence and the value of the final expression in the sequence is returned as the value of the ",(function (){var G__130285 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cond"], null);
var G__130286 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130285,G__130286) : tailrecursion.hoplon.markdown.code_node.call(null,G__130285,G__130286));
})(),". In an ",(function (){var G__130287 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__130288 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130287,G__130288) : tailrecursion.hoplon.markdown.code_node.call(null,G__130287,G__130288));
})()," expression, however, the ",(function (){var G__130289 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<consequent>"], null);
var G__130290 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130289,G__130290) : tailrecursion.hoplon.markdown.code_node.call(null,G__130289,G__130290));
})()," and ",(function (){var G__130291 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<alternative>"], null);
var G__130292 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130291,G__130292) : tailrecursion.hoplon.markdown.code_node.call(null,G__130291,G__130292));
})()," must be single expressions. In Clojure, however, these must all be single expressioins. To get a similar functionality one could use ",(function (){var G__130293 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"do"], null);
var G__130294 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130293,G__130294) : tailrecursion.hoplon.markdown.code_node.call(null,G__130293,G__130294));
})(),"."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__130271,G__130272) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__130271,G__130272));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130267,G__130268) : tailrecursion.hoplon.markdown.para_node.call(null,G__130267,G__130268));
})(),(function (){var G__130295 = cljs.core.PersistentArrayMap.EMPTY;
var G__130296 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["In addition to primitive predicates such as <, =, and >, there are logical composition operations, which enable us to construct compound predicates. The three most frequently used are these:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130295,G__130296) : tailrecursion.hoplon.markdown.para_node.call(null,G__130295,G__130296));
})(),(function (){var G__130297 = cljs.core.PersistentArrayMap.EMPTY;
var G__130298 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130299 = cljs.core.PersistentArrayMap.EMPTY;
var G__130300 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_130301 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130302 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__130303 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"\n  (and <e1> ... <en>)\n"], null);
var G__130304 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130303,G__130304) : tailrecursion.hoplon.markdown.code_node.call(null,G__130303,G__130304));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130302;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130301;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__130299,G__130300) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__130299,G__130300));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__130297,G__130298) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__130297,G__130298));
})(),(function (){var G__130305 = cljs.core.PersistentArrayMap.EMPTY;
var G__130306 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to false, the value of the  ",(function (){var G__130307 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"and"], null);
var G__130308 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130307,G__130308) : tailrecursion.hoplon.markdown.code_node.call(null,G__130307,G__130308));
})()," expression is false, and the rest of the <e>",(function (){var G__130309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__130310 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__130309,G__130310) : tailrecursion.hoplon.markdown.simple_node.call(null,G__130309,G__130310));
})(),"s are not  evaluated. If all <e>",(function (){var G__130311 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__130312 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__130311,G__130312) : tailrecursion.hoplon.markdown.simple_node.call(null,G__130311,G__130312));
})(),"s evaluate to true values, the value of the and  expression is the value of the last one."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130305,G__130306) : tailrecursion.hoplon.markdown.para_node.call(null,G__130305,G__130306));
})(),(function (){var G__130313 = cljs.core.PersistentArrayMap.EMPTY;
var G__130314 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130315 = cljs.core.PersistentArrayMap.EMPTY;
var G__130316 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_130317 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130318 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__130319 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"\n  (or <e1> ... <en>)\n"], null);
var G__130320 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130319,G__130320) : tailrecursion.hoplon.markdown.code_node.call(null,G__130319,G__130320));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130318;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130317;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__130315,G__130316) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__130315,G__130316));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__130313,G__130314) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__130313,G__130314));
})(),(function (){var G__130321 = cljs.core.PersistentArrayMap.EMPTY;
var G__130322 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The interpreter evaluates the expressions <e> one at a time, in  left-to-right order. If any <e> evaluates to a true value, that value  is returned as the value of the or expression, and the rest of the  <e>",(function (){var G__130323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__130324 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__130323,G__130324) : tailrecursion.hoplon.markdown.simple_node.call(null,G__130323,G__130324));
})(),"s are not evaluated. If all <e>",(function (){var G__130325 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__130326 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__130325,G__130326) : tailrecursion.hoplon.markdown.simple_node.call(null,G__130325,G__130326));
})(),"s evaluate to false, the value of  the ",(function (){var G__130327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"or"], null);
var G__130328 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130327,G__130328) : tailrecursion.hoplon.markdown.code_node.call(null,G__130327,G__130328));
})()," expression is false."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130321,G__130322) : tailrecursion.hoplon.markdown.para_node.call(null,G__130321,G__130322));
})(),(function (){var G__130329 = cljs.core.PersistentArrayMap.EMPTY;
var G__130330 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130331 = cljs.core.PersistentArrayMap.EMPTY;
var G__130332 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_130333 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130334 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ",(function (){var G__130335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"\n  (not <e>)\n"], null);
var G__130336 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130335,G__130336) : tailrecursion.hoplon.markdown.code_node.call(null,G__130335,G__130336));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130334;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130333;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__130331,G__130332) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__130331,G__130332));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__130329,G__130330) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__130329,G__130330));
})(),(function (){var G__130337 = cljs.core.PersistentArrayMap.EMPTY;
var G__130338 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The value of a ",(function (){var G__130339 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"not"], null);
var G__130340 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130339,G__130340) : tailrecursion.hoplon.markdown.code_node.call(null,G__130339,G__130340));
})()," expression is true when the expression <e>  evaluates to false, and false otherwise."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130337,G__130338) : tailrecursion.hoplon.markdown.para_node.call(null,G__130337,G__130338));
})(),(function (){var G__130341 = cljs.core.PersistentArrayMap.EMPTY;
var G__130342 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Notice that ",(function (){var G__130343 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"and"], null);
var G__130344 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130343,G__130344) : tailrecursion.hoplon.markdown.code_node.call(null,G__130343,G__130344));
})()," and ",(function (){var G__130345 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"or"], null);
var G__130346 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130345,G__130346) : tailrecursion.hoplon.markdown.code_node.call(null,G__130345,G__130346));
})()," are special forms, not procedures, because the subexpressions are not necessarily all evaluated. ",(function (){var G__130347 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"not"], null);
var G__130348 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__130347,G__130348) : tailrecursion.hoplon.markdown.code_node.call(null,G__130347,G__130348));
})()," is an ordinary procedure."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130341,G__130342) : tailrecursion.hoplon.markdown.para_node.call(null,G__130341,G__130342));
})(),(function (){var G__130349 = cljs.core.PersistentArrayMap.EMPTY;
var G__130350 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As an example of how these are used, the condition that a number x be in the range \\(5 \\lt x \\lt 10\\) may be expressed as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130349,G__130350) : tailrecursion.hoplon.markdown.para_node.call(null,G__130349,G__130350));
})(),(function (){var G__130351 = (function (){var G__130352 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130353 = (function (){var G__130354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130355 = "(";
var G__130356 = (function (){var G__130368 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130369 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130368,G__130369) : tailrecursion.hoplon.span.call(null,G__130368,G__130369));
})();
var G__130357 = "(";
var G__130358 = (function (){var G__130370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130371 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130370,G__130371) : tailrecursion.hoplon.span.call(null,G__130370,G__130371));
})();
var G__130359 = (function (){var G__130372 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130373 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130372,G__130373) : tailrecursion.hoplon.span.call(null,G__130372,G__130373));
})();
var G__130360 = " ";
var G__130361 = (function (){var G__130374 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130375 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130374,G__130375) : tailrecursion.hoplon.span.call(null,G__130374,G__130375));
})();
var G__130362 = ") (";
var G__130363 = (function (){var G__130376 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130377 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130376,G__130377) : tailrecursion.hoplon.span.call(null,G__130376,G__130377));
})();
var G__130364 = (function (){var G__130378 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130379 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130378,G__130379) : tailrecursion.hoplon.span.call(null,G__130378,G__130379));
})();
var G__130365 = " ";
var G__130366 = (function (){var G__130380 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130381 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130380,G__130381) : tailrecursion.hoplon.span.call(null,G__130380,G__130381));
})();
var G__130367 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__130354,G__130355,G__130356,G__130357,G__130358,G__130359,G__130360,G__130361,G__130362,G__130363,G__130364,G__130365,G__130366,G__130367) : tailrecursion.hoplon.pre.call(null,G__130354,G__130355,G__130356,G__130357,G__130358,G__130359,G__130360,G__130361,G__130362,G__130363,G__130364,G__130365,G__130366,G__130367));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130352,G__130353) : tailrecursion.hoplon.div.call(null,G__130352,G__130353));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130351) : tailrecursion.hoplon.div.call(null,G__130351));
})(),(function (){var G__130382 = cljs.core.PersistentArrayMap.EMPTY;
var G__130383 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["As another example, we can define a predicate to test whether one number is greater than or equal to another as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130382,G__130383) : tailrecursion.hoplon.markdown.para_node.call(null,G__130382,G__130383));
})(),(function (){var G__130384 = (function (){var G__130385 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130386 = (function (){var G__130387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130388 = "(";
var G__130389 = (function (){var G__130408 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130409 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130408,G__130409) : tailrecursion.hoplon.span.call(null,G__130408,G__130409));
})();
var G__130390 = (function (){var G__130410 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130411 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130410,G__130411) : tailrecursion.hoplon.span.call(null,G__130410,G__130411));
})();
var G__130391 = "[";
var G__130392 = (function (){var G__130412 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130413 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130412,G__130413) : tailrecursion.hoplon.span.call(null,G__130412,G__130413));
})();
var G__130393 = " ";
var G__130394 = (function (){var G__130414 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130415 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130414,G__130415) : tailrecursion.hoplon.span.call(null,G__130414,G__130415));
})();
var G__130395 = "] \n  (";
var G__130396 = (function (){var G__130416 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130417 = "or ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130416,G__130417) : tailrecursion.hoplon.span.call(null,G__130416,G__130417));
})();
var G__130397 = "(";
var G__130398 = (function (){var G__130418 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130419 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130418,G__130419) : tailrecursion.hoplon.span.call(null,G__130418,G__130419));
})();
var G__130399 = (function (){var G__130420 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130421 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130420,G__130421) : tailrecursion.hoplon.span.call(null,G__130420,G__130421));
})();
var G__130400 = " ";
var G__130401 = (function (){var G__130422 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130423 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130422,G__130423) : tailrecursion.hoplon.span.call(null,G__130422,G__130423));
})();
var G__130402 = ") (";
var G__130403 = (function (){var G__130424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130425 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130424,G__130425) : tailrecursion.hoplon.span.call(null,G__130424,G__130425));
})();
var G__130404 = (function (){var G__130426 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130427 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130426,G__130427) : tailrecursion.hoplon.span.call(null,G__130426,G__130427));
})();
var G__130405 = " ";
var G__130406 = (function (){var G__130428 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130429 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130428,G__130429) : tailrecursion.hoplon.span.call(null,G__130428,G__130429));
})();
var G__130407 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$21(G__130387,G__130388,G__130389,G__130390,G__130391,G__130392,G__130393,G__130394,G__130395,G__130396,G__130397,G__130398,G__130399,G__130400,G__130401,G__130402,G__130403,G__130404,G__130405,G__130406,G__130407) : tailrecursion.hoplon.pre.call(null,G__130387,G__130388,G__130389,G__130390,G__130391,G__130392,G__130393,G__130394,G__130395,G__130396,G__130397,G__130398,G__130399,G__130400,G__130401,G__130402,G__130403,G__130404,G__130405,G__130406,G__130407));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130385,G__130386) : tailrecursion.hoplon.div.call(null,G__130385,G__130386));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130384) : tailrecursion.hoplon.div.call(null,G__130384));
})(),(function (){var G__130430 = cljs.core.PersistentArrayMap.EMPTY;
var G__130431 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["or alternatively as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130430,G__130431) : tailrecursion.hoplon.markdown.para_node.call(null,G__130430,G__130431));
})(),(function (){var G__130432 = (function (){var G__130433 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130434 = (function (){var G__130435 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130436 = "(";
var G__130437 = (function (){var G__130451 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130452 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130451,G__130452) : tailrecursion.hoplon.span.call(null,G__130451,G__130452));
})();
var G__130438 = (function (){var G__130453 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130454 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130453,G__130454) : tailrecursion.hoplon.span.call(null,G__130453,G__130454));
})();
var G__130439 = "[";
var G__130440 = (function (){var G__130455 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130456 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130455,G__130456) : tailrecursion.hoplon.span.call(null,G__130455,G__130456));
})();
var G__130441 = " ";
var G__130442 = (function (){var G__130457 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130458 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130457,G__130458) : tailrecursion.hoplon.span.call(null,G__130457,G__130458));
})();
var G__130443 = "]\n  (";
var G__130444 = (function (){var G__130459 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130460 = "not ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130459,G__130460) : tailrecursion.hoplon.span.call(null,G__130459,G__130460));
})();
var G__130445 = "(";
var G__130446 = (function (){var G__130461 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130462 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130461,G__130462) : tailrecursion.hoplon.span.call(null,G__130461,G__130462));
})();
var G__130447 = (function (){var G__130463 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130464 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130463,G__130464) : tailrecursion.hoplon.span.call(null,G__130463,G__130464));
})();
var G__130448 = " ";
var G__130449 = (function (){var G__130465 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130466 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130465,G__130466) : tailrecursion.hoplon.span.call(null,G__130465,G__130466));
})();
var G__130450 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__130435,G__130436,G__130437,G__130438,G__130439,G__130440,G__130441,G__130442,G__130443,G__130444,G__130445,G__130446,G__130447,G__130448,G__130449,G__130450) : tailrecursion.hoplon.pre.call(null,G__130435,G__130436,G__130437,G__130438,G__130439,G__130440,G__130441,G__130442,G__130443,G__130444,G__130445,G__130446,G__130447,G__130448,G__130449,G__130450));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130433,G__130434) : tailrecursion.hoplon.div.call(null,G__130433,G__130434));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130432) : tailrecursion.hoplon.div.call(null,G__130432));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130068;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130067;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130066;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130065;
}})()], 0));
var G__128863 = content.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130467 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130468 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130469 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130470 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130471 = cljs.core.PersistentArrayMap.EMPTY;
var G__130472 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130471,G__130472) : tailrecursion.hoplon.markdown.para_node.call(null,G__130471,G__130472));
})(),(function (){var G__130473 = (function (){var G__130474 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130475 = (function (){var G__130476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130477 = (function (){var G__130479 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130480 = "10";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130479,G__130480) : tailrecursion.hoplon.span.call(null,G__130479,G__130480));
})();
var G__130478 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$3(G__130476,G__130477,G__130478) : tailrecursion.hoplon.pre.call(null,G__130476,G__130477,G__130478));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130474,G__130475) : tailrecursion.hoplon.div.call(null,G__130474,G__130475));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130473) : tailrecursion.hoplon.div.call(null,G__130473));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130470;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130469;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130468;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130467;
}})(),content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130481 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130482 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130483 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130484 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130485 = (function (){var G__130486 = "10\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130486) : tailrecursion.hoplon.code.call(null,G__130486));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130485) : tailrecursion.hoplon.pre.call(null,G__130485));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130484;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130483;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130482;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130481;
}})()], 0)),"",(function (){var _STAR_references_STAR_130487 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130488 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130489 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130490 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130491 = (function (){var G__130492 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130493 = (function (){var G__130494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130495 = "(";
var G__130496 = (function (){var G__130503 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130504 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130503,G__130504) : tailrecursion.hoplon.span.call(null,G__130503,G__130504));
})();
var G__130497 = (function (){var G__130505 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130506 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130505,G__130506) : tailrecursion.hoplon.span.call(null,G__130505,G__130506));
})();
var G__130498 = " ";
var G__130499 = (function (){var G__130507 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130508 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130507,G__130508) : tailrecursion.hoplon.span.call(null,G__130507,G__130508));
})();
var G__130500 = " ";
var G__130501 = (function (){var G__130509 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130510 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130509,G__130510) : tailrecursion.hoplon.span.call(null,G__130509,G__130510));
})();
var G__130502 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$9(G__130494,G__130495,G__130496,G__130497,G__130498,G__130499,G__130500,G__130501,G__130502) : tailrecursion.hoplon.pre.call(null,G__130494,G__130495,G__130496,G__130497,G__130498,G__130499,G__130500,G__130501,G__130502));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130492,G__130493) : tailrecursion.hoplon.div.call(null,G__130492,G__130493));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130491) : tailrecursion.hoplon.div.call(null,G__130491));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130490;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130489;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130488;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130487;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130511 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130512 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130513 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130514 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130515 = (function (){var G__130516 = "12\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130516) : tailrecursion.hoplon.code.call(null,G__130516));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130515) : tailrecursion.hoplon.pre.call(null,G__130515));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130514;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130513;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130512;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130511;
}})()], 0)),"",(function (){var _STAR_references_STAR_130517 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130518 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130519 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130520 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130521 = (function (){var G__130522 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130523 = (function (){var G__130524 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130525 = "(";
var G__130526 = (function (){var G__130531 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130532 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130531,G__130532) : tailrecursion.hoplon.span.call(null,G__130531,G__130532));
})();
var G__130527 = (function (){var G__130533 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130534 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130533,G__130534) : tailrecursion.hoplon.span.call(null,G__130533,G__130534));
})();
var G__130528 = " ";
var G__130529 = (function (){var G__130535 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130536 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130535,G__130536) : tailrecursion.hoplon.span.call(null,G__130535,G__130536));
})();
var G__130530 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__130524,G__130525,G__130526,G__130527,G__130528,G__130529,G__130530) : tailrecursion.hoplon.pre.call(null,G__130524,G__130525,G__130526,G__130527,G__130528,G__130529,G__130530));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130522,G__130523) : tailrecursion.hoplon.div.call(null,G__130522,G__130523));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130521) : tailrecursion.hoplon.div.call(null,G__130521));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130520;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130519;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130518;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130517;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130537 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130538 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130539 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130540 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130541 = (function (){var G__130542 = "8\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130542) : tailrecursion.hoplon.code.call(null,G__130542));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130541) : tailrecursion.hoplon.pre.call(null,G__130541));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130540;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130539;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130538;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130537;
}})()], 0)),"",(function (){var _STAR_references_STAR_130543 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130544 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130545 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130546 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130547 = (function (){var G__130548 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130549 = (function (){var G__130550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130551 = "(";
var G__130552 = (function (){var G__130557 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130558 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130557,G__130558) : tailrecursion.hoplon.span.call(null,G__130557,G__130558));
})();
var G__130553 = (function (){var G__130559 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130560 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130559,G__130560) : tailrecursion.hoplon.span.call(null,G__130559,G__130560));
})();
var G__130554 = " ";
var G__130555 = (function (){var G__130561 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130562 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130561,G__130562) : tailrecursion.hoplon.span.call(null,G__130561,G__130562));
})();
var G__130556 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__130550,G__130551,G__130552,G__130553,G__130554,G__130555,G__130556) : tailrecursion.hoplon.pre.call(null,G__130550,G__130551,G__130552,G__130553,G__130554,G__130555,G__130556));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130548,G__130549) : tailrecursion.hoplon.div.call(null,G__130548,G__130549));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130547) : tailrecursion.hoplon.div.call(null,G__130547));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130546;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130545;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130544;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130543;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130563 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130564 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130565 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130566 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130567 = (function (){var G__130568 = "3\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130568) : tailrecursion.hoplon.code.call(null,G__130568));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130567) : tailrecursion.hoplon.pre.call(null,G__130567));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130566;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130565;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130564;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130563;
}})()], 0)),"",(function (){var _STAR_references_STAR_130569 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130570 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130571 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130572 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130573 = (function (){var G__130574 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130575 = (function (){var G__130576 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130577 = "(";
var G__130578 = (function (){var G__130590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130591 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130590,G__130591) : tailrecursion.hoplon.span.call(null,G__130590,G__130591));
})();
var G__130579 = "(";
var G__130580 = (function (){var G__130592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130593 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130592,G__130593) : tailrecursion.hoplon.span.call(null,G__130592,G__130593));
})();
var G__130581 = (function (){var G__130594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130595 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130594,G__130595) : tailrecursion.hoplon.span.call(null,G__130594,G__130595));
})();
var G__130582 = " ";
var G__130583 = (function (){var G__130596 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130597 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130596,G__130597) : tailrecursion.hoplon.span.call(null,G__130596,G__130597));
})();
var G__130584 = ") (";
var G__130585 = (function (){var G__130598 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130599 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130598,G__130599) : tailrecursion.hoplon.span.call(null,G__130598,G__130599));
})();
var G__130586 = (function (){var G__130600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130601 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130600,G__130601) : tailrecursion.hoplon.span.call(null,G__130600,G__130601));
})();
var G__130587 = " ";
var G__130588 = (function (){var G__130602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130603 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130602,G__130603) : tailrecursion.hoplon.span.call(null,G__130602,G__130603));
})();
var G__130589 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$14(G__130576,G__130577,G__130578,G__130579,G__130580,G__130581,G__130582,G__130583,G__130584,G__130585,G__130586,G__130587,G__130588,G__130589) : tailrecursion.hoplon.pre.call(null,G__130576,G__130577,G__130578,G__130579,G__130580,G__130581,G__130582,G__130583,G__130584,G__130585,G__130586,G__130587,G__130588,G__130589));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130574,G__130575) : tailrecursion.hoplon.div.call(null,G__130574,G__130575));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130573) : tailrecursion.hoplon.div.call(null,G__130573));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130572;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130571;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130570;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130569;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130604 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130605 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130606 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130607 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130608 = (function (){var G__130609 = "6\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130609) : tailrecursion.hoplon.code.call(null,G__130609));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130608) : tailrecursion.hoplon.pre.call(null,G__130608));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130607;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130606;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130605;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130604;
}})()], 0)),"",(function (){var _STAR_references_STAR_130610 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130611 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130612 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130613 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130614 = (function (){var G__130615 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130616 = (function (){var G__130617 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130618 = "(";
var G__130619 = (function (){var G__130624 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130625 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130624,G__130625) : tailrecursion.hoplon.span.call(null,G__130624,G__130625));
})();
var G__130620 = (function (){var G__130626 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130627 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130626,G__130627) : tailrecursion.hoplon.span.call(null,G__130626,G__130627));
})();
var G__130621 = " ";
var G__130622 = (function (){var G__130628 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130629 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130628,G__130629) : tailrecursion.hoplon.span.call(null,G__130628,G__130629));
})();
var G__130623 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__130617,G__130618,G__130619,G__130620,G__130621,G__130622,G__130623) : tailrecursion.hoplon.pre.call(null,G__130617,G__130618,G__130619,G__130620,G__130621,G__130622,G__130623));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130615,G__130616) : tailrecursion.hoplon.div.call(null,G__130615,G__130616));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130614) : tailrecursion.hoplon.div.call(null,G__130614));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130613;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130612;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130611;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130610;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130630 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130631 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130632 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130633 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130634 = (function (){var G__130635 = "a\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130635) : tailrecursion.hoplon.code.call(null,G__130635));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130634) : tailrecursion.hoplon.pre.call(null,G__130634));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130633;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130632;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130631;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130630;
}})()], 0)),"",(function (){var _STAR_references_STAR_130636 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130637 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130638 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130639 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130640 = (function (){var G__130641 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130642 = (function (){var G__130643 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130644 = "(";
var G__130645 = (function (){var G__130653 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130654 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130653,G__130654) : tailrecursion.hoplon.span.call(null,G__130653,G__130654));
})();
var G__130646 = (function (){var G__130655 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130656 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130655,G__130656) : tailrecursion.hoplon.span.call(null,G__130655,G__130656));
})();
var G__130647 = " (";
var G__130648 = (function (){var G__130657 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130658 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130657,G__130658) : tailrecursion.hoplon.span.call(null,G__130657,G__130658));
})();
var G__130649 = (function (){var G__130659 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130660 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130659,G__130660) : tailrecursion.hoplon.span.call(null,G__130659,G__130660));
})();
var G__130650 = " ";
var G__130651 = (function (){var G__130661 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130662 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130661,G__130662) : tailrecursion.hoplon.span.call(null,G__130661,G__130662));
})();
var G__130652 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$10(G__130643,G__130644,G__130645,G__130646,G__130647,G__130648,G__130649,G__130650,G__130651,G__130652) : tailrecursion.hoplon.pre.call(null,G__130643,G__130644,G__130645,G__130646,G__130647,G__130648,G__130649,G__130650,G__130651,G__130652));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130641,G__130642) : tailrecursion.hoplon.div.call(null,G__130641,G__130642));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130640) : tailrecursion.hoplon.div.call(null,G__130640));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130639;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130638;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130637;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130636;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130663 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130664 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130665 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130666 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130667 = (function (){var G__130668 = "b\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130668) : tailrecursion.hoplon.code.call(null,G__130668));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130667) : tailrecursion.hoplon.pre.call(null,G__130667));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130666;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130665;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130664;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130663;
}})()], 0)),"",(function (){var _STAR_references_STAR_130669 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130670 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130671 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130672 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130673 = (function (){var G__130674 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130675 = (function (){var G__130676 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130677 = "(";
var G__130678 = (function (){var G__130688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130689 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130688,G__130689) : tailrecursion.hoplon.span.call(null,G__130688,G__130689));
})();
var G__130679 = (function (){var G__130690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130691 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130690,G__130691) : tailrecursion.hoplon.span.call(null,G__130690,G__130691));
})();
var G__130680 = " ";
var G__130681 = (function (){var G__130692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130693 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130692,G__130693) : tailrecursion.hoplon.span.call(null,G__130692,G__130693));
})();
var G__130682 = " (";
var G__130683 = (function (){var G__130694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130695 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130694,G__130695) : tailrecursion.hoplon.span.call(null,G__130694,G__130695));
})();
var G__130684 = (function (){var G__130696 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130697 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130696,G__130697) : tailrecursion.hoplon.span.call(null,G__130696,G__130697));
})();
var G__130685 = " ";
var G__130686 = (function (){var G__130698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130699 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130698,G__130699) : tailrecursion.hoplon.span.call(null,G__130698,G__130699));
})();
var G__130687 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__130676,G__130677,G__130678,G__130679,G__130680,G__130681,G__130682,G__130683,G__130684,G__130685,G__130686,G__130687) : tailrecursion.hoplon.pre.call(null,G__130676,G__130677,G__130678,G__130679,G__130680,G__130681,G__130682,G__130683,G__130684,G__130685,G__130686,G__130687));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130674,G__130675) : tailrecursion.hoplon.div.call(null,G__130674,G__130675));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130673) : tailrecursion.hoplon.div.call(null,G__130673));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130672;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130671;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130670;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130669;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130700 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130701 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130702 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130703 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130704 = (function (){var G__130705 = "19\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130705) : tailrecursion.hoplon.code.call(null,G__130705));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130704) : tailrecursion.hoplon.pre.call(null,G__130704));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130703;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130702;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130701;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130700;
}})()], 0)),"",(function (){var _STAR_references_STAR_130706 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130707 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130708 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130709 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130710 = (function (){var G__130711 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130712 = (function (){var G__130713 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130714 = "(";
var G__130715 = (function (){var G__130720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130721 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130720,G__130721) : tailrecursion.hoplon.span.call(null,G__130720,G__130721));
})();
var G__130716 = (function (){var G__130722 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130723 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130722,G__130723) : tailrecursion.hoplon.span.call(null,G__130722,G__130723));
})();
var G__130717 = " ";
var G__130718 = (function (){var G__130724 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130725 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130724,G__130725) : tailrecursion.hoplon.span.call(null,G__130724,G__130725));
})();
var G__130719 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__130713,G__130714,G__130715,G__130716,G__130717,G__130718,G__130719) : tailrecursion.hoplon.pre.call(null,G__130713,G__130714,G__130715,G__130716,G__130717,G__130718,G__130719));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130711,G__130712) : tailrecursion.hoplon.div.call(null,G__130711,G__130712));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130710) : tailrecursion.hoplon.div.call(null,G__130710));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130709;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130708;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130707;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130706;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130726 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130727 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130728 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130729 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130730 = (function (){var G__130731 = "false\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130731) : tailrecursion.hoplon.code.call(null,G__130731));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130730) : tailrecursion.hoplon.pre.call(null,G__130730));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130729;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130728;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130727;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130726;
}})()], 0)),"",(function (){var _STAR_references_STAR_130732 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130733 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130734 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130735 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130736 = (function (){var G__130737 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130738 = (function (){var G__130739 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130740 = "(";
var G__130741 = (function (){var G__130762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130763 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130762,G__130763) : tailrecursion.hoplon.span.call(null,G__130762,G__130763));
})();
var G__130742 = "(";
var G__130743 = (function (){var G__130764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130765 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130764,G__130765) : tailrecursion.hoplon.span.call(null,G__130764,G__130765));
})();
var G__130744 = "(";
var G__130745 = (function (){var G__130766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130767 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130766,G__130767) : tailrecursion.hoplon.span.call(null,G__130766,G__130767));
})();
var G__130746 = (function (){var G__130768 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130769 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130768,G__130769) : tailrecursion.hoplon.span.call(null,G__130768,G__130769));
})();
var G__130747 = " ";
var G__130748 = (function (){var G__130770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130771 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130770,G__130771) : tailrecursion.hoplon.span.call(null,G__130770,G__130771));
})();
var G__130749 = ") (";
var G__130750 = (function (){var G__130772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130773 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130772,G__130773) : tailrecursion.hoplon.span.call(null,G__130772,G__130773));
})();
var G__130751 = (function (){var G__130774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130775 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130774,G__130775) : tailrecursion.hoplon.span.call(null,G__130774,G__130775));
})();
var G__130752 = " (";
var G__130753 = (function (){var G__130776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130777 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130776,G__130777) : tailrecursion.hoplon.span.call(null,G__130776,G__130777));
})();
var G__130754 = (function (){var G__130778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130779 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130778,G__130779) : tailrecursion.hoplon.span.call(null,G__130778,G__130779));
})();
var G__130755 = " ";
var G__130756 = (function (){var G__130780 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130781 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130780,G__130781) : tailrecursion.hoplon.span.call(null,G__130780,G__130781));
})();
var G__130757 = ")))\n    ";
var G__130758 = (function (){var G__130782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130783 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130782,G__130783) : tailrecursion.hoplon.span.call(null,G__130782,G__130783));
})();
var G__130759 = "\n    ";
var G__130760 = (function (){var G__130784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130785 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130784,G__130785) : tailrecursion.hoplon.span.call(null,G__130784,G__130785));
})();
var G__130761 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__130739,G__130740,G__130741,G__130742,G__130743,G__130744,G__130745,G__130746,G__130747,G__130748,G__130749,G__130750,G__130751,G__130752,G__130753,G__130754,G__130755,G__130756,G__130757,G__130758,G__130759,G__130760,G__130761) : tailrecursion.hoplon.pre.call(null,G__130739,G__130740,G__130741,G__130742,G__130743,G__130744,G__130745,G__130746,G__130747,G__130748,G__130749,G__130750,G__130751,G__130752,G__130753,G__130754,G__130755,G__130756,G__130757,G__130758,G__130759,G__130760,G__130761));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130737,G__130738) : tailrecursion.hoplon.div.call(null,G__130737,G__130738));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130736) : tailrecursion.hoplon.div.call(null,G__130736));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130735;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130734;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130733;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130732;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130786 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130787 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130788 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130789 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130790 = (function (){var G__130791 = "4\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130791) : tailrecursion.hoplon.code.call(null,G__130791));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130790) : tailrecursion.hoplon.pre.call(null,G__130790));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130789;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130788;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130787;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130786;
}})()], 0)),"",(function (){var _STAR_references_STAR_130792 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130793 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130794 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130795 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130796 = (function (){var G__130797 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130798 = (function (){var G__130799 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130800 = "(";
var G__130801 = (function (){var G__130826 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130827 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130826,G__130827) : tailrecursion.hoplon.span.call(null,G__130826,G__130827));
})();
var G__130802 = "(";
var G__130803 = (function (){var G__130828 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130829 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130828,G__130829) : tailrecursion.hoplon.span.call(null,G__130828,G__130829));
})();
var G__130804 = (function (){var G__130830 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130831 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130830,G__130831) : tailrecursion.hoplon.span.call(null,G__130830,G__130831));
})();
var G__130805 = " ";
var G__130806 = (function (){var G__130832 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130833 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130832,G__130833) : tailrecursion.hoplon.span.call(null,G__130832,G__130833));
})();
var G__130807 = ") ";
var G__130808 = (function (){var G__130834 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130835 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130834,G__130835) : tailrecursion.hoplon.span.call(null,G__130834,G__130835));
})();
var G__130809 = "\n      (";
var G__130810 = (function (){var G__130836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130837 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130836,G__130837) : tailrecursion.hoplon.span.call(null,G__130836,G__130837));
})();
var G__130811 = (function (){var G__130838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130839 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130838,G__130839) : tailrecursion.hoplon.span.call(null,G__130838,G__130839));
})();
var G__130812 = " ";
var G__130813 = (function (){var G__130840 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130841 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130840,G__130841) : tailrecursion.hoplon.span.call(null,G__130840,G__130841));
})();
var G__130814 = ") (";
var G__130815 = (function (){var G__130842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130843 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130842,G__130843) : tailrecursion.hoplon.span.call(null,G__130842,G__130843));
})();
var G__130816 = (function (){var G__130844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130845 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130844,G__130845) : tailrecursion.hoplon.span.call(null,G__130844,G__130845));
})();
var G__130817 = " ";
var G__130818 = (function (){var G__130846 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130847 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130846,G__130847) : tailrecursion.hoplon.span.call(null,G__130846,G__130847));
})();
var G__130819 = " ";
var G__130820 = (function (){var G__130848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130849 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130848,G__130849) : tailrecursion.hoplon.span.call(null,G__130848,G__130849));
})();
var G__130821 = ")\n      ";
var G__130822 = (function (){var G__130850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130851 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130850,G__130851) : tailrecursion.hoplon.span.call(null,G__130850,G__130851));
})();
var G__130823 = " ";
var G__130824 = (function (){var G__130852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130853 = "25";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130852,G__130853) : tailrecursion.hoplon.span.call(null,G__130852,G__130853));
})();
var G__130825 = ")\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__130799,G__130800,G__130801,G__130802,G__130803,G__130804,G__130805,G__130806,G__130807,G__130808,G__130809,G__130810,G__130811,G__130812,G__130813,G__130814,G__130815,G__130816,G__130817,G__130818,G__130819,G__130820,G__130821,G__130822,G__130823,G__130824,G__130825) : tailrecursion.hoplon.pre.call(null,G__130799,G__130800,G__130801,G__130802,G__130803,G__130804,G__130805,G__130806,G__130807,G__130808,G__130809,G__130810,G__130811,G__130812,G__130813,G__130814,G__130815,G__130816,G__130817,G__130818,G__130819,G__130820,G__130821,G__130822,G__130823,G__130824,G__130825));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130797,G__130798) : tailrecursion.hoplon.div.call(null,G__130797,G__130798));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130796) : tailrecursion.hoplon.div.call(null,G__130796));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130795;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130794;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130793;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130792;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130854 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130855 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130856 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130857 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130858 = (function (){var G__130859 = "16\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130859) : tailrecursion.hoplon.code.call(null,G__130859));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130858) : tailrecursion.hoplon.pre.call(null,G__130858));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130857;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130856;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130855;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130854;
}})()], 0)),"",(function (){var _STAR_references_STAR_130860 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130861 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130862 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130863 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130864 = (function (){var G__130865 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130866 = (function (){var G__130867 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130868 = "(";
var G__130869 = (function (){var G__130883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130884 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130883,G__130884) : tailrecursion.hoplon.span.call(null,G__130883,G__130884));
})();
var G__130870 = (function (){var G__130885 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130886 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130885,G__130886) : tailrecursion.hoplon.span.call(null,G__130885,G__130886));
})();
var G__130871 = " (";
var G__130872 = (function (){var G__130887 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__130888 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130887,G__130888) : tailrecursion.hoplon.span.call(null,G__130887,G__130888));
})();
var G__130873 = "(";
var G__130874 = (function (){var G__130889 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130890 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130889,G__130890) : tailrecursion.hoplon.span.call(null,G__130889,G__130890));
})();
var G__130875 = (function (){var G__130891 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130892 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130891,G__130892) : tailrecursion.hoplon.span.call(null,G__130891,G__130892));
})();
var G__130876 = " ";
var G__130877 = (function (){var G__130893 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130894 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130893,G__130894) : tailrecursion.hoplon.span.call(null,G__130893,G__130894));
})();
var G__130878 = ") ";
var G__130879 = (function (){var G__130895 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130896 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130895,G__130896) : tailrecursion.hoplon.span.call(null,G__130895,G__130896));
})();
var G__130880 = " ";
var G__130881 = (function (){var G__130897 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130898 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130897,G__130898) : tailrecursion.hoplon.span.call(null,G__130897,G__130898));
})();
var G__130882 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$16(G__130867,G__130868,G__130869,G__130870,G__130871,G__130872,G__130873,G__130874,G__130875,G__130876,G__130877,G__130878,G__130879,G__130880,G__130881,G__130882) : tailrecursion.hoplon.pre.call(null,G__130867,G__130868,G__130869,G__130870,G__130871,G__130872,G__130873,G__130874,G__130875,G__130876,G__130877,G__130878,G__130879,G__130880,G__130881,G__130882));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130865,G__130866) : tailrecursion.hoplon.div.call(null,G__130865,G__130866));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130864) : tailrecursion.hoplon.div.call(null,G__130864));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130863;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130862;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130861;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130860;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130899 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130900 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130901 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130902 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130903 = (function (){var G__130904 = "5\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130904) : tailrecursion.hoplon.code.call(null,G__130904));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130903) : tailrecursion.hoplon.pre.call(null,G__130903));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130902;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130901;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130900;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130899;
}})()], 0)),"",(function (){var _STAR_references_STAR_130905 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130906 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130907 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130908 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130909 = (function (){var G__130910 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130911 = (function (){var G__130912 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130913 = "(";
var G__130914 = (function (){var G__130941 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130942 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130941,G__130942) : tailrecursion.hoplon.span.call(null,G__130941,G__130942));
})();
var G__130915 = "(";
var G__130916 = (function (){var G__130943 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130944 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130943,G__130944) : tailrecursion.hoplon.span.call(null,G__130943,G__130944));
})();
var G__130917 = "(";
var G__130918 = (function (){var G__130945 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130946 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130945,G__130946) : tailrecursion.hoplon.span.call(null,G__130945,G__130946));
})();
var G__130919 = (function (){var G__130947 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130948 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130947,G__130948) : tailrecursion.hoplon.span.call(null,G__130947,G__130948));
})();
var G__130920 = " ";
var G__130921 = (function (){var G__130949 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130950 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130949,G__130950) : tailrecursion.hoplon.span.call(null,G__130949,G__130950));
})();
var G__130922 = ") ";
var G__130923 = (function (){var G__130951 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130952 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130951,G__130952) : tailrecursion.hoplon.span.call(null,G__130951,G__130952));
})();
var G__130924 = "\n         (";
var G__130925 = (function (){var G__130953 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130954 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130953,G__130954) : tailrecursion.hoplon.span.call(null,G__130953,G__130954));
})();
var G__130926 = (function (){var G__130955 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130956 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130955,G__130956) : tailrecursion.hoplon.span.call(null,G__130955,G__130956));
})();
var G__130927 = " ";
var G__130928 = (function (){var G__130957 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130958 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130957,G__130958) : tailrecursion.hoplon.span.call(null,G__130957,G__130958));
})();
var G__130929 = ") ";
var G__130930 = (function (){var G__130959 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130960 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130959,G__130960) : tailrecursion.hoplon.span.call(null,G__130959,G__130960));
})();
var G__130931 = "\n         ";
var G__130932 = (function (){var G__130961 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130962 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130961,G__130962) : tailrecursion.hoplon.span.call(null,G__130961,G__130962));
})();
var G__130933 = " ";
var G__130934 = (function (){var G__130963 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130964 = "-1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130963,G__130964) : tailrecursion.hoplon.span.call(null,G__130963,G__130964));
})();
var G__130935 = ")\n   (";
var G__130936 = (function (){var G__130965 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__130966 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130965,G__130966) : tailrecursion.hoplon.span.call(null,G__130965,G__130966));
})();
var G__130937 = (function (){var G__130967 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__130968 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130967,G__130968) : tailrecursion.hoplon.span.call(null,G__130967,G__130968));
})();
var G__130938 = " ";
var G__130939 = (function (){var G__130969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__130970 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__130969,G__130970) : tailrecursion.hoplon.span.call(null,G__130969,G__130970));
})();
var G__130940 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__130912,G__130913,G__130914,G__130915,G__130916,G__130917,G__130918,G__130919,G__130920,G__130921,G__130922,G__130923,G__130924,G__130925,G__130926,G__130927,G__130928,G__130929,G__130930,G__130931,G__130932,G__130933,G__130934,G__130935,G__130936,G__130937,G__130938,G__130939,G__130940) : tailrecursion.hoplon.pre.call(null,G__130912,G__130913,G__130914,G__130915,G__130916,G__130917,G__130918,G__130919,G__130920,G__130921,G__130922,G__130923,G__130924,G__130925,G__130926,G__130927,G__130928,G__130929,G__130930,G__130931,G__130932,G__130933,G__130934,G__130935,G__130936,G__130937,G__130938,G__130939,G__130940));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130910,G__130911) : tailrecursion.hoplon.div.call(null,G__130910,G__130911));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130909) : tailrecursion.hoplon.div.call(null,G__130909));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130908;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130907;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130906;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130905;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130971 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130972 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130973 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130974 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130975 = (function (){var G__130976 = "16\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__130976) : tailrecursion.hoplon.code.call(null,G__130976));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__130975) : tailrecursion.hoplon.pre.call(null,G__130975));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130974;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130973;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130972;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130971;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130977 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130978 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130979 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130980 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130981 = cljs.core.PersistentArrayMap.EMPTY;
var G__130982 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Translate the following expression into prefix form $$\\frac{5+4+\\left(2-\\left(3-\\left(6+\\frac{4}{5}\\right)\\right)\\right)}{3(6-2)(2-7)}$$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__130981,G__130982) : tailrecursion.hoplon.markdown.para_node.call(null,G__130981,G__130982));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130980;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130979;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130978;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130977;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_130983 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130984 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_130985 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_130986 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__130987 = (function (){var G__130988 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__130989 = (function (){var G__130990 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__130991 = "(";
var G__130992 = (function (){var G__131026 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131027 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131026,G__131027) : tailrecursion.hoplon.span.call(null,G__131026,G__131027));
})();
var G__130993 = "(";
var G__130994 = (function (){var G__131028 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131029 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131028,G__131029) : tailrecursion.hoplon.span.call(null,G__131028,G__131029));
})();
var G__130995 = (function (){var G__131030 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131031 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131030,G__131031) : tailrecursion.hoplon.span.call(null,G__131030,G__131031));
})();
var G__130996 = " ";
var G__130997 = (function (){var G__131032 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131033 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131032,G__131033) : tailrecursion.hoplon.span.call(null,G__131032,G__131033));
})();
var G__130998 = " (";
var G__130999 = (function (){var G__131034 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131035 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131034,G__131035) : tailrecursion.hoplon.span.call(null,G__131034,G__131035));
})();
var G__131000 = (function (){var G__131036 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131037 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131036,G__131037) : tailrecursion.hoplon.span.call(null,G__131036,G__131037));
})();
var G__131001 = " (";
var G__131002 = (function (){var G__131038 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131039 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131038,G__131039) : tailrecursion.hoplon.span.call(null,G__131038,G__131039));
})();
var G__131003 = (function (){var G__131040 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131041 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131040,G__131041) : tailrecursion.hoplon.span.call(null,G__131040,G__131041));
})();
var G__131004 = " (";
var G__131005 = (function (){var G__131042 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131043 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131042,G__131043) : tailrecursion.hoplon.span.call(null,G__131042,G__131043));
})();
var G__131006 = (function (){var G__131044 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131045 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131044,G__131045) : tailrecursion.hoplon.span.call(null,G__131044,G__131045));
})();
var G__131007 = " (";
var G__131008 = (function (){var G__131046 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131047 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131046,G__131047) : tailrecursion.hoplon.span.call(null,G__131046,G__131047));
})();
var G__131009 = (function (){var G__131048 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131049 = "4";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131048,G__131049) : tailrecursion.hoplon.span.call(null,G__131048,G__131049));
})();
var G__131010 = " ";
var G__131011 = (function (){var G__131050 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131051 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131050,G__131051) : tailrecursion.hoplon.span.call(null,G__131050,G__131051));
})();
var G__131012 = "))))) \n   (";
var G__131013 = (function (){var G__131052 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131053 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131052,G__131053) : tailrecursion.hoplon.span.call(null,G__131052,G__131053));
})();
var G__131014 = (function (){var G__131054 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131055 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131054,G__131055) : tailrecursion.hoplon.span.call(null,G__131054,G__131055));
})();
var G__131015 = " (";
var G__131016 = (function (){var G__131056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131057 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131056,G__131057) : tailrecursion.hoplon.span.call(null,G__131056,G__131057));
})();
var G__131017 = (function (){var G__131058 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131059 = "6";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131058,G__131059) : tailrecursion.hoplon.span.call(null,G__131058,G__131059));
})();
var G__131018 = " ";
var G__131019 = (function (){var G__131060 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131061 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131060,G__131061) : tailrecursion.hoplon.span.call(null,G__131060,G__131061));
})();
var G__131020 = ") (";
var G__131021 = (function (){var G__131062 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131063 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131062,G__131063) : tailrecursion.hoplon.span.call(null,G__131062,G__131063));
})();
var G__131022 = (function (){var G__131064 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131065 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131064,G__131065) : tailrecursion.hoplon.span.call(null,G__131064,G__131065));
})();
var G__131023 = " ";
var G__131024 = (function (){var G__131066 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131067 = "7";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131066,G__131067) : tailrecursion.hoplon.span.call(null,G__131066,G__131067));
})();
var G__131025 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$36(G__130990,G__130991,G__130992,G__130993,G__130994,G__130995,G__130996,G__130997,G__130998,G__130999,G__131000,G__131001,G__131002,G__131003,G__131004,G__131005,G__131006,G__131007,G__131008,G__131009,G__131010,G__131011,G__131012,G__131013,G__131014,G__131015,G__131016,G__131017,G__131018,G__131019,G__131020,G__131021,G__131022,G__131023,G__131024,G__131025) : tailrecursion.hoplon.pre.call(null,G__130990,G__130991,G__130992,G__130993,G__130994,G__130995,G__130996,G__130997,G__130998,G__130999,G__131000,G__131001,G__131002,G__131003,G__131004,G__131005,G__131006,G__131007,G__131008,G__131009,G__131010,G__131011,G__131012,G__131013,G__131014,G__131015,G__131016,G__131017,G__131018,G__131019,G__131020,G__131021,G__131022,G__131023,G__131024,G__131025));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__130988,G__130989) : tailrecursion.hoplon.div.call(null,G__130988,G__130989));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__130987) : tailrecursion.hoplon.div.call(null,G__130987));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130986;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130985;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_130984;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_130983;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_131068 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131069 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_131070 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131071 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131072 = cljs.core.PersistentArrayMap.EMPTY;
var G__131073 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131072,G__131073) : tailrecursion.hoplon.markdown.para_node.call(null,G__131072,G__131073));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131071;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131070;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131069;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131068;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_131074 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131075 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_131076 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131077 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131078 = (function (){var G__131079 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131080 = (function (){var G__131081 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131082 = "(";
var G__131083 = (function (){var G__131150 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131151 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131150,G__131151) : tailrecursion.hoplon.span.call(null,G__131150,G__131151));
})();
var G__131084 = (function (){var G__131152 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131153 = "sum-of-largest-squares";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131152,G__131153) : tailrecursion.hoplon.span.call(null,G__131152,G__131153));
})();
var G__131085 = " [";
var G__131086 = (function (){var G__131154 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131155 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131154,G__131155) : tailrecursion.hoplon.span.call(null,G__131154,G__131155));
})();
var G__131087 = " ";
var G__131088 = (function (){var G__131156 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131157 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131156,G__131157) : tailrecursion.hoplon.span.call(null,G__131156,G__131157));
})();
var G__131089 = " ";
var G__131090 = (function (){var G__131158 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131159 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131158,G__131159) : tailrecursion.hoplon.span.call(null,G__131158,G__131159));
})();
var G__131091 = "]\n  (";
var G__131092 = (function (){var G__131160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131161 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131160,G__131161) : tailrecursion.hoplon.span.call(null,G__131160,G__131161));
})();
var G__131093 = "(";
var G__131094 = (function (){var G__131162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131163 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131162,G__131163) : tailrecursion.hoplon.span.call(null,G__131162,G__131163));
})();
var G__131095 = "(";
var G__131096 = (function (){var G__131164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131165 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131164,G__131165) : tailrecursion.hoplon.span.call(null,G__131164,G__131165));
})();
var G__131097 = (function (){var G__131166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131167 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131166,G__131167) : tailrecursion.hoplon.span.call(null,G__131166,G__131167));
})();
var G__131098 = " ";
var G__131099 = (function (){var G__131168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131169 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131168,G__131169) : tailrecursion.hoplon.span.call(null,G__131168,G__131169));
})();
var G__131100 = ") (";
var G__131101 = (function (){var G__131170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131171 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131170,G__131171) : tailrecursion.hoplon.span.call(null,G__131170,G__131171));
})();
var G__131102 = (function (){var G__131172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131173 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131172,G__131173) : tailrecursion.hoplon.span.call(null,G__131172,G__131173));
})();
var G__131103 = " ";
var G__131104 = (function (){var G__131174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131175 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131174,G__131175) : tailrecursion.hoplon.span.call(null,G__131174,G__131175));
})();
var G__131105 = ")) (";
var G__131106 = (function (){var G__131176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131177 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131176,G__131177) : tailrecursion.hoplon.span.call(null,G__131176,G__131177));
})();
var G__131107 = "(";
var G__131108 = (function (){var G__131178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131179 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131178,G__131179) : tailrecursion.hoplon.span.call(null,G__131178,G__131179));
})();
var G__131109 = " ";
var G__131110 = (function (){var G__131180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131181 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131180,G__131181) : tailrecursion.hoplon.span.call(null,G__131180,G__131181));
})();
var G__131111 = ") (";
var G__131112 = (function (){var G__131182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131183 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131182,G__131183) : tailrecursion.hoplon.span.call(null,G__131182,G__131183));
})();
var G__131113 = " ";
var G__131114 = (function (){var G__131184 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131185 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131184,G__131185) : tailrecursion.hoplon.span.call(null,G__131184,G__131185));
})();
var G__131115 = "))\n        (";
var G__131116 = (function (){var G__131186 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131187 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131186,G__131187) : tailrecursion.hoplon.span.call(null,G__131186,G__131187));
})();
var G__131117 = "(";
var G__131118 = (function (){var G__131188 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131189 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131188,G__131189) : tailrecursion.hoplon.span.call(null,G__131188,G__131189));
})();
var G__131119 = (function (){var G__131190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131191 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131190,G__131191) : tailrecursion.hoplon.span.call(null,G__131190,G__131191));
})();
var G__131120 = " ";
var G__131121 = (function (){var G__131192 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131193 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131192,G__131193) : tailrecursion.hoplon.span.call(null,G__131192,G__131193));
})();
var G__131122 = ") (";
var G__131123 = (function (){var G__131194 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131195 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131194,G__131195) : tailrecursion.hoplon.span.call(null,G__131194,G__131195));
})();
var G__131124 = (function (){var G__131196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131197 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131196,G__131197) : tailrecursion.hoplon.span.call(null,G__131196,G__131197));
})();
var G__131125 = " ";
var G__131126 = (function (){var G__131198 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131199 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131198,G__131199) : tailrecursion.hoplon.span.call(null,G__131198,G__131199));
})();
var G__131127 = ")) (";
var G__131128 = (function (){var G__131200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131201 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131200,G__131201) : tailrecursion.hoplon.span.call(null,G__131200,G__131201));
})();
var G__131129 = "(";
var G__131130 = (function (){var G__131202 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131203 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131202,G__131203) : tailrecursion.hoplon.span.call(null,G__131202,G__131203));
})();
var G__131131 = " ";
var G__131132 = (function (){var G__131204 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131205 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131204,G__131205) : tailrecursion.hoplon.span.call(null,G__131204,G__131205));
})();
var G__131133 = ") (";
var G__131134 = (function (){var G__131206 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131207 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131206,G__131207) : tailrecursion.hoplon.span.call(null,G__131206,G__131207));
})();
var G__131135 = " ";
var G__131136 = (function (){var G__131208 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131209 = "z";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131208,G__131209) : tailrecursion.hoplon.span.call(null,G__131208,G__131209));
})();
var G__131137 = "))\n        ";
var G__131138 = (function (){var G__131210 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131211 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131210,G__131211) : tailrecursion.hoplon.span.call(null,G__131210,G__131211));
})();
var G__131139 = " (";
var G__131140 = (function (){var G__131212 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131213 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131212,G__131213) : tailrecursion.hoplon.span.call(null,G__131212,G__131213));
})();
var G__131141 = "(";
var G__131142 = (function (){var G__131214 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131215 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131214,G__131215) : tailrecursion.hoplon.span.call(null,G__131214,G__131215));
})();
var G__131143 = " ";
var G__131144 = (function (){var G__131216 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131217 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131216,G__131217) : tailrecursion.hoplon.span.call(null,G__131216,G__131217));
})();
var G__131145 = ") (";
var G__131146 = (function (){var G__131218 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131219 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131218,G__131219) : tailrecursion.hoplon.span.call(null,G__131218,G__131219));
})();
var G__131147 = " ";
var G__131148 = (function (){var G__131220 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131221 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131220,G__131221) : tailrecursion.hoplon.span.call(null,G__131220,G__131221));
})();
var G__131149 = "))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$69(G__131081,G__131082,G__131083,G__131084,G__131085,G__131086,G__131087,G__131088,G__131089,G__131090,G__131091,G__131092,G__131093,G__131094,G__131095,G__131096,G__131097,G__131098,G__131099,G__131100,G__131101,G__131102,G__131103,G__131104,G__131105,G__131106,G__131107,G__131108,G__131109,G__131110,G__131111,G__131112,G__131113,G__131114,G__131115,G__131116,G__131117,G__131118,G__131119,G__131120,G__131121,G__131122,G__131123,G__131124,G__131125,G__131126,G__131127,G__131128,G__131129,G__131130,G__131131,G__131132,G__131133,G__131134,G__131135,G__131136,G__131137,G__131138,G__131139,G__131140,G__131141,G__131142,G__131143,G__131144,G__131145,G__131146,G__131147,G__131148,G__131149) : tailrecursion.hoplon.pre.call(null,G__131081,G__131082,G__131083,G__131084,G__131085,G__131086,G__131087,G__131088,G__131089,G__131090,G__131091,G__131092,G__131093,G__131094,G__131095,G__131096,G__131097,G__131098,G__131099,G__131100,G__131101,G__131102,G__131103,G__131104,G__131105,G__131106,G__131107,G__131108,G__131109,G__131110,G__131111,G__131112,G__131113,G__131114,G__131115,G__131116,G__131117,G__131118,G__131119,G__131120,G__131121,G__131122,G__131123,G__131124,G__131125,G__131126,G__131127,G__131128,G__131129,G__131130,G__131131,G__131132,G__131133,G__131134,G__131135,G__131136,G__131137,G__131138,G__131139,G__131140,G__131141,G__131142,G__131143,G__131144,G__131145,G__131146,G__131147,G__131148,G__131149));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131079,G__131080) : tailrecursion.hoplon.div.call(null,G__131079,G__131080));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131078) : tailrecursion.hoplon.div.call(null,G__131078));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131077;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131076;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131075;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131074;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_131222 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131223 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_131224 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131225 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131226 = cljs.core.PersistentArrayMap.EMPTY;
var G__131227 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131226,G__131227) : tailrecursion.hoplon.markdown.para_node.call(null,G__131226,G__131227));
})(),(function (){var G__131228 = (function (){var G__131229 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131230 = (function (){var G__131231 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131232 = "(";
var G__131233 = (function (){var G__131254 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131255 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131254,G__131255) : tailrecursion.hoplon.span.call(null,G__131254,G__131255));
})();
var G__131234 = (function (){var G__131256 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131257 = "a-plus-abs-b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131256,G__131257) : tailrecursion.hoplon.span.call(null,G__131256,G__131257));
})();
var G__131235 = " [";
var G__131236 = (function (){var G__131258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131259 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131258,G__131259) : tailrecursion.hoplon.span.call(null,G__131258,G__131259));
})();
var G__131237 = " ";
var G__131238 = (function (){var G__131260 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131261 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131260,G__131261) : tailrecursion.hoplon.span.call(null,G__131260,G__131261));
})();
var G__131239 = "]\n  ((";
var G__131240 = (function (){var G__131262 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131263 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131262,G__131263) : tailrecursion.hoplon.span.call(null,G__131262,G__131263));
})();
var G__131241 = "(";
var G__131242 = (function (){var G__131264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131265 = "> ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131264,G__131265) : tailrecursion.hoplon.span.call(null,G__131264,G__131265));
})();
var G__131243 = (function (){var G__131266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131267 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131266,G__131267) : tailrecursion.hoplon.span.call(null,G__131266,G__131267));
})();
var G__131244 = " ";
var G__131245 = (function (){var G__131268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131269 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131268,G__131269) : tailrecursion.hoplon.span.call(null,G__131268,G__131269));
})();
var G__131246 = ") ";
var G__131247 = (function (){var G__131270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131271 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131270,G__131271) : tailrecursion.hoplon.span.call(null,G__131270,G__131271));
})();
var G__131248 = (function (){var G__131272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131273 = "-";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131272,G__131273) : tailrecursion.hoplon.span.call(null,G__131272,G__131273));
})();
var G__131249 = ") ";
var G__131250 = (function (){var G__131274 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131275 = "a";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131274,G__131275) : tailrecursion.hoplon.span.call(null,G__131274,G__131275));
})();
var G__131251 = " ";
var G__131252 = (function (){var G__131276 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131277 = "b";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131276,G__131277) : tailrecursion.hoplon.span.call(null,G__131276,G__131277));
})();
var G__131253 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__131231,G__131232,G__131233,G__131234,G__131235,G__131236,G__131237,G__131238,G__131239,G__131240,G__131241,G__131242,G__131243,G__131244,G__131245,G__131246,G__131247,G__131248,G__131249,G__131250,G__131251,G__131252,G__131253) : tailrecursion.hoplon.pre.call(null,G__131231,G__131232,G__131233,G__131234,G__131235,G__131236,G__131237,G__131238,G__131239,G__131240,G__131241,G__131242,G__131243,G__131244,G__131245,G__131246,G__131247,G__131248,G__131249,G__131250,G__131251,G__131252,G__131253));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131229,G__131230) : tailrecursion.hoplon.div.call(null,G__131229,G__131230));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131228) : tailrecursion.hoplon.div.call(null,G__131228));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131225;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131224;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131223;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131222;
}})(),content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_131278 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131279 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_131280 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131281 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131282 = cljs.core.PersistentArrayMap.EMPTY;
var G__131283 = new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It returns ",(function (){var G__131284 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a (abs b))"], null);
var G__131285 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131284,G__131285) : tailrecursion.hoplon.markdown.code_node.call(null,G__131284,G__131285));
})(),". Note: if ",(function (){var G__131286 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(> b 0)"], null);
var G__131287 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131286,G__131287) : tailrecursion.hoplon.markdown.code_node.call(null,G__131286,G__131287));
})(),", then ",(function (){var G__131288 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(= (abs b) b)"], null);
var G__131289 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131288,G__131289) : tailrecursion.hoplon.markdown.code_node.call(null,G__131288,G__131289));
})(),", so ",(function (){var G__131290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a (abs b))"], null);
var G__131291 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131290,G__131291) : tailrecursion.hoplon.markdown.code_node.call(null,G__131290,G__131291));
})()," would be ",(function (){var G__131292 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a b)"], null);
var G__131293 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131292,G__131293) : tailrecursion.hoplon.markdown.code_node.call(null,G__131292,G__131293));
})(),", just as this function gives us. Alternatively, if ",(function (){var G__131294 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(not (> b 0))"], null);
var G__131295 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131294,G__131295) : tailrecursion.hoplon.markdown.code_node.call(null,G__131294,G__131295));
})(),", then b is negative and ",(function (){var G__131296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(= (abs b) (- b))"], null);
var G__131297 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131296,G__131297) : tailrecursion.hoplon.markdown.code_node.call(null,G__131296,G__131297));
})()," which means, ",(function (){var G__131298 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a (abs b))"], null);
var G__131299 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131298,G__131299) : tailrecursion.hoplon.markdown.code_node.call(null,G__131298,G__131299));
})()," is ",(function (){var G__131300 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(+ a (- b))"], null);
var G__131301 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131300,G__131301) : tailrecursion.hoplon.markdown.code_node.call(null,G__131300,G__131301));
})()," which is really just ",(function (){var G__131302 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(- a b)"], null);
var G__131303 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131302,G__131303) : tailrecursion.hoplon.markdown.code_node.call(null,G__131302,G__131303));
})()," as our function above gives us."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131282,G__131283) : tailrecursion.hoplon.markdown.para_node.call(null,G__131282,G__131283));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131281;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131280;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131279;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131278;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_131304 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131305 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_131306 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131307 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131308 = cljs.core.PersistentArrayMap.EMPTY;
var G__131309 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131308,G__131309) : tailrecursion.hoplon.markdown.para_node.call(null,G__131308,G__131309));
})(),(function (){var G__131310 = (function (){var G__131311 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131312 = (function (){var G__131313 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131314 = "(";
var G__131315 = (function (){var G__131320 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131321 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131320,G__131321) : tailrecursion.hoplon.span.call(null,G__131320,G__131321));
})();
var G__131316 = (function (){var G__131322 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131323 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131322,G__131323) : tailrecursion.hoplon.span.call(null,G__131322,G__131323));
})();
var G__131317 = " [] (";
var G__131318 = (function (){var G__131324 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131325 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131324,G__131325) : tailrecursion.hoplon.span.call(null,G__131324,G__131325));
})();
var G__131319 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__131313,G__131314,G__131315,G__131316,G__131317,G__131318,G__131319) : tailrecursion.hoplon.pre.call(null,G__131313,G__131314,G__131315,G__131316,G__131317,G__131318,G__131319));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131311,G__131312) : tailrecursion.hoplon.div.call(null,G__131311,G__131312));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131310) : tailrecursion.hoplon.div.call(null,G__131310));
})(),(function (){var G__131326 = cljs.core.PersistentArrayMap.EMPTY;
var G__131327 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["and"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131326,G__131327) : tailrecursion.hoplon.markdown.para_node.call(null,G__131326,G__131327));
})(),(function (){var G__131328 = (function (){var G__131329 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131330 = (function (){var G__131331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131332 = "(";
var G__131333 = (function (){var G__131351 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131352 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131351,G__131352) : tailrecursion.hoplon.span.call(null,G__131351,G__131352));
})();
var G__131334 = (function (){var G__131353 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131354 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131353,G__131354) : tailrecursion.hoplon.span.call(null,G__131353,G__131354));
})();
var G__131335 = "[";
var G__131336 = (function (){var G__131355 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131356 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131355,G__131356) : tailrecursion.hoplon.span.call(null,G__131355,G__131356));
})();
var G__131337 = " ";
var G__131338 = (function (){var G__131357 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131358 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131357,G__131358) : tailrecursion.hoplon.span.call(null,G__131357,G__131358));
})();
var G__131339 = "]\n   (";
var G__131340 = (function (){var G__131359 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131360 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131359,G__131360) : tailrecursion.hoplon.span.call(null,G__131359,G__131360));
})();
var G__131341 = "(";
var G__131342 = (function (){var G__131361 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131362 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131361,G__131362) : tailrecursion.hoplon.span.call(null,G__131361,G__131362));
})();
var G__131343 = (function (){var G__131363 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131364 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131363,G__131364) : tailrecursion.hoplon.span.call(null,G__131363,G__131364));
})();
var G__131344 = " ";
var G__131345 = (function (){var G__131365 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131366 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131365,G__131366) : tailrecursion.hoplon.span.call(null,G__131365,G__131366));
})();
var G__131346 = ")\n   ";
var G__131347 = (function (){var G__131367 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131368 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131367,G__131368) : tailrecursion.hoplon.span.call(null,G__131367,G__131368));
})();
var G__131348 = "\n   ";
var G__131349 = (function (){var G__131369 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131370 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131369,G__131370) : tailrecursion.hoplon.span.call(null,G__131369,G__131370));
})();
var G__131350 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__131331,G__131332,G__131333,G__131334,G__131335,G__131336,G__131337,G__131338,G__131339,G__131340,G__131341,G__131342,G__131343,G__131344,G__131345,G__131346,G__131347,G__131348,G__131349,G__131350) : tailrecursion.hoplon.pre.call(null,G__131331,G__131332,G__131333,G__131334,G__131335,G__131336,G__131337,G__131338,G__131339,G__131340,G__131341,G__131342,G__131343,G__131344,G__131345,G__131346,G__131347,G__131348,G__131349,G__131350));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131329,G__131330) : tailrecursion.hoplon.div.call(null,G__131329,G__131330));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131328) : tailrecursion.hoplon.div.call(null,G__131328));
})(),(function (){var G__131371 = cljs.core.PersistentArrayMap.EMPTY;
var G__131372 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Then he evaluates the expression"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131371,G__131372) : tailrecursion.hoplon.markdown.para_node.call(null,G__131371,G__131372));
})(),(function (){var G__131373 = (function (){var G__131374 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131375 = (function (){var G__131376 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131377 = "(";
var G__131378 = (function (){var G__131383 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131384 = "test ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131383,G__131384) : tailrecursion.hoplon.span.call(null,G__131383,G__131384));
})();
var G__131379 = (function (){var G__131385 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131386 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131385,G__131386) : tailrecursion.hoplon.span.call(null,G__131385,G__131386));
})();
var G__131380 = " (";
var G__131381 = (function (){var G__131387 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131388 = "p";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131387,G__131388) : tailrecursion.hoplon.span.call(null,G__131387,G__131388));
})();
var G__131382 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$7(G__131376,G__131377,G__131378,G__131379,G__131380,G__131381,G__131382) : tailrecursion.hoplon.pre.call(null,G__131376,G__131377,G__131378,G__131379,G__131380,G__131381,G__131382));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131374,G__131375) : tailrecursion.hoplon.div.call(null,G__131374,G__131375));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131373) : tailrecursion.hoplon.div.call(null,G__131373));
})(),(function (){var G__131389 = cljs.core.PersistentArrayMap.EMPTY;
var G__131390 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131389,G__131390) : tailrecursion.hoplon.markdown.para_node.call(null,G__131389,G__131390));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131307;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131306;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131305;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131304;
}})(),content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_131391 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131392 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_131393 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131394 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131395 = cljs.core.PersistentArrayMap.EMPTY;
var G__131396 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131397 = cljs.core.PersistentArrayMap.EMPTY;
var G__131398 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131399 = cljs.core.PersistentArrayMap.EMPTY;
var G__131400 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With normal order evaluation it compiles just as one  might expect: first the function itself is unraveled,  finding that it is an ",(function (){var G__131401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__131402 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131401,G__131402) : tailrecursion.hoplon.markdown.code_node.call(null,G__131401,G__131402));
})()," statement, then the ",(function (){var G__131403 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__131404 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__131403,G__131404) : tailrecursion.hoplon.markdown.code_node.call(null,G__131403,G__131404));
})(),"  statement is evaluated according to its own rules.  Finding that the first argument is 0, it returns 0."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131399,G__131400) : tailrecursion.hoplon.markdown.para_node.call(null,G__131399,G__131400));
})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__131397,G__131398) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__131397,G__131398));
})(),(function (){var G__131405 = cljs.core.PersistentArrayMap.EMPTY;
var G__131406 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var _STAR_references_STAR_131407 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131408 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131409 = cljs.core.PersistentArrayMap.EMPTY;
var G__131410 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["With applicative order evaluation the story is a bit more  interesting. Since the arguments to a function are always  evaluated first in applicative order evaluation, the  compiler would attempt to evaluate both the first and  second arguments and hence fall into an infinite loop  in the attempt to evaluate the second argument."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131409,G__131410) : tailrecursion.hoplon.markdown.para_node.call(null,G__131409,G__131410));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131408;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131407;
}})()], null);
return (tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.list_item_node.cljs$core$IFn$_invoke$arity$2(G__131405,G__131406) : tailrecursion.hoplon.markdown.list_item_node.call(null,G__131405,G__131406));
})()], null);
return (tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.bullet_list_node.cljs$core$IFn$_invoke$arity$2(G__131395,G__131396) : tailrecursion.hoplon.markdown.bullet_list_node.call(null,G__131395,G__131396));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131394;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131393;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131392;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131391;
}})()], 0))], 0))], 0));
var G__128864 = "";
var G__128865 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Example: Square Roots by Newton's Method"], null),(function (){var _STAR_references_STAR_131411 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131412 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_131413 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131414 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131415 = cljs.core.PersistentArrayMap.EMPTY;
var G__131416 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Procedures, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer procedures. Procedures must be effective. As a case in point, consider the problem of computing square roots. We can define the square-root function as"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131415,G__131416) : tailrecursion.hoplon.markdown.para_node.call(null,G__131415,G__131416));
})(),(function (){var G__131417 = cljs.core.PersistentArrayMap.EMPTY;
var G__131418 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\sqrt x = \\text{ the } y \\text{ such that } y\\geq 0 \\text{ and } y^2 = x $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131417,G__131418) : tailrecursion.hoplon.markdown.para_node.call(null,G__131417,G__131418));
})(),(function (){var G__131419 = cljs.core.PersistentArrayMap.EMPTY;
var G__131420 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a procedure. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-Lisp: "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131419,G__131420) : tailrecursion.hoplon.markdown.para_node.call(null,G__131419,G__131420));
})(),(function (){var G__131421 = (function (){var G__131422 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131423 = (function (){var G__131424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131425 = "(";
var G__131426 = (function (){var G__131450 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131451 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131450,G__131451) : tailrecursion.hoplon.span.call(null,G__131450,G__131451));
})();
var G__131427 = (function (){var G__131452 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131453 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131452,G__131453) : tailrecursion.hoplon.span.call(null,G__131452,G__131453));
})();
var G__131428 = " [";
var G__131429 = (function (){var G__131454 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131455 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131454,G__131455) : tailrecursion.hoplon.span.call(null,G__131454,G__131455));
})();
var G__131430 = "] \n  (";
var G__131431 = (function (){var G__131456 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131457 = "the";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131456,G__131457) : tailrecursion.hoplon.span.call(null,G__131456,G__131457));
})();
var G__131432 = " ";
var G__131433 = (function (){var G__131458 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131459 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131458,G__131459) : tailrecursion.hoplon.span.call(null,G__131458,G__131459));
})();
var G__131434 = " (";
var G__131435 = (function (){var G__131460 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131461 = "and ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131460,G__131461) : tailrecursion.hoplon.span.call(null,G__131460,G__131461));
})();
var G__131436 = "(";
var G__131437 = (function (){var G__131462 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131463 = ">= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131462,G__131463) : tailrecursion.hoplon.span.call(null,G__131462,G__131463));
})();
var G__131438 = (function (){var G__131464 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131465 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131464,G__131465) : tailrecursion.hoplon.span.call(null,G__131464,G__131465));
})();
var G__131439 = " ";
var G__131440 = (function (){var G__131466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131467 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131466,G__131467) : tailrecursion.hoplon.span.call(null,G__131466,G__131467));
})();
var G__131441 = ") \n              (";
var G__131442 = (function (){var G__131468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131469 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131468,G__131469) : tailrecursion.hoplon.span.call(null,G__131468,G__131469));
})();
var G__131443 = "(";
var G__131444 = (function (){var G__131470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131471 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131470,G__131471) : tailrecursion.hoplon.span.call(null,G__131470,G__131471));
})();
var G__131445 = " ";
var G__131446 = (function (){var G__131472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131473 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131472,G__131473) : tailrecursion.hoplon.span.call(null,G__131472,G__131473));
})();
var G__131447 = ") ";
var G__131448 = (function (){var G__131474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131475 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131474,G__131475) : tailrecursion.hoplon.span.call(null,G__131474,G__131475));
})();
var G__131449 = ")))) \n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$26(G__131424,G__131425,G__131426,G__131427,G__131428,G__131429,G__131430,G__131431,G__131432,G__131433,G__131434,G__131435,G__131436,G__131437,G__131438,G__131439,G__131440,G__131441,G__131442,G__131443,G__131444,G__131445,G__131446,G__131447,G__131448,G__131449) : tailrecursion.hoplon.pre.call(null,G__131424,G__131425,G__131426,G__131427,G__131428,G__131429,G__131430,G__131431,G__131432,G__131433,G__131434,G__131435,G__131436,G__131437,G__131438,G__131439,G__131440,G__131441,G__131442,G__131443,G__131444,G__131445,G__131446,G__131447,G__131448,G__131449));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131422,G__131423) : tailrecursion.hoplon.div.call(null,G__131422,G__131423));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131421) : tailrecursion.hoplon.div.call(null,G__131421));
})(),(function (){var G__131476 = cljs.core.PersistentArrayMap.EMPTY;
var G__131477 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This only begs the question. The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.",(function (){var G__131478 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__131479 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is ",(function (){var G__131480 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__131481 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["correct"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__131480,G__131481) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__131480,G__131481));
})()," is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given ",(function (){var G__131482 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__131483 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["what is"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__131482,G__131483) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__131482,G__131483));
})()," knowledge specified by the programmer, they can generate ",(function (){var G__131484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__131485 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how to"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__131484,G__131485) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__131484,G__131485));
})()," knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in chapter 4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__131478,G__131479) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__131478,G__131479));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131476,G__131477) : tailrecursion.hoplon.markdown.para_node.call(null,G__131476,G__131477));
})(),(function (){var G__131486 = cljs.core.PersistentArrayMap.EMPTY;
var G__131487 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["How does one compute square roots? The most common way is to use Newton",(function (){var G__131488 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131489 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131488,G__131489) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131488,G__131489));
})(),"s method of successive approximations, which says that whenever we have a guess y for the value of the square root of a number x, we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging y with x/y.",(function (){var G__131490 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__131491 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This square-root algorithm is actually a special case of Newton",(function (){var G__131492 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131493 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131492,G__131493) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131492,G__131493));
})(),"s method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century A.D. We will see how to express the general Newton",(function (){var G__131494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131495 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131494,G__131495) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131494,G__131495));
})(),"s method as a Lisp procedure in section 1.3.4."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__131490,G__131491) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__131490,G__131491));
})()," For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131486,G__131487) : tailrecursion.hoplon.markdown.para_node.call(null,G__131486,G__131487));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131414;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131413;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131412;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131411;
}})(),"",(function (){var G__131496 = cljs.core.PersistentArrayMap.EMPTY;
var G__131497 = (function (){var G__131502 = cljs.core.PersistentArrayMap.EMPTY;
var G__131503 = (function (){var G__131506 = cljs.core.PersistentArrayMap.EMPTY;
var G__131507 = "Guess ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131506,G__131507) : tailrecursion.hoplon.td.call(null,G__131506,G__131507));
})();
var G__131504 = (function (){var G__131508 = cljs.core.PersistentArrayMap.EMPTY;
var G__131509 = "Quotient ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131508,G__131509) : tailrecursion.hoplon.td.call(null,G__131508,G__131509));
})();
var G__131505 = (function (){var G__131510 = cljs.core.PersistentArrayMap.EMPTY;
var G__131511 = "Average ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131510,G__131511) : tailrecursion.hoplon.td.call(null,G__131510,G__131511));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__131502,G__131503,G__131504,G__131505) : tailrecursion.hoplon.tr.call(null,G__131502,G__131503,G__131504,G__131505));
})();
var G__131498 = (function (){var G__131512 = cljs.core.PersistentArrayMap.EMPTY;
var G__131513 = (function (){var G__131516 = cljs.core.PersistentArrayMap.EMPTY;
var G__131517 = "1 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131516,G__131517) : tailrecursion.hoplon.td.call(null,G__131516,G__131517));
})();
var G__131514 = (function (){var G__131518 = cljs.core.PersistentArrayMap.EMPTY;
var G__131519 = "(2/1) = 2 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131518,G__131519) : tailrecursion.hoplon.td.call(null,G__131518,G__131519));
})();
var G__131515 = (function (){var G__131520 = cljs.core.PersistentArrayMap.EMPTY;
var G__131521 = "((2+1)/2) = 1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131520,G__131521) : tailrecursion.hoplon.td.call(null,G__131520,G__131521));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__131512,G__131513,G__131514,G__131515) : tailrecursion.hoplon.tr.call(null,G__131512,G__131513,G__131514,G__131515));
})();
var G__131499 = (function (){var G__131522 = cljs.core.PersistentArrayMap.EMPTY;
var G__131523 = (function (){var G__131526 = cljs.core.PersistentArrayMap.EMPTY;
var G__131527 = "1.5 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131526,G__131527) : tailrecursion.hoplon.td.call(null,G__131526,G__131527));
})();
var G__131524 = (function (){var G__131528 = cljs.core.PersistentArrayMap.EMPTY;
var G__131529 = "(2/1.5) = 1.333...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131528,G__131529) : tailrecursion.hoplon.td.call(null,G__131528,G__131529));
})();
var G__131525 = (function (){var G__131530 = cljs.core.PersistentArrayMap.EMPTY;
var G__131531 = "((1.333... + 1.5)/2) = 1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131530,G__131531) : tailrecursion.hoplon.td.call(null,G__131530,G__131531));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__131522,G__131523,G__131524,G__131525) : tailrecursion.hoplon.tr.call(null,G__131522,G__131523,G__131524,G__131525));
})();
var G__131500 = (function (){var G__131532 = cljs.core.PersistentArrayMap.EMPTY;
var G__131533 = (function (){var G__131536 = cljs.core.PersistentArrayMap.EMPTY;
var G__131537 = "1.4167 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131536,G__131537) : tailrecursion.hoplon.td.call(null,G__131536,G__131537));
})();
var G__131534 = (function (){var G__131538 = cljs.core.PersistentArrayMap.EMPTY;
var G__131539 = "(2/1.4167) = 1.4118 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131538,G__131539) : tailrecursion.hoplon.td.call(null,G__131538,G__131539));
})();
var G__131535 = (function (){var G__131540 = cljs.core.PersistentArrayMap.EMPTY;
var G__131541 = "((1.4167 + 1.4118)/2) = 1.4142 ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131540,G__131541) : tailrecursion.hoplon.td.call(null,G__131540,G__131541));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__131532,G__131533,G__131534,G__131535) : tailrecursion.hoplon.tr.call(null,G__131532,G__131533,G__131534,G__131535));
})();
var G__131501 = (function (){var G__131542 = cljs.core.PersistentArrayMap.EMPTY;
var G__131543 = (function (){var G__131546 = cljs.core.PersistentArrayMap.EMPTY;
var G__131547 = "1.4142...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131546,G__131547) : tailrecursion.hoplon.td.call(null,G__131546,G__131547));
})();
var G__131544 = (function (){var G__131548 = cljs.core.PersistentArrayMap.EMPTY;
var G__131549 = "...  ";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131548,G__131549) : tailrecursion.hoplon.td.call(null,G__131548,G__131549));
})();
var G__131545 = (function (){var G__131550 = cljs.core.PersistentArrayMap.EMPTY;
var G__131551 = "...";
return (tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.td.cljs$core$IFn$_invoke$arity$2(G__131550,G__131551) : tailrecursion.hoplon.td.call(null,G__131550,G__131551));
})();
return (tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4 ? tailrecursion.hoplon.tr.cljs$core$IFn$_invoke$arity$4(G__131542,G__131543,G__131544,G__131545) : tailrecursion.hoplon.tr.call(null,G__131542,G__131543,G__131544,G__131545));
})();
return (tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6 ? tailrecursion.hoplon.table.cljs$core$IFn$_invoke$arity$6(G__131496,G__131497,G__131498,G__131499,G__131500,G__131501) : tailrecursion.hoplon.table.call(null,G__131496,G__131497,G__131498,G__131499,G__131500,G__131501));
})(),(function (){var _STAR_references_STAR_131552 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131553 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_131554 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131555 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131556 = cljs.core.PersistentArrayMap.EMPTY;
var G__131557 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Continuing this process, we obtain better and better approximations to the square root. "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131556,G__131557) : tailrecursion.hoplon.markdown.para_node.call(null,G__131556,G__131557));
})(),(function (){var G__131558 = cljs.core.PersistentArrayMap.EMPTY;
var G__131559 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Now let",(function (){var G__131560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131561 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131560,G__131561) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131560,G__131561));
})(),"s formalize the process in terms of procedures. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131558,G__131559) : tailrecursion.hoplon.markdown.para_node.call(null,G__131558,G__131559));
})(),(function (){var G__131562 = (function (){var G__131563 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131564 = (function (){var G__131565 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131566 = "(";
var G__131567 = (function (){var G__131594 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131595 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131594,G__131595) : tailrecursion.hoplon.span.call(null,G__131594,G__131595));
})();
var G__131568 = (function (){var G__131596 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131597 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131596,G__131597) : tailrecursion.hoplon.span.call(null,G__131596,G__131597));
})();
var G__131569 = " [";
var G__131570 = (function (){var G__131598 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131599 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131598,G__131599) : tailrecursion.hoplon.span.call(null,G__131598,G__131599));
})();
var G__131571 = " ";
var G__131572 = (function (){var G__131600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131601 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131600,G__131601) : tailrecursion.hoplon.span.call(null,G__131600,G__131601));
})();
var G__131573 = "]\n  (";
var G__131574 = (function (){var G__131602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131603 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131602,G__131603) : tailrecursion.hoplon.span.call(null,G__131602,G__131603));
})();
var G__131575 = "(";
var G__131576 = (function (){var G__131604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131605 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131604,G__131605) : tailrecursion.hoplon.span.call(null,G__131604,G__131605));
})();
var G__131577 = " ";
var G__131578 = (function (){var G__131606 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131607 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131606,G__131607) : tailrecursion.hoplon.span.call(null,G__131606,G__131607));
})();
var G__131579 = " ";
var G__131580 = (function (){var G__131608 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131609 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131608,G__131609) : tailrecursion.hoplon.span.call(null,G__131608,G__131609));
})();
var G__131581 = ")\n      ";
var G__131582 = (function (){var G__131610 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131611 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131610,G__131611) : tailrecursion.hoplon.span.call(null,G__131610,G__131611));
})();
var G__131583 = "\n      (";
var G__131584 = (function (){var G__131612 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131613 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131612,G__131613) : tailrecursion.hoplon.span.call(null,G__131612,G__131613));
})();
var G__131585 = " (";
var G__131586 = (function (){var G__131614 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131615 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131614,G__131615) : tailrecursion.hoplon.span.call(null,G__131614,G__131615));
})();
var G__131587 = " ";
var G__131588 = (function (){var G__131616 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131617 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131616,G__131617) : tailrecursion.hoplon.span.call(null,G__131616,G__131617));
})();
var G__131589 = " ";
var G__131590 = (function (){var G__131618 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131619 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131618,G__131619) : tailrecursion.hoplon.span.call(null,G__131618,G__131619));
})();
var G__131591 = ")\n                 ";
var G__131592 = (function (){var G__131620 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131621 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131620,G__131621) : tailrecursion.hoplon.span.call(null,G__131620,G__131621));
})();
var G__131593 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__131565,G__131566,G__131567,G__131568,G__131569,G__131570,G__131571,G__131572,G__131573,G__131574,G__131575,G__131576,G__131577,G__131578,G__131579,G__131580,G__131581,G__131582,G__131583,G__131584,G__131585,G__131586,G__131587,G__131588,G__131589,G__131590,G__131591,G__131592,G__131593) : tailrecursion.hoplon.pre.call(null,G__131565,G__131566,G__131567,G__131568,G__131569,G__131570,G__131571,G__131572,G__131573,G__131574,G__131575,G__131576,G__131577,G__131578,G__131579,G__131580,G__131581,G__131582,G__131583,G__131584,G__131585,G__131586,G__131587,G__131588,G__131589,G__131590,G__131591,G__131592,G__131593));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131563,G__131564) : tailrecursion.hoplon.div.call(null,G__131563,G__131564));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131562) : tailrecursion.hoplon.div.call(null,G__131562));
})(),(function (){var G__131622 = cljs.core.PersistentArrayMap.EMPTY;
var G__131623 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A guess is improved by averaging it with the quotient of the radicand and the old guess:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131622,G__131623) : tailrecursion.hoplon.markdown.para_node.call(null,G__131622,G__131623));
})(),(function (){var G__131624 = (function (){var G__131625 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131626 = (function (){var G__131627 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131628 = "(";
var G__131629 = (function (){var G__131645 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131646 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131645,G__131646) : tailrecursion.hoplon.span.call(null,G__131645,G__131646));
})();
var G__131630 = (function (){var G__131647 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131648 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131647,G__131648) : tailrecursion.hoplon.span.call(null,G__131647,G__131648));
})();
var G__131631 = " [";
var G__131632 = (function (){var G__131649 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131650 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131649,G__131650) : tailrecursion.hoplon.span.call(null,G__131649,G__131650));
})();
var G__131633 = " ";
var G__131634 = (function (){var G__131651 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131652 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131651,G__131652) : tailrecursion.hoplon.span.call(null,G__131651,G__131652));
})();
var G__131635 = "]\n  (";
var G__131636 = (function (){var G__131653 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131654 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131653,G__131654) : tailrecursion.hoplon.span.call(null,G__131653,G__131654));
})();
var G__131637 = " ";
var G__131638 = (function (){var G__131655 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131656 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131655,G__131656) : tailrecursion.hoplon.span.call(null,G__131655,G__131656));
})();
var G__131639 = " (";
var G__131640 = (function (){var G__131657 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131658 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131657,G__131658) : tailrecursion.hoplon.span.call(null,G__131657,G__131658));
})();
var G__131641 = (function (){var G__131659 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131660 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131659,G__131660) : tailrecursion.hoplon.span.call(null,G__131659,G__131660));
})();
var G__131642 = " ";
var G__131643 = (function (){var G__131661 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131662 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131661,G__131662) : tailrecursion.hoplon.span.call(null,G__131661,G__131662));
})();
var G__131644 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__131627,G__131628,G__131629,G__131630,G__131631,G__131632,G__131633,G__131634,G__131635,G__131636,G__131637,G__131638,G__131639,G__131640,G__131641,G__131642,G__131643,G__131644) : tailrecursion.hoplon.pre.call(null,G__131627,G__131628,G__131629,G__131630,G__131631,G__131632,G__131633,G__131634,G__131635,G__131636,G__131637,G__131638,G__131639,G__131640,G__131641,G__131642,G__131643,G__131644));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131625,G__131626) : tailrecursion.hoplon.div.call(null,G__131625,G__131626));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131624) : tailrecursion.hoplon.div.call(null,G__131624));
})(),(function (){var G__131663 = cljs.core.PersistentArrayMap.EMPTY;
var G__131664 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["where"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131663,G__131664) : tailrecursion.hoplon.markdown.para_node.call(null,G__131663,G__131664));
})(),(function (){var G__131665 = (function (){var G__131666 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131667 = (function (){var G__131668 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131669 = "(";
var G__131670 = (function (){var G__131686 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131687 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131686,G__131687) : tailrecursion.hoplon.span.call(null,G__131686,G__131687));
})();
var G__131671 = (function (){var G__131688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131689 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131688,G__131689) : tailrecursion.hoplon.span.call(null,G__131688,G__131689));
})();
var G__131672 = " [";
var G__131673 = (function (){var G__131690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131691 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131690,G__131691) : tailrecursion.hoplon.span.call(null,G__131690,G__131691));
})();
var G__131674 = " ";
var G__131675 = (function (){var G__131692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131693 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131692,G__131693) : tailrecursion.hoplon.span.call(null,G__131692,G__131693));
})();
var G__131676 = "]\n  (";
var G__131677 = (function (){var G__131694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131695 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131694,G__131695) : tailrecursion.hoplon.span.call(null,G__131694,G__131695));
})();
var G__131678 = "(";
var G__131679 = (function (){var G__131696 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131697 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131696,G__131697) : tailrecursion.hoplon.span.call(null,G__131696,G__131697));
})();
var G__131680 = (function (){var G__131698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131699 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131698,G__131699) : tailrecursion.hoplon.span.call(null,G__131698,G__131699));
})();
var G__131681 = " ";
var G__131682 = (function (){var G__131700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131701 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131700,G__131701) : tailrecursion.hoplon.span.call(null,G__131700,G__131701));
})();
var G__131683 = ") ";
var G__131684 = (function (){var G__131702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131703 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131702,G__131703) : tailrecursion.hoplon.span.call(null,G__131702,G__131703));
})();
var G__131685 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$18(G__131668,G__131669,G__131670,G__131671,G__131672,G__131673,G__131674,G__131675,G__131676,G__131677,G__131678,G__131679,G__131680,G__131681,G__131682,G__131683,G__131684,G__131685) : tailrecursion.hoplon.pre.call(null,G__131668,G__131669,G__131670,G__131671,G__131672,G__131673,G__131674,G__131675,G__131676,G__131677,G__131678,G__131679,G__131680,G__131681,G__131682,G__131683,G__131684,G__131685));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131666,G__131667) : tailrecursion.hoplon.div.call(null,G__131666,G__131667));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131665) : tailrecursion.hoplon.div.call(null,G__131665));
})(),(function (){var G__131704 = cljs.core.PersistentArrayMap.EMPTY;
var G__131705 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We also have to say what we mean by ``good enough.",(function (){var G__131706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131707 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131706,G__131707) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131706,G__131707));
})(),(function (){var G__131708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131709 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131708,G__131709) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131708,G__131709));
})()," The following will do for illustration, but it is not really a very good test. (See exercise 1.7.) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001):",(function (){var G__131710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__131711 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention. As far as the interpreter is concerned, the question mark is just an ordinary character."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__131710,G__131711) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__131710,G__131711));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131704,G__131705) : tailrecursion.hoplon.markdown.para_node.call(null,G__131704,G__131705));
})(),(function (){var G__131712 = (function (){var G__131713 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131714 = (function (){var G__131715 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131716 = "(";
var G__131717 = (function (){var G__131738 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131739 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131738,G__131739) : tailrecursion.hoplon.span.call(null,G__131738,G__131739));
})();
var G__131718 = (function (){var G__131740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131741 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131740,G__131741) : tailrecursion.hoplon.span.call(null,G__131740,G__131741));
})();
var G__131719 = " [";
var G__131720 = (function (){var G__131742 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131743 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131742,G__131743) : tailrecursion.hoplon.span.call(null,G__131742,G__131743));
})();
var G__131721 = " ";
var G__131722 = (function (){var G__131744 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131745 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131744,G__131745) : tailrecursion.hoplon.span.call(null,G__131744,G__131745));
})();
var G__131723 = "]\n  (";
var G__131724 = (function (){var G__131746 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131747 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131746,G__131747) : tailrecursion.hoplon.span.call(null,G__131746,G__131747));
})();
var G__131725 = "(";
var G__131726 = (function (){var G__131748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131749 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131748,G__131749) : tailrecursion.hoplon.span.call(null,G__131748,G__131749));
})();
var G__131727 = " (";
var G__131728 = (function (){var G__131750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131751 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131750,G__131751) : tailrecursion.hoplon.span.call(null,G__131750,G__131751));
})();
var G__131729 = "(";
var G__131730 = (function (){var G__131752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131753 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131752,G__131753) : tailrecursion.hoplon.span.call(null,G__131752,G__131753));
})();
var G__131731 = " ";
var G__131732 = (function (){var G__131754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131755 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131754,G__131755) : tailrecursion.hoplon.span.call(null,G__131754,G__131755));
})();
var G__131733 = ") ";
var G__131734 = (function (){var G__131756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131757 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131756,G__131757) : tailrecursion.hoplon.span.call(null,G__131756,G__131757));
})();
var G__131735 = ")) ";
var G__131736 = (function (){var G__131758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131759 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131758,G__131759) : tailrecursion.hoplon.span.call(null,G__131758,G__131759));
})();
var G__131737 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__131715,G__131716,G__131717,G__131718,G__131719,G__131720,G__131721,G__131722,G__131723,G__131724,G__131725,G__131726,G__131727,G__131728,G__131729,G__131730,G__131731,G__131732,G__131733,G__131734,G__131735,G__131736,G__131737) : tailrecursion.hoplon.pre.call(null,G__131715,G__131716,G__131717,G__131718,G__131719,G__131720,G__131721,G__131722,G__131723,G__131724,G__131725,G__131726,G__131727,G__131728,G__131729,G__131730,G__131731,G__131732,G__131733,G__131734,G__131735,G__131736,G__131737));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131713,G__131714) : tailrecursion.hoplon.div.call(null,G__131713,G__131714));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131712) : tailrecursion.hoplon.div.call(null,G__131712));
})(),(function (){var G__131760 = cljs.core.PersistentArrayMap.EMPTY;
var G__131761 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:",(function (){var G__131762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__131763 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that we express our initial guess as 1.0 rather than 1. This would not make any difference in many Lisp implementations. MIT Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal. For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667. (We will learn how to implement arithmetic on rational numbers in section 2.1.1.) If we start with an initial guess of 1 in our square-root program, and \\(x\\) is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals. Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__131762,G__131763) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__131762,G__131763));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131760,G__131761) : tailrecursion.hoplon.markdown.para_node.call(null,G__131760,G__131761));
})(),(function (){var G__131764 = (function (){var G__131765 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131766 = (function (){var G__131767 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131768 = "(";
var G__131769 = (function (){var G__131780 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131781 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131780,G__131781) : tailrecursion.hoplon.span.call(null,G__131780,G__131781));
})();
var G__131770 = (function (){var G__131782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131783 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131782,G__131783) : tailrecursion.hoplon.span.call(null,G__131782,G__131783));
})();
var G__131771 = " [";
var G__131772 = (function (){var G__131784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131785 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131784,G__131785) : tailrecursion.hoplon.span.call(null,G__131784,G__131785));
})();
var G__131773 = "]\n  (";
var G__131774 = (function (){var G__131786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131787 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131786,G__131787) : tailrecursion.hoplon.span.call(null,G__131786,G__131787));
})();
var G__131775 = " ";
var G__131776 = (function (){var G__131788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131789 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131788,G__131789) : tailrecursion.hoplon.span.call(null,G__131788,G__131789));
})();
var G__131777 = " ";
var G__131778 = (function (){var G__131790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131791 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131790,G__131791) : tailrecursion.hoplon.span.call(null,G__131790,G__131791));
})();
var G__131779 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$13(G__131767,G__131768,G__131769,G__131770,G__131771,G__131772,G__131773,G__131774,G__131775,G__131776,G__131777,G__131778,G__131779) : tailrecursion.hoplon.pre.call(null,G__131767,G__131768,G__131769,G__131770,G__131771,G__131772,G__131773,G__131774,G__131775,G__131776,G__131777,G__131778,G__131779));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131765,G__131766) : tailrecursion.hoplon.div.call(null,G__131765,G__131766));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131764) : tailrecursion.hoplon.div.call(null,G__131764));
})(),(function (){var G__131792 = cljs.core.PersistentArrayMap.EMPTY;
var G__131793 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If we type these definitions to the interpreter, we can use sqrt just as we can use any procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131792,G__131793) : tailrecursion.hoplon.markdown.para_node.call(null,G__131792,G__131793));
})(),(function (){var G__131794 = (function (){var G__131795 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131796 = (function (){var G__131797 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131798 = "(";
var G__131799 = (function (){var G__131836 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131837 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131836,G__131837) : tailrecursion.hoplon.span.call(null,G__131836,G__131837));
})();
var G__131800 = " ";
var G__131801 = (function (){var G__131838 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131839 = "9";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131838,G__131839) : tailrecursion.hoplon.span.call(null,G__131838,G__131839));
})();
var G__131802 = ")\n";
var G__131803 = (function (){var G__131840 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131841 = "3.00009155413138";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131840,G__131841) : tailrecursion.hoplon.span.call(null,G__131840,G__131841));
})();
var G__131804 = "\n(";
var G__131805 = (function (){var G__131842 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131843 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131842,G__131843) : tailrecursion.hoplon.span.call(null,G__131842,G__131843));
})();
var G__131806 = " (";
var G__131807 = (function (){var G__131844 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131845 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131844,G__131845) : tailrecursion.hoplon.span.call(null,G__131844,G__131845));
})();
var G__131808 = (function (){var G__131846 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131847 = "100";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131846,G__131847) : tailrecursion.hoplon.span.call(null,G__131846,G__131847));
})();
var G__131809 = " ";
var G__131810 = (function (){var G__131848 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131849 = "37";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131848,G__131849) : tailrecursion.hoplon.span.call(null,G__131848,G__131849));
})();
var G__131811 = "))\n";
var G__131812 = (function (){var G__131850 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131851 = "11.704699917758145";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131850,G__131851) : tailrecursion.hoplon.span.call(null,G__131850,G__131851));
})();
var G__131813 = "\n(";
var G__131814 = (function (){var G__131852 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131853 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131852,G__131853) : tailrecursion.hoplon.span.call(null,G__131852,G__131853));
})();
var G__131815 = " (";
var G__131816 = (function (){var G__131854 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131855 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131854,G__131855) : tailrecursion.hoplon.span.call(null,G__131854,G__131855));
})();
var G__131817 = "(";
var G__131818 = (function (){var G__131856 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131857 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131856,G__131857) : tailrecursion.hoplon.span.call(null,G__131856,G__131857));
})();
var G__131819 = " ";
var G__131820 = (function (){var G__131858 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131859 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131858,G__131859) : tailrecursion.hoplon.span.call(null,G__131858,G__131859));
})();
var G__131821 = ") (";
var G__131822 = (function (){var G__131860 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131861 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131860,G__131861) : tailrecursion.hoplon.span.call(null,G__131860,G__131861));
})();
var G__131823 = " ";
var G__131824 = (function (){var G__131862 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131863 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131862,G__131863) : tailrecursion.hoplon.span.call(null,G__131862,G__131863));
})();
var G__131825 = ")))\n";
var G__131826 = (function (){var G__131864 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131865 = "1.7739279023207892";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131864,G__131865) : tailrecursion.hoplon.span.call(null,G__131864,G__131865));
})();
var G__131827 = "\n(";
var G__131828 = (function (){var G__131866 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131867 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131866,G__131867) : tailrecursion.hoplon.span.call(null,G__131866,G__131867));
})();
var G__131829 = " (";
var G__131830 = (function (){var G__131868 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131869 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131868,G__131869) : tailrecursion.hoplon.span.call(null,G__131868,G__131869));
})();
var G__131831 = " ";
var G__131832 = (function (){var G__131870 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131871 = "1000";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131870,G__131871) : tailrecursion.hoplon.span.call(null,G__131870,G__131871));
})();
var G__131833 = "))\n";
var G__131834 = (function (){var G__131872 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131873 = "1000.000369924366";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131872,G__131873) : tailrecursion.hoplon.span.call(null,G__131872,G__131873));
})();
var G__131835 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$39(G__131797,G__131798,G__131799,G__131800,G__131801,G__131802,G__131803,G__131804,G__131805,G__131806,G__131807,G__131808,G__131809,G__131810,G__131811,G__131812,G__131813,G__131814,G__131815,G__131816,G__131817,G__131818,G__131819,G__131820,G__131821,G__131822,G__131823,G__131824,G__131825,G__131826,G__131827,G__131828,G__131829,G__131830,G__131831,G__131832,G__131833,G__131834,G__131835) : tailrecursion.hoplon.pre.call(null,G__131797,G__131798,G__131799,G__131800,G__131801,G__131802,G__131803,G__131804,G__131805,G__131806,G__131807,G__131808,G__131809,G__131810,G__131811,G__131812,G__131813,G__131814,G__131815,G__131816,G__131817,G__131818,G__131819,G__131820,G__131821,G__131822,G__131823,G__131824,G__131825,G__131826,G__131827,G__131828,G__131829,G__131830,G__131831,G__131832,G__131833,G__131834,G__131835));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131795,G__131796) : tailrecursion.hoplon.div.call(null,G__131795,G__131796));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131794) : tailrecursion.hoplon.div.call(null,G__131794));
})(),(function (){var G__131874 = cljs.core.PersistentArrayMap.EMPTY;
var G__131875 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The sqrt program also illustrates that the simple procedural language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. Sqrt-iter, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a procedure.",(function (){var G__131876 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__131877 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on ``tail recursion",(function (){var G__131878 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131879 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131878,G__131879) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131878,G__131879));
})(),(function (){var G__131880 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131881 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131880,G__131881) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131880,G__131881));
})()," in section 1.2.1."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__131876,G__131877) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__131876,G__131877));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131874,G__131875) : tailrecursion.hoplon.markdown.para_node.call(null,G__131874,G__131875));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131555;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131554;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131553;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131552;
}})()], 0));
var G__128866 = "";
var G__128867 = content.sicp.book_data.exercises.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_131882 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131883 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_131884 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_131885 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__131886 = cljs.core.PersistentArrayMap.EMPTY;
var G__131887 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Alyssa P. Hacker doesn",(function (){var G__131888 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131889 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131888,G__131889) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131888,G__131889));
})(),"t see why if needs to be provided as a special form. ",(function (){var G__131890 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__131891 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Why can",(function (){var G__131892 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131893 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131892,G__131893) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131892,G__131893));
})(),"t I just define it as an ordinary procedure in terms of cond?"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__131890,G__131891) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__131890,G__131891));
})()," she asks. Alyssa",(function (){var G__131894 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__131895 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__131894,G__131895) : tailrecursion.hoplon.markdown.simple_node.call(null,G__131894,G__131895));
})(),"s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131886,G__131887) : tailrecursion.hoplon.markdown.para_node.call(null,G__131886,G__131887));
})(),(function (){var G__131896 = (function (){var G__131897 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131898 = (function (){var G__131899 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131900 = "(";
var G__131901 = (function (){var G__131919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__131920 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131919,G__131920) : tailrecursion.hoplon.span.call(null,G__131919,G__131920));
})();
var G__131902 = (function (){var G__131921 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131922 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131921,G__131922) : tailrecursion.hoplon.span.call(null,G__131921,G__131922));
})();
var G__131903 = " [";
var G__131904 = (function (){var G__131923 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131924 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131923,G__131924) : tailrecursion.hoplon.span.call(null,G__131923,G__131924));
})();
var G__131905 = " ";
var G__131906 = (function (){var G__131925 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131926 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131925,G__131926) : tailrecursion.hoplon.span.call(null,G__131925,G__131926));
})();
var G__131907 = " ";
var G__131908 = (function (){var G__131927 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131928 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131927,G__131928) : tailrecursion.hoplon.span.call(null,G__131927,G__131928));
})();
var G__131909 = "]\n  (";
var G__131910 = (function (){var G__131929 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131930 = "cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131929,G__131930) : tailrecursion.hoplon.span.call(null,G__131929,G__131930));
})();
var G__131911 = (function (){var G__131931 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131932 = "predicate";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131931,G__131932) : tailrecursion.hoplon.span.call(null,G__131931,G__131932));
})();
var G__131912 = " ";
var G__131913 = (function (){var G__131933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131934 = "then-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131933,G__131934) : tailrecursion.hoplon.span.call(null,G__131933,G__131934));
})();
var G__131914 = "\n        ";
var G__131915 = (function (){var G__131935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131936 = ":else";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131935,G__131936) : tailrecursion.hoplon.span.call(null,G__131935,G__131936));
})();
var G__131916 = " ";
var G__131917 = (function (){var G__131937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__131938 = "else-clause";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131937,G__131938) : tailrecursion.hoplon.span.call(null,G__131937,G__131938));
})();
var G__131918 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$20(G__131899,G__131900,G__131901,G__131902,G__131903,G__131904,G__131905,G__131906,G__131907,G__131908,G__131909,G__131910,G__131911,G__131912,G__131913,G__131914,G__131915,G__131916,G__131917,G__131918) : tailrecursion.hoplon.pre.call(null,G__131899,G__131900,G__131901,G__131902,G__131903,G__131904,G__131905,G__131906,G__131907,G__131908,G__131909,G__131910,G__131911,G__131912,G__131913,G__131914,G__131915,G__131916,G__131917,G__131918));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131897,G__131898) : tailrecursion.hoplon.div.call(null,G__131897,G__131898));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131896) : tailrecursion.hoplon.div.call(null,G__131896));
})(),(function (){var G__131939 = cljs.core.PersistentArrayMap.EMPTY;
var G__131940 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Eva demonstrates the program for Alyssa:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__131939,G__131940) : tailrecursion.hoplon.markdown.para_node.call(null,G__131939,G__131940));
})(),(function (){var G__131941 = (function (){var G__131942 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131943 = (function (){var G__131944 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131945 = "(";
var G__131946 = (function (){var G__131959 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131960 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131959,G__131960) : tailrecursion.hoplon.span.call(null,G__131959,G__131960));
})();
var G__131947 = " (";
var G__131948 = (function (){var G__131961 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131962 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131961,G__131962) : tailrecursion.hoplon.span.call(null,G__131961,G__131962));
})();
var G__131949 = (function (){var G__131963 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131964 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131963,G__131964) : tailrecursion.hoplon.span.call(null,G__131963,G__131964));
})();
var G__131950 = " ";
var G__131951 = (function (){var G__131965 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131966 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131965,G__131966) : tailrecursion.hoplon.span.call(null,G__131965,G__131966));
})();
var G__131952 = ") ";
var G__131953 = (function (){var G__131967 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131968 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131967,G__131968) : tailrecursion.hoplon.span.call(null,G__131967,G__131968));
})();
var G__131954 = " ";
var G__131955 = (function (){var G__131969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131970 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131969,G__131970) : tailrecursion.hoplon.span.call(null,G__131969,G__131970));
})();
var G__131956 = ")\n";
var G__131957 = (function (){var G__131971 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131972 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131971,G__131972) : tailrecursion.hoplon.span.call(null,G__131971,G__131972));
})();
var G__131958 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__131944,G__131945,G__131946,G__131947,G__131948,G__131949,G__131950,G__131951,G__131952,G__131953,G__131954,G__131955,G__131956,G__131957,G__131958) : tailrecursion.hoplon.pre.call(null,G__131944,G__131945,G__131946,G__131947,G__131948,G__131949,G__131950,G__131951,G__131952,G__131953,G__131954,G__131955,G__131956,G__131957,G__131958));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131942,G__131943) : tailrecursion.hoplon.div.call(null,G__131942,G__131943));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131941) : tailrecursion.hoplon.div.call(null,G__131941));
})(),(function (){var G__131973 = (function (){var G__131974 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__131975 = (function (){var G__131976 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__131977 = "(";
var G__131978 = (function (){var G__131991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__131992 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131991,G__131992) : tailrecursion.hoplon.span.call(null,G__131991,G__131992));
})();
var G__131979 = " (";
var G__131980 = (function (){var G__131993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__131994 = "= ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131993,G__131994) : tailrecursion.hoplon.span.call(null,G__131993,G__131994));
})();
var G__131981 = (function (){var G__131995 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131996 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131995,G__131996) : tailrecursion.hoplon.span.call(null,G__131995,G__131996));
})();
var G__131982 = " ";
var G__131983 = (function (){var G__131997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__131998 = "1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131997,G__131998) : tailrecursion.hoplon.span.call(null,G__131997,G__131998));
})();
var G__131984 = ") ";
var G__131985 = (function (){var G__131999 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132000 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__131999,G__132000) : tailrecursion.hoplon.span.call(null,G__131999,G__132000));
})();
var G__131986 = " ";
var G__131987 = (function (){var G__132001 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132002 = "5";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132001,G__132002) : tailrecursion.hoplon.span.call(null,G__132001,G__132002));
})();
var G__131988 = ")\n";
var G__131989 = (function (){var G__132003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132004 = "0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132003,G__132004) : tailrecursion.hoplon.span.call(null,G__132003,G__132004));
})();
var G__131990 = "\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$15(G__131976,G__131977,G__131978,G__131979,G__131980,G__131981,G__131982,G__131983,G__131984,G__131985,G__131986,G__131987,G__131988,G__131989,G__131990) : tailrecursion.hoplon.pre.call(null,G__131976,G__131977,G__131978,G__131979,G__131980,G__131981,G__131982,G__131983,G__131984,G__131985,G__131986,G__131987,G__131988,G__131989,G__131990));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__131974,G__131975) : tailrecursion.hoplon.div.call(null,G__131974,G__131975));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__131973) : tailrecursion.hoplon.div.call(null,G__131973));
})(),(function (){var G__132005 = cljs.core.PersistentArrayMap.EMPTY;
var G__132006 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Delighted, Alyssa now uses ",(function (){var G__132007 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__132008 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132007,G__132008) : tailrecursion.hoplon.markdown.code_node.call(null,G__132007,G__132008));
})()," to rewrite the square-root program:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132005,G__132006) : tailrecursion.hoplon.markdown.para_node.call(null,G__132005,G__132006));
})(),(function (){var G__132009 = (function (){var G__132010 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132011 = (function (){var G__132012 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132013 = "(";
var G__132014 = (function (){var G__132041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132042 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132041,G__132042) : tailrecursion.hoplon.span.call(null,G__132041,G__132042));
})();
var G__132015 = (function (){var G__132043 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132044 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132043,G__132044) : tailrecursion.hoplon.span.call(null,G__132043,G__132044));
})();
var G__132016 = " [";
var G__132017 = (function (){var G__132045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132046 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132045,G__132046) : tailrecursion.hoplon.span.call(null,G__132045,G__132046));
})();
var G__132018 = " ";
var G__132019 = (function (){var G__132047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132048 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132047,G__132048) : tailrecursion.hoplon.span.call(null,G__132047,G__132048));
})();
var G__132020 = "]\n  (";
var G__132021 = (function (){var G__132049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132050 = "new-if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132049,G__132050) : tailrecursion.hoplon.span.call(null,G__132049,G__132050));
})();
var G__132022 = " (";
var G__132023 = (function (){var G__132051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132052 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132051,G__132052) : tailrecursion.hoplon.span.call(null,G__132051,G__132052));
})();
var G__132024 = " ";
var G__132025 = (function (){var G__132053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132054 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132053,G__132054) : tailrecursion.hoplon.span.call(null,G__132053,G__132054));
})();
var G__132026 = " ";
var G__132027 = (function (){var G__132055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132056 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132055,G__132056) : tailrecursion.hoplon.span.call(null,G__132055,G__132056));
})();
var G__132028 = ")\n          ";
var G__132029 = (function (){var G__132057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132058 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132057,G__132058) : tailrecursion.hoplon.span.call(null,G__132057,G__132058));
})();
var G__132030 = "\n          (";
var G__132031 = (function (){var G__132059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132060 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132059,G__132060) : tailrecursion.hoplon.span.call(null,G__132059,G__132060));
})();
var G__132032 = " (";
var G__132033 = (function (){var G__132061 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132062 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132061,G__132062) : tailrecursion.hoplon.span.call(null,G__132061,G__132062));
})();
var G__132034 = " ";
var G__132035 = (function (){var G__132063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132064 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132063,G__132064) : tailrecursion.hoplon.span.call(null,G__132063,G__132064));
})();
var G__132036 = " ";
var G__132037 = (function (){var G__132065 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132066 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132065,G__132066) : tailrecursion.hoplon.span.call(null,G__132065,G__132066));
})();
var G__132038 = ")\n                     ";
var G__132039 = (function (){var G__132067 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132068 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132067,G__132068) : tailrecursion.hoplon.span.call(null,G__132067,G__132068));
})();
var G__132040 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$29(G__132012,G__132013,G__132014,G__132015,G__132016,G__132017,G__132018,G__132019,G__132020,G__132021,G__132022,G__132023,G__132024,G__132025,G__132026,G__132027,G__132028,G__132029,G__132030,G__132031,G__132032,G__132033,G__132034,G__132035,G__132036,G__132037,G__132038,G__132039,G__132040) : tailrecursion.hoplon.pre.call(null,G__132012,G__132013,G__132014,G__132015,G__132016,G__132017,G__132018,G__132019,G__132020,G__132021,G__132022,G__132023,G__132024,G__132025,G__132026,G__132027,G__132028,G__132029,G__132030,G__132031,G__132032,G__132033,G__132034,G__132035,G__132036,G__132037,G__132038,G__132039,G__132040));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132010,G__132011) : tailrecursion.hoplon.div.call(null,G__132010,G__132011));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132009) : tailrecursion.hoplon.div.call(null,G__132009));
})(),(function (){var G__132069 = cljs.core.PersistentArrayMap.EMPTY;
var G__132070 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["What happens when Alyssa attempts to use this to compute square roots? Explain."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132069,G__132070) : tailrecursion.hoplon.markdown.para_node.call(null,G__132069,G__132070));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131885;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131884;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_131883;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_131882;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_132071 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132072 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_132073 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132074 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132075 = cljs.core.PersistentArrayMap.EMPTY;
var G__132076 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Since ",(function (){var G__132077 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__132078 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132077,G__132078) : tailrecursion.hoplon.markdown.code_node.call(null,G__132077,G__132078));
})()," is not a special form, it will be evaluated in applicative order. Hence, when ",(function (){var G__132079 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(new-if a b c)"], null);
var G__132080 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132079,G__132080) : tailrecursion.hoplon.markdown.code_node.call(null,G__132079,G__132080));
})()," is called, a, b, and c are all evaluated before considering how they may or may not be used within the function ",(function (){var G__132081 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__132082 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132081,G__132082) : tailrecursion.hoplon.markdown.code_node.call(null,G__132081,G__132082));
})(),"."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132075,G__132076) : tailrecursion.hoplon.markdown.para_node.call(null,G__132075,G__132076));
})(),(function (){var G__132083 = cljs.core.PersistentArrayMap.EMPTY;
var G__132084 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So, in this particular case, let us compute the square root of 4 with our first guess being 2 (Alyssa would probably think that this would terminate immediately, but let",(function (){var G__132085 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132086 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132085,G__132086) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132085,G__132086));
})(),"s see). ",(function (){var G__132087 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"clj\n(sqrt-iter 2 4) ==>\n(new-if (good-enough? 2 4) 2 (sqrt-iter (improve 2 4) 4))\n"], null);
var G__132088 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132087,G__132088) : tailrecursion.hoplon.markdown.code_node.call(null,G__132087,G__132088));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132083,G__132084) : tailrecursion.hoplon.markdown.para_node.call(null,G__132083,G__132084));
})(),(function (){var G__132089 = cljs.core.PersistentArrayMap.EMPTY;
var G__132090 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["You can see that in this example, since ",(function (){var G__132091 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(improve 2 4) = 2"], null);
var G__132092 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132091,G__132092) : tailrecursion.hoplon.markdown.code_node.call(null,G__132091,G__132092));
})(),", ",(function (){var G__132093 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__132094 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132093,G__132094) : tailrecursion.hoplon.markdown.code_node.call(null,G__132093,G__132094));
})()," is going to requre us to compute ",(function (){var G__132095 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"(sqrt-iter 2 4)"], null);
var G__132096 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132095,G__132096) : tailrecursion.hoplon.markdown.code_node.call(null,G__132095,G__132096));
})()," again. Then we",(function (){var G__132097 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132098 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132097,G__132098) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132097,G__132098));
})(),"ll be computing the ",(function (){var G__132099 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"new-if"], null);
var G__132100 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132099,G__132100) : tailrecursion.hoplon.markdown.code_node.call(null,G__132099,G__132100));
})()," again, and you can see the cycle that we",(function (){var G__132101 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132102 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132101,G__132102) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132101,G__132102));
})(),"ve gotten ourselves in."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132089,G__132090) : tailrecursion.hoplon.markdown.para_node.call(null,G__132089,G__132090));
})(),(function (){var G__132103 = cljs.core.PersistentArrayMap.EMPTY;
var G__132104 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Long story short, this would result in an infinite loop."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132103,G__132104) : tailrecursion.hoplon.markdown.para_node.call(null,G__132103,G__132104));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132074;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132073;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132072;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132071;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_132105 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132106 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_132107 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132108 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132109 = cljs.core.PersistentArrayMap.EMPTY;
var G__132110 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The ",(function (){var G__132111 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132112 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132111,G__132112) : tailrecursion.hoplon.markdown.code_node.call(null,G__132111,G__132112));
})()," test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing ",(function (){var G__132113 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132114 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132113,G__132114) : tailrecursion.hoplon.markdown.code_node.call(null,G__132113,G__132114));
})()," is to watch how ",(function (){var G__132115 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__132116 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132115,G__132116) : tailrecursion.hoplon.markdown.code_node.call(null,G__132115,G__132116));
})()," changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132109,G__132110) : tailrecursion.hoplon.markdown.para_node.call(null,G__132109,G__132110));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132108;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132107;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132106;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132105;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_132117 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132118 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_132119 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132120 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132121 = cljs.core.PersistentArrayMap.EMPTY;
var G__132122 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When finding the square root of a very small number (let",(function (){var G__132123 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132124 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132123,G__132124) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132123,G__132124));
})(),"s use 0.0000001, whose square root is 0.0001), since the answer we",(function (){var G__132125 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132126 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132125,G__132126) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132125,G__132126));
})(),"re looking for is smaller than our tollerance, you might get a zero or even a negative number as our answer! And on the other end of the spectrum, if our number is too large it would require enough calculations to make the precision larger than our tolerance. In that having a set tolerance is meaningless because our answer will be outside of that range due to the limitations of the computer!"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132121,G__132122) : tailrecursion.hoplon.markdown.para_node.call(null,G__132121,G__132122));
})(),(function (){var G__132127 = cljs.core.PersistentArrayMap.EMPTY;
var G__132128 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["To avoid this problem we can set a dynamic tolerance like the exercise suggests. Let",(function (){var G__132129 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132130 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132129,G__132130) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132129,G__132130));
})(),"s say our problem allows for a 10% fractional tolerance. Then our ",(function (){var G__132131 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132132 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132131,G__132132) : tailrecursion.hoplon.markdown.code_node.call(null,G__132131,G__132132));
})()," procedure would look like, "], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132127,G__132128) : tailrecursion.hoplon.markdown.para_node.call(null,G__132127,G__132128));
})(),(function (){var G__132133 = (function (){var G__132134 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132135 = (function (){var G__132136 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132137 = "(";
var G__132138 = (function (){var G__132160 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132161 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132160,G__132161) : tailrecursion.hoplon.span.call(null,G__132160,G__132161));
})();
var G__132139 = (function (){var G__132162 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132163 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132162,G__132163) : tailrecursion.hoplon.span.call(null,G__132162,G__132163));
})();
var G__132140 = " [";
var G__132141 = (function (){var G__132164 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132165 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132164,G__132165) : tailrecursion.hoplon.span.call(null,G__132164,G__132165));
})();
var G__132142 = " ";
var G__132143 = (function (){var G__132166 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132167 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132166,G__132167) : tailrecursion.hoplon.span.call(null,G__132166,G__132167));
})();
var G__132144 = "]\n  (";
var G__132145 = (function (){var G__132168 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132169 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132168,G__132169) : tailrecursion.hoplon.span.call(null,G__132168,G__132169));
})();
var G__132146 = "(";
var G__132147 = (function (){var G__132170 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132171 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132170,G__132171) : tailrecursion.hoplon.span.call(null,G__132170,G__132171));
})();
var G__132148 = " (";
var G__132149 = (function (){var G__132172 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132173 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132172,G__132173) : tailrecursion.hoplon.span.call(null,G__132172,G__132173));
})();
var G__132150 = "(";
var G__132151 = (function (){var G__132174 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132175 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132174,G__132175) : tailrecursion.hoplon.span.call(null,G__132174,G__132175));
})();
var G__132152 = (function (){var G__132176 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132177 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132176,G__132177) : tailrecursion.hoplon.span.call(null,G__132176,G__132177));
})();
var G__132153 = " ";
var G__132154 = (function (){var G__132178 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132179 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132178,G__132179) : tailrecursion.hoplon.span.call(null,G__132178,G__132179));
})();
var G__132155 = ") ";
var G__132156 = (function (){var G__132180 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132181 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132180,G__132181) : tailrecursion.hoplon.span.call(null,G__132180,G__132181));
})();
var G__132157 = ")) ";
var G__132158 = (function (){var G__132182 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132183 = "0.1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132182,G__132183) : tailrecursion.hoplon.span.call(null,G__132182,G__132183));
})();
var G__132159 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$24(G__132136,G__132137,G__132138,G__132139,G__132140,G__132141,G__132142,G__132143,G__132144,G__132145,G__132146,G__132147,G__132148,G__132149,G__132150,G__132151,G__132152,G__132153,G__132154,G__132155,G__132156,G__132157,G__132158,G__132159) : tailrecursion.hoplon.pre.call(null,G__132136,G__132137,G__132138,G__132139,G__132140,G__132141,G__132142,G__132143,G__132144,G__132145,G__132146,G__132147,G__132148,G__132149,G__132150,G__132151,G__132152,G__132153,G__132154,G__132155,G__132156,G__132157,G__132158,G__132159));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132134,G__132135) : tailrecursion.hoplon.div.call(null,G__132134,G__132135));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132133) : tailrecursion.hoplon.div.call(null,G__132133));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132120;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132119;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132118;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132117;
}})()], 0))], 0)),"",content.sicp.book_data.exercise.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_132184 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132185 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_132186 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132187 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132188 = cljs.core.PersistentArrayMap.EMPTY;
var G__132189 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Newton",(function (){var G__132190 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132191 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132190,G__132191) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132190,G__132191));
})(),"s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132188,G__132189) : tailrecursion.hoplon.markdown.para_node.call(null,G__132188,G__132189));
})(),(function (){var G__132192 = cljs.core.PersistentArrayMap.EMPTY;
var G__132193 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$$ \\frac{x/y^2 +2y}{3} $$"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132192,G__132193) : tailrecursion.hoplon.markdown.para_node.call(null,G__132192,G__132193));
})(),(function (){var G__132194 = cljs.core.PersistentArrayMap.EMPTY;
var G__132195 = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"#!/sicp/ch/1/sect/3/sub/4",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.3.4"], null)], 0))," we will see how to implement Newton",(function (){var G__132196 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132197 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132196,G__132197) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132196,G__132197));
})(),"s method in general as an abstraction of these square-root and cube-root procedures.)"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132194,G__132195) : tailrecursion.hoplon.markdown.para_node.call(null,G__132194,G__132195));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132187;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132186;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132185;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132184;
}})(),"",content.sicp.book_data.q_a.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.PersistentArrayMap.EMPTY,(function (){var _STAR_references_STAR_132198 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132199 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_132200 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132201 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132202 = (function (){var G__132203 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132204 = (function (){var G__132205 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132206 = "(";
var G__132207 = (function (){var G__132232 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132233 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132232,G__132233) : tailrecursion.hoplon.span.call(null,G__132232,G__132233));
})();
var G__132208 = (function (){var G__132234 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132235 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132234,G__132235) : tailrecursion.hoplon.span.call(null,G__132234,G__132235));
})();
var G__132209 = " [";
var G__132210 = (function (){var G__132236 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132237 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132236,G__132237) : tailrecursion.hoplon.span.call(null,G__132236,G__132237));
})();
var G__132211 = " ";
var G__132212 = (function (){var G__132238 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132239 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132238,G__132239) : tailrecursion.hoplon.span.call(null,G__132238,G__132239));
})();
var G__132213 = "]\n  (";
var G__132214 = (function (){var G__132240 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132241 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132240,G__132241) : tailrecursion.hoplon.span.call(null,G__132240,G__132241));
})();
var G__132215 = "(";
var G__132216 = (function (){var G__132242 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132243 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132242,G__132243) : tailrecursion.hoplon.span.call(null,G__132242,G__132243));
})();
var G__132217 = "(";
var G__132218 = (function (){var G__132244 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132245 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132244,G__132245) : tailrecursion.hoplon.span.call(null,G__132244,G__132245));
})();
var G__132219 = (function (){var G__132246 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132247 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132246,G__132247) : tailrecursion.hoplon.span.call(null,G__132246,G__132247));
})();
var G__132220 = " (";
var G__132221 = (function (){var G__132248 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132249 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132248,G__132249) : tailrecursion.hoplon.span.call(null,G__132248,G__132249));
})();
var G__132222 = " ";
var G__132223 = (function (){var G__132250 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132251 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132250,G__132251) : tailrecursion.hoplon.span.call(null,G__132250,G__132251));
})();
var G__132224 = ")) (";
var G__132225 = (function (){var G__132252 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132253 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132252,G__132253) : tailrecursion.hoplon.span.call(null,G__132252,G__132253));
})();
var G__132226 = (function (){var G__132254 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132255 = "2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132254,G__132255) : tailrecursion.hoplon.span.call(null,G__132254,G__132255));
})();
var G__132227 = " ";
var G__132228 = (function (){var G__132256 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132257 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132256,G__132257) : tailrecursion.hoplon.span.call(null,G__132256,G__132257));
})();
var G__132229 = ")) ";
var G__132230 = (function (){var G__132258 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132259 = "3";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132258,G__132259) : tailrecursion.hoplon.span.call(null,G__132258,G__132259));
})();
var G__132231 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$27(G__132205,G__132206,G__132207,G__132208,G__132209,G__132210,G__132211,G__132212,G__132213,G__132214,G__132215,G__132216,G__132217,G__132218,G__132219,G__132220,G__132221,G__132222,G__132223,G__132224,G__132225,G__132226,G__132227,G__132228,G__132229,G__132230,G__132231) : tailrecursion.hoplon.pre.call(null,G__132205,G__132206,G__132207,G__132208,G__132209,G__132210,G__132211,G__132212,G__132213,G__132214,G__132215,G__132216,G__132217,G__132218,G__132219,G__132220,G__132221,G__132222,G__132223,G__132224,G__132225,G__132226,G__132227,G__132228,G__132229,G__132230,G__132231));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132203,G__132204) : tailrecursion.hoplon.div.call(null,G__132203,G__132204));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132202) : tailrecursion.hoplon.div.call(null,G__132202));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132201;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132200;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132199;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132198;
}})()], 0))], 0))], 0));
var G__128868 = "";
var G__128869 = content.sicp.book_data.subsect.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Procedures as Black-Box Abstractions"], null),(function (){var _STAR_references_STAR_132260 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132261 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_132262 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132263 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132264 = cljs.core.PersistentArrayMap.EMPTY;
var G__132265 = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132266 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Sqrt"], null);
var G__132267 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132266,G__132267) : tailrecursion.hoplon.markdown.code_node.call(null,G__132266,G__132267));
})()," is our first example of a process defined by a set of mutually defined procedures. Notice that the definition of ",(function (){var G__132268 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt-iter"], null);
var G__132269 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132268,G__132269) : tailrecursion.hoplon.markdown.code_node.call(null,G__132268,G__132269));
})()," is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["recursive"], null)], 0)),"; that is, the procedure is defined in terms of itself. The idea of being able to define a procedure in terms of itself may be disturbing; it may seem unclear how such a ",(function (){var G__132270 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__132271 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["circular"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__132270,G__132271) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__132270,G__132271));
})()," definition could make sense at all, much less specify a well-defined process to be carried out by a computer. This will be addressed more carefully in section ",tailrecursion.hoplon.markdown.exp_link_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$url,"\"#/sicp/ch/1/sect/2/\"",cljs.core.constant$keyword$title,""], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1.2"], null)], 0)),". But first let",(function (){var G__132272 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132273 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132272,G__132273) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132272,G__132273));
})(),"s consider some other important points illustrated by the ",(function (){var G__132274 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__132275 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132274,G__132275) : tailrecursion.hoplon.markdown.code_node.call(null,G__132274,G__132275));
})()," example."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132264,G__132265) : tailrecursion.hoplon.markdown.para_node.call(null,G__132264,G__132265));
})(),(function (){var G__132276 = cljs.core.PersistentArrayMap.EMPTY;
var G__132277 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Observe that the problem of computing square roots breaks up naturally into a number of subproblems: how to tell whether a guess is good enough, how to improve a guess, and so on. Each of these tasks is accomplished by a separate procedure. The entire ",(function (){var G__132278 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__132279 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132278,G__132279) : tailrecursion.hoplon.markdown.code_node.call(null,G__132278,G__132279));
})()," program can be viewed as a cluster of procedures (shown in figure 1.2) that mirrors the decomposition of the problem into subproblems."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132276,G__132277) : tailrecursion.hoplon.markdown.para_node.call(null,G__132276,G__132277));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132263;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132262;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132261;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132260;
}})(),content.sicp.book_data.fig.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$footer,"Procedural decomposition of the sqrt program."], null)], 0)),"",(function (){var _STAR_references_STAR_132280 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132281 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_132282 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132283 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132284 = cljs.core.PersistentArrayMap.EMPTY;
var G__132285 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The importance of this decomposition strategy is not simply that one is dividing the program into parts. After all, we could take any large program and divide it into parts ",(function (){var G__132286 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__132287 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132286,G__132287) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132286,G__132287));
})()," the first ten lines, the next ten lines, the next ten lines, and so on. Rather, it is crucial that each procedure accomplishes an identifiable task that can be used as a module in defining other procedures. For example, when we define the ",(function (){var G__132288 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132289 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132288,G__132289) : tailrecursion.hoplon.markdown.code_node.call(null,G__132288,G__132289));
})()," procedure in terms of ",(function (){var G__132290 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132291 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132290,G__132291) : tailrecursion.hoplon.markdown.code_node.call(null,G__132290,G__132291));
})(),", we are able to regard the ",(function (){var G__132292 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132293 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132292,G__132293) : tailrecursion.hoplon.markdown.code_node.call(null,G__132292,G__132293));
})()," procedure as a ",(function (){var G__132294 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__132295 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["black box."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__132294,G__132295) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__132294,G__132295));
})()," We are not at that moment concerned with ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["how"], null)], 0))," the procedure computes its result, only with the fact that it computes the square. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as the ",(function (){var G__132296 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132297 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132296,G__132297) : tailrecursion.hoplon.markdown.code_node.call(null,G__132296,G__132297));
})()," procedure is concerned, ",(function (){var G__132298 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132299 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132298,G__132299) : tailrecursion.hoplon.markdown.code_node.call(null,G__132298,G__132299));
})()," is not quite a procedure but rather an abstraction of a procedure, a so-called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["procedural abstraction"], null)], 0)),". At this level of abstraction, any procedure that computes the square is equally good."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132284,G__132285) : tailrecursion.hoplon.markdown.para_node.call(null,G__132284,G__132285));
})(),(function (){var G__132300 = cljs.core.PersistentArrayMap.EMPTY;
var G__132301 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Thus, considering only the values they return, the following two procedures for squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.",(function (){var G__132302 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__132303 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is not even clear which of these procedures is a more efficient implementation. This depends upon the hardware available. There are machines for which the ",(function (){var G__132304 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double], null);
var G__132305 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["obvious"], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__132304,G__132305) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__132304,G__132305));
})()," implementation is the less efficient one. Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__132302,G__132303) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__132302,G__132303));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132300,G__132301) : tailrecursion.hoplon.markdown.para_node.call(null,G__132300,G__132301));
})(),(function (){var G__132306 = (function (){var G__132307 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132308 = (function (){var G__132309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132310 = "(";
var G__132311 = (function (){var G__132321 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132322 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132321,G__132322) : tailrecursion.hoplon.span.call(null,G__132321,G__132322));
})();
var G__132312 = (function (){var G__132323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132324 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132323,G__132324) : tailrecursion.hoplon.span.call(null,G__132323,G__132324));
})();
var G__132313 = " [";
var G__132314 = (function (){var G__132325 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132326 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132325,G__132326) : tailrecursion.hoplon.span.call(null,G__132325,G__132326));
})();
var G__132315 = "] (";
var G__132316 = (function (){var G__132327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132328 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132327,G__132328) : tailrecursion.hoplon.span.call(null,G__132327,G__132328));
})();
var G__132317 = (function (){var G__132329 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132330 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132329,G__132330) : tailrecursion.hoplon.span.call(null,G__132329,G__132330));
})();
var G__132318 = " ";
var G__132319 = (function (){var G__132331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132332 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132331,G__132332) : tailrecursion.hoplon.span.call(null,G__132331,G__132332));
})();
var G__132320 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__132309,G__132310,G__132311,G__132312,G__132313,G__132314,G__132315,G__132316,G__132317,G__132318,G__132319,G__132320) : tailrecursion.hoplon.pre.call(null,G__132309,G__132310,G__132311,G__132312,G__132313,G__132314,G__132315,G__132316,G__132317,G__132318,G__132319,G__132320));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132307,G__132308) : tailrecursion.hoplon.div.call(null,G__132307,G__132308));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132306) : tailrecursion.hoplon.div.call(null,G__132306));
})(),(function (){var G__132333 = (function (){var G__132334 = "(defn square [x] \n  (exp (double (log x))))\n";
return (tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.code.cljs$core$IFn$_invoke$arity$1(G__132334) : tailrecursion.hoplon.code.call(null,G__132334));
})();
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$1(G__132333) : tailrecursion.hoplon.pre.call(null,G__132333));
})(),(function (){var G__132335 = (function (){var G__132336 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132337 = (function (){var G__132338 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132339 = "(";
var G__132340 = (function (){var G__132350 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132351 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132350,G__132351) : tailrecursion.hoplon.span.call(null,G__132350,G__132351));
})();
var G__132341 = (function (){var G__132352 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132353 = "double ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132352,G__132353) : tailrecursion.hoplon.span.call(null,G__132352,G__132353));
})();
var G__132342 = "[";
var G__132343 = (function (){var G__132354 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132355 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132354,G__132355) : tailrecursion.hoplon.span.call(null,G__132354,G__132355));
})();
var G__132344 = "] (";
var G__132345 = (function (){var G__132356 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132357 = "+ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132356,G__132357) : tailrecursion.hoplon.span.call(null,G__132356,G__132357));
})();
var G__132346 = (function (){var G__132358 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132359 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132358,G__132359) : tailrecursion.hoplon.span.call(null,G__132358,G__132359));
})();
var G__132347 = " ";
var G__132348 = (function (){var G__132360 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132361 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132360,G__132361) : tailrecursion.hoplon.span.call(null,G__132360,G__132361));
})();
var G__132349 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__132338,G__132339,G__132340,G__132341,G__132342,G__132343,G__132344,G__132345,G__132346,G__132347,G__132348,G__132349) : tailrecursion.hoplon.pre.call(null,G__132338,G__132339,G__132340,G__132341,G__132342,G__132343,G__132344,G__132345,G__132346,G__132347,G__132348,G__132349));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132336,G__132337) : tailrecursion.hoplon.div.call(null,G__132336,G__132337));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132335) : tailrecursion.hoplon.div.call(null,G__132335));
})(),(function (){var G__132362 = cljs.core.PersistentArrayMap.EMPTY;
var G__132363 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["So a procedure definition should be able to suppress detail. The users of the procedure may not have written the procedure themselves, but may have obtained it from another programmer as a black box. A user should not need to know how the procedure is implemented in order to use it."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132362,G__132363) : tailrecursion.hoplon.markdown.para_node.call(null,G__132362,G__132363));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132283;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132282;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132281;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132280;
}})()], 0));
var G__128870 = "";
var G__128871 = content.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Local Names"], null),(function (){var _STAR_references_STAR_132364 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132365 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_132366 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132367 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132368 = cljs.core.PersistentArrayMap.EMPTY;
var G__132369 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One detail of a procedure",(function (){var G__132370 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132371 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132370,G__132371) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132370,G__132371));
})(),"s implementation that should not matter to the user of the procedure is the implementer",(function (){var G__132372 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132373 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132372,G__132373) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132372,G__132373));
})(),"s choice of names for the procedure",(function (){var G__132374 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132375 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132374,G__132375) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132374,G__132375));
})(),"s formal parameters. Thus, the following procedures should not be distinguishable:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132368,G__132369) : tailrecursion.hoplon.markdown.para_node.call(null,G__132368,G__132369));
})(),(function (){var G__132376 = (function (){var G__132377 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132378 = (function (){var G__132379 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132380 = "(";
var G__132381 = (function (){var G__132391 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132392 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132391,G__132392) : tailrecursion.hoplon.span.call(null,G__132391,G__132392));
})();
var G__132382 = (function (){var G__132393 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132394 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132393,G__132394) : tailrecursion.hoplon.span.call(null,G__132393,G__132394));
})();
var G__132383 = " [";
var G__132384 = (function (){var G__132395 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132396 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132395,G__132396) : tailrecursion.hoplon.span.call(null,G__132395,G__132396));
})();
var G__132385 = "] (";
var G__132386 = (function (){var G__132397 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132398 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132397,G__132398) : tailrecursion.hoplon.span.call(null,G__132397,G__132398));
})();
var G__132387 = (function (){var G__132399 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132400 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132399,G__132400) : tailrecursion.hoplon.span.call(null,G__132399,G__132400));
})();
var G__132388 = " ";
var G__132389 = (function (){var G__132401 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132402 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132401,G__132402) : tailrecursion.hoplon.span.call(null,G__132401,G__132402));
})();
var G__132390 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__132379,G__132380,G__132381,G__132382,G__132383,G__132384,G__132385,G__132386,G__132387,G__132388,G__132389,G__132390) : tailrecursion.hoplon.pre.call(null,G__132379,G__132380,G__132381,G__132382,G__132383,G__132384,G__132385,G__132386,G__132387,G__132388,G__132389,G__132390));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132377,G__132378) : tailrecursion.hoplon.div.call(null,G__132377,G__132378));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132376) : tailrecursion.hoplon.div.call(null,G__132376));
})(),(function (){var G__132403 = (function (){var G__132404 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132405 = (function (){var G__132406 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132407 = "(";
var G__132408 = (function (){var G__132418 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132419 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132418,G__132419) : tailrecursion.hoplon.span.call(null,G__132418,G__132419));
})();
var G__132409 = (function (){var G__132420 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132421 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132420,G__132421) : tailrecursion.hoplon.span.call(null,G__132420,G__132421));
})();
var G__132410 = " [";
var G__132411 = (function (){var G__132422 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132423 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132422,G__132423) : tailrecursion.hoplon.span.call(null,G__132422,G__132423));
})();
var G__132412 = "] (";
var G__132413 = (function (){var G__132424 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132425 = "* ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132424,G__132425) : tailrecursion.hoplon.span.call(null,G__132424,G__132425));
})();
var G__132414 = (function (){var G__132426 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132427 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132426,G__132427) : tailrecursion.hoplon.span.call(null,G__132426,G__132427));
})();
var G__132415 = " ";
var G__132416 = (function (){var G__132428 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132429 = "y";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132428,G__132429) : tailrecursion.hoplon.span.call(null,G__132428,G__132429));
})();
var G__132417 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$12(G__132406,G__132407,G__132408,G__132409,G__132410,G__132411,G__132412,G__132413,G__132414,G__132415,G__132416,G__132417) : tailrecursion.hoplon.pre.call(null,G__132406,G__132407,G__132408,G__132409,G__132410,G__132411,G__132412,G__132413,G__132414,G__132415,G__132416,G__132417));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132404,G__132405) : tailrecursion.hoplon.div.call(null,G__132404,G__132405));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132403) : tailrecursion.hoplon.div.call(null,G__132403));
})(),(function (){var G__132430 = cljs.core.PersistentArrayMap.EMPTY;
var G__132431 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This principle ",(function (){var G__132432 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__132433 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132432,G__132433) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132432,G__132433));
})()," that the meaning of a procedure should be independent of the parameter names used by its author ",(function (){var G__132434 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$endash], null);
var G__132435 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132434,G__132435) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132434,G__132435));
})()," seems on the surface to be self-evident, but its consequences are profound. The simplest consequence is that the parameter names of a procedure must be local to the body of the procedure. For example, we used ",(function (){var G__132436 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132437 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132436,G__132437) : tailrecursion.hoplon.markdown.code_node.call(null,G__132436,G__132437));
})()," in the definition of ",(function (){var G__132438 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132439 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132438,G__132439) : tailrecursion.hoplon.markdown.code_node.call(null,G__132438,G__132439));
})()," in our square-root procedure:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132430,G__132431) : tailrecursion.hoplon.markdown.para_node.call(null,G__132430,G__132431));
})(),(function (){var G__132440 = (function (){var G__132441 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132442 = (function (){var G__132443 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132444 = "(";
var G__132445 = (function (){var G__132466 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132467 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132466,G__132467) : tailrecursion.hoplon.span.call(null,G__132466,G__132467));
})();
var G__132446 = (function (){var G__132468 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132469 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132468,G__132469) : tailrecursion.hoplon.span.call(null,G__132468,G__132469));
})();
var G__132447 = " [";
var G__132448 = (function (){var G__132470 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132471 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132470,G__132471) : tailrecursion.hoplon.span.call(null,G__132470,G__132471));
})();
var G__132449 = " ";
var G__132450 = (function (){var G__132472 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132473 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132472,G__132473) : tailrecursion.hoplon.span.call(null,G__132472,G__132473));
})();
var G__132451 = "]\n  (";
var G__132452 = (function (){var G__132474 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132475 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132474,G__132475) : tailrecursion.hoplon.span.call(null,G__132474,G__132475));
})();
var G__132453 = "(";
var G__132454 = (function (){var G__132476 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132477 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132476,G__132477) : tailrecursion.hoplon.span.call(null,G__132476,G__132477));
})();
var G__132455 = " (";
var G__132456 = (function (){var G__132478 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132479 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132478,G__132479) : tailrecursion.hoplon.span.call(null,G__132478,G__132479));
})();
var G__132457 = "(";
var G__132458 = (function (){var G__132480 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132481 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132480,G__132481) : tailrecursion.hoplon.span.call(null,G__132480,G__132481));
})();
var G__132459 = " ";
var G__132460 = (function (){var G__132482 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132483 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132482,G__132483) : tailrecursion.hoplon.span.call(null,G__132482,G__132483));
})();
var G__132461 = ") ";
var G__132462 = (function (){var G__132484 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132485 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132484,G__132485) : tailrecursion.hoplon.span.call(null,G__132484,G__132485));
})();
var G__132463 = ")) ";
var G__132464 = (function (){var G__132486 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132487 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132486,G__132487) : tailrecursion.hoplon.span.call(null,G__132486,G__132487));
})();
var G__132465 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$23(G__132443,G__132444,G__132445,G__132446,G__132447,G__132448,G__132449,G__132450,G__132451,G__132452,G__132453,G__132454,G__132455,G__132456,G__132457,G__132458,G__132459,G__132460,G__132461,G__132462,G__132463,G__132464,G__132465) : tailrecursion.hoplon.pre.call(null,G__132443,G__132444,G__132445,G__132446,G__132447,G__132448,G__132449,G__132450,G__132451,G__132452,G__132453,G__132454,G__132455,G__132456,G__132457,G__132458,G__132459,G__132460,G__132461,G__132462,G__132463,G__132464,G__132465));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132441,G__132442) : tailrecursion.hoplon.div.call(null,G__132441,G__132442));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132440) : tailrecursion.hoplon.div.call(null,G__132440));
})(),(function (){var G__132488 = cljs.core.PersistentArrayMap.EMPTY;
var G__132489 = cljs.core.PersistentVector.fromArray(["The intention of the author of ",(function (){var G__132490 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132491 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132490,G__132491) : tailrecursion.hoplon.markdown.code_node.call(null,G__132490,G__132491));
})()," is to determine if the square of the first argument is within a given tolerance of the second argument. We see that the author of ",(function (){var G__132492 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132493 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132492,G__132493) : tailrecursion.hoplon.markdown.code_node.call(null,G__132492,G__132493));
})()," used the name ",(function (){var G__132494 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__132495 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132494,G__132495) : tailrecursion.hoplon.markdown.code_node.call(null,G__132494,G__132495));
})()," to refer to the first argument and ",(function (){var G__132496 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132497 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132496,G__132497) : tailrecursion.hoplon.markdown.code_node.call(null,G__132496,G__132497));
})()," to refer to the second argument. The argument of ",(function (){var G__132498 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132499 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132498,G__132499) : tailrecursion.hoplon.markdown.code_node.call(null,G__132498,G__132499));
})()," is ",(function (){var G__132500 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__132501 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132500,G__132501) : tailrecursion.hoplon.markdown.code_node.call(null,G__132500,G__132501));
})(),". If the author of ",(function (){var G__132502 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132503 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132502,G__132503) : tailrecursion.hoplon.markdown.code_node.call(null,G__132502,G__132503));
})()," used ",(function (){var G__132504 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132505 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132504,G__132505) : tailrecursion.hoplon.markdown.code_node.call(null,G__132504,G__132505));
})()," (as above) to refer to that argument, we see that the ",(function (){var G__132506 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132507 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132506,G__132507) : tailrecursion.hoplon.markdown.code_node.call(null,G__132506,G__132507));
})()," in ",(function (){var G__132508 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132509 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132508,G__132509) : tailrecursion.hoplon.markdown.code_node.call(null,G__132508,G__132509));
})()," must be a different ",(function (){var G__132510 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132511 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132510,G__132511) : tailrecursion.hoplon.markdown.code_node.call(null,G__132510,G__132511));
})()," than the one in ",(function (){var G__132512 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132513 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132512,G__132513) : tailrecursion.hoplon.markdown.code_node.call(null,G__132512,G__132513));
})(),". Running the procedure ",(function (){var G__132514 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132515 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132514,G__132515) : tailrecursion.hoplon.markdown.code_node.call(null,G__132514,G__132515));
})()," must not affect the value of ",(function (){var G__132516 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132517 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132516,G__132517) : tailrecursion.hoplon.markdown.code_node.call(null,G__132516,G__132517));
})()," that is used by ",(function (){var G__132518 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132519 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132518,G__132519) : tailrecursion.hoplon.markdown.code_node.call(null,G__132518,G__132519));
})(),", because that value of ",(function (){var G__132520 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132521 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132520,G__132521) : tailrecursion.hoplon.markdown.code_node.call(null,G__132520,G__132521));
})()," may be needed by ",(function (){var G__132522 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132523 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132522,G__132523) : tailrecursion.hoplon.markdown.code_node.call(null,G__132522,G__132523));
})()," after ",(function (){var G__132524 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132525 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132524,G__132525) : tailrecursion.hoplon.markdown.code_node.call(null,G__132524,G__132525));
})()," is done computing."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132488,G__132489) : tailrecursion.hoplon.markdown.para_node.call(null,G__132488,G__132489));
})(),(function (){var G__132526 = cljs.core.PersistentArrayMap.EMPTY;
var G__132527 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If the parameters were not local to the bodies of their respective procedures, then the parameter ",(function (){var G__132528 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132529 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132528,G__132529) : tailrecursion.hoplon.markdown.code_node.call(null,G__132528,G__132529));
})()," in ",(function (){var G__132530 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132531 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132530,G__132531) : tailrecursion.hoplon.markdown.code_node.call(null,G__132530,G__132531));
})()," could be confused with the parameter ",(function (){var G__132532 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132533 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132532,G__132533) : tailrecursion.hoplon.markdown.code_node.call(null,G__132532,G__132533));
})()," in ",(function (){var G__132534 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132535 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132534,G__132535) : tailrecursion.hoplon.markdown.code_node.call(null,G__132534,G__132535));
})(),", and the behavior of ",(function (){var G__132536 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132537 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132536,G__132537) : tailrecursion.hoplon.markdown.code_node.call(null,G__132536,G__132537));
})()," would depend upon which version of ",(function (){var G__132538 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132539 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132538,G__132539) : tailrecursion.hoplon.markdown.code_node.call(null,G__132538,G__132539));
})()," we used. Thus, ",(function (){var G__132540 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132541 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132540,G__132541) : tailrecursion.hoplon.markdown.code_node.call(null,G__132540,G__132541));
})()," would not be the black box we desired."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132526,G__132527) : tailrecursion.hoplon.markdown.para_node.call(null,G__132526,G__132527));
})(),(function (){var G__132542 = cljs.core.PersistentArrayMap.EMPTY;
var G__132543 = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A formal parameter of a procedure has a very special role in the procedure definition, in that it doesn",(function (){var G__132544 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132545 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132544,G__132545) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132544,G__132545));
})(),"t matter what name the formal parameter has. Such a name is called a ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["bound variable"], null)], 0)),", and we say that the procedure definition ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["binds"], null)], 0))," its formal parameters. The meaning of a procedure definition is unchanged if a bound variable is consistently renamed throughout the definition.",(function (){var G__132546 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__132547 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The concept of consistent renaming is actually subtle and difficult to define formally. Famous logicians have made embarrassing errors here."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__132546,G__132547) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__132546,G__132547));
})()," If a variable is not bound, we say that it is ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["free"], null)], 0)),". The set of expressions for which a binding defines a name is called the ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["scope"], null)], 0))," of that name. In a procedure definition, the bound variables declared as the formal parameters of the procedure have the body of the procedure as their scope."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132542,G__132543) : tailrecursion.hoplon.markdown.para_node.call(null,G__132542,G__132543));
})(),(function (){var G__132548 = cljs.core.PersistentArrayMap.EMPTY;
var G__132549 = cljs.core.PersistentVector.fromArray(["In the definition of ",(function (){var G__132550 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132551 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132550,G__132551) : tailrecursion.hoplon.markdown.code_node.call(null,G__132550,G__132551));
})()," above, ",(function (){var G__132552 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__132553 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132552,G__132553) : tailrecursion.hoplon.markdown.code_node.call(null,G__132552,G__132553));
})()," and ",(function (){var G__132554 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132555 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132554,G__132555) : tailrecursion.hoplon.markdown.code_node.call(null,G__132554,G__132555));
})()," are bound variables but ",(function (){var G__132556 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<"], null);
var G__132557 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132556,G__132557) : tailrecursion.hoplon.markdown.code_node.call(null,G__132556,G__132557));
})(),", ",(function (){var G__132558 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"-"], null);
var G__132559 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132558,G__132559) : tailrecursion.hoplon.markdown.code_node.call(null,G__132558,G__132559));
})(),", ",(function (){var G__132560 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__132561 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132560,G__132561) : tailrecursion.hoplon.markdown.code_node.call(null,G__132560,G__132561));
})(),", and ",(function (){var G__132562 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132563 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132562,G__132563) : tailrecursion.hoplon.markdown.code_node.call(null,G__132562,G__132563));
})()," are free. The meaning of ",(function (){var G__132564 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132565 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132564,G__132565) : tailrecursion.hoplon.markdown.code_node.call(null,G__132564,G__132565));
})()," should be independent of the names we choose for ",(function (){var G__132566 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__132567 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132566,G__132567) : tailrecursion.hoplon.markdown.code_node.call(null,G__132566,G__132567));
})()," and ",(function (){var G__132568 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__132569 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132568,G__132569) : tailrecursion.hoplon.markdown.code_node.call(null,G__132568,G__132569));
})()," so long as they are distinct and different from ",(function (){var G__132570 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"<"], null);
var G__132571 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132570,G__132571) : tailrecursion.hoplon.markdown.code_node.call(null,G__132570,G__132571));
})(),", ",(function (){var G__132572 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"-"], null);
var G__132573 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132572,G__132573) : tailrecursion.hoplon.markdown.code_node.call(null,G__132572,G__132573));
})(),", ",(function (){var G__132574 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__132575 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132574,G__132575) : tailrecursion.hoplon.markdown.code_node.call(null,G__132574,G__132575));
})(),", and ",(function (){var G__132576 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square"], null);
var G__132577 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132576,G__132577) : tailrecursion.hoplon.markdown.code_node.call(null,G__132576,G__132577));
})(),". (If we renamed ",(function (){var G__132578 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"guess"], null);
var G__132579 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132578,G__132579) : tailrecursion.hoplon.markdown.code_node.call(null,G__132578,G__132579));
})()," to ",(function (){var G__132580 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__132581 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132580,G__132581) : tailrecursion.hoplon.markdown.code_node.call(null,G__132580,G__132581));
})()," we would have introduced a bug by ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["capturing"], null)], 0))," the variable ",(function (){var G__132582 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__132583 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132582,G__132583) : tailrecursion.hoplon.markdown.code_node.call(null,G__132582,G__132583));
})(),". It would have changed from free to bound.) The meaning of ",(function (){var G__132584 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132585 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132584,G__132585) : tailrecursion.hoplon.markdown.code_node.call(null,G__132584,G__132585));
})()," is not independent of the names of its free variables, however. It surely depends upon the fact (external to this definition) that the symbol ",(function (){var G__132586 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__132587 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132586,G__132587) : tailrecursion.hoplon.markdown.code_node.call(null,G__132586,G__132587));
})()," names a procedure for computing the absolute value of a number. ",(function (){var G__132588 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"Good-enough?"], null);
var G__132589 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132588,G__132589) : tailrecursion.hoplon.markdown.code_node.call(null,G__132588,G__132589));
})()," will compute a different function if we substitute ",(function (){var G__132590 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"cos"], null);
var G__132591 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132590,G__132591) : tailrecursion.hoplon.markdown.code_node.call(null,G__132590,G__132591));
})()," for ",(function (){var G__132592 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"abs"], null);
var G__132593 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132592,G__132593) : tailrecursion.hoplon.markdown.code_node.call(null,G__132592,G__132593));
})()," in its definition."], true);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132548,G__132549) : tailrecursion.hoplon.markdown.para_node.call(null,G__132548,G__132549));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132367;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132366;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132365;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132364;
}})()], 0));
var G__128872 = "";
var G__128873 = content.sicp.book_data.ssub.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$title,"Internal Definitions and Block Structures"], null),(function (){var _STAR_references_STAR_132594 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132595 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,null], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,null], 0));

try{var _STAR_references_STAR_132596 = tailrecursion.hoplon.markdown._STAR_references_STAR_;
var _STAR_abbreviations_STAR_132597 = tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_;
tailrecursion.hoplon.markdown._STAR_references_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_references_STAR_,cljs.core.PersistentArrayMap.EMPTY], 0));

tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_,cljs.core.List.EMPTY], 0));

try{return new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__132598 = cljs.core.PersistentArrayMap.EMPTY;
var G__132599 = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["It is instructive to note that the rest of this section does not work as well in Clojure. The reason is that ",(function (){var G__132600 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__132601 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132600,G__132601) : tailrecursion.hoplon.markdown.code_node.call(null,G__132600,G__132601));
})(),", ",(function (){var G__132602 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"defn"], null);
var G__132603 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132602,G__132603) : tailrecursion.hoplon.markdown.code_node.call(null,G__132602,G__132603));
})()," and all other defining forms define things in the global environment directly (no matter where they are called). If this does not make sense to you just yet, don",(function (){var G__132604 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132605 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132604,G__132605) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132604,G__132605));
})(),"t worry: it should by the end of this section."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132598,G__132599) : tailrecursion.hoplon.markdown.para_node.call(null,G__132598,G__132599));
})(),(function (){var G__132606 = cljs.core.PersistentArrayMap.EMPTY;
var G__132607 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We have one kind of name isolation available to us so far: The formal parameters of a procedure are local to the body of the procedure. The square-root program illustrates another way in which we would like to control the use of names. The existing program consists of separate procedures:"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132606,G__132607) : tailrecursion.hoplon.markdown.para_node.call(null,G__132606,G__132607));
})(),(function (){var G__132608 = (function (){var G__132609 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132610 = (function (){var G__132611 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132612 = "(";
var G__132613 = (function (){var G__132688 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132689 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132688,G__132689) : tailrecursion.hoplon.span.call(null,G__132688,G__132689));
})();
var G__132614 = (function (){var G__132690 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132691 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132690,G__132691) : tailrecursion.hoplon.span.call(null,G__132690,G__132691));
})();
var G__132615 = " [";
var G__132616 = (function (){var G__132692 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132693 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132692,G__132693) : tailrecursion.hoplon.span.call(null,G__132692,G__132693));
})();
var G__132617 = "]\n  (";
var G__132618 = (function (){var G__132694 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132695 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132694,G__132695) : tailrecursion.hoplon.span.call(null,G__132694,G__132695));
})();
var G__132619 = " ";
var G__132620 = (function (){var G__132696 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132697 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132696,G__132697) : tailrecursion.hoplon.span.call(null,G__132696,G__132697));
})();
var G__132621 = " ";
var G__132622 = (function (){var G__132698 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132699 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132698,G__132699) : tailrecursion.hoplon.span.call(null,G__132698,G__132699));
})();
var G__132623 = "))\n(";
var G__132624 = (function (){var G__132700 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132701 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132700,G__132701) : tailrecursion.hoplon.span.call(null,G__132700,G__132701));
})();
var G__132625 = (function (){var G__132702 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132703 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132702,G__132703) : tailrecursion.hoplon.span.call(null,G__132702,G__132703));
})();
var G__132626 = " [";
var G__132627 = (function (){var G__132704 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132705 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132704,G__132705) : tailrecursion.hoplon.span.call(null,G__132704,G__132705));
})();
var G__132628 = " ";
var G__132629 = (function (){var G__132706 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132707 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132706,G__132707) : tailrecursion.hoplon.span.call(null,G__132706,G__132707));
})();
var G__132630 = "]\n  (";
var G__132631 = (function (){var G__132708 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132709 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132708,G__132709) : tailrecursion.hoplon.span.call(null,G__132708,G__132709));
})();
var G__132632 = "(";
var G__132633 = (function (){var G__132710 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132711 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132710,G__132711) : tailrecursion.hoplon.span.call(null,G__132710,G__132711));
})();
var G__132634 = " ";
var G__132635 = (function (){var G__132712 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132713 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132712,G__132713) : tailrecursion.hoplon.span.call(null,G__132712,G__132713));
})();
var G__132636 = " ";
var G__132637 = (function (){var G__132714 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132715 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132714,G__132715) : tailrecursion.hoplon.span.call(null,G__132714,G__132715));
})();
var G__132638 = ")\n      ";
var G__132639 = (function (){var G__132716 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132717 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132716,G__132717) : tailrecursion.hoplon.span.call(null,G__132716,G__132717));
})();
var G__132640 = "\n      (";
var G__132641 = (function (){var G__132718 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132719 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132718,G__132719) : tailrecursion.hoplon.span.call(null,G__132718,G__132719));
})();
var G__132642 = " (";
var G__132643 = (function (){var G__132720 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132721 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132720,G__132721) : tailrecursion.hoplon.span.call(null,G__132720,G__132721));
})();
var G__132644 = " ";
var G__132645 = (function (){var G__132722 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132723 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132722,G__132723) : tailrecursion.hoplon.span.call(null,G__132722,G__132723));
})();
var G__132646 = " ";
var G__132647 = (function (){var G__132724 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132725 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132724,G__132725) : tailrecursion.hoplon.span.call(null,G__132724,G__132725));
})();
var G__132648 = ") ";
var G__132649 = (function (){var G__132726 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132727 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132726,G__132727) : tailrecursion.hoplon.span.call(null,G__132726,G__132727));
})();
var G__132650 = ")))\n(";
var G__132651 = (function (){var G__132728 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132729 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132728,G__132729) : tailrecursion.hoplon.span.call(null,G__132728,G__132729));
})();
var G__132652 = (function (){var G__132730 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132731 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132730,G__132731) : tailrecursion.hoplon.span.call(null,G__132730,G__132731));
})();
var G__132653 = " [";
var G__132654 = (function (){var G__132732 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132733 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132732,G__132733) : tailrecursion.hoplon.span.call(null,G__132732,G__132733));
})();
var G__132655 = " ";
var G__132656 = (function (){var G__132734 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132735 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132734,G__132735) : tailrecursion.hoplon.span.call(null,G__132734,G__132735));
})();
var G__132657 = "]\n  (";
var G__132658 = (function (){var G__132736 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132737 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132736,G__132737) : tailrecursion.hoplon.span.call(null,G__132736,G__132737));
})();
var G__132659 = "(";
var G__132660 = (function (){var G__132738 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132739 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132738,G__132739) : tailrecursion.hoplon.span.call(null,G__132738,G__132739));
})();
var G__132661 = " (";
var G__132662 = (function (){var G__132740 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132741 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132740,G__132741) : tailrecursion.hoplon.span.call(null,G__132740,G__132741));
})();
var G__132663 = "(";
var G__132664 = (function (){var G__132742 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132743 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132742,G__132743) : tailrecursion.hoplon.span.call(null,G__132742,G__132743));
})();
var G__132665 = " ";
var G__132666 = (function (){var G__132744 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132745 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132744,G__132745) : tailrecursion.hoplon.span.call(null,G__132744,G__132745));
})();
var G__132667 = ") ";
var G__132668 = (function (){var G__132746 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132747 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132746,G__132747) : tailrecursion.hoplon.span.call(null,G__132746,G__132747));
})();
var G__132669 = ")) ";
var G__132670 = (function (){var G__132748 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132749 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132748,G__132749) : tailrecursion.hoplon.span.call(null,G__132748,G__132749));
})();
var G__132671 = "))\n(";
var G__132672 = (function (){var G__132750 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132751 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132750,G__132751) : tailrecursion.hoplon.span.call(null,G__132750,G__132751));
})();
var G__132673 = (function (){var G__132752 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132753 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132752,G__132753) : tailrecursion.hoplon.span.call(null,G__132752,G__132753));
})();
var G__132674 = " [";
var G__132675 = (function (){var G__132754 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132755 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132754,G__132755) : tailrecursion.hoplon.span.call(null,G__132754,G__132755));
})();
var G__132676 = " ";
var G__132677 = (function (){var G__132756 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132757 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132756,G__132757) : tailrecursion.hoplon.span.call(null,G__132756,G__132757));
})();
var G__132678 = "]\n  (";
var G__132679 = (function (){var G__132758 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132759 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132758,G__132759) : tailrecursion.hoplon.span.call(null,G__132758,G__132759));
})();
var G__132680 = " ";
var G__132681 = (function (){var G__132760 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132761 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132760,G__132761) : tailrecursion.hoplon.span.call(null,G__132760,G__132761));
})();
var G__132682 = " (";
var G__132683 = (function (){var G__132762 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132763 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132762,G__132763) : tailrecursion.hoplon.span.call(null,G__132762,G__132763));
})();
var G__132684 = (function (){var G__132764 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132765 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132764,G__132765) : tailrecursion.hoplon.span.call(null,G__132764,G__132765));
})();
var G__132685 = " ";
var G__132686 = (function (){var G__132766 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132767 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132766,G__132767) : tailrecursion.hoplon.span.call(null,G__132766,G__132767));
})();
var G__132687 = ")))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$77(G__132611,G__132612,G__132613,G__132614,G__132615,G__132616,G__132617,G__132618,G__132619,G__132620,G__132621,G__132622,G__132623,G__132624,G__132625,G__132626,G__132627,G__132628,G__132629,G__132630,G__132631,G__132632,G__132633,G__132634,G__132635,G__132636,G__132637,G__132638,G__132639,G__132640,G__132641,G__132642,G__132643,G__132644,G__132645,G__132646,G__132647,G__132648,G__132649,G__132650,G__132651,G__132652,G__132653,G__132654,G__132655,G__132656,G__132657,G__132658,G__132659,G__132660,G__132661,G__132662,G__132663,G__132664,G__132665,G__132666,G__132667,G__132668,G__132669,G__132670,G__132671,G__132672,G__132673,G__132674,G__132675,G__132676,G__132677,G__132678,G__132679,G__132680,G__132681,G__132682,G__132683,G__132684,G__132685,G__132686,G__132687) : tailrecursion.hoplon.pre.call(null,G__132611,G__132612,G__132613,G__132614,G__132615,G__132616,G__132617,G__132618,G__132619,G__132620,G__132621,G__132622,G__132623,G__132624,G__132625,G__132626,G__132627,G__132628,G__132629,G__132630,G__132631,G__132632,G__132633,G__132634,G__132635,G__132636,G__132637,G__132638,G__132639,G__132640,G__132641,G__132642,G__132643,G__132644,G__132645,G__132646,G__132647,G__132648,G__132649,G__132650,G__132651,G__132652,G__132653,G__132654,G__132655,G__132656,G__132657,G__132658,G__132659,G__132660,G__132661,G__132662,G__132663,G__132664,G__132665,G__132666,G__132667,G__132668,G__132669,G__132670,G__132671,G__132672,G__132673,G__132674,G__132675,G__132676,G__132677,G__132678,G__132679,G__132680,G__132681,G__132682,G__132683,G__132684,G__132685,G__132686,G__132687));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132609,G__132610) : tailrecursion.hoplon.div.call(null,G__132609,G__132610));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132608) : tailrecursion.hoplon.div.call(null,G__132608));
})(),(function (){var G__132768 = cljs.core.PersistentArrayMap.EMPTY;
var G__132769 = new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The problem with this program is that the only procedure that is important to users of ",(function (){var G__132770 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__132771 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132770,G__132771) : tailrecursion.hoplon.markdown.code_node.call(null,G__132770,G__132771));
})()," is ",(function (){var G__132772 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__132773 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132772,G__132773) : tailrecursion.hoplon.markdown.code_node.call(null,G__132772,G__132773));
})(),". The other procedures (",(function (){var G__132774 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt-iter"], null);
var G__132775 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132774,G__132775) : tailrecursion.hoplon.markdown.code_node.call(null,G__132774,G__132775));
})(),", ",(function (){var G__132776 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132777 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132776,G__132777) : tailrecursion.hoplon.markdown.code_node.call(null,G__132776,G__132777));
})(),", and ",(function (){var G__132778 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"improve"], null);
var G__132779 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132778,G__132779) : tailrecursion.hoplon.markdown.code_node.call(null,G__132778,G__132779));
})(),") only clutter up their minds. They may not define any other procedure called ",(function (){var G__132780 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132781 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132780,G__132781) : tailrecursion.hoplon.markdown.code_node.call(null,G__132780,G__132781));
})()," as part of another program to work together with the square-root program, because ",(function (){var G__132782 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__132783 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132782,G__132783) : tailrecursion.hoplon.markdown.code_node.call(null,G__132782,G__132783));
})()," needs it. The problem is especially severe in the construction of large systems by many separate programmers. For example, in the construction of a large library of numerical procedures, many numerical functions are computed as successive approximations and thus might have procedures named ",(function (){var G__132784 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132785 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132784,G__132785) : tailrecursion.hoplon.markdown.code_node.call(null,G__132784,G__132785));
})()," and ",(function (){var G__132786 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"improve"], null);
var G__132787 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132786,G__132787) : tailrecursion.hoplon.markdown.code_node.call(null,G__132786,G__132787));
})()," as auxiliary procedures. We would like to localize the subprocedures, hiding them inside ",(function (){var G__132788 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__132789 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132788,G__132789) : tailrecursion.hoplon.markdown.code_node.call(null,G__132788,G__132789));
})()," so that ",(function (){var G__132790 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__132791 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132790,G__132791) : tailrecursion.hoplon.markdown.code_node.call(null,G__132790,G__132791));
})()," could coexist with other successive approximations, each having its own private ",(function (){var G__132792 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132793 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132792,G__132793) : tailrecursion.hoplon.markdown.code_node.call(null,G__132792,G__132793));
})()," procedure. To make this possible, we allow a procedure to have internal definitions that are local to that procedure. For example, in the ",(function (){var G__132794 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"square-root"], null);
var G__132795 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132794,G__132795) : tailrecursion.hoplon.markdown.code_node.call(null,G__132794,G__132795));
})()," problem we can write"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132768,G__132769) : tailrecursion.hoplon.markdown.para_node.call(null,G__132768,G__132769));
})(),(function (){var G__132796 = (function (){var G__132797 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__132798 = (function (){var G__132799 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__132800 = "(";
var G__132801 = (function (){var G__132879 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132880 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132879,G__132880) : tailrecursion.hoplon.span.call(null,G__132879,G__132880));
})();
var G__132802 = "(";
var G__132803 = (function (){var G__132881 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132882 = "sqrt ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132881,G__132882) : tailrecursion.hoplon.span.call(null,G__132881,G__132882));
})();
var G__132804 = (function (){var G__132883 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132884 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132883,G__132884) : tailrecursion.hoplon.span.call(null,G__132883,G__132884));
})();
var G__132805 = ")\n  (";
var G__132806 = (function (){var G__132885 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132886 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132885,G__132886) : tailrecursion.hoplon.span.call(null,G__132885,G__132886));
})();
var G__132807 = "(";
var G__132808 = (function (){var G__132887 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132888 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132887,G__132888) : tailrecursion.hoplon.span.call(null,G__132887,G__132888));
})();
var G__132809 = " ";
var G__132810 = (function (){var G__132889 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132890 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132889,G__132890) : tailrecursion.hoplon.span.call(null,G__132889,G__132890));
})();
var G__132811 = " ";
var G__132812 = (function (){var G__132891 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132892 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132891,G__132892) : tailrecursion.hoplon.span.call(null,G__132891,G__132892));
})();
var G__132813 = ")\n    (";
var G__132814 = (function (){var G__132893 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132894 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132893,G__132894) : tailrecursion.hoplon.span.call(null,G__132893,G__132894));
})();
var G__132815 = "(";
var G__132816 = (function (){var G__132895 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132896 = "abs ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132895,G__132896) : tailrecursion.hoplon.span.call(null,G__132895,G__132896));
})();
var G__132817 = "(";
var G__132818 = (function (){var G__132897 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132898 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132897,G__132898) : tailrecursion.hoplon.span.call(null,G__132897,G__132898));
})();
var G__132819 = "(";
var G__132820 = (function (){var G__132899 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132900 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132899,G__132900) : tailrecursion.hoplon.span.call(null,G__132899,G__132900));
})();
var G__132821 = " ";
var G__132822 = (function (){var G__132901 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132902 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132901,G__132902) : tailrecursion.hoplon.span.call(null,G__132901,G__132902));
})();
var G__132823 = ") ";
var G__132824 = (function (){var G__132903 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132904 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132903,G__132904) : tailrecursion.hoplon.span.call(null,G__132903,G__132904));
})();
var G__132825 = ")) ";
var G__132826 = (function (){var G__132905 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132906 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132905,G__132906) : tailrecursion.hoplon.span.call(null,G__132905,G__132906));
})();
var G__132827 = "))\n  (";
var G__132828 = (function (){var G__132907 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132908 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132907,G__132908) : tailrecursion.hoplon.span.call(null,G__132907,G__132908));
})();
var G__132829 = "(";
var G__132830 = (function (){var G__132909 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132910 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132909,G__132910) : tailrecursion.hoplon.span.call(null,G__132909,G__132910));
})();
var G__132831 = " ";
var G__132832 = (function (){var G__132911 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132912 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132911,G__132912) : tailrecursion.hoplon.span.call(null,G__132911,G__132912));
})();
var G__132833 = " ";
var G__132834 = (function (){var G__132913 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132914 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132913,G__132914) : tailrecursion.hoplon.span.call(null,G__132913,G__132914));
})();
var G__132835 = ")\n    (";
var G__132836 = (function (){var G__132915 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132916 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132915,G__132916) : tailrecursion.hoplon.span.call(null,G__132915,G__132916));
})();
var G__132837 = " ";
var G__132838 = (function (){var G__132917 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132918 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132917,G__132918) : tailrecursion.hoplon.span.call(null,G__132917,G__132918));
})();
var G__132839 = " (";
var G__132840 = (function (){var G__132919 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__132920 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132919,G__132920) : tailrecursion.hoplon.span.call(null,G__132919,G__132920));
})();
var G__132841 = (function (){var G__132921 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132922 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132921,G__132922) : tailrecursion.hoplon.span.call(null,G__132921,G__132922));
})();
var G__132842 = " ";
var G__132843 = (function (){var G__132923 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132924 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132923,G__132924) : tailrecursion.hoplon.span.call(null,G__132923,G__132924));
})();
var G__132844 = ")))\n  (";
var G__132845 = (function (){var G__132925 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132926 = "define ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132925,G__132926) : tailrecursion.hoplon.span.call(null,G__132925,G__132926));
})();
var G__132846 = "(";
var G__132847 = (function (){var G__132927 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132928 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132927,G__132928) : tailrecursion.hoplon.span.call(null,G__132927,G__132928));
})();
var G__132848 = " ";
var G__132849 = (function (){var G__132929 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132930 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132929,G__132930) : tailrecursion.hoplon.span.call(null,G__132929,G__132930));
})();
var G__132850 = " ";
var G__132851 = (function (){var G__132931 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132932 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132931,G__132932) : tailrecursion.hoplon.span.call(null,G__132931,G__132932));
})();
var G__132852 = ")\n    (";
var G__132853 = (function (){var G__132933 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__132934 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132933,G__132934) : tailrecursion.hoplon.span.call(null,G__132933,G__132934));
})();
var G__132854 = "(";
var G__132855 = (function (){var G__132935 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132936 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132935,G__132936) : tailrecursion.hoplon.span.call(null,G__132935,G__132936));
})();
var G__132856 = " ";
var G__132857 = (function (){var G__132937 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132938 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132937,G__132938) : tailrecursion.hoplon.span.call(null,G__132937,G__132938));
})();
var G__132858 = " ";
var G__132859 = (function (){var G__132939 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132940 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132939,G__132940) : tailrecursion.hoplon.span.call(null,G__132939,G__132940));
})();
var G__132860 = ")\n        ";
var G__132861 = (function (){var G__132941 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132942 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132941,G__132942) : tailrecursion.hoplon.span.call(null,G__132941,G__132942));
})();
var G__132862 = "\n        (";
var G__132863 = (function (){var G__132943 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132944 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132943,G__132944) : tailrecursion.hoplon.span.call(null,G__132943,G__132944));
})();
var G__132864 = " (";
var G__132865 = (function (){var G__132945 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132946 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132945,G__132946) : tailrecursion.hoplon.span.call(null,G__132945,G__132946));
})();
var G__132866 = " ";
var G__132867 = (function (){var G__132947 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132948 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132947,G__132948) : tailrecursion.hoplon.span.call(null,G__132947,G__132948));
})();
var G__132868 = " ";
var G__132869 = (function (){var G__132949 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132950 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132949,G__132950) : tailrecursion.hoplon.span.call(null,G__132949,G__132950));
})();
var G__132870 = ") ";
var G__132871 = (function (){var G__132951 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132952 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132951,G__132952) : tailrecursion.hoplon.span.call(null,G__132951,G__132952));
})();
var G__132872 = ")))\n  (";
var G__132873 = (function (){var G__132953 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__132954 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132953,G__132954) : tailrecursion.hoplon.span.call(null,G__132953,G__132954));
})();
var G__132874 = " ";
var G__132875 = (function (){var G__132955 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__132956 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132955,G__132956) : tailrecursion.hoplon.span.call(null,G__132955,G__132956));
})();
var G__132876 = " ";
var G__132877 = (function (){var G__132957 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__132958 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__132957,G__132958) : tailrecursion.hoplon.span.call(null,G__132957,G__132958));
})();
var G__132878 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$80(G__132799,G__132800,G__132801,G__132802,G__132803,G__132804,G__132805,G__132806,G__132807,G__132808,G__132809,G__132810,G__132811,G__132812,G__132813,G__132814,G__132815,G__132816,G__132817,G__132818,G__132819,G__132820,G__132821,G__132822,G__132823,G__132824,G__132825,G__132826,G__132827,G__132828,G__132829,G__132830,G__132831,G__132832,G__132833,G__132834,G__132835,G__132836,G__132837,G__132838,G__132839,G__132840,G__132841,G__132842,G__132843,G__132844,G__132845,G__132846,G__132847,G__132848,G__132849,G__132850,G__132851,G__132852,G__132853,G__132854,G__132855,G__132856,G__132857,G__132858,G__132859,G__132860,G__132861,G__132862,G__132863,G__132864,G__132865,G__132866,G__132867,G__132868,G__132869,G__132870,G__132871,G__132872,G__132873,G__132874,G__132875,G__132876,G__132877,G__132878) : tailrecursion.hoplon.pre.call(null,G__132799,G__132800,G__132801,G__132802,G__132803,G__132804,G__132805,G__132806,G__132807,G__132808,G__132809,G__132810,G__132811,G__132812,G__132813,G__132814,G__132815,G__132816,G__132817,G__132818,G__132819,G__132820,G__132821,G__132822,G__132823,G__132824,G__132825,G__132826,G__132827,G__132828,G__132829,G__132830,G__132831,G__132832,G__132833,G__132834,G__132835,G__132836,G__132837,G__132838,G__132839,G__132840,G__132841,G__132842,G__132843,G__132844,G__132845,G__132846,G__132847,G__132848,G__132849,G__132850,G__132851,G__132852,G__132853,G__132854,G__132855,G__132856,G__132857,G__132858,G__132859,G__132860,G__132861,G__132862,G__132863,G__132864,G__132865,G__132866,G__132867,G__132868,G__132869,G__132870,G__132871,G__132872,G__132873,G__132874,G__132875,G__132876,G__132877,G__132878));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__132797,G__132798) : tailrecursion.hoplon.div.call(null,G__132797,G__132798));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__132796) : tailrecursion.hoplon.div.call(null,G__132796));
})(),(function (){var G__132959 = cljs.core.PersistentArrayMap.EMPTY;
var G__132960 = new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Note: This approach does not solve our problem in Clojure. In Clojure, whenever ",(function (){var G__132961 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"def"], null);
var G__132962 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132961,G__132962) : tailrecursion.hoplon.markdown.code_node.call(null,G__132961,G__132962));
})()," or ",(function (){var G__132963 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"defn"], null);
var G__132964 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132963,G__132964) : tailrecursion.hoplon.markdown.code_node.call(null,G__132963,G__132964));
})()," are used, they add the definitions to the global environment. What that means is, every time you run the ",(function (){var G__132965 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__132966 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132965,G__132966) : tailrecursion.hoplon.markdown.code_node.call(null,G__132965,G__132966));
})()," procedure, you would end up redefining ",(function (){var G__132967 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132968 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132967,G__132968) : tailrecursion.hoplon.markdown.code_node.call(null,G__132967,G__132968));
})()," for every program that uses it. Now, if every program that uses ",(function (){var G__132969 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132970 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132969,G__132970) : tailrecursion.hoplon.markdown.code_node.call(null,G__132969,G__132970));
})()," redefines ",(function (){var G__132971 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__132972 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132971,G__132972) : tailrecursion.hoplon.markdown.code_node.call(null,G__132971,G__132972));
})(),", then you might not run into any problems; but either way, there is a better alternative: we could use what",(function (){var G__132973 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132974 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132973,G__132974) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132973,G__132974));
})(),"s called a ",(function (){var G__132975 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"let"], null);
var G__132976 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132975,G__132976) : tailrecursion.hoplon.markdown.code_node.call(null,G__132975,G__132976));
})()," binding, but we",(function (){var G__132977 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132978 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132977,G__132978) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132977,G__132978));
})(),"ll learn about those a little later."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132959,G__132960) : tailrecursion.hoplon.markdown.para_node.call(null,G__132959,G__132960));
})(),(function (){var G__132979 = cljs.core.PersistentArrayMap.EMPTY;
var G__132980 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The thing to remember is the evaluation model. When the compiler is given a symbol, it has a set procedure for determining what this symbol means: first it looks to see if the symbol is a special form (like ",(function (){var G__132981 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"if"], null);
var G__132982 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132981,G__132982) : tailrecursion.hoplon.markdown.code_node.call(null,G__132981,G__132982));
})(),"), if it",(function (){var G__132983 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$apostrophe], null);
var G__132984 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.simple_node.cljs$core$IFn$_invoke$arity$2(G__132983,G__132984) : tailrecursion.hoplon.markdown.simple_node.call(null,G__132983,G__132984));
})(),"s not, then it checks each successive nested local environment until it reaches the global environment. The point is, in Scheme, ",(function (){var G__132985 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"define"], null);
var G__132986 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132985,G__132986) : tailrecursion.hoplon.markdown.code_node.call(null,G__132985,G__132986));
})()," only mutates the local environment, whatever that may be; the same is not true in Clojure. Defining forms mutate the global environment directly, so using ",(function (){var G__132987 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"defn"], null);
var G__132988 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132987,G__132988) : tailrecursion.hoplon.markdown.code_node.call(null,G__132987,G__132988));
})()," to change the definition of a function in one place changes it in all places."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132979,G__132980) : tailrecursion.hoplon.markdown.para_node.call(null,G__132979,G__132980));
})(),(function (){var G__132989 = cljs.core.PersistentArrayMap.EMPTY;
var G__132990 = new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Luckily, Cloure has a built in pair of functions ",(function (){var G__132991 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"loop"], null);
var G__132992 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132991,G__132992) : tailrecursion.hoplon.markdown.code_node.call(null,G__132991,G__132992));
})()," and ",(function (){var G__132993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"recur"], null);
var G__132994 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132993,G__132994) : tailrecursion.hoplon.markdown.code_node.call(null,G__132993,G__132994));
})()," that do help us a bit. We can replace the ",(function (){var G__132995 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"iter"], null);
var G__132996 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132995,G__132996) : tailrecursion.hoplon.markdown.code_node.call(null,G__132995,G__132996));
})()," definition with this ",(function (){var G__132997 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"loop"], null);
var G__132998 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132997,G__132998) : tailrecursion.hoplon.markdown.code_node.call(null,G__132997,G__132998));
})()," ",(function (){var G__132999 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"recur"], null);
var G__133000 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__132999,G__133000) : tailrecursion.hoplon.markdown.code_node.call(null,G__132999,G__133000));
})()," business thusly (assuming ",(function (){var G__133001 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough"], null);
var G__133002 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133001,G__133002) : tailrecursion.hoplon.markdown.code_node.call(null,G__133001,G__133002));
})()," and ",(function (){var G__133003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"improve"], null);
var G__133004 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133003,G__133004) : tailrecursion.hoplon.markdown.code_node.call(null,G__133003,G__133004));
})()," were already defined):"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__132989,G__132990) : tailrecursion.hoplon.markdown.para_node.call(null,G__132989,G__132990));
})(),(function (){var G__133005 = (function (){var G__133006 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__133007 = (function (){var G__133008 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__133009 = "(";
var G__133010 = (function (){var G__133039 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133040 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133039,G__133040) : tailrecursion.hoplon.span.call(null,G__133039,G__133040));
})();
var G__133011 = (function (){var G__133041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133042 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133041,G__133042) : tailrecursion.hoplon.span.call(null,G__133041,G__133042));
})();
var G__133012 = " [";
var G__133013 = (function (){var G__133043 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133044 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133043,G__133044) : tailrecursion.hoplon.span.call(null,G__133043,G__133044));
})();
var G__133014 = "]\n  (";
var G__133015 = (function (){var G__133045 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133046 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133045,G__133046) : tailrecursion.hoplon.span.call(null,G__133045,G__133046));
})();
var G__133016 = "[";
var G__133017 = (function (){var G__133047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133048 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133047,G__133048) : tailrecursion.hoplon.span.call(null,G__133047,G__133048));
})();
var G__133018 = " ";
var G__133019 = (function (){var G__133049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__133050 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133049,G__133050) : tailrecursion.hoplon.span.call(null,G__133049,G__133050));
})();
var G__133020 = "]\n    (";
var G__133021 = (function (){var G__133051 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133052 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133051,G__133052) : tailrecursion.hoplon.span.call(null,G__133051,G__133052));
})();
var G__133022 = "(";
var G__133023 = (function (){var G__133053 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133054 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133053,G__133054) : tailrecursion.hoplon.span.call(null,G__133053,G__133054));
})();
var G__133024 = " ";
var G__133025 = (function (){var G__133055 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133056 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133055,G__133056) : tailrecursion.hoplon.span.call(null,G__133055,G__133056));
})();
var G__133026 = " ";
var G__133027 = (function (){var G__133057 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133058 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133057,G__133058) : tailrecursion.hoplon.span.call(null,G__133057,G__133058));
})();
var G__133028 = ")\n        ";
var G__133029 = (function (){var G__133059 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133060 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133059,G__133060) : tailrecursion.hoplon.span.call(null,G__133059,G__133060));
})();
var G__133030 = "\n        (";
var G__133031 = (function (){var G__133061 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133062 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133061,G__133062) : tailrecursion.hoplon.span.call(null,G__133061,G__133062));
})();
var G__133032 = " (";
var G__133033 = (function (){var G__133063 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133064 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133063,G__133064) : tailrecursion.hoplon.span.call(null,G__133063,G__133064));
})();
var G__133034 = " ";
var G__133035 = (function (){var G__133065 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133066 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133065,G__133066) : tailrecursion.hoplon.span.call(null,G__133065,G__133066));
})();
var G__133036 = " ";
var G__133037 = (function (){var G__133067 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133068 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133067,G__133068) : tailrecursion.hoplon.span.call(null,G__133067,G__133068));
})();
var G__133038 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$31(G__133008,G__133009,G__133010,G__133011,G__133012,G__133013,G__133014,G__133015,G__133016,G__133017,G__133018,G__133019,G__133020,G__133021,G__133022,G__133023,G__133024,G__133025,G__133026,G__133027,G__133028,G__133029,G__133030,G__133031,G__133032,G__133033,G__133034,G__133035,G__133036,G__133037,G__133038) : tailrecursion.hoplon.pre.call(null,G__133008,G__133009,G__133010,G__133011,G__133012,G__133013,G__133014,G__133015,G__133016,G__133017,G__133018,G__133019,G__133020,G__133021,G__133022,G__133023,G__133024,G__133025,G__133026,G__133027,G__133028,G__133029,G__133030,G__133031,G__133032,G__133033,G__133034,G__133035,G__133036,G__133037,G__133038));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__133006,G__133007) : tailrecursion.hoplon.div.call(null,G__133006,G__133007));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__133005) : tailrecursion.hoplon.div.call(null,G__133005));
})(),(function (){var G__133069 = cljs.core.PersistentArrayMap.EMPTY;
var G__133070 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The genearl format for these will be,"], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__133069,G__133070) : tailrecursion.hoplon.markdown.para_node.call(null,G__133069,G__133070));
})(),(function (){var G__133071 = (function (){var G__133072 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__133073 = (function (){var G__133074 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__133075 = "(";
var G__133076 = (function (){var G__133119 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133120 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133119,G__133120) : tailrecursion.hoplon.span.call(null,G__133119,G__133120));
})();
var G__133077 = (function (){var G__133121 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133122 = "function";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133121,G__133122) : tailrecursion.hoplon.span.call(null,G__133121,G__133122));
})();
var G__133078 = " [";
var G__133079 = (function (){var G__133123 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133124 = "arguments";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133123,G__133124) : tailrecursion.hoplon.span.call(null,G__133123,G__133124));
})();
var G__133080 = "]\n  (";
var G__133081 = (function (){var G__133125 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133126 = "loop ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133125,G__133126) : tailrecursion.hoplon.span.call(null,G__133125,G__133126));
})();
var G__133082 = "[";
var G__133083 = (function (){var G__133127 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133128 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133127,G__133128) : tailrecursion.hoplon.span.call(null,G__133127,G__133128));
})();
var G__133084 = " ";
var G__133085 = (function (){var G__133129 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133130 = "initial-value1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133129,G__133130) : tailrecursion.hoplon.span.call(null,G__133129,G__133130));
})();
var G__133086 = "\n         ";
var G__133087 = (function (){var G__133131 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133132 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133131,G__133132) : tailrecursion.hoplon.span.call(null,G__133131,G__133132));
})();
var G__133088 = " ";
var G__133089 = (function (){var G__133133 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133134 = "initial-value2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133133,G__133134) : tailrecursion.hoplon.span.call(null,G__133133,G__133134));
})();
var G__133090 = "\n         ";
var G__133091 = (function (){var G__133135 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133136 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133135,G__133136) : tailrecursion.hoplon.span.call(null,G__133135,G__133136));
})();
var G__133092 = "\n         ";
var G__133093 = (function (){var G__133137 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133138 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133137,G__133138) : tailrecursion.hoplon.span.call(null,G__133137,G__133138));
})();
var G__133094 = " ";
var G__133095 = (function (){var G__133139 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133140 = "initial-valuen";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133139,G__133140) : tailrecursion.hoplon.span.call(null,G__133139,G__133140));
})();
var G__133096 = "]\n    (";
var G__133097 = (function (){var G__133141 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133142 = "<if";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133141,G__133142) : tailrecursion.hoplon.span.call(null,G__133141,G__133142));
})();
var G__133098 = " ";
var G__133099 = (function (){var G__133143 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__133144 = "or cond ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133143,G__133144) : tailrecursion.hoplon.span.call(null,G__133143,G__133144));
})();
var G__133100 = (function (){var G__133145 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133146 = "can";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133145,G__133146) : tailrecursion.hoplon.span.call(null,G__133145,G__133146));
})();
var G__133101 = " ";
var G__133102 = (function (){var G__133147 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133148 = "go";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133147,G__133148) : tailrecursion.hoplon.span.call(null,G__133147,G__133148));
})();
var G__133103 = " ";
var G__133104 = (function (){var G__133149 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133150 = "here>";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133149,G__133150) : tailrecursion.hoplon.span.call(null,G__133149,G__133150));
})();
var G__133105 = " (";
var G__133106 = (function (){var G__133151 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133152 = "recur";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133151,G__133152) : tailrecursion.hoplon.span.call(null,G__133151,G__133152));
})();
var G__133107 = " (";
var G__133108 = (function (){var G__133153 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__133154 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133153,G__133154) : tailrecursion.hoplon.span.call(null,G__133153,G__133154));
})();
var G__133109 = (function (){var G__133155 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133156 = "thing1";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133155,G__133156) : tailrecursion.hoplon.span.call(null,G__133155,G__133156));
})();
var G__133110 = ") (";
var G__133111 = (function (){var G__133157 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__133158 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133157,G__133158) : tailrecursion.hoplon.span.call(null,G__133157,G__133158));
})();
var G__133112 = (function (){var G__133159 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133160 = "thing2";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133159,G__133160) : tailrecursion.hoplon.span.call(null,G__133159,G__133160));
})();
var G__133113 = ")";
var G__133114 = (function (){var G__133161 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133162 = "...";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133161,G__133162) : tailrecursion.hoplon.span.call(null,G__133161,G__133162));
})();
var G__133115 = "(";
var G__133116 = (function (){var G__133163 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__133164 = "next ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133163,G__133164) : tailrecursion.hoplon.span.call(null,G__133163,G__133164));
})();
var G__133117 = (function (){var G__133165 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133166 = "thingn";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133165,G__133166) : tailrecursion.hoplon.span.call(null,G__133165,G__133166));
})();
var G__133118 = ")))))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$45(G__133074,G__133075,G__133076,G__133077,G__133078,G__133079,G__133080,G__133081,G__133082,G__133083,G__133084,G__133085,G__133086,G__133087,G__133088,G__133089,G__133090,G__133091,G__133092,G__133093,G__133094,G__133095,G__133096,G__133097,G__133098,G__133099,G__133100,G__133101,G__133102,G__133103,G__133104,G__133105,G__133106,G__133107,G__133108,G__133109,G__133110,G__133111,G__133112,G__133113,G__133114,G__133115,G__133116,G__133117,G__133118) : tailrecursion.hoplon.pre.call(null,G__133074,G__133075,G__133076,G__133077,G__133078,G__133079,G__133080,G__133081,G__133082,G__133083,G__133084,G__133085,G__133086,G__133087,G__133088,G__133089,G__133090,G__133091,G__133092,G__133093,G__133094,G__133095,G__133096,G__133097,G__133098,G__133099,G__133100,G__133101,G__133102,G__133103,G__133104,G__133105,G__133106,G__133107,G__133108,G__133109,G__133110,G__133111,G__133112,G__133113,G__133114,G__133115,G__133116,G__133117,G__133118));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__133072,G__133073) : tailrecursion.hoplon.div.call(null,G__133072,G__133073));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__133071) : tailrecursion.hoplon.div.call(null,G__133071));
})(),(function (){var G__133167 = cljs.core.PersistentArrayMap.EMPTY;
var G__133168 = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This ",(function (){var G__133169 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"[thing1 intial-value1]"], null);
var G__133170 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133169,G__133170) : tailrecursion.hoplon.markdown.code_node.call(null,G__133169,G__133170));
})()," defines ",(function (){var G__133171 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"thing1"], null);
var G__133172 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133171,G__133172) : tailrecursion.hoplon.markdown.code_node.call(null,G__133171,G__133172));
})()," to be ",(function (){var G__133173 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"value1"], null);
var G__133174 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133173,G__133174) : tailrecursion.hoplon.markdown.code_node.call(null,G__133173,G__133174));
})()," for the first iteration, then when you call ",(function (){var G__133175 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"recur"], null);
var G__133176 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133175,G__133176) : tailrecursion.hoplon.markdown.code_node.call(null,G__133175,G__133176));
})(),", it goes back to loop with the new values given (in the same order they appear in the ",(function (){var G__133177 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"loop"], null);
var G__133178 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133177,G__133178) : tailrecursion.hoplon.markdown.code_node.call(null,G__133177,G__133178));
})()," bindings)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__133167,G__133168) : tailrecursion.hoplon.markdown.para_node.call(null,G__133167,G__133168));
})(),(function (){var G__133179 = cljs.core.PersistentArrayMap.EMPTY;
var G__133180 = new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Such nesting of definitions, called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["block structure"], null)], 0)),", is basically the right solution to the simplest name-packaging problem. But there is a better idea lurking here. In addition to internalizing the definitions of the auxiliary procedures, we can simplify them. Since ",(function (){var G__133181 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__133182 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133181,G__133182) : tailrecursion.hoplon.markdown.code_node.call(null,G__133181,G__133182));
})()," is bound in the definition of ",(function (){var G__133183 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__133184 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133183,G__133184) : tailrecursion.hoplon.markdown.code_node.call(null,G__133183,G__133184));
})(),", the procedures ",(function (){var G__133185 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"good-enough?"], null);
var G__133186 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133185,G__133186) : tailrecursion.hoplon.markdown.code_node.call(null,G__133185,G__133186));
})(),", ",(function (){var G__133187 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"improve"], null);
var G__133188 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133187,G__133188) : tailrecursion.hoplon.markdown.code_node.call(null,G__133187,G__133188));
})(),", and ",(function (){var G__133189 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt-iter"], null);
var G__133190 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133189,G__133190) : tailrecursion.hoplon.markdown.code_node.call(null,G__133189,G__133190));
})(),", which are defined internally to ",(function (){var G__133191 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__133192 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133191,G__133192) : tailrecursion.hoplon.markdown.code_node.call(null,G__133191,G__133192));
})(),", are in the scope of ",(function (){var G__133193 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__133194 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133193,G__133194) : tailrecursion.hoplon.markdown.code_node.call(null,G__133193,G__133194));
})(),". Thus, it is not necessary to pass ",(function (){var G__133195 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__133196 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133195,G__133196) : tailrecursion.hoplon.markdown.code_node.call(null,G__133195,G__133196));
})()," explicitly to each of these procedures. Instead, we allow ",(function (){var G__133197 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__133198 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133197,G__133198) : tailrecursion.hoplon.markdown.code_node.call(null,G__133197,G__133198));
})()," to be a free variable in the internal definitions, as shown below. Then ",(function (){var G__133199 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"x"], null);
var G__133200 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133199,G__133200) : tailrecursion.hoplon.markdown.code_node.call(null,G__133199,G__133200));
})()," gets its value from the argument with which the enclosing procedure ",(function (){var G__133201 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$text,"sqrt"], null);
var G__133202 = cljs.core.PersistentVector.EMPTY;
return (tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.code_node.cljs$core$IFn$_invoke$arity$2(G__133201,G__133202) : tailrecursion.hoplon.markdown.code_node.call(null,G__133201,G__133202));
})()," is called. This discipline is called ",tailrecursion.hoplon.markdown.strong_emph_super_node.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$chars,"*",cljs.core.constant$keyword$closed,true,cljs.core.constant$keyword$strong,false], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["lexical scoping"], null)], 0)),".",(function (){var G__133203 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__133204 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Lexical scoping dictates that free variables in a procedure are taken to refer to bindings made by enclosing procedure definitions; that is, they are looked up in the environment in which the procedure was defined. We will see how this works in detail in chapter 3 when we study environments and the detailed behavior of the interpreter."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__133203,G__133204) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__133203,G__133204));
})()], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__133179,G__133180) : tailrecursion.hoplon.markdown.para_node.call(null,G__133179,G__133180));
})(),(function (){var G__133205 = cljs.core.PersistentArrayMap.EMPTY;
var G__133206 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__133207 = cljs.core.PersistentArrayMap.EMPTY;
var G__133208 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["This would still work in Clojure, if one were so inclined, it would just define all of these functions globally (as is explained above)."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__133207,G__133208) : tailrecursion.hoplon.markdown.para_node.call(null,G__133207,G__133208));
})()], null);
return (tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.block_quote_node.cljs$core$IFn$_invoke$arity$2(G__133205,G__133206) : tailrecursion.hoplon.markdown.block_quote_node.call(null,G__133205,G__133206));
})(),(function (){var G__133209 = (function (){var G__133210 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$class,"highlight",cljs.core.constant$keyword$style,"background: #f8f8f8"], null);
var G__133211 = (function (){var G__133212 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"line-height: 125%"], null);
var G__133213 = "(";
var G__133214 = (function (){var G__133275 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133276 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133275,G__133276) : tailrecursion.hoplon.span.call(null,G__133275,G__133276));
})();
var G__133215 = (function (){var G__133277 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133278 = "sqrt";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133277,G__133278) : tailrecursion.hoplon.span.call(null,G__133277,G__133278));
})();
var G__133216 = " [";
var G__133217 = (function (){var G__133279 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133280 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133279,G__133280) : tailrecursion.hoplon.span.call(null,G__133279,G__133280));
})();
var G__133218 = "]\n  (";
var G__133219 = (function (){var G__133281 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133282 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133281,G__133282) : tailrecursion.hoplon.span.call(null,G__133281,G__133282));
})();
var G__133220 = (function (){var G__133283 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133284 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133283,G__133284) : tailrecursion.hoplon.span.call(null,G__133283,G__133284));
})();
var G__133221 = " [";
var G__133222 = (function (){var G__133285 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133286 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133285,G__133286) : tailrecursion.hoplon.span.call(null,G__133285,G__133286));
})();
var G__133223 = "]\n    (";
var G__133224 = (function (){var G__133287 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__133288 = "< ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133287,G__133288) : tailrecursion.hoplon.span.call(null,G__133287,G__133288));
})();
var G__133225 = "(";
var G__133226 = (function (){var G__133289 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133290 = "abs";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133289,G__133290) : tailrecursion.hoplon.span.call(null,G__133289,G__133290));
})();
var G__133227 = " (";
var G__133228 = (function (){var G__133291 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__133292 = "- ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133291,G__133292) : tailrecursion.hoplon.span.call(null,G__133291,G__133292));
})();
var G__133229 = "(";
var G__133230 = (function (){var G__133293 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133294 = "square";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133293,G__133294) : tailrecursion.hoplon.span.call(null,G__133293,G__133294));
})();
var G__133231 = " ";
var G__133232 = (function (){var G__133295 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133296 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133295,G__133296) : tailrecursion.hoplon.span.call(null,G__133295,G__133296));
})();
var G__133233 = ") ";
var G__133234 = (function (){var G__133297 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133298 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133297,G__133298) : tailrecursion.hoplon.span.call(null,G__133297,G__133298));
})();
var G__133235 = ")) ";
var G__133236 = (function (){var G__133299 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__133300 = "0.001";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133299,G__133300) : tailrecursion.hoplon.span.call(null,G__133299,G__133300));
})();
var G__133237 = "))\n  (";
var G__133238 = (function (){var G__133301 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133302 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133301,G__133302) : tailrecursion.hoplon.span.call(null,G__133301,G__133302));
})();
var G__133239 = (function (){var G__133303 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133304 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133303,G__133304) : tailrecursion.hoplon.span.call(null,G__133303,G__133304));
})();
var G__133240 = " [";
var G__133241 = (function (){var G__133305 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133306 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133305,G__133306) : tailrecursion.hoplon.span.call(null,G__133305,G__133306));
})();
var G__133242 = "]\n    (";
var G__133243 = (function (){var G__133307 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133308 = "average";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133307,G__133308) : tailrecursion.hoplon.span.call(null,G__133307,G__133308));
})();
var G__133244 = " ";
var G__133245 = (function (){var G__133309 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133310 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133309,G__133310) : tailrecursion.hoplon.span.call(null,G__133309,G__133310));
})();
var G__133246 = " (";
var G__133247 = (function (){var G__133311 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000"], null);
var G__133312 = "/ ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133311,G__133312) : tailrecursion.hoplon.span.call(null,G__133311,G__133312));
})();
var G__133248 = (function (){var G__133313 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133314 = "x";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133313,G__133314) : tailrecursion.hoplon.span.call(null,G__133313,G__133314));
})();
var G__133249 = " ";
var G__133250 = (function (){var G__133315 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133316 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133315,G__133316) : tailrecursion.hoplon.span.call(null,G__133315,G__133316));
})();
var G__133251 = ")))\n  (";
var G__133252 = (function (){var G__133317 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133318 = "defn ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133317,G__133318) : tailrecursion.hoplon.span.call(null,G__133317,G__133318));
})();
var G__133253 = (function (){var G__133319 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133320 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133319,G__133320) : tailrecursion.hoplon.span.call(null,G__133319,G__133320));
})();
var G__133254 = " [";
var G__133255 = (function (){var G__133321 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133322 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133321,G__133322) : tailrecursion.hoplon.span.call(null,G__133321,G__133322));
})();
var G__133256 = "]\n    (";
var G__133257 = (function (){var G__133323 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #008000; font-weight: bold"], null);
var G__133324 = "if ";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133323,G__133324) : tailrecursion.hoplon.span.call(null,G__133323,G__133324));
})();
var G__133258 = "(";
var G__133259 = (function (){var G__133325 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133326 = "good-enough?";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133325,G__133326) : tailrecursion.hoplon.span.call(null,G__133325,G__133326));
})();
var G__133260 = " ";
var G__133261 = (function (){var G__133327 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133328 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133327,G__133328) : tailrecursion.hoplon.span.call(null,G__133327,G__133328));
})();
var G__133262 = ")\n        ";
var G__133263 = (function (){var G__133329 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133330 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133329,G__133330) : tailrecursion.hoplon.span.call(null,G__133329,G__133330));
})();
var G__133264 = "\n        (";
var G__133265 = (function (){var G__133331 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133332 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133331,G__133332) : tailrecursion.hoplon.span.call(null,G__133331,G__133332));
})();
var G__133266 = " (";
var G__133267 = (function (){var G__133333 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133334 = "improve";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133333,G__133334) : tailrecursion.hoplon.span.call(null,G__133333,G__133334));
})();
var G__133268 = " ";
var G__133269 = (function (){var G__133335 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #19177C"], null);
var G__133336 = "guess";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133335,G__133336) : tailrecursion.hoplon.span.call(null,G__133335,G__133336));
})();
var G__133270 = "))))\n  (";
var G__133271 = (function (){var G__133337 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #0000FF"], null);
var G__133338 = "sqrt-iter";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133337,G__133338) : tailrecursion.hoplon.span.call(null,G__133337,G__133338));
})();
var G__133272 = " ";
var G__133273 = (function (){var G__133339 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$style,"color: #666666"], null);
var G__133340 = "1.0";
return (tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.span.cljs$core$IFn$_invoke$arity$2(G__133339,G__133340) : tailrecursion.hoplon.span.call(null,G__133339,G__133340));
})();
var G__133274 = "))\n";
return (tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63 ? tailrecursion.hoplon.pre.cljs$core$IFn$_invoke$arity$63(G__133212,G__133213,G__133214,G__133215,G__133216,G__133217,G__133218,G__133219,G__133220,G__133221,G__133222,G__133223,G__133224,G__133225,G__133226,G__133227,G__133228,G__133229,G__133230,G__133231,G__133232,G__133233,G__133234,G__133235,G__133236,G__133237,G__133238,G__133239,G__133240,G__133241,G__133242,G__133243,G__133244,G__133245,G__133246,G__133247,G__133248,G__133249,G__133250,G__133251,G__133252,G__133253,G__133254,G__133255,G__133256,G__133257,G__133258,G__133259,G__133260,G__133261,G__133262,G__133263,G__133264,G__133265,G__133266,G__133267,G__133268,G__133269,G__133270,G__133271,G__133272,G__133273,G__133274) : tailrecursion.hoplon.pre.call(null,G__133212,G__133213,G__133214,G__133215,G__133216,G__133217,G__133218,G__133219,G__133220,G__133221,G__133222,G__133223,G__133224,G__133225,G__133226,G__133227,G__133228,G__133229,G__133230,G__133231,G__133232,G__133233,G__133234,G__133235,G__133236,G__133237,G__133238,G__133239,G__133240,G__133241,G__133242,G__133243,G__133244,G__133245,G__133246,G__133247,G__133248,G__133249,G__133250,G__133251,G__133252,G__133253,G__133254,G__133255,G__133256,G__133257,G__133258,G__133259,G__133260,G__133261,G__133262,G__133263,G__133264,G__133265,G__133266,G__133267,G__133268,G__133269,G__133270,G__133271,G__133272,G__133273,G__133274));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$2(G__133210,G__133211) : tailrecursion.hoplon.div.call(null,G__133210,G__133211));
})();
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$1(G__133209) : tailrecursion.hoplon.div.call(null,G__133209));
})(),(function (){var G__133341 = cljs.core.PersistentArrayMap.EMPTY;
var G__133342 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["We will use block structure extensively to help us break up large programs into tractable pieces.",(function (){var G__133343 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$type,cljs.core.constant$keyword$double_DASH_angle], null);
var G__133344 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Embedded definitions must come first in a procedure body. The management is not responsible for the consequences of running programs that intertwine definition and use."], null);
return (tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.quoted_node.cljs$core$IFn$_invoke$arity$2(G__133343,G__133344) : tailrecursion.hoplon.markdown.quoted_node.call(null,G__133343,G__133344));
})()," The idea of block structure originated with the programming language Algol 60. It appears in most advanced programming languages and is an important tool for helping to organize the construction of large programs."], null);
return (tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2 ? tailrecursion.hoplon.markdown.para_node.cljs$core$IFn$_invoke$arity$2(G__133341,G__133342) : tailrecursion.hoplon.markdown.para_node.call(null,G__133341,G__133342));
})()], null);
}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132597;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132596;
}}finally {tailrecursion.hoplon.markdown._STAR_abbreviations_STAR_ = _STAR_abbreviations_STAR_132595;

tailrecursion.hoplon.markdown._STAR_references_STAR_ = _STAR_references_STAR_132594;
}})()], 0));
return (tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27 ? tailrecursion.hoplon.div.cljs$core$IFn$_invoke$arity$27(G__128847,G__128848,G__128849,G__128850,G__128851,G__128852,G__128853,G__128854,G__128855,G__128856,G__128857,G__128858,G__128859,G__128860,G__128861,G__128862,G__128863,G__128864,G__128865,G__128866,G__128867,G__128868,G__128869,G__128870,G__128871,G__128872,G__128873) : tailrecursion.hoplon.div.call(null,G__128847,G__128848,G__128849,G__128850,G__128851,G__128852,G__128853,G__128854,G__128855,G__128856,G__128857,G__128858,G__128859,G__128860,G__128861,G__128862,G__128863,G__128864,G__128865,G__128866,G__128867,G__128868,G__128869,G__128870,G__128871,G__128872,G__128873));
};
var content$sicp$texts$ch1sect1$content = function (var_args){
var args__10403__auto__ = null;
if (arguments.length > 0) {
var G__133345__i = 0, G__133345__a = new Array(arguments.length -  0);
while (G__133345__i < G__133345__a.length) {G__133345__a[G__133345__i] = arguments[G__133345__i + 0]; ++G__133345__i;}
  args__10403__auto__ = new cljs.core.IndexedSeq(G__133345__a,0);
} 
return content$sicp$texts$ch1sect1$content__delegate.call(this,args__10403__auto__);};
content$sicp$texts$ch1sect1$content.cljs$lang$maxFixedArity = 0;
content$sicp$texts$ch1sect1$content.cljs$lang$applyTo = (function (arglist__133346){
var args__10403__auto__ = cljs.core.seq(arglist__133346);
return content$sicp$texts$ch1sect1$content__delegate(args__10403__auto__);
});
content$sicp$texts$ch1sect1$content.cljs$core$IFn$_invoke$arity$variadic = content$sicp$texts$ch1sect1$content__delegate;
return content$sicp$texts$ch1sect1$content;
})()
;
